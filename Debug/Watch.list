
Watch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f64  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001254  0800a078  0800a078  0001a078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2cc  0800b2cc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800b2cc  0800b2cc  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b2cc  0800b2cc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2cc  0800b2cc  0001b2cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2d0  0800b2d0  0001b2d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b2d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  200001e4  0800b4b8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000580  0800b4b8  00020580  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018de7  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030f9  00000000  00000000  00038ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001530  00000000  00000000  0003c0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001408  00000000  00000000  0003d620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4bb  00000000  00000000  0003ea28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001833d  00000000  00000000  00058ee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099cb0  00000000  00000000  00071220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010aed0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c14  00000000  00000000  0010af24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a05c 	.word	0x0800a05c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800a05c 	.word	0x0800a05c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__aeabi_f2uiz>:
 8000f84:	0042      	lsls	r2, r0, #1
 8000f86:	d20e      	bcs.n	8000fa6 <__aeabi_f2uiz+0x22>
 8000f88:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f8c:	d30b      	bcc.n	8000fa6 <__aeabi_f2uiz+0x22>
 8000f8e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f96:	d409      	bmi.n	8000fac <__aeabi_f2uiz+0x28>
 8000f98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fa0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa4:	4770      	bx	lr
 8000fa6:	f04f 0000 	mov.w	r0, #0
 8000faa:	4770      	bx	lr
 8000fac:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fb0:	d101      	bne.n	8000fb6 <__aeabi_f2uiz+0x32>
 8000fb2:	0242      	lsls	r2, r0, #9
 8000fb4:	d102      	bne.n	8000fbc <__aeabi_f2uiz+0x38>
 8000fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fba:	4770      	bx	lr
 8000fbc:	f04f 0000 	mov.w	r0, #0
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <get_week_day>:
int iteration = 0;
int last_beat = 0;
max30102_t max30102;
int delays[20];

char *get_week_day(int day) {
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	2b06      	cmp	r3, #6
 8000fd2:	d81f      	bhi.n	8001014 <get_week_day+0x50>
 8000fd4:	a201      	add	r2, pc, #4	; (adr r2, 8000fdc <get_week_day+0x18>)
 8000fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fda:	bf00      	nop
 8000fdc:	08000ff9 	.word	0x08000ff9
 8000fe0:	08000ffd 	.word	0x08000ffd
 8000fe4:	08001001 	.word	0x08001001
 8000fe8:	08001005 	.word	0x08001005
 8000fec:	08001009 	.word	0x08001009
 8000ff0:	0800100d 	.word	0x0800100d
 8000ff4:	08001011 	.word	0x08001011
	enum WEEKDAY {MONDAY = 1, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY};

	switch(day) {
		case MONDAY:
			return "Mon";
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <get_week_day+0x5c>)
 8000ffa:	e00c      	b.n	8001016 <get_week_day+0x52>
			break;
		case TUESDAY:
			return "Tue";
 8000ffc:	4b09      	ldr	r3, [pc, #36]	; (8001024 <get_week_day+0x60>)
 8000ffe:	e00a      	b.n	8001016 <get_week_day+0x52>
			break;
		case WEDNESDAY:
			return "Wed";
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <get_week_day+0x64>)
 8001002:	e008      	b.n	8001016 <get_week_day+0x52>
			break;
		case THURSDAY:
			return "Thu";
 8001004:	4b09      	ldr	r3, [pc, #36]	; (800102c <get_week_day+0x68>)
 8001006:	e006      	b.n	8001016 <get_week_day+0x52>
			break;
		case FRIDAY:
			return "Fri";
 8001008:	4b09      	ldr	r3, [pc, #36]	; (8001030 <get_week_day+0x6c>)
 800100a:	e004      	b.n	8001016 <get_week_day+0x52>
			break;
		case SATURDAY:
			return "Sat";
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <get_week_day+0x70>)
 800100e:	e002      	b.n	8001016 <get_week_day+0x52>
			break;
		case SUNDAY:
			return "Sun";
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <get_week_day+0x74>)
 8001012:	e000      	b.n	8001016 <get_week_day+0x52>
			break;
		default:
			return "Non";
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <get_week_day+0x78>)
			break;
	}
}
 8001016:	4618      	mov	r0, r3
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr
 8001020:	0800a078 	.word	0x0800a078
 8001024:	0800a07c 	.word	0x0800a07c
 8001028:	0800a080 	.word	0x0800a080
 800102c:	0800a084 	.word	0x0800a084
 8001030:	0800a088 	.word	0x0800a088
 8001034:	0800a08c 	.word	0x0800a08c
 8001038:	0800a090 	.word	0x0800a090
 800103c:	0800a094 	.word	0x0800a094

08001040 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char time[30] = {0};
char date[30] = {0};
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af02      	add	r7, sp, #8
 8001046:	6078      	str	r0, [r7, #4]

	char voltage_dc[2];
	char *dat;
	RTC_TimeTypeDef sTime = {0};
 8001048:	f107 0310 	add.w	r3, r7, #16
 800104c:	2100      	movs	r1, #0
 800104e:	460a      	mov	r2, r1
 8001050:	801a      	strh	r2, [r3, #0]
 8001052:	460a      	mov	r2, r1
 8001054:	709a      	strb	r2, [r3, #2]
	RTC_DateTypeDef sDate = {0};
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
	int raw;
	float voltage = 0;
 800105a:	f04f 0300 	mov.w	r3, #0
 800105e:	61fb      	str	r3, [r7, #28]
	enum WEEKDAY {MONDAY = 1, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY};

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001060:	f107 0310 	add.w	r3, r7, #16
 8001064:	2200      	movs	r2, #0
 8001066:	4619      	mov	r1, r3
 8001068:	4814      	ldr	r0, [pc, #80]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800106a:	f004 fd5f 	bl	8005b2c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800106e:	f107 030c 	add.w	r3, r7, #12
 8001072:	2200      	movs	r2, #0
 8001074:	4619      	mov	r1, r3
 8001076:	4811      	ldr	r0, [pc, #68]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001078:	f004 fee6 	bl	8005e48 <HAL_RTC_GetDate>
	dat = get_week_day(sDate.WeekDay);
 800107c:	7b3b      	ldrb	r3, [r7, #12]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff ffa0 	bl	8000fc4 <get_week_day>
 8001084:	61b8      	str	r0, [r7, #24]
	sprintf(date, "%s %02d/%02d/%02d", dat, sDate.Date, sDate.Month, sDate.Year);
 8001086:	7bbb      	ldrb	r3, [r7, #14]
 8001088:	4619      	mov	r1, r3
 800108a:	7b7b      	ldrb	r3, [r7, #13]
 800108c:	7bfa      	ldrb	r2, [r7, #15]
 800108e:	9201      	str	r2, [sp, #4]
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	460b      	mov	r3, r1
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	490a      	ldr	r1, [pc, #40]	; (80010c0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001098:	480a      	ldr	r0, [pc, #40]	; (80010c4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800109a:	f006 fe73 	bl	8007d84 <siprintf>
	sprintf(time, "%02d:%02d:%02d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 800109e:	7c3b      	ldrb	r3, [r7, #16]
 80010a0:	461a      	mov	r2, r3
 80010a2:	7c7b      	ldrb	r3, [r7, #17]
 80010a4:	4619      	mov	r1, r3
 80010a6:	7cbb      	ldrb	r3, [r7, #18]
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	460b      	mov	r3, r1
 80010ac:	4906      	ldr	r1, [pc, #24]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80010ae:	4807      	ldr	r0, [pc, #28]	; (80010cc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80010b0:	f006 fe68 	bl	8007d84 <siprintf>
}
 80010b4:	bf00      	nop
 80010b6:	3720      	adds	r7, #32
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200004c8 	.word	0x200004c8
 80010c0:	0800a0b4 	.word	0x0800a0b4
 80010c4:	20000220 	.word	0x20000220
 80010c8:	0800a0c8 	.word	0x0800a0c8
 80010cc:	20000200 	.word	0x20000200

080010d0 <init>:

void init() {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
    ILI9341_Unselect();
 80010d4:	f000 fe8c 	bl	8001df0 <ILI9341_Unselect>
    ILI9341_Init();
 80010d8:	f000 ff3c 	bl	8001f54 <ILI9341_Init>
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}

080010e0 <read_menu>:
void display_date_and_time() {
	ILI9341_WriteString(40, 10, date, Font_7x10, ILI9341_GREEN, ILI9341_BLACK);
	ILI9341_WriteString(0, 40, time, Font_11x18, ILI9341_RED, ILI9341_BLACK);
}

void read_menu(uint8_t key) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af04      	add	r7, sp, #16
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
	enum KEY { LEFT, RIGHT, BOTTOM };
	switch(key) {
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d032      	beq.n	8001156 <read_menu+0x76>
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	dc46      	bgt.n	8001182 <read_menu+0xa2>
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d002      	beq.n	80010fe <read_menu+0x1e>
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d016      	beq.n	800112a <read_menu+0x4a>
			ILI9341_WriteString(10, 10, "Pressed BOTTOM", Font_11x18, ILI9341_RED, ILI9341_BLACK);
			HAL_Delay(500);
			ILI9341_FillScreen(ILI9341_BLACK);
			break;
	}
}
 80010fc:	e041      	b.n	8001182 <read_menu+0xa2>
			ILI9341_WriteString(10, 10, "Pressed LEFT", Font_11x18, ILI9341_RED, ILI9341_BLACK);
 80010fe:	4b23      	ldr	r3, [pc, #140]	; (800118c <read_menu+0xac>)
 8001100:	2200      	movs	r2, #0
 8001102:	9202      	str	r2, [sp, #8]
 8001104:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001108:	9201      	str	r2, [sp, #4]
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	9200      	str	r2, [sp, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a1f      	ldr	r2, [pc, #124]	; (8001190 <read_menu+0xb0>)
 8001112:	210a      	movs	r1, #10
 8001114:	200a      	movs	r0, #10
 8001116:	f001 f8f0 	bl	80022fa <ILI9341_WriteString>
			HAL_Delay(500);
 800111a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800111e:	f001 fa9f 	bl	8002660 <HAL_Delay>
			ILI9341_FillScreen(ILI9341_BLACK);
 8001122:	2000      	movs	r0, #0
 8001124:	f001 f9a2 	bl	800246c <ILI9341_FillScreen>
			break;
 8001128:	e02b      	b.n	8001182 <read_menu+0xa2>
			ILI9341_WriteString(10, 10, "Pressed RIGHT", Font_11x18, ILI9341_RED, ILI9341_BLACK);
 800112a:	4b18      	ldr	r3, [pc, #96]	; (800118c <read_menu+0xac>)
 800112c:	2200      	movs	r2, #0
 800112e:	9202      	str	r2, [sp, #8]
 8001130:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001134:	9201      	str	r2, [sp, #4]
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	9200      	str	r2, [sp, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a15      	ldr	r2, [pc, #84]	; (8001194 <read_menu+0xb4>)
 800113e:	210a      	movs	r1, #10
 8001140:	200a      	movs	r0, #10
 8001142:	f001 f8da 	bl	80022fa <ILI9341_WriteString>
			HAL_Delay(500);
 8001146:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800114a:	f001 fa89 	bl	8002660 <HAL_Delay>
			ILI9341_FillScreen(ILI9341_BLACK);
 800114e:	2000      	movs	r0, #0
 8001150:	f001 f98c 	bl	800246c <ILI9341_FillScreen>
			break;
 8001154:	e015      	b.n	8001182 <read_menu+0xa2>
			ILI9341_WriteString(10, 10, "Pressed BOTTOM", Font_11x18, ILI9341_RED, ILI9341_BLACK);
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <read_menu+0xac>)
 8001158:	2200      	movs	r2, #0
 800115a:	9202      	str	r2, [sp, #8]
 800115c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001160:	9201      	str	r2, [sp, #4]
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	9200      	str	r2, [sp, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a0b      	ldr	r2, [pc, #44]	; (8001198 <read_menu+0xb8>)
 800116a:	210a      	movs	r1, #10
 800116c:	200a      	movs	r0, #10
 800116e:	f001 f8c4 	bl	80022fa <ILI9341_WriteString>
			HAL_Delay(500);
 8001172:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001176:	f001 fa73 	bl	8002660 <HAL_Delay>
			ILI9341_FillScreen(ILI9341_BLACK);
 800117a:	2000      	movs	r0, #0
 800117c:	f001 f976 	bl	800246c <ILI9341_FillScreen>
			break;
 8001180:	bf00      	nop
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000004 	.word	0x20000004
 8001190:	0800a0e4 	.word	0x0800a0e4
 8001194:	0800a0f4 	.word	0x0800a0f4
 8001198:	0800a104 	.word	0x0800a104

0800119c <check_menu>:

void check_menu(){
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  enum KEY {LEFT, RIGHT, BOTTOM};
  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET) {
 80011a0:	2104      	movs	r1, #4
 80011a2:	4810      	ldr	r0, [pc, #64]	; (80011e4 <check_menu+0x48>)
 80011a4:	f001 ffaa 	bl	80030fc <HAL_GPIO_ReadPin>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d102      	bne.n	80011b4 <check_menu+0x18>
	  read_menu(RIGHT);
 80011ae:	2001      	movs	r0, #1
 80011b0:	f7ff ff96 	bl	80010e0 <read_menu>
  }
  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET) {
 80011b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011b8:	480a      	ldr	r0, [pc, #40]	; (80011e4 <check_menu+0x48>)
 80011ba:	f001 ff9f 	bl	80030fc <HAL_GPIO_ReadPin>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d102      	bne.n	80011ca <check_menu+0x2e>
	  read_menu(LEFT);
 80011c4:	2000      	movs	r0, #0
 80011c6:	f7ff ff8b 	bl	80010e0 <read_menu>
  }
  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == GPIO_PIN_RESET) {
 80011ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ce:	4806      	ldr	r0, [pc, #24]	; (80011e8 <check_menu+0x4c>)
 80011d0:	f001 ff94 	bl	80030fc <HAL_GPIO_ReadPin>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d102      	bne.n	80011e0 <check_menu+0x44>
	  read_menu(BOTTOM);
 80011da:	2002      	movs	r0, #2
 80011dc:	f7ff ff80 	bl	80010e0 <read_menu>
  }
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40010800 	.word	0x40010800
 80011e8:	40010c00 	.word	0x40010c00

080011ec <display_david_start>:

void display_david_start() {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
	struct point point_a = {10, 10};
 80011f2:	4b08      	ldr	r3, [pc, #32]	; (8001214 <display_david_start+0x28>)
 80011f4:	881b      	ldrh	r3, [r3, #0]
 80011f6:	80bb      	strh	r3, [r7, #4]
	struct point point_b = {20, 160};
 80011f8:	4b07      	ldr	r3, [pc, #28]	; (8001218 <display_david_start+0x2c>)
 80011fa:	881b      	ldrh	r3, [r3, #0]
 80011fc:	803b      	strh	r3, [r7, #0]

	ILI9341_DrawLine(point_a, point_b, ILI9341_RED);
 80011fe:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001202:	6839      	ldr	r1, [r7, #0]
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f001 f942 	bl	800248e <ILI9341_DrawLine>
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	0800a114 	.word	0x0800a114
 8001218:	0800a118 	.word	0x0800a118

0800121c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b090      	sub	sp, #64	; 0x40
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  char buffer[50];
  float voltage_bat = 0;
 8001222:	f04f 0300 	mov.w	r3, #0
 8001226:	63fb      	str	r3, [r7, #60]	; 0x3c
  float max_voltage = 4.2;
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <main+0x54>)
 800122a:	63bb      	str	r3, [r7, #56]	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800122c:	f001 f9b6 	bl	800259c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001230:	f000 f822 	bl	8001278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001234:	f000 fa28 	bl	8001688 <MX_GPIO_Init>
  MX_RTC_Init();
 8001238:	f000 f8e0 	bl	80013fc <MX_RTC_Init>
  MX_TIM2_Init();
 800123c:	f000 f9ae 	bl	800159c <MX_TIM2_Init>
  MX_TIM1_Init();
 8001240:	f000 f95c 	bl	80014fc <MX_TIM1_Init>
  MX_SPI2_Init();
 8001244:	f000 f924 	bl	8001490 <MX_SPI2_Init>
  MX_I2C2_Init();
 8001248:	f000 f8aa 	bl	80013a0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800124c:	f000 f9f2 	bl	8001634 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 8001250:	f000 f868 	bl	8001324 <MX_ADC2_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8001254:	4807      	ldr	r0, [pc, #28]	; (8001274 <main+0x58>)
 8001256:	f005 fbab 	bl	80069b0 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN 2 */
  init();
 800125a:	f7ff ff39 	bl	80010d0 <init>
  ILI9341_FillScreen(ILI9341_BLACK);
 800125e:	2000      	movs	r0, #0
 8001260:	f001 f904 	bl	800246c <ILI9341_FillScreen>

  // Read The ADC Conversion Result & Map It To PWM DutyCycle
  display_david_start();
 8001264:	f7ff ffc2 	bl	80011ec <display_david_start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	check_menu();
 8001268:	f7ff ff98 	bl	800119c <check_menu>
 800126c:	e7fc      	b.n	8001268 <main+0x4c>
 800126e:	bf00      	nop
 8001270:	40866666 	.word	0x40866666
 8001274:	20000524 	.word	0x20000524

08001278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b094      	sub	sp, #80	; 0x50
 800127c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001282:	2228      	movs	r2, #40	; 0x28
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f006 f85e 	bl	8007348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80012a8:	2306      	movs	r3, #6
 80012aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80012ac:	2301      	movs	r3, #1
 80012ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012b0:	2301      	movs	r3, #1
 80012b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012b4:	2310      	movs	r3, #16
 80012b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012c0:	4618      	mov	r0, r3
 80012c2:	f003 fd95 	bl	8004df0 <HAL_RCC_OscConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80012cc:	f000 fa9a 	bl	8001804 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d0:	230f      	movs	r3, #15
 80012d2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012dc:	2300      	movs	r3, #0
 80012de:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e0:	2300      	movs	r3, #0
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	2100      	movs	r1, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f004 f800 	bl	80052f0 <HAL_RCC_ClockConfig>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80012f6:	f000 fa85 	bl	8001804 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80012fa:	2303      	movs	r3, #3
 80012fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80012fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001302:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	4618      	mov	r0, r3
 800130c:	f004 f97e 	bl	800560c <HAL_RCCEx_PeriphCLKConfig>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001316:	f000 fa75 	bl	8001804 <Error_Handler>
  }
}
 800131a:	bf00      	nop
 800131c:	3750      	adds	r7, #80	; 0x50
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001334:	4b18      	ldr	r3, [pc, #96]	; (8001398 <MX_ADC2_Init+0x74>)
 8001336:	4a19      	ldr	r2, [pc, #100]	; (800139c <MX_ADC2_Init+0x78>)
 8001338:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800133a:	4b17      	ldr	r3, [pc, #92]	; (8001398 <MX_ADC2_Init+0x74>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001340:	4b15      	ldr	r3, [pc, #84]	; (8001398 <MX_ADC2_Init+0x74>)
 8001342:	2200      	movs	r2, #0
 8001344:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001346:	4b14      	ldr	r3, [pc, #80]	; (8001398 <MX_ADC2_Init+0x74>)
 8001348:	2200      	movs	r2, #0
 800134a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <MX_ADC2_Init+0x74>)
 800134e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001352:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001354:	4b10      	ldr	r3, [pc, #64]	; (8001398 <MX_ADC2_Init+0x74>)
 8001356:	2200      	movs	r2, #0
 8001358:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800135a:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <MX_ADC2_Init+0x74>)
 800135c:	2201      	movs	r2, #1
 800135e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001360:	480d      	ldr	r0, [pc, #52]	; (8001398 <MX_ADC2_Init+0x74>)
 8001362:	f001 f9a1 	bl	80026a8 <HAL_ADC_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 800136c:	f000 fa4a 	bl	8001804 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001370:	2306      	movs	r3, #6
 8001372:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001374:	2301      	movs	r3, #1
 8001376:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	4619      	mov	r1, r3
 8001380:	4805      	ldr	r0, [pc, #20]	; (8001398 <MX_ADC2_Init+0x74>)
 8001382:	f001 fa69 	bl	8002858 <HAL_ADC_ConfigChannel>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 800138c:	f000 fa3a 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001390:	bf00      	nop
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	200002a4 	.word	0x200002a4
 800139c:	40012800 	.word	0x40012800

080013a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <MX_I2C2_Init+0x50>)
 80013a6:	4a13      	ldr	r2, [pc, #76]	; (80013f4 <MX_I2C2_Init+0x54>)
 80013a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80013aa:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <MX_I2C2_Init+0x50>)
 80013ac:	4a12      	ldr	r2, [pc, #72]	; (80013f8 <MX_I2C2_Init+0x58>)
 80013ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013b0:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <MX_I2C2_Init+0x50>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80013b6:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <MX_I2C2_Init+0x50>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <MX_I2C2_Init+0x50>)
 80013be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013c2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013c4:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <MX_I2C2_Init+0x50>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80013ca:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <MX_I2C2_Init+0x50>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013d0:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <MX_I2C2_Init+0x50>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <MX_I2C2_Init+0x50>)
 80013d8:	2200      	movs	r2, #0
 80013da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013dc:	4804      	ldr	r0, [pc, #16]	; (80013f0 <MX_I2C2_Init+0x50>)
 80013de:	f001 febd 	bl	800315c <HAL_I2C_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80013e8:	f000 fa0c 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	200002d4 	.word	0x200002d4
 80013f4:	40005800 	.word	0x40005800
 80013f8:	000186a0 	.word	0x000186a0

080013fc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2100      	movs	r1, #0
 8001406:	460a      	mov	r2, r1
 8001408:	801a      	strh	r2, [r3, #0]
 800140a:	460a      	mov	r2, r1
 800140c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800140e:	2300      	movs	r3, #0
 8001410:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001412:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <MX_RTC_Init+0x8c>)
 8001414:	4a1d      	ldr	r2, [pc, #116]	; (800148c <MX_RTC_Init+0x90>)
 8001416:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001418:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <MX_RTC_Init+0x8c>)
 800141a:	f04f 32ff 	mov.w	r2, #4294967295
 800141e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001420:	4b19      	ldr	r3, [pc, #100]	; (8001488 <MX_RTC_Init+0x8c>)
 8001422:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001426:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001428:	4817      	ldr	r0, [pc, #92]	; (8001488 <MX_RTC_Init+0x8c>)
 800142a:	f004 fa5b 	bl	80058e4 <HAL_RTC_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8001434:	f000 f9e6 	bl	8001804 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001438:	2300      	movs	r3, #0
 800143a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800143c:	2300      	movs	r3, #0
 800143e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001440:	2300      	movs	r3, #0
 8001442:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	2201      	movs	r2, #1
 8001448:	4619      	mov	r1, r3
 800144a:	480f      	ldr	r0, [pc, #60]	; (8001488 <MX_RTC_Init+0x8c>)
 800144c:	f004 fad6 	bl	80059fc <HAL_RTC_SetTime>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8001456:	f000 f9d5 	bl	8001804 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_FRIDAY;
 800145a:	2305      	movs	r3, #5
 800145c:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_SEPTEMBER;
 800145e:	2309      	movs	r3, #9
 8001460:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x22;
 8001462:	2322      	movs	r3, #34	; 0x22
 8001464:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x23;
 8001466:	2323      	movs	r3, #35	; 0x23
 8001468:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800146a:	463b      	mov	r3, r7
 800146c:	2201      	movs	r2, #1
 800146e:	4619      	mov	r1, r3
 8001470:	4805      	ldr	r0, [pc, #20]	; (8001488 <MX_RTC_Init+0x8c>)
 8001472:	f004 fc33 	bl	8005cdc <HAL_RTC_SetDate>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 800147c:	f000 f9c2 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	200004c8 	.word	0x200004c8
 800148c:	40002800 	.word	0x40002800

08001490 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001494:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <MX_SPI2_Init+0x64>)
 8001496:	4a18      	ldr	r2, [pc, #96]	; (80014f8 <MX_SPI2_Init+0x68>)
 8001498:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800149a:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <MX_SPI2_Init+0x64>)
 800149c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014a2:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <MX_SPI2_Init+0x64>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <MX_SPI2_Init+0x64>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ae:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <MX_SPI2_Init+0x64>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <MX_SPI2_Init+0x64>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <MX_SPI2_Init+0x64>)
 80014bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014c0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014c2:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <MX_SPI2_Init+0x64>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <MX_SPI2_Init+0x64>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <MX_SPI2_Init+0x64>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <MX_SPI2_Init+0x64>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <MX_SPI2_Init+0x64>)
 80014dc:	220a      	movs	r2, #10
 80014de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014e0:	4804      	ldr	r0, [pc, #16]	; (80014f4 <MX_SPI2_Init+0x64>)
 80014e2:	f004 ffa7 	bl	8006434 <HAL_SPI_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80014ec:	f000 f98a 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	2000024c 	.word	0x2000024c
 80014f8:	40003800 	.word	0x40003800

080014fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001502:	f107 0308 	add.w	r3, r7, #8
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001510:	463b      	mov	r3, r7
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001518:	4b1e      	ldr	r3, [pc, #120]	; (8001594 <MX_TIM1_Init+0x98>)
 800151a:	4a1f      	ldr	r2, [pc, #124]	; (8001598 <MX_TIM1_Init+0x9c>)
 800151c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 800151e:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <MX_TIM1_Init+0x98>)
 8001520:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001524:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001526:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <MX_TIM1_Init+0x98>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 800152c:	4b19      	ldr	r3, [pc, #100]	; (8001594 <MX_TIM1_Init+0x98>)
 800152e:	2264      	movs	r2, #100	; 0x64
 8001530:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001532:	4b18      	ldr	r3, [pc, #96]	; (8001594 <MX_TIM1_Init+0x98>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001538:	4b16      	ldr	r3, [pc, #88]	; (8001594 <MX_TIM1_Init+0x98>)
 800153a:	2200      	movs	r2, #0
 800153c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <MX_TIM1_Init+0x98>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001544:	4813      	ldr	r0, [pc, #76]	; (8001594 <MX_TIM1_Init+0x98>)
 8001546:	f005 f9e3 	bl	8006910 <HAL_TIM_Base_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001550:	f000 f958 	bl	8001804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001558:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800155a:	f107 0308 	add.w	r3, r7, #8
 800155e:	4619      	mov	r1, r3
 8001560:	480c      	ldr	r0, [pc, #48]	; (8001594 <MX_TIM1_Init+0x98>)
 8001562:	f005 fb7f 	bl	8006c64 <HAL_TIM_ConfigClockSource>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800156c:	f000 f94a 	bl	8001804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001570:	2300      	movs	r3, #0
 8001572:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001574:	2300      	movs	r3, #0
 8001576:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001578:	463b      	mov	r3, r7
 800157a:	4619      	mov	r1, r3
 800157c:	4805      	ldr	r0, [pc, #20]	; (8001594 <MX_TIM1_Init+0x98>)
 800157e:	f005 fd55 	bl	800702c <HAL_TIMEx_MasterConfigSynchronization>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001588:	f000 f93c 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800158c:	bf00      	nop
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	200004dc 	.word	0x200004dc
 8001598:	40012c00 	.word	0x40012c00

0800159c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015a2:	f107 0308 	add.w	r3, r7, #8
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b0:	463b      	mov	r3, r7
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015b8:	4b1d      	ldr	r3, [pc, #116]	; (8001630 <MX_TIM2_Init+0x94>)
 80015ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80015c0:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <MX_TIM2_Init+0x94>)
 80015c2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80015c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c8:	4b19      	ldr	r3, [pc, #100]	; (8001630 <MX_TIM2_Init+0x94>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80015ce:	4b18      	ldr	r3, [pc, #96]	; (8001630 <MX_TIM2_Init+0x94>)
 80015d0:	2264      	movs	r2, #100	; 0x64
 80015d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d4:	4b16      	ldr	r3, [pc, #88]	; (8001630 <MX_TIM2_Init+0x94>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015da:	4b15      	ldr	r3, [pc, #84]	; (8001630 <MX_TIM2_Init+0x94>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015e0:	4813      	ldr	r0, [pc, #76]	; (8001630 <MX_TIM2_Init+0x94>)
 80015e2:	f005 f995 	bl	8006910 <HAL_TIM_Base_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015ec:	f000 f90a 	bl	8001804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015f6:	f107 0308 	add.w	r3, r7, #8
 80015fa:	4619      	mov	r1, r3
 80015fc:	480c      	ldr	r0, [pc, #48]	; (8001630 <MX_TIM2_Init+0x94>)
 80015fe:	f005 fb31 	bl	8006c64 <HAL_TIM_ConfigClockSource>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001608:	f000 f8fc 	bl	8001804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160c:	2300      	movs	r3, #0
 800160e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001614:	463b      	mov	r3, r7
 8001616:	4619      	mov	r1, r3
 8001618:	4805      	ldr	r0, [pc, #20]	; (8001630 <MX_TIM2_Init+0x94>)
 800161a:	f005 fd07 	bl	800702c <HAL_TIMEx_MasterConfigSynchronization>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001624:	f000 f8ee 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001628:	bf00      	nop
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000524 	.word	0x20000524

08001634 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001638:	4b11      	ldr	r3, [pc, #68]	; (8001680 <MX_USART1_UART_Init+0x4c>)
 800163a:	4a12      	ldr	r2, [pc, #72]	; (8001684 <MX_USART1_UART_Init+0x50>)
 800163c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800163e:	4b10      	ldr	r3, [pc, #64]	; (8001680 <MX_USART1_UART_Init+0x4c>)
 8001640:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001644:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <MX_USART1_UART_Init+0x4c>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <MX_USART1_UART_Init+0x4c>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001652:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <MX_USART1_UART_Init+0x4c>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001658:	4b09      	ldr	r3, [pc, #36]	; (8001680 <MX_USART1_UART_Init+0x4c>)
 800165a:	220c      	movs	r2, #12
 800165c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165e:	4b08      	ldr	r3, [pc, #32]	; (8001680 <MX_USART1_UART_Init+0x4c>)
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <MX_USART1_UART_Init+0x4c>)
 8001666:	2200      	movs	r2, #0
 8001668:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800166a:	4805      	ldr	r0, [pc, #20]	; (8001680 <MX_USART1_UART_Init+0x4c>)
 800166c:	f005 fd4e 	bl	800710c <HAL_UART_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001676:	f000 f8c5 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000480 	.word	0x20000480
 8001684:	40013800 	.word	0x40013800

08001688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	; 0x28
 800168c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800169c:	4b54      	ldr	r3, [pc, #336]	; (80017f0 <MX_GPIO_Init+0x168>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	4a53      	ldr	r2, [pc, #332]	; (80017f0 <MX_GPIO_Init+0x168>)
 80016a2:	f043 0310 	orr.w	r3, r3, #16
 80016a6:	6193      	str	r3, [r2, #24]
 80016a8:	4b51      	ldr	r3, [pc, #324]	; (80017f0 <MX_GPIO_Init+0x168>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	f003 0310 	and.w	r3, r3, #16
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b4:	4b4e      	ldr	r3, [pc, #312]	; (80017f0 <MX_GPIO_Init+0x168>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	4a4d      	ldr	r2, [pc, #308]	; (80017f0 <MX_GPIO_Init+0x168>)
 80016ba:	f043 0320 	orr.w	r3, r3, #32
 80016be:	6193      	str	r3, [r2, #24]
 80016c0:	4b4b      	ldr	r3, [pc, #300]	; (80017f0 <MX_GPIO_Init+0x168>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	f003 0320 	and.w	r3, r3, #32
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016cc:	4b48      	ldr	r3, [pc, #288]	; (80017f0 <MX_GPIO_Init+0x168>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	4a47      	ldr	r2, [pc, #284]	; (80017f0 <MX_GPIO_Init+0x168>)
 80016d2:	f043 0304 	orr.w	r3, r3, #4
 80016d6:	6193      	str	r3, [r2, #24]
 80016d8:	4b45      	ldr	r3, [pc, #276]	; (80017f0 <MX_GPIO_Init+0x168>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e4:	4b42      	ldr	r3, [pc, #264]	; (80017f0 <MX_GPIO_Init+0x168>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	4a41      	ldr	r2, [pc, #260]	; (80017f0 <MX_GPIO_Init+0x168>)
 80016ea:	f043 0308 	orr.w	r3, r3, #8
 80016ee:	6193      	str	r3, [r2, #24]
 80016f0:	4b3f      	ldr	r3, [pc, #252]	; (80017f0 <MX_GPIO_Init+0x168>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	f003 0308 	and.w	r3, r3, #8
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80016fc:	2200      	movs	r2, #0
 80016fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001702:	483c      	ldr	r0, [pc, #240]	; (80017f4 <MX_GPIO_Init+0x16c>)
 8001704:	f001 fd11 	bl	800312a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8
 8001708:	2200      	movs	r2, #0
 800170a:	f640 1198 	movw	r1, #2456	; 0x998
 800170e:	483a      	ldr	r0, [pc, #232]	; (80017f8 <MX_GPIO_Init+0x170>)
 8001710:	f001 fd0b 	bl	800312a <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001714:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171a:	2301      	movs	r3, #1
 800171c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	2302      	movs	r3, #2
 8001724:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	4831      	ldr	r0, [pc, #196]	; (80017f4 <MX_GPIO_Init+0x16c>)
 800172e:	f001 fb61 	bl	8002df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8001732:	2322      	movs	r3, #34	; 0x22
 8001734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001736:	2300      	movs	r3, #0
 8001738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	4619      	mov	r1, r3
 8001744:	482c      	ldr	r0, [pc, #176]	; (80017f8 <MX_GPIO_Init+0x170>)
 8001746:	f001 fb55 	bl	8002df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_15;
 800174a:	f249 0304 	movw	r3, #36868	; 0x9004
 800174e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001750:	2300      	movs	r3, #0
 8001752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001754:	2301      	movs	r3, #1
 8001756:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4619      	mov	r1, r3
 800175e:	4826      	ldr	r0, [pc, #152]	; (80017f8 <MX_GPIO_Init+0x170>)
 8001760:	f001 fb48 	bl	8002df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA7 PA8
                           PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8
 8001764:	f640 1398 	movw	r3, #2456	; 0x998
 8001768:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176a:	2301      	movs	r3, #1
 800176c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2302      	movs	r3, #2
 8001774:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	4619      	mov	r1, r3
 800177c:	481e      	ldr	r0, [pc, #120]	; (80017f8 <MX_GPIO_Init+0x170>)
 800177e:	f001 fb39 	bl	8002df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001782:	2302      	movs	r3, #2
 8001784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001786:	2300      	movs	r3, #0
 8001788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178e:	f107 0314 	add.w	r3, r7, #20
 8001792:	4619      	mov	r1, r3
 8001794:	4819      	ldr	r0, [pc, #100]	; (80017fc <MX_GPIO_Init+0x174>)
 8001796:	f001 fb2d 	bl	8002df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_9;
 800179a:	f44f 7301 	mov.w	r3, #516	; 0x204
 800179e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017a4:	2301      	movs	r3, #1
 80017a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	4619      	mov	r1, r3
 80017ae:	4813      	ldr	r0, [pc, #76]	; (80017fc <MX_GPIO_Init+0x174>)
 80017b0:	f001 fb20 	bl	8002df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80017b4:	2338      	movs	r3, #56	; 0x38
 80017b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b8:	2302      	movs	r3, #2
 80017ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017bc:	2303      	movs	r3, #3
 80017be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	4619      	mov	r1, r3
 80017c6:	480d      	ldr	r0, [pc, #52]	; (80017fc <MX_GPIO_Init+0x174>)
 80017c8:	f001 fb14 	bl	8002df4 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_SPI1_ENABLE();
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <MX_GPIO_Init+0x178>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
 80017e2:	4a07      	ldr	r2, [pc, #28]	; (8001800 <MX_GPIO_Init+0x178>)
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	6053      	str	r3, [r2, #4]

}
 80017e8:	bf00      	nop
 80017ea:	3728      	adds	r7, #40	; 0x28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40011000 	.word	0x40011000
 80017f8:	40010800 	.word	0x40010800
 80017fc:	40010c00 	.word	0x40010c00
 8001800:	40010000 	.word	0x40010000

08001804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001808:	b672      	cpsid	i
}
 800180a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800180c:	e7fe      	b.n	800180c <Error_Handler+0x8>
	...

08001810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <HAL_MspInit+0x5c>)
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	4a14      	ldr	r2, [pc, #80]	; (800186c <HAL_MspInit+0x5c>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6193      	str	r3, [r2, #24]
 8001822:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_MspInit+0x5c>)
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800182e:	4b0f      	ldr	r3, [pc, #60]	; (800186c <HAL_MspInit+0x5c>)
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	4a0e      	ldr	r2, [pc, #56]	; (800186c <HAL_MspInit+0x5c>)
 8001834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001838:	61d3      	str	r3, [r2, #28]
 800183a:	4b0c      	ldr	r3, [pc, #48]	; (800186c <HAL_MspInit+0x5c>)
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <HAL_MspInit+0x60>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	4a04      	ldr	r2, [pc, #16]	; (8001870 <HAL_MspInit+0x60>)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001862:	bf00      	nop
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr
 800186c:	40021000 	.word	0x40021000
 8001870:	40010000 	.word	0x40010000

08001874 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b088      	sub	sp, #32
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	f107 0310 	add.w	r3, r7, #16
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC2)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a14      	ldr	r2, [pc, #80]	; (80018e0 <HAL_ADC_MspInit+0x6c>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d121      	bne.n	80018d8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001894:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <HAL_ADC_MspInit+0x70>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <HAL_ADC_MspInit+0x70>)
 800189a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800189e:	6193      	str	r3, [r2, #24]
 80018a0:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <HAL_ADC_MspInit+0x70>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ac:	4b0d      	ldr	r3, [pc, #52]	; (80018e4 <HAL_ADC_MspInit+0x70>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	4a0c      	ldr	r2, [pc, #48]	; (80018e4 <HAL_ADC_MspInit+0x70>)
 80018b2:	f043 0304 	orr.w	r3, r3, #4
 80018b6:	6193      	str	r3, [r2, #24]
 80018b8:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <HAL_ADC_MspInit+0x70>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA6     ------> ADC2_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018c4:	2340      	movs	r3, #64	; 0x40
 80018c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018c8:	2303      	movs	r3, #3
 80018ca:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018cc:	f107 0310 	add.w	r3, r7, #16
 80018d0:	4619      	mov	r1, r3
 80018d2:	4805      	ldr	r0, [pc, #20]	; (80018e8 <HAL_ADC_MspInit+0x74>)
 80018d4:	f001 fa8e 	bl	8002df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80018d8:	bf00      	nop
 80018da:	3720      	adds	r7, #32
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40012800 	.word	0x40012800
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40010800 	.word	0x40010800

080018ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0310 	add.w	r3, r7, #16
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a1e      	ldr	r2, [pc, #120]	; (8001980 <HAL_I2C_MspInit+0x94>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d134      	bne.n	8001976 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800190c:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <HAL_I2C_MspInit+0x98>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	4a1c      	ldr	r2, [pc, #112]	; (8001984 <HAL_I2C_MspInit+0x98>)
 8001912:	f043 0308 	orr.w	r3, r3, #8
 8001916:	6193      	str	r3, [r2, #24]
 8001918:	4b1a      	ldr	r3, [pc, #104]	; (8001984 <HAL_I2C_MspInit+0x98>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001924:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001928:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800192a:	2312      	movs	r3, #18
 800192c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800192e:	2303      	movs	r3, #3
 8001930:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001932:	f107 0310 	add.w	r3, r7, #16
 8001936:	4619      	mov	r1, r3
 8001938:	4813      	ldr	r0, [pc, #76]	; (8001988 <HAL_I2C_MspInit+0x9c>)
 800193a:	f001 fa5b 	bl	8002df4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800193e:	4b11      	ldr	r3, [pc, #68]	; (8001984 <HAL_I2C_MspInit+0x98>)
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	4a10      	ldr	r2, [pc, #64]	; (8001984 <HAL_I2C_MspInit+0x98>)
 8001944:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001948:	61d3      	str	r3, [r2, #28]
 800194a:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <HAL_I2C_MspInit+0x98>)
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001956:	2200      	movs	r2, #0
 8001958:	2100      	movs	r1, #0
 800195a:	2021      	movs	r0, #33	; 0x21
 800195c:	f001 f98d 	bl	8002c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001960:	2021      	movs	r0, #33	; 0x21
 8001962:	f001 f9a6 	bl	8002cb2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	2100      	movs	r1, #0
 800196a:	2022      	movs	r0, #34	; 0x22
 800196c:	f001 f985 	bl	8002c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001970:	2022      	movs	r0, #34	; 0x22
 8001972:	f001 f99e 	bl	8002cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001976:	bf00      	nop
 8001978:	3720      	adds	r7, #32
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40005800 	.word	0x40005800
 8001984:	40021000 	.word	0x40021000
 8001988:	40010c00 	.word	0x40010c00

0800198c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0b      	ldr	r2, [pc, #44]	; (80019c8 <HAL_RTC_MspInit+0x3c>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d110      	bne.n	80019c0 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800199e:	f003 fa1b 	bl	8004dd8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80019a2:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <HAL_RTC_MspInit+0x40>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	4a09      	ldr	r2, [pc, #36]	; (80019cc <HAL_RTC_MspInit+0x40>)
 80019a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80019ac:	61d3      	str	r3, [r2, #28]
 80019ae:	4b07      	ldr	r3, [pc, #28]	; (80019cc <HAL_RTC_MspInit+0x40>)
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80019ba:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <HAL_RTC_MspInit+0x44>)
 80019bc:	2201      	movs	r2, #1
 80019be:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80019c0:	bf00      	nop
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40002800 	.word	0x40002800
 80019cc:	40021000 	.word	0x40021000
 80019d0:	4242043c 	.word	0x4242043c

080019d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 0310 	add.w	r3, r7, #16
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a1c      	ldr	r2, [pc, #112]	; (8001a60 <HAL_SPI_MspInit+0x8c>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d131      	bne.n	8001a58 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019f4:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <HAL_SPI_MspInit+0x90>)
 80019f6:	69db      	ldr	r3, [r3, #28]
 80019f8:	4a1a      	ldr	r2, [pc, #104]	; (8001a64 <HAL_SPI_MspInit+0x90>)
 80019fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019fe:	61d3      	str	r3, [r2, #28]
 8001a00:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <HAL_SPI_MspInit+0x90>)
 8001a02:	69db      	ldr	r3, [r3, #28]
 8001a04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0c:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <HAL_SPI_MspInit+0x90>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	4a14      	ldr	r2, [pc, #80]	; (8001a64 <HAL_SPI_MspInit+0x90>)
 8001a12:	f043 0308 	orr.w	r3, r3, #8
 8001a16:	6193      	str	r3, [r2, #24]
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <HAL_SPI_MspInit+0x90>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001a24:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001a28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a32:	f107 0310 	add.w	r3, r7, #16
 8001a36:	4619      	mov	r1, r3
 8001a38:	480b      	ldr	r0, [pc, #44]	; (8001a68 <HAL_SPI_MspInit+0x94>)
 8001a3a:	f001 f9db 	bl	8002df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001a3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a4c:	f107 0310 	add.w	r3, r7, #16
 8001a50:	4619      	mov	r1, r3
 8001a52:	4805      	ldr	r0, [pc, #20]	; (8001a68 <HAL_SPI_MspInit+0x94>)
 8001a54:	f001 f9ce 	bl	8002df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001a58:	bf00      	nop
 8001a5a:	3720      	adds	r7, #32
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40003800 	.word	0x40003800
 8001a64:	40021000 	.word	0x40021000
 8001a68:	40010c00 	.word	0x40010c00

08001a6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a16      	ldr	r2, [pc, #88]	; (8001ad4 <HAL_TIM_Base_MspInit+0x68>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d10c      	bne.n	8001a98 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a7e:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <HAL_TIM_Base_MspInit+0x6c>)
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	4a15      	ldr	r2, [pc, #84]	; (8001ad8 <HAL_TIM_Base_MspInit+0x6c>)
 8001a84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a88:	6193      	str	r3, [r2, #24]
 8001a8a:	4b13      	ldr	r3, [pc, #76]	; (8001ad8 <HAL_TIM_Base_MspInit+0x6c>)
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a96:	e018      	b.n	8001aca <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aa0:	d113      	bne.n	8001aca <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aa2:	4b0d      	ldr	r3, [pc, #52]	; (8001ad8 <HAL_TIM_Base_MspInit+0x6c>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	4a0c      	ldr	r2, [pc, #48]	; (8001ad8 <HAL_TIM_Base_MspInit+0x6c>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	61d3      	str	r3, [r2, #28]
 8001aae:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <HAL_TIM_Base_MspInit+0x6c>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2100      	movs	r1, #0
 8001abe:	201c      	movs	r0, #28
 8001ac0:	f001 f8db 	bl	8002c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ac4:	201c      	movs	r0, #28
 8001ac6:	f001 f8f4 	bl	8002cb2 <HAL_NVIC_EnableIRQ>
}
 8001aca:	bf00      	nop
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40012c00 	.word	0x40012c00
 8001ad8:	40021000 	.word	0x40021000

08001adc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b088      	sub	sp, #32
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 0310 	add.w	r3, r7, #16
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a1c      	ldr	r2, [pc, #112]	; (8001b68 <HAL_UART_MspInit+0x8c>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d131      	bne.n	8001b60 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001afc:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <HAL_UART_MspInit+0x90>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	4a1a      	ldr	r2, [pc, #104]	; (8001b6c <HAL_UART_MspInit+0x90>)
 8001b02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b06:	6193      	str	r3, [r2, #24]
 8001b08:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <HAL_UART_MspInit+0x90>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b14:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <HAL_UART_MspInit+0x90>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	4a14      	ldr	r2, [pc, #80]	; (8001b6c <HAL_UART_MspInit+0x90>)
 8001b1a:	f043 0304 	orr.w	r3, r3, #4
 8001b1e:	6193      	str	r3, [r2, #24]
 8001b20:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <HAL_UART_MspInit+0x90>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b32:	2302      	movs	r3, #2
 8001b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b36:	2303      	movs	r3, #3
 8001b38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3a:	f107 0310 	add.w	r3, r7, #16
 8001b3e:	4619      	mov	r1, r3
 8001b40:	480b      	ldr	r0, [pc, #44]	; (8001b70 <HAL_UART_MspInit+0x94>)
 8001b42:	f001 f957 	bl	8002df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b54:	f107 0310 	add.w	r3, r7, #16
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4805      	ldr	r0, [pc, #20]	; (8001b70 <HAL_UART_MspInit+0x94>)
 8001b5c:	f001 f94a 	bl	8002df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b60:	bf00      	nop
 8001b62:	3720      	adds	r7, #32
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40013800 	.word	0x40013800
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40010800 	.word	0x40010800

08001b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <NMI_Handler+0x4>

08001b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b7e:	e7fe      	b.n	8001b7e <HardFault_Handler+0x4>

08001b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <MemManage_Handler+0x4>

08001b86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b8a:	e7fe      	b.n	8001b8a <BusFault_Handler+0x4>

08001b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <UsageFault_Handler+0x4>

08001b92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr

08001b9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr

08001baa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr

08001bb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bba:	f000 fd35 	bl	8002628 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bc8:	4802      	ldr	r0, [pc, #8]	; (8001bd4 <TIM2_IRQHandler+0x10>)
 8001bca:	f004 ff43 	bl	8006a54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000524 	.word	0x20000524

08001bd8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001bdc:	4802      	ldr	r0, [pc, #8]	; (8001be8 <I2C2_EV_IRQHandler+0x10>)
 8001bde:	f001 fc15 	bl	800340c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	200002d4 	.word	0x200002d4

08001bec <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001bf0:	4802      	ldr	r0, [pc, #8]	; (8001bfc <I2C2_ER_IRQHandler+0x10>)
 8001bf2:	f001 fd7c 	bl	80036ee <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	200002d4 	.word	0x200002d4

08001c00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
	return 1;
 8001c04:	2301      	movs	r3, #1
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr

08001c0e <_kill>:

int _kill(int pid, int sig)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c18:	f005 fb56 	bl	80072c8 <__errno>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2216      	movs	r2, #22
 8001c20:	601a      	str	r2, [r3, #0]
	return -1;
 8001c22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <_exit>:

void _exit (int status)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c36:	f04f 31ff 	mov.w	r1, #4294967295
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff ffe7 	bl	8001c0e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c40:	e7fe      	b.n	8001c40 <_exit+0x12>

08001c42 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b086      	sub	sp, #24
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	60f8      	str	r0, [r7, #12]
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	e00a      	b.n	8001c6a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c54:	f3af 8000 	nop.w
 8001c58:	4601      	mov	r1, r0
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	1c5a      	adds	r2, r3, #1
 8001c5e:	60ba      	str	r2, [r7, #8]
 8001c60:	b2ca      	uxtb	r2, r1
 8001c62:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	3301      	adds	r3, #1
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	dbf0      	blt.n	8001c54 <_read+0x12>
	}

return len;
 8001c72:	687b      	ldr	r3, [r7, #4]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	e009      	b.n	8001ca2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	60ba      	str	r2, [r7, #8]
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	dbf1      	blt.n	8001c8e <_write+0x12>
	}
	return len;
 8001caa:	687b      	ldr	r3, [r7, #4]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <_close>:

int _close(int file)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
	return -1;
 8001cbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr

08001cca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cda:	605a      	str	r2, [r3, #4]
	return 0;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <_isatty>:

int _isatty(int file)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
	return 1;
 8001cf0:	2301      	movs	r3, #1
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr

08001cfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
	return 0;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d1c:	4a14      	ldr	r2, [pc, #80]	; (8001d70 <_sbrk+0x5c>)
 8001d1e:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <_sbrk+0x60>)
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d28:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <_sbrk+0x64>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d102      	bne.n	8001d36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d30:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <_sbrk+0x64>)
 8001d32:	4a12      	ldr	r2, [pc, #72]	; (8001d7c <_sbrk+0x68>)
 8001d34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d36:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <_sbrk+0x64>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d207      	bcs.n	8001d54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d44:	f005 fac0 	bl	80072c8 <__errno>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	220c      	movs	r2, #12
 8001d4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d52:	e009      	b.n	8001d68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d54:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <_sbrk+0x64>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d5a:	4b07      	ldr	r3, [pc, #28]	; (8001d78 <_sbrk+0x64>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	4a05      	ldr	r2, [pc, #20]	; (8001d78 <_sbrk+0x64>)
 8001d64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d66:	68fb      	ldr	r3, [r7, #12]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20005000 	.word	0x20005000
 8001d74:	00000400 	.word	0x00000400
 8001d78:	20000240 	.word	0x20000240
 8001d7c:	20000580 	.word	0x20000580

08001d80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr

08001d8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d8c:	f7ff fff8 	bl	8001d80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d90:	480b      	ldr	r0, [pc, #44]	; (8001dc0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d92:	490c      	ldr	r1, [pc, #48]	; (8001dc4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d94:	4a0c      	ldr	r2, [pc, #48]	; (8001dc8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d98:	e002      	b.n	8001da0 <LoopCopyDataInit>

08001d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d9e:	3304      	adds	r3, #4

08001da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001da4:	d3f9      	bcc.n	8001d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001da6:	4a09      	ldr	r2, [pc, #36]	; (8001dcc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001da8:	4c09      	ldr	r4, [pc, #36]	; (8001dd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dac:	e001      	b.n	8001db2 <LoopFillZerobss>

08001dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db0:	3204      	adds	r2, #4

08001db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001db4:	d3fb      	bcc.n	8001dae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001db6:	f005 fa8d 	bl	80072d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dba:	f7ff fa2f 	bl	800121c <main>
  bx lr
 8001dbe:	4770      	bx	lr
  ldr r0, =_sdata
 8001dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dc4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001dc8:	0800b2d4 	.word	0x0800b2d4
  ldr r2, =_sbss
 8001dcc:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001dd0:	20000580 	.word	0x20000580

08001dd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dd4:	e7fe      	b.n	8001dd4 <ADC1_2_IRQHandler>
	...

08001dd8 <ILI9341_Select>:
/* vim: set ai et ts=4 sw=4: */
#include "stm32f1xx_hal.h"
#include "st7735.h"
#include <math.h>

static void ILI9341_Select() {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2110      	movs	r1, #16
 8001de0:	4802      	ldr	r0, [pc, #8]	; (8001dec <ILI9341_Select+0x14>)
 8001de2:	f001 f9a2 	bl	800312a <HAL_GPIO_WritePin>
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40010800 	.word	0x40010800

08001df0 <ILI9341_Unselect>:

void ILI9341_Unselect() {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8001df4:	2201      	movs	r2, #1
 8001df6:	2110      	movs	r1, #16
 8001df8:	4802      	ldr	r0, [pc, #8]	; (8001e04 <ILI9341_Unselect+0x14>)
 8001dfa:	f001 f996 	bl	800312a <HAL_GPIO_WritePin>
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40010800 	.word	0x40010800

08001e08 <ILI9341_Reset>:

static void ILI9341_Reset() {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e12:	4807      	ldr	r0, [pc, #28]	; (8001e30 <ILI9341_Reset+0x28>)
 8001e14:	f001 f989 	bl	800312a <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001e18:	2005      	movs	r0, #5
 8001e1a:	f000 fc21 	bl	8002660 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e24:	4802      	ldr	r0, [pc, #8]	; (8001e30 <ILI9341_Reset+0x28>)
 8001e26:	f001 f980 	bl	800312a <HAL_GPIO_WritePin>
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40010800 	.word	0x40010800

08001e34 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e44:	4806      	ldr	r0, [pc, #24]	; (8001e60 <ILI9341_WriteCommand+0x2c>)
 8001e46:	f001 f970 	bl	800312a <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001e4a:	1df9      	adds	r1, r7, #7
 8001e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e50:	2201      	movs	r2, #1
 8001e52:	4804      	ldr	r0, [pc, #16]	; (8001e64 <ILI9341_WriteCommand+0x30>)
 8001e54:	f004 fb72 	bl	800653c <HAL_SPI_Transmit>
}
 8001e58:	bf00      	nop
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40010800 	.word	0x40010800
 8001e64:	2000024c 	.word	0x2000024c

08001e68 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8001e72:	2201      	movs	r2, #1
 8001e74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e78:	4810      	ldr	r0, [pc, #64]	; (8001ebc <ILI9341_WriteData+0x54>)
 8001e7a:	f001 f956 	bl	800312a <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8001e7e:	e015      	b.n	8001eac <ILI9341_WriteData+0x44>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e86:	bf28      	it	cs
 8001e88:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8001e8c:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8001e8e:	89fa      	ldrh	r2, [r7, #14]
 8001e90:	f04f 33ff 	mov.w	r3, #4294967295
 8001e94:	6879      	ldr	r1, [r7, #4]
 8001e96:	480a      	ldr	r0, [pc, #40]	; (8001ec0 <ILI9341_WriteData+0x58>)
 8001e98:	f004 fb50 	bl	800653c <HAL_SPI_Transmit>
        buff += chunk_size;
 8001e9c:	89fb      	ldrh	r3, [r7, #14]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 8001ea4:	89fb      	ldrh	r3, [r7, #14]
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1e6      	bne.n	8001e80 <ILI9341_WriteData+0x18>
    }
}
 8001eb2:	bf00      	nop
 8001eb4:	bf00      	nop
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40010800 	.word	0x40010800
 8001ec0:	2000024c 	.word	0x2000024c

08001ec4 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8001ec4:	b590      	push	{r4, r7, lr}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4604      	mov	r4, r0
 8001ecc:	4608      	mov	r0, r1
 8001ece:	4611      	mov	r1, r2
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4623      	mov	r3, r4
 8001ed4:	80fb      	strh	r3, [r7, #6]
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	80bb      	strh	r3, [r7, #4]
 8001eda:	460b      	mov	r3, r1
 8001edc:	807b      	strh	r3, [r7, #2]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 8001ee2:	202a      	movs	r0, #42	; 0x2a
 8001ee4:	f7ff ffa6 	bl	8001e34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8001ee8:	88fb      	ldrh	r3, [r7, #6]
 8001eea:	0a1b      	lsrs	r3, r3, #8
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	733b      	strb	r3, [r7, #12]
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	737b      	strb	r3, [r7, #13]
 8001ef8:	887b      	ldrh	r3, [r7, #2]
 8001efa:	0a1b      	lsrs	r3, r3, #8
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	73bb      	strb	r3, [r7, #14]
 8001f02:	887b      	ldrh	r3, [r7, #2]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 8001f08:	f107 030c 	add.w	r3, r7, #12
 8001f0c:	2104      	movs	r1, #4
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff ffaa 	bl	8001e68 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 8001f14:	202b      	movs	r0, #43	; 0x2b
 8001f16:	f7ff ff8d 	bl	8001e34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8001f1a:	88bb      	ldrh	r3, [r7, #4]
 8001f1c:	0a1b      	lsrs	r3, r3, #8
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	723b      	strb	r3, [r7, #8]
 8001f24:	88bb      	ldrh	r3, [r7, #4]
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	727b      	strb	r3, [r7, #9]
 8001f2a:	883b      	ldrh	r3, [r7, #0]
 8001f2c:	0a1b      	lsrs	r3, r3, #8
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	72bb      	strb	r3, [r7, #10]
 8001f34:	883b      	ldrh	r3, [r7, #0]
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 8001f3a:	f107 0308 	add.w	r3, r7, #8
 8001f3e:	2104      	movs	r1, #4
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff ff91 	bl	8001e68 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 8001f46:	202c      	movs	r0, #44	; 0x2c
 8001f48:	f7ff ff74 	bl	8001e34 <ILI9341_WriteCommand>
}
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd90      	pop	{r4, r7, pc}

08001f54 <ILI9341_Init>:

void ILI9341_Init() {
 8001f54:	b590      	push	{r4, r7, lr}
 8001f56:	b09b      	sub	sp, #108	; 0x6c
 8001f58:	af00      	add	r7, sp, #0
    ILI9341_Select();
 8001f5a:	f7ff ff3d 	bl	8001dd8 <ILI9341_Select>
    ILI9341_Reset();
 8001f5e:	f7ff ff53 	bl	8001e08 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 8001f62:	2001      	movs	r0, #1
 8001f64:	f7ff ff66 	bl	8001e34 <ILI9341_WriteCommand>
    HAL_Delay(1000);
 8001f68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f6c:	f000 fb78 	bl	8002660 <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 8001f70:	20cb      	movs	r0, #203	; 0xcb
 8001f72:	f7ff ff5f 	bl	8001e34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 8001f76:	4a87      	ldr	r2, [pc, #540]	; (8002194 <ILI9341_Init+0x240>)
 8001f78:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001f7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f80:	6018      	str	r0, [r3, #0]
 8001f82:	3304      	adds	r3, #4
 8001f84:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8001f86:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001f8a:	2105      	movs	r1, #5
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff ff6b 	bl	8001e68 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 8001f92:	20cf      	movs	r0, #207	; 0xcf
 8001f94:	f7ff ff4e 	bl	8001e34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 8001f98:	4a7f      	ldr	r2, [pc, #508]	; (8002198 <ILI9341_Init+0x244>)
 8001f9a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f9e:	6812      	ldr	r2, [r2, #0]
 8001fa0:	4611      	mov	r1, r2
 8001fa2:	8019      	strh	r1, [r3, #0]
 8001fa4:	3302      	adds	r3, #2
 8001fa6:	0c12      	lsrs	r2, r2, #16
 8001fa8:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8001faa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001fae:	2103      	movs	r1, #3
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff ff59 	bl	8001e68 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 8001fb6:	20e8      	movs	r0, #232	; 0xe8
 8001fb8:	f7ff ff3c 	bl	8001e34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8001fbc:	4a77      	ldr	r2, [pc, #476]	; (800219c <ILI9341_Init+0x248>)
 8001fbe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001fc2:	6812      	ldr	r2, [r2, #0]
 8001fc4:	4611      	mov	r1, r2
 8001fc6:	8019      	strh	r1, [r3, #0]
 8001fc8:	3302      	adds	r3, #2
 8001fca:	0c12      	lsrs	r2, r2, #16
 8001fcc:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8001fce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001fd2:	2103      	movs	r1, #3
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ff47 	bl	8001e68 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 8001fda:	20ea      	movs	r0, #234	; 0xea
 8001fdc:	f7ff ff2a 	bl	8001e34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        ILI9341_WriteData(data, sizeof(data));
 8001fe6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fea:	2102      	movs	r1, #2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff ff3b 	bl	8001e68 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 8001ff2:	20ed      	movs	r0, #237	; 0xed
 8001ff4:	f7ff ff1e 	bl	8001e34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8001ff8:	4b69      	ldr	r3, [pc, #420]	; (80021a0 <ILI9341_Init+0x24c>)
 8001ffa:	653b      	str	r3, [r7, #80]	; 0x50
        ILI9341_WriteData(data, sizeof(data));
 8001ffc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002000:	2104      	movs	r1, #4
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff ff30 	bl	8001e68 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 8002008:	20f7      	movs	r0, #247	; 0xf7
 800200a:	f7ff ff13 	bl	8001e34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 800200e:	2320      	movs	r3, #32
 8002010:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        ILI9341_WriteData(data, sizeof(data));
 8002014:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002018:	2101      	movs	r1, #1
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff ff24 	bl	8001e68 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 8002020:	20c0      	movs	r0, #192	; 0xc0
 8002022:	f7ff ff07 	bl	8001e34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 8002026:	2323      	movs	r3, #35	; 0x23
 8002028:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        ILI9341_WriteData(data, sizeof(data));
 800202c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002030:	2101      	movs	r1, #1
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff ff18 	bl	8001e68 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 8002038:	20c1      	movs	r0, #193	; 0xc1
 800203a:	f7ff fefb 	bl	8001e34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 800203e:	2310      	movs	r3, #16
 8002040:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        ILI9341_WriteData(data, sizeof(data));
 8002044:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002048:	2101      	movs	r1, #1
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff ff0c 	bl	8001e68 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 8002050:	20c5      	movs	r0, #197	; 0xc5
 8002052:	f7ff feef 	bl	8001e34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 8002056:	f642 033e 	movw	r3, #10302	; 0x283e
 800205a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        ILI9341_WriteData(data, sizeof(data));
 800205e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002062:	2102      	movs	r1, #2
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff feff 	bl	8001e68 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 800206a:	20c7      	movs	r0, #199	; 0xc7
 800206c:	f7ff fee2 	bl	8001e34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 8002070:	2386      	movs	r3, #134	; 0x86
 8002072:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        ILI9341_WriteData(data, sizeof(data));
 8002076:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800207a:	2101      	movs	r1, #1
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff fef3 	bl	8001e68 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 8002082:	2036      	movs	r0, #54	; 0x36
 8002084:	f7ff fed6 	bl	8001e34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 8002088:	2348      	movs	r3, #72	; 0x48
 800208a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        ILI9341_WriteData(data, sizeof(data));
 800208e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002092:	2101      	movs	r1, #1
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff fee7 	bl	8001e68 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 800209a:	203a      	movs	r0, #58	; 0x3a
 800209c:	f7ff feca 	bl	8001e34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 80020a0:	2355      	movs	r3, #85	; 0x55
 80020a2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        ILI9341_WriteData(data, sizeof(data));
 80020a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020aa:	2101      	movs	r1, #1
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff fedb 	bl	8001e68 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 80020b2:	20b1      	movs	r0, #177	; 0xb1
 80020b4:	f7ff febe 	bl	8001e34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 80020b8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80020bc:	863b      	strh	r3, [r7, #48]	; 0x30
        ILI9341_WriteData(data, sizeof(data));
 80020be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020c2:	2102      	movs	r1, #2
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fecf 	bl	8001e68 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 80020ca:	20b6      	movs	r0, #182	; 0xb6
 80020cc:	f7ff feb2 	bl	8001e34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 80020d0:	4a34      	ldr	r2, [pc, #208]	; (80021a4 <ILI9341_Init+0x250>)
 80020d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	4611      	mov	r1, r2
 80020da:	8019      	strh	r1, [r3, #0]
 80020dc:	3302      	adds	r3, #2
 80020de:	0c12      	lsrs	r2, r2, #16
 80020e0:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80020e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020e6:	2103      	movs	r1, #3
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff febd 	bl	8001e68 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 80020ee:	20f2      	movs	r0, #242	; 0xf2
 80020f0:	f7ff fea0 	bl	8001e34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 80020f4:	2300      	movs	r3, #0
 80020f6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        ILI9341_WriteData(data, sizeof(data));
 80020fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020fe:	2101      	movs	r1, #1
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff feb1 	bl	8001e68 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 8002106:	2026      	movs	r0, #38	; 0x26
 8002108:	f7ff fe94 	bl	8001e34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 800210c:	2301      	movs	r3, #1
 800210e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        ILI9341_WriteData(data, sizeof(data));
 8002112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002116:	2101      	movs	r1, #1
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff fea5 	bl	8001e68 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 800211e:	20e0      	movs	r0, #224	; 0xe0
 8002120:	f7ff fe88 	bl	8001e34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8002124:	4b20      	ldr	r3, [pc, #128]	; (80021a8 <ILI9341_Init+0x254>)
 8002126:	f107 0414 	add.w	r4, r7, #20
 800212a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800212c:	c407      	stmia	r4!, {r0, r1, r2}
 800212e:	8023      	strh	r3, [r4, #0]
 8002130:	3402      	adds	r4, #2
 8002132:	0c1b      	lsrs	r3, r3, #16
 8002134:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 8002136:	f107 0314 	add.w	r3, r7, #20
 800213a:	210f      	movs	r1, #15
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fe93 	bl	8001e68 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 8002142:	20e1      	movs	r0, #225	; 0xe1
 8002144:	f7ff fe76 	bl	8001e34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8002148:	4b18      	ldr	r3, [pc, #96]	; (80021ac <ILI9341_Init+0x258>)
 800214a:	1d3c      	adds	r4, r7, #4
 800214c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800214e:	c407      	stmia	r4!, {r0, r1, r2}
 8002150:	8023      	strh	r3, [r4, #0]
 8002152:	3402      	adds	r4, #2
 8002154:	0c1b      	lsrs	r3, r3, #16
 8002156:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 8002158:	1d3b      	adds	r3, r7, #4
 800215a:	210f      	movs	r1, #15
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fe83 	bl	8001e68 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 8002162:	2011      	movs	r0, #17
 8002164:	f7ff fe66 	bl	8001e34 <ILI9341_WriteCommand>
    HAL_Delay(120);
 8002168:	2078      	movs	r0, #120	; 0x78
 800216a:	f000 fa79 	bl	8002660 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 800216e:	2029      	movs	r0, #41	; 0x29
 8002170:	f7ff fe60 	bl	8001e34 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 8002174:	2036      	movs	r0, #54	; 0x36
 8002176:	f7ff fe5d 	bl	8001e34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 800217a:	23a0      	movs	r3, #160	; 0xa0
 800217c:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 800217e:	463b      	mov	r3, r7
 8002180:	2101      	movs	r1, #1
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff fe70 	bl	8001e68 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 8002188:	f7ff fe32 	bl	8001df0 <ILI9341_Unselect>
}
 800218c:	bf00      	nop
 800218e:	376c      	adds	r7, #108	; 0x6c
 8002190:	46bd      	mov	sp, r7
 8002192:	bd90      	pop	{r4, r7, pc}
 8002194:	0800a11c 	.word	0x0800a11c
 8002198:	0800a124 	.word	0x0800a124
 800219c:	0800a128 	.word	0x0800a128
 80021a0:	81120364 	.word	0x81120364
 80021a4:	0800a12c 	.word	0x0800a12c
 80021a8:	0800a130 	.word	0x0800a130
 80021ac:	0800a140 	.word	0x0800a140

080021b0 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	80fb      	strh	r3, [r7, #6]
 80021ba:	460b      	mov	r3, r1
 80021bc:	80bb      	strh	r3, [r7, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	807b      	strh	r3, [r7, #2]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 80021c2:	88fb      	ldrh	r3, [r7, #6]
 80021c4:	2b9f      	cmp	r3, #159	; 0x9f
 80021c6:	d81f      	bhi.n	8002208 <ILI9341_DrawPixel+0x58>
 80021c8:	88bb      	ldrh	r3, [r7, #4]
 80021ca:	2b7f      	cmp	r3, #127	; 0x7f
 80021cc:	d81c      	bhi.n	8002208 <ILI9341_DrawPixel+0x58>
        return;

    ILI9341_Select();
 80021ce:	f7ff fe03 	bl	8001dd8 <ILI9341_Select>

    ILI9341_SetAddressWindow(x, y, x+1, y+1);
 80021d2:	88fb      	ldrh	r3, [r7, #6]
 80021d4:	3301      	adds	r3, #1
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	88bb      	ldrh	r3, [r7, #4]
 80021da:	3301      	adds	r3, #1
 80021dc:	b29b      	uxth	r3, r3
 80021de:	88b9      	ldrh	r1, [r7, #4]
 80021e0:	88f8      	ldrh	r0, [r7, #6]
 80021e2:	f7ff fe6f 	bl	8001ec4 <ILI9341_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 80021e6:	887b      	ldrh	r3, [r7, #2]
 80021e8:	0a1b      	lsrs	r3, r3, #8
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	733b      	strb	r3, [r7, #12]
 80021f0:	887b      	ldrh	r3, [r7, #2]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	737b      	strb	r3, [r7, #13]
    ILI9341_WriteData(data, sizeof(data));
 80021f6:	f107 030c 	add.w	r3, r7, #12
 80021fa:	2102      	movs	r1, #2
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff fe33 	bl	8001e68 <ILI9341_WriteData>

    ILI9341_Unselect();
 8002202:	f7ff fdf5 	bl	8001df0 <ILI9341_Unselect>
 8002206:	e000      	b.n	800220a <ILI9341_DrawPixel+0x5a>
        return;
 8002208:	bf00      	nop
}
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <ILI9341_WriteChar>:

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002210:	b082      	sub	sp, #8
 8002212:	b590      	push	{r4, r7, lr}
 8002214:	b089      	sub	sp, #36	; 0x24
 8002216:	af00      	add	r7, sp, #0
 8002218:	637b      	str	r3, [r7, #52]	; 0x34
 800221a:	4603      	mov	r3, r0
 800221c:	80fb      	strh	r3, [r7, #6]
 800221e:	460b      	mov	r3, r1
 8002220:	80bb      	strh	r3, [r7, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8002226:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800222a:	b29a      	uxth	r2, r3
 800222c:	88fb      	ldrh	r3, [r7, #6]
 800222e:	4413      	add	r3, r2
 8002230:	b29b      	uxth	r3, r3
 8002232:	3b01      	subs	r3, #1
 8002234:	b29c      	uxth	r4, r3
 8002236:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800223a:	b29a      	uxth	r2, r3
 800223c:	88bb      	ldrh	r3, [r7, #4]
 800223e:	4413      	add	r3, r2
 8002240:	b29b      	uxth	r3, r3
 8002242:	3b01      	subs	r3, #1
 8002244:	b29b      	uxth	r3, r3
 8002246:	88b9      	ldrh	r1, [r7, #4]
 8002248:	88f8      	ldrh	r0, [r7, #6]
 800224a:	4622      	mov	r2, r4
 800224c:	f7ff fe3a 	bl	8001ec4 <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8002250:	2300      	movs	r3, #0
 8002252:	61fb      	str	r3, [r7, #28]
 8002254:	e043      	b.n	80022de <ILI9341_WriteChar+0xce>
        b = font.data[(ch - 32) * font.height + i];
 8002256:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002258:	78fb      	ldrb	r3, [r7, #3]
 800225a:	3b20      	subs	r3, #32
 800225c:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002260:	fb01 f303 	mul.w	r3, r1, r3
 8002264:	4619      	mov	r1, r3
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	440b      	add	r3, r1
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	4413      	add	r3, r2
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8002272:	2300      	movs	r3, #0
 8002274:	61bb      	str	r3, [r7, #24]
 8002276:	e029      	b.n	80022cc <ILI9341_WriteChar+0xbc>
            if((b << j) & 0x8000)  {
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00e      	beq.n	80022a6 <ILI9341_WriteChar+0x96>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8002288:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800228a:	0a1b      	lsrs	r3, r3, #8
 800228c:	b29b      	uxth	r3, r3
 800228e:	b2db      	uxtb	r3, r3
 8002290:	743b      	strb	r3, [r7, #16]
 8002292:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002294:	b2db      	uxtb	r3, r3
 8002296:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 8002298:	f107 0310 	add.w	r3, r7, #16
 800229c:	2102      	movs	r1, #2
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff fde2 	bl	8001e68 <ILI9341_WriteData>
 80022a4:	e00f      	b.n	80022c6 <ILI9341_WriteChar+0xb6>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80022a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80022aa:	0a1b      	lsrs	r3, r3, #8
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	733b      	strb	r3, [r7, #12]
 80022b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 80022ba:	f107 030c 	add.w	r3, r7, #12
 80022be:	2102      	movs	r1, #2
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff fdd1 	bl	8001e68 <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	3301      	adds	r3, #1
 80022ca:	61bb      	str	r3, [r7, #24]
 80022cc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022d0:	461a      	mov	r2, r3
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d3cf      	bcc.n	8002278 <ILI9341_WriteChar+0x68>
    for(i = 0; i < font.height; i++) {
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	3301      	adds	r3, #1
 80022dc:	61fb      	str	r3, [r7, #28]
 80022de:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022e2:	461a      	mov	r2, r3
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d3b5      	bcc.n	8002256 <ILI9341_WriteChar+0x46>
            }
        }
    }
}
 80022ea:	bf00      	nop
 80022ec:	bf00      	nop
 80022ee:	3724      	adds	r7, #36	; 0x24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80022f6:	b002      	add	sp, #8
 80022f8:	4770      	bx	lr

080022fa <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80022fa:	b082      	sub	sp, #8
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af04      	add	r7, sp, #16
 8002302:	603a      	str	r2, [r7, #0]
 8002304:	617b      	str	r3, [r7, #20]
 8002306:	4603      	mov	r3, r0
 8002308:	80fb      	strh	r3, [r7, #6]
 800230a:	460b      	mov	r3, r1
 800230c:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 800230e:	f7ff fd63 	bl	8001dd8 <ILI9341_Select>

    while(*str) {
 8002312:	e02d      	b.n	8002370 <ILI9341_WriteString+0x76>
        if(x + font.width >= ILI9341_WIDTH) {
 8002314:	88fb      	ldrh	r3, [r7, #6]
 8002316:	7d3a      	ldrb	r2, [r7, #20]
 8002318:	4413      	add	r3, r2
 800231a:	2b9f      	cmp	r3, #159	; 0x9f
 800231c:	dd13      	ble.n	8002346 <ILI9341_WriteString+0x4c>
            x = 0;
 800231e:	2300      	movs	r3, #0
 8002320:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8002322:	7d7b      	ldrb	r3, [r7, #21]
 8002324:	b29a      	uxth	r2, r3
 8002326:	88bb      	ldrh	r3, [r7, #4]
 8002328:	4413      	add	r3, r2
 800232a:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 800232c:	88bb      	ldrh	r3, [r7, #4]
 800232e:	7d7a      	ldrb	r2, [r7, #21]
 8002330:	4413      	add	r3, r2
 8002332:	2b7f      	cmp	r3, #127	; 0x7f
 8002334:	dc21      	bgt.n	800237a <ILI9341_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b20      	cmp	r3, #32
 800233c:	d103      	bne.n	8002346 <ILI9341_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	3301      	adds	r3, #1
 8002342:	603b      	str	r3, [r7, #0]
                continue;
 8002344:	e014      	b.n	8002370 <ILI9341_WriteString+0x76>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	781a      	ldrb	r2, [r3, #0]
 800234a:	88b9      	ldrh	r1, [r7, #4]
 800234c:	88f8      	ldrh	r0, [r7, #6]
 800234e:	8c3b      	ldrh	r3, [r7, #32]
 8002350:	9302      	str	r3, [sp, #8]
 8002352:	8bbb      	ldrh	r3, [r7, #28]
 8002354:	9301      	str	r3, [sp, #4]
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f7ff ff58 	bl	8002210 <ILI9341_WriteChar>
        x += font.width;
 8002360:	7d3b      	ldrb	r3, [r7, #20]
 8002362:	b29a      	uxth	r2, r3
 8002364:	88fb      	ldrh	r3, [r7, #6]
 8002366:	4413      	add	r3, r2
 8002368:	80fb      	strh	r3, [r7, #6]
        str++;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	3301      	adds	r3, #1
 800236e:	603b      	str	r3, [r7, #0]
    while(*str) {
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1cd      	bne.n	8002314 <ILI9341_WriteString+0x1a>
 8002378:	e000      	b.n	800237c <ILI9341_WriteString+0x82>
                break;
 800237a:	bf00      	nop
    }

    ILI9341_Unselect();
 800237c:	f7ff fd38 	bl	8001df0 <ILI9341_Unselect>
}
 8002380:	bf00      	nop
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800238a:	b002      	add	sp, #8
 800238c:	4770      	bx	lr
	...

08002390 <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002390:	b590      	push	{r4, r7, lr}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	4604      	mov	r4, r0
 8002398:	4608      	mov	r0, r1
 800239a:	4611      	mov	r1, r2
 800239c:	461a      	mov	r2, r3
 800239e:	4623      	mov	r3, r4
 80023a0:	80fb      	strh	r3, [r7, #6]
 80023a2:	4603      	mov	r3, r0
 80023a4:	80bb      	strh	r3, [r7, #4]
 80023a6:	460b      	mov	r3, r1
 80023a8:	807b      	strh	r3, [r7, #2]
 80023aa:	4613      	mov	r3, r2
 80023ac:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 80023ae:	88fb      	ldrh	r3, [r7, #6]
 80023b0:	2b9f      	cmp	r3, #159	; 0x9f
 80023b2:	d852      	bhi.n	800245a <ILI9341_FillRectangle+0xca>
 80023b4:	88bb      	ldrh	r3, [r7, #4]
 80023b6:	2b7f      	cmp	r3, #127	; 0x7f
 80023b8:	d84f      	bhi.n	800245a <ILI9341_FillRectangle+0xca>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 80023ba:	88fa      	ldrh	r2, [r7, #6]
 80023bc:	887b      	ldrh	r3, [r7, #2]
 80023be:	4413      	add	r3, r2
 80023c0:	2ba0      	cmp	r3, #160	; 0xa0
 80023c2:	dd03      	ble.n	80023cc <ILI9341_FillRectangle+0x3c>
 80023c4:	88fb      	ldrh	r3, [r7, #6]
 80023c6:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80023ca:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 80023cc:	88ba      	ldrh	r2, [r7, #4]
 80023ce:	883b      	ldrh	r3, [r7, #0]
 80023d0:	4413      	add	r3, r2
 80023d2:	2b80      	cmp	r3, #128	; 0x80
 80023d4:	dd03      	ble.n	80023de <ILI9341_FillRectangle+0x4e>
 80023d6:	88bb      	ldrh	r3, [r7, #4]
 80023d8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80023dc:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 80023de:	f7ff fcfb 	bl	8001dd8 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 80023e2:	88fa      	ldrh	r2, [r7, #6]
 80023e4:	887b      	ldrh	r3, [r7, #2]
 80023e6:	4413      	add	r3, r2
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	3b01      	subs	r3, #1
 80023ec:	b29c      	uxth	r4, r3
 80023ee:	88ba      	ldrh	r2, [r7, #4]
 80023f0:	883b      	ldrh	r3, [r7, #0]
 80023f2:	4413      	add	r3, r2
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	88b9      	ldrh	r1, [r7, #4]
 80023fc:	88f8      	ldrh	r0, [r7, #6]
 80023fe:	4622      	mov	r2, r4
 8002400:	f7ff fd60 	bl	8001ec4 <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8002404:	8c3b      	ldrh	r3, [r7, #32]
 8002406:	0a1b      	lsrs	r3, r3, #8
 8002408:	b29b      	uxth	r3, r3
 800240a:	b2db      	uxtb	r3, r3
 800240c:	733b      	strb	r3, [r7, #12]
 800240e:	8c3b      	ldrh	r3, [r7, #32]
 8002410:	b2db      	uxtb	r3, r3
 8002412:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8002414:	2201      	movs	r2, #1
 8002416:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800241a:	4812      	ldr	r0, [pc, #72]	; (8002464 <ILI9341_FillRectangle+0xd4>)
 800241c:	f000 fe85 	bl	800312a <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8002420:	883b      	ldrh	r3, [r7, #0]
 8002422:	80bb      	strh	r3, [r7, #4]
 8002424:	e013      	b.n	800244e <ILI9341_FillRectangle+0xbe>
        for(x = w; x > 0; x--) {
 8002426:	887b      	ldrh	r3, [r7, #2]
 8002428:	80fb      	strh	r3, [r7, #6]
 800242a:	e00a      	b.n	8002442 <ILI9341_FillRectangle+0xb2>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800242c:	f107 010c 	add.w	r1, r7, #12
 8002430:	f04f 33ff 	mov.w	r3, #4294967295
 8002434:	2202      	movs	r2, #2
 8002436:	480c      	ldr	r0, [pc, #48]	; (8002468 <ILI9341_FillRectangle+0xd8>)
 8002438:	f004 f880 	bl	800653c <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800243c:	88fb      	ldrh	r3, [r7, #6]
 800243e:	3b01      	subs	r3, #1
 8002440:	80fb      	strh	r3, [r7, #6]
 8002442:	88fb      	ldrh	r3, [r7, #6]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1f1      	bne.n	800242c <ILI9341_FillRectangle+0x9c>
    for(y = h; y > 0; y--) {
 8002448:	88bb      	ldrh	r3, [r7, #4]
 800244a:	3b01      	subs	r3, #1
 800244c:	80bb      	strh	r3, [r7, #4]
 800244e:	88bb      	ldrh	r3, [r7, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1e8      	bne.n	8002426 <ILI9341_FillRectangle+0x96>
        }
    }

    ILI9341_Unselect();
 8002454:	f7ff fccc 	bl	8001df0 <ILI9341_Unselect>
 8002458:	e000      	b.n	800245c <ILI9341_FillRectangle+0xcc>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 800245a:	bf00      	nop
}
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	bd90      	pop	{r4, r7, pc}
 8002462:	bf00      	nop
 8002464:	40010800 	.word	0x40010800
 8002468:	2000024c 	.word	0x2000024c

0800246c <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af02      	add	r7, sp, #8
 8002472:	4603      	mov	r3, r0
 8002474:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8002476:	88fb      	ldrh	r3, [r7, #6]
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	2380      	movs	r3, #128	; 0x80
 800247c:	22a0      	movs	r2, #160	; 0xa0
 800247e:	2100      	movs	r1, #0
 8002480:	2000      	movs	r0, #0
 8002482:	f7ff ff85 	bl	8002390 <ILI9341_FillRectangle>
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <ILI9341_DrawLine>:
    ILI9341_WriteCommand(invert ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
    ILI9341_Unselect();
}


void ILI9341_DrawLine(struct point point_a, struct point point_b, uint16_t color) {
 800248e:	b590      	push	{r4, r7, lr}
 8002490:	b08b      	sub	sp, #44	; 0x2c
 8002492:	af00      	add	r7, sp, #0
 8002494:	81b8      	strh	r0, [r7, #12]
 8002496:	8139      	strh	r1, [r7, #8]
 8002498:	4613      	mov	r3, r2
 800249a:	80fb      	strh	r3, [r7, #6]
	uint16_t x = point_a.x;
 800249c:	7b3b      	ldrb	r3, [r7, #12]
 800249e:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t y = point_a.y;
 80024a0:	7b7b      	ldrb	r3, [r7, #13]
 80024a2:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t dx = point_b.x - point_a.x;
 80024a4:	7a3b      	ldrb	r3, [r7, #8]
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	7b3b      	ldrb	r3, [r7, #12]
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	83fb      	strh	r3, [r7, #30]
	uint16_t dy = point_b.y - point_a.y;
 80024b0:	7a7b      	ldrb	r3, [r7, #9]
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	7b7b      	ldrb	r3, [r7, #13]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	83bb      	strh	r3, [r7, #28]
	int steps = abs(dx) > abs(dy) ? abs(dx) : abs(dy);
 80024bc:	8bba      	ldrh	r2, [r7, #28]
 80024be:	8bfb      	ldrh	r3, [r7, #30]
 80024c0:	4293      	cmp	r3, r2
 80024c2:	bf38      	it	cc
 80024c4:	4613      	movcc	r3, r2
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	61bb      	str	r3, [r7, #24]
	float x_increment = dx / (float) steps;
 80024ca:	8bfb      	ldrh	r3, [r7, #30]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fe fbb5 	bl	8000c3c <__aeabi_i2f>
 80024d2:	4604      	mov	r4, r0
 80024d4:	69b8      	ldr	r0, [r7, #24]
 80024d6:	f7fe fbb1 	bl	8000c3c <__aeabi_i2f>
 80024da:	4603      	mov	r3, r0
 80024dc:	4619      	mov	r1, r3
 80024de:	4620      	mov	r0, r4
 80024e0:	f7fe fcb4 	bl	8000e4c <__aeabi_fdiv>
 80024e4:	4603      	mov	r3, r0
 80024e6:	617b      	str	r3, [r7, #20]
	float y_increment = dy / (float) steps;
 80024e8:	8bbb      	ldrh	r3, [r7, #28]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe fba6 	bl	8000c3c <__aeabi_i2f>
 80024f0:	4604      	mov	r4, r0
 80024f2:	69b8      	ldr	r0, [r7, #24]
 80024f4:	f7fe fba2 	bl	8000c3c <__aeabi_i2f>
 80024f8:	4603      	mov	r3, r0
 80024fa:	4619      	mov	r1, r3
 80024fc:	4620      	mov	r0, r4
 80024fe:	f7fe fca5 	bl	8000e4c <__aeabi_fdiv>
 8002502:	4603      	mov	r3, r0
 8002504:	613b      	str	r3, [r7, #16]

	for (int v = 0; v < steps; v++) {
 8002506:	2300      	movs	r3, #0
 8002508:	623b      	str	r3, [r7, #32]
 800250a:	e03d      	b.n	8002588 <ILI9341_DrawLine+0xfa>
		x = x + x_increment;
 800250c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe fb94 	bl	8000c3c <__aeabi_i2f>
 8002514:	4603      	mov	r3, r0
 8002516:	6979      	ldr	r1, [r7, #20]
 8002518:	4618      	mov	r0, r3
 800251a:	f7fe fadb 	bl	8000ad4 <__addsf3>
 800251e:	4603      	mov	r3, r0
 8002520:	4618      	mov	r0, r3
 8002522:	f7fe fd2f 	bl	8000f84 <__aeabi_f2uiz>
 8002526:	4603      	mov	r3, r0
 8002528:	84fb      	strh	r3, [r7, #38]	; 0x26
		y = y + y_increment;
 800252a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800252c:	4618      	mov	r0, r3
 800252e:	f7fe fb85 	bl	8000c3c <__aeabi_i2f>
 8002532:	4603      	mov	r3, r0
 8002534:	6939      	ldr	r1, [r7, #16]
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe facc 	bl	8000ad4 <__addsf3>
 800253c:	4603      	mov	r3, r0
 800253e:	4618      	mov	r0, r3
 8002540:	f7fe fd20 	bl	8000f84 <__aeabi_f2uiz>
 8002544:	4603      	mov	r3, r0
 8002546:	84bb      	strh	r3, [r7, #36]	; 0x24
		ILI9341_DrawPixel(round(x), round(y), color);
 8002548:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800254a:	4618      	mov	r0, r3
 800254c:	f7fd ff4a 	bl	80003e4 <__aeabi_ui2d>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4610      	mov	r0, r2
 8002556:	4619      	mov	r1, r3
 8002558:	f7fe fa96 	bl	8000a88 <__aeabi_d2uiz>
 800255c:	4603      	mov	r3, r0
 800255e:	b29c      	uxth	r4, r3
 8002560:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002562:	4618      	mov	r0, r3
 8002564:	f7fd ff3e 	bl	80003e4 <__aeabi_ui2d>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
 800256c:	4610      	mov	r0, r2
 800256e:	4619      	mov	r1, r3
 8002570:	f7fe fa8a 	bl	8000a88 <__aeabi_d2uiz>
 8002574:	4603      	mov	r3, r0
 8002576:	b29b      	uxth	r3, r3
 8002578:	88fa      	ldrh	r2, [r7, #6]
 800257a:	4619      	mov	r1, r3
 800257c:	4620      	mov	r0, r4
 800257e:	f7ff fe17 	bl	80021b0 <ILI9341_DrawPixel>
	for (int v = 0; v < steps; v++) {
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	3301      	adds	r3, #1
 8002586:	623b      	str	r3, [r7, #32]
 8002588:	6a3a      	ldr	r2, [r7, #32]
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	429a      	cmp	r2, r3
 800258e:	dbbd      	blt.n	800250c <ILI9341_DrawLine+0x7e>
	}



}
 8002590:	bf00      	nop
 8002592:	bf00      	nop
 8002594:	372c      	adds	r7, #44	; 0x2c
 8002596:	46bd      	mov	sp, r7
 8002598:	bd90      	pop	{r4, r7, pc}
	...

0800259c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025a0:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <HAL_Init+0x28>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a07      	ldr	r2, [pc, #28]	; (80025c4 <HAL_Init+0x28>)
 80025a6:	f043 0310 	orr.w	r3, r3, #16
 80025aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025ac:	2003      	movs	r0, #3
 80025ae:	f000 fb59 	bl	8002c64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025b2:	200f      	movs	r0, #15
 80025b4:	f000 f808 	bl	80025c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025b8:	f7ff f92a 	bl	8001810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40022000 	.word	0x40022000

080025c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025d0:	4b12      	ldr	r3, [pc, #72]	; (800261c <HAL_InitTick+0x54>)
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	4b12      	ldr	r3, [pc, #72]	; (8002620 <HAL_InitTick+0x58>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	4619      	mov	r1, r3
 80025da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025de:	fbb3 f3f1 	udiv	r3, r3, r1
 80025e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 fb71 	bl	8002cce <HAL_SYSTICK_Config>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e00e      	b.n	8002614 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b0f      	cmp	r3, #15
 80025fa:	d80a      	bhi.n	8002612 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025fc:	2200      	movs	r2, #0
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	f04f 30ff 	mov.w	r0, #4294967295
 8002604:	f000 fb39 	bl	8002c7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002608:	4a06      	ldr	r2, [pc, #24]	; (8002624 <HAL_InitTick+0x5c>)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	e000      	b.n	8002614 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
}
 8002614:	4618      	mov	r0, r3
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20000000 	.word	0x20000000
 8002620:	20000010 	.word	0x20000010
 8002624:	2000000c 	.word	0x2000000c

08002628 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800262c:	4b05      	ldr	r3, [pc, #20]	; (8002644 <HAL_IncTick+0x1c>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	461a      	mov	r2, r3
 8002632:	4b05      	ldr	r3, [pc, #20]	; (8002648 <HAL_IncTick+0x20>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4413      	add	r3, r2
 8002638:	4a03      	ldr	r2, [pc, #12]	; (8002648 <HAL_IncTick+0x20>)
 800263a:	6013      	str	r3, [r2, #0]
}
 800263c:	bf00      	nop
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr
 8002644:	20000010 	.word	0x20000010
 8002648:	2000056c 	.word	0x2000056c

0800264c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  return uwTick;
 8002650:	4b02      	ldr	r3, [pc, #8]	; (800265c <HAL_GetTick+0x10>)
 8002652:	681b      	ldr	r3, [r3, #0]
}
 8002654:	4618      	mov	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr
 800265c:	2000056c 	.word	0x2000056c

08002660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002668:	f7ff fff0 	bl	800264c <HAL_GetTick>
 800266c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002678:	d005      	beq.n	8002686 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800267a:	4b0a      	ldr	r3, [pc, #40]	; (80026a4 <HAL_Delay+0x44>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4413      	add	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002686:	bf00      	nop
 8002688:	f7ff ffe0 	bl	800264c <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	429a      	cmp	r2, r3
 8002696:	d8f7      	bhi.n	8002688 <HAL_Delay+0x28>
  {
  }
}
 8002698:	bf00      	nop
 800269a:	bf00      	nop
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20000010 	.word	0x20000010

080026a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80026bc:	2300      	movs	r3, #0
 80026be:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e0be      	b.n	8002848 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d109      	bne.n	80026ec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff f8c4 	bl	8001874 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f9ab 	bl	8002a48 <ADC_ConversionStop_Disable>
 80026f2:	4603      	mov	r3, r0
 80026f4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fa:	f003 0310 	and.w	r3, r3, #16
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f040 8099 	bne.w	8002836 <HAL_ADC_Init+0x18e>
 8002704:	7dfb      	ldrb	r3, [r7, #23]
 8002706:	2b00      	cmp	r3, #0
 8002708:	f040 8095 	bne.w	8002836 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002710:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002714:	f023 0302 	bic.w	r3, r3, #2
 8002718:	f043 0202 	orr.w	r2, r3, #2
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002728:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	7b1b      	ldrb	r3, [r3, #12]
 800272e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002730:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	4313      	orrs	r3, r2
 8002736:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002740:	d003      	beq.n	800274a <HAL_ADC_Init+0xa2>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d102      	bne.n	8002750 <HAL_ADC_Init+0xa8>
 800274a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800274e:	e000      	b.n	8002752 <HAL_ADC_Init+0xaa>
 8002750:	2300      	movs	r3, #0
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	4313      	orrs	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	7d1b      	ldrb	r3, [r3, #20]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d119      	bne.n	8002794 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	7b1b      	ldrb	r3, [r3, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d109      	bne.n	800277c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	3b01      	subs	r3, #1
 800276e:	035a      	lsls	r2, r3, #13
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002778:	613b      	str	r3, [r7, #16]
 800277a:	e00b      	b.n	8002794 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002780:	f043 0220 	orr.w	r2, r3, #32
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278c:	f043 0201 	orr.w	r2, r3, #1
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	4b28      	ldr	r3, [pc, #160]	; (8002850 <HAL_ADC_Init+0x1a8>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6812      	ldr	r2, [r2, #0]
 80027b6:	68b9      	ldr	r1, [r7, #8]
 80027b8:	430b      	orrs	r3, r1
 80027ba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027c4:	d003      	beq.n	80027ce <HAL_ADC_Init+0x126>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d104      	bne.n	80027d8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	051b      	lsls	r3, r3, #20
 80027d6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027de:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689a      	ldr	r2, [r3, #8]
 80027f2:	4b18      	ldr	r3, [pc, #96]	; (8002854 <HAL_ADC_Init+0x1ac>)
 80027f4:	4013      	ands	r3, r2
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d10b      	bne.n	8002814 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002806:	f023 0303 	bic.w	r3, r3, #3
 800280a:	f043 0201 	orr.w	r2, r3, #1
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002812:	e018      	b.n	8002846 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002818:	f023 0312 	bic.w	r3, r3, #18
 800281c:	f043 0210 	orr.w	r2, r3, #16
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002828:	f043 0201 	orr.w	r2, r3, #1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002834:	e007      	b.n	8002846 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283a:	f043 0210 	orr.w	r2, r3, #16
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002846:	7dfb      	ldrb	r3, [r7, #23]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	ffe1f7fd 	.word	0xffe1f7fd
 8002854:	ff1f0efe 	.word	0xff1f0efe

08002858 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002862:	2300      	movs	r3, #0
 8002864:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002866:	2300      	movs	r3, #0
 8002868:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002870:	2b01      	cmp	r3, #1
 8002872:	d101      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x20>
 8002874:	2302      	movs	r3, #2
 8002876:	e0dc      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x1da>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b06      	cmp	r3, #6
 8002886:	d81c      	bhi.n	80028c2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	3b05      	subs	r3, #5
 800289a:	221f      	movs	r2, #31
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	43db      	mvns	r3, r3
 80028a2:	4019      	ands	r1, r3
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	6818      	ldr	r0, [r3, #0]
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	4613      	mov	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	3b05      	subs	r3, #5
 80028b4:	fa00 f203 	lsl.w	r2, r0, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	430a      	orrs	r2, r1
 80028be:	635a      	str	r2, [r3, #52]	; 0x34
 80028c0:	e03c      	b.n	800293c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b0c      	cmp	r3, #12
 80028c8:	d81c      	bhi.n	8002904 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	3b23      	subs	r3, #35	; 0x23
 80028dc:	221f      	movs	r2, #31
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43db      	mvns	r3, r3
 80028e4:	4019      	ands	r1, r3
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	6818      	ldr	r0, [r3, #0]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	4613      	mov	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	3b23      	subs	r3, #35	; 0x23
 80028f6:	fa00 f203 	lsl.w	r2, r0, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	631a      	str	r2, [r3, #48]	; 0x30
 8002902:	e01b      	b.n	800293c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	3b41      	subs	r3, #65	; 0x41
 8002916:	221f      	movs	r2, #31
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	4019      	ands	r1, r3
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	6818      	ldr	r0, [r3, #0]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	4613      	mov	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	3b41      	subs	r3, #65	; 0x41
 8002930:	fa00 f203 	lsl.w	r2, r0, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b09      	cmp	r3, #9
 8002942:	d91c      	bls.n	800297e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68d9      	ldr	r1, [r3, #12]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	4613      	mov	r3, r2
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	4413      	add	r3, r2
 8002954:	3b1e      	subs	r3, #30
 8002956:	2207      	movs	r2, #7
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	43db      	mvns	r3, r3
 800295e:	4019      	ands	r1, r3
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	6898      	ldr	r0, [r3, #8]
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	4613      	mov	r3, r2
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	4413      	add	r3, r2
 800296e:	3b1e      	subs	r3, #30
 8002970:	fa00 f203 	lsl.w	r2, r0, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	60da      	str	r2, [r3, #12]
 800297c:	e019      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6919      	ldr	r1, [r3, #16]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	4613      	mov	r3, r2
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	4413      	add	r3, r2
 800298e:	2207      	movs	r2, #7
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	4019      	ands	r1, r3
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	6898      	ldr	r0, [r3, #8]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	4613      	mov	r3, r2
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	4413      	add	r3, r2
 80029a6:	fa00 f203 	lsl.w	r2, r0, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2b10      	cmp	r3, #16
 80029b8:	d003      	beq.n	80029c2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80029be:	2b11      	cmp	r3, #17
 80029c0:	d132      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a1d      	ldr	r2, [pc, #116]	; (8002a3c <HAL_ADC_ConfigChannel+0x1e4>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d125      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d126      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80029e8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2b10      	cmp	r3, #16
 80029f0:	d11a      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029f2:	4b13      	ldr	r3, [pc, #76]	; (8002a40 <HAL_ADC_ConfigChannel+0x1e8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a13      	ldr	r2, [pc, #76]	; (8002a44 <HAL_ADC_ConfigChannel+0x1ec>)
 80029f8:	fba2 2303 	umull	r2, r3, r2, r3
 80029fc:	0c9a      	lsrs	r2, r3, #18
 80029fe:	4613      	mov	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a08:	e002      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1f9      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x1b2>
 8002a16:	e007      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1c:	f043 0220 	orr.w	r2, r3, #32
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr
 8002a3c:	40012400 	.word	0x40012400
 8002a40:	20000000 	.word	0x20000000
 8002a44:	431bde83 	.word	0x431bde83

08002a48 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d12e      	bne.n	8002ac0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0201 	bic.w	r2, r2, #1
 8002a70:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a72:	f7ff fdeb 	bl	800264c <HAL_GetTick>
 8002a76:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a78:	e01b      	b.n	8002ab2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a7a:	f7ff fde7 	bl	800264c <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d914      	bls.n	8002ab2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d10d      	bne.n	8002ab2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9a:	f043 0210 	orr.w	r2, r3, #16
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa6:	f043 0201 	orr.w	r2, r3, #1
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e007      	b.n	8002ac2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d0dc      	beq.n	8002a7a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002adc:	4b0c      	ldr	r3, [pc, #48]	; (8002b10 <__NVIC_SetPriorityGrouping+0x44>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ae8:	4013      	ands	r3, r2
 8002aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002af4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002afe:	4a04      	ldr	r2, [pc, #16]	; (8002b10 <__NVIC_SetPriorityGrouping+0x44>)
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	60d3      	str	r3, [r2, #12]
}
 8002b04:	bf00      	nop
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	e000ed00 	.word	0xe000ed00

08002b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b18:	4b04      	ldr	r3, [pc, #16]	; (8002b2c <__NVIC_GetPriorityGrouping+0x18>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	0a1b      	lsrs	r3, r3, #8
 8002b1e:	f003 0307 	and.w	r3, r3, #7
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	db0b      	blt.n	8002b5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b42:	79fb      	ldrb	r3, [r7, #7]
 8002b44:	f003 021f 	and.w	r2, r3, #31
 8002b48:	4906      	ldr	r1, [pc, #24]	; (8002b64 <__NVIC_EnableIRQ+0x34>)
 8002b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4e:	095b      	lsrs	r3, r3, #5
 8002b50:	2001      	movs	r0, #1
 8002b52:	fa00 f202 	lsl.w	r2, r0, r2
 8002b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr
 8002b64:	e000e100 	.word	0xe000e100

08002b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	6039      	str	r1, [r7, #0]
 8002b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	db0a      	blt.n	8002b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	490c      	ldr	r1, [pc, #48]	; (8002bb4 <__NVIC_SetPriority+0x4c>)
 8002b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b86:	0112      	lsls	r2, r2, #4
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	440b      	add	r3, r1
 8002b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b90:	e00a      	b.n	8002ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	4908      	ldr	r1, [pc, #32]	; (8002bb8 <__NVIC_SetPriority+0x50>)
 8002b98:	79fb      	ldrb	r3, [r7, #7]
 8002b9a:	f003 030f 	and.w	r3, r3, #15
 8002b9e:	3b04      	subs	r3, #4
 8002ba0:	0112      	lsls	r2, r2, #4
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	761a      	strb	r2, [r3, #24]
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	e000e100 	.word	0xe000e100
 8002bb8:	e000ed00 	.word	0xe000ed00

08002bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b089      	sub	sp, #36	; 0x24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f1c3 0307 	rsb	r3, r3, #7
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	bf28      	it	cs
 8002bda:	2304      	movcs	r3, #4
 8002bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	3304      	adds	r3, #4
 8002be2:	2b06      	cmp	r3, #6
 8002be4:	d902      	bls.n	8002bec <NVIC_EncodePriority+0x30>
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	3b03      	subs	r3, #3
 8002bea:	e000      	b.n	8002bee <NVIC_EncodePriority+0x32>
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	43da      	mvns	r2, r3
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	401a      	ands	r2, r3
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c04:	f04f 31ff 	mov.w	r1, #4294967295
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0e:	43d9      	mvns	r1, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c14:	4313      	orrs	r3, r2
         );
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3724      	adds	r7, #36	; 0x24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr

08002c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c30:	d301      	bcc.n	8002c36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c32:	2301      	movs	r3, #1
 8002c34:	e00f      	b.n	8002c56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c36:	4a0a      	ldr	r2, [pc, #40]	; (8002c60 <SysTick_Config+0x40>)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c3e:	210f      	movs	r1, #15
 8002c40:	f04f 30ff 	mov.w	r0, #4294967295
 8002c44:	f7ff ff90 	bl	8002b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c48:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <SysTick_Config+0x40>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c4e:	4b04      	ldr	r3, [pc, #16]	; (8002c60 <SysTick_Config+0x40>)
 8002c50:	2207      	movs	r2, #7
 8002c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	e000e010 	.word	0xe000e010

08002c64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f7ff ff2d 	bl	8002acc <__NVIC_SetPriorityGrouping>
}
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b086      	sub	sp, #24
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	4603      	mov	r3, r0
 8002c82:	60b9      	str	r1, [r7, #8]
 8002c84:	607a      	str	r2, [r7, #4]
 8002c86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c8c:	f7ff ff42 	bl	8002b14 <__NVIC_GetPriorityGrouping>
 8002c90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	68b9      	ldr	r1, [r7, #8]
 8002c96:	6978      	ldr	r0, [r7, #20]
 8002c98:	f7ff ff90 	bl	8002bbc <NVIC_EncodePriority>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff ff5f 	bl	8002b68 <__NVIC_SetPriority>
}
 8002caa:	bf00      	nop
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	4603      	mov	r3, r0
 8002cba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff ff35 	bl	8002b30 <__NVIC_EnableIRQ>
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7ff ffa2 	bl	8002c20 <SysTick_Config>
 8002cdc:	4603      	mov	r3, r0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
	...

08002ce8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d005      	beq.n	8002d0c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2204      	movs	r2, #4
 8002d04:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	73fb      	strb	r3, [r7, #15]
 8002d0a:	e051      	b.n	8002db0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 020e 	bic.w	r2, r2, #14
 8002d1a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0201 	bic.w	r2, r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a22      	ldr	r2, [pc, #136]	; (8002dbc <HAL_DMA_Abort_IT+0xd4>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d029      	beq.n	8002d8a <HAL_DMA_Abort_IT+0xa2>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a21      	ldr	r2, [pc, #132]	; (8002dc0 <HAL_DMA_Abort_IT+0xd8>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d022      	beq.n	8002d86 <HAL_DMA_Abort_IT+0x9e>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a1f      	ldr	r2, [pc, #124]	; (8002dc4 <HAL_DMA_Abort_IT+0xdc>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d01a      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x98>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a1e      	ldr	r2, [pc, #120]	; (8002dc8 <HAL_DMA_Abort_IT+0xe0>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d012      	beq.n	8002d7a <HAL_DMA_Abort_IT+0x92>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a1c      	ldr	r2, [pc, #112]	; (8002dcc <HAL_DMA_Abort_IT+0xe4>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d00a      	beq.n	8002d74 <HAL_DMA_Abort_IT+0x8c>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a1b      	ldr	r2, [pc, #108]	; (8002dd0 <HAL_DMA_Abort_IT+0xe8>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d102      	bne.n	8002d6e <HAL_DMA_Abort_IT+0x86>
 8002d68:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d6c:	e00e      	b.n	8002d8c <HAL_DMA_Abort_IT+0xa4>
 8002d6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d72:	e00b      	b.n	8002d8c <HAL_DMA_Abort_IT+0xa4>
 8002d74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d78:	e008      	b.n	8002d8c <HAL_DMA_Abort_IT+0xa4>
 8002d7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d7e:	e005      	b.n	8002d8c <HAL_DMA_Abort_IT+0xa4>
 8002d80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d84:	e002      	b.n	8002d8c <HAL_DMA_Abort_IT+0xa4>
 8002d86:	2310      	movs	r3, #16
 8002d88:	e000      	b.n	8002d8c <HAL_DMA_Abort_IT+0xa4>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	4a11      	ldr	r2, [pc, #68]	; (8002dd4 <HAL_DMA_Abort_IT+0xec>)
 8002d8e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d003      	beq.n	8002db0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	4798      	blx	r3
    } 
  }
  return status;
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40020008 	.word	0x40020008
 8002dc0:	4002001c 	.word	0x4002001c
 8002dc4:	40020030 	.word	0x40020030
 8002dc8:	40020044 	.word	0x40020044
 8002dcc:	40020058 	.word	0x40020058
 8002dd0:	4002006c 	.word	0x4002006c
 8002dd4:	40020000 	.word	0x40020000

08002dd8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002de6:	b2db      	uxtb	r3, r3
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr
	...

08002df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b08b      	sub	sp, #44	; 0x2c
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e02:	2300      	movs	r3, #0
 8002e04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e06:	e169      	b.n	80030dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e08:	2201      	movs	r2, #1
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	69fa      	ldr	r2, [r7, #28]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	f040 8158 	bne.w	80030d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	4a9a      	ldr	r2, [pc, #616]	; (8003094 <HAL_GPIO_Init+0x2a0>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d05e      	beq.n	8002eee <HAL_GPIO_Init+0xfa>
 8002e30:	4a98      	ldr	r2, [pc, #608]	; (8003094 <HAL_GPIO_Init+0x2a0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d875      	bhi.n	8002f22 <HAL_GPIO_Init+0x12e>
 8002e36:	4a98      	ldr	r2, [pc, #608]	; (8003098 <HAL_GPIO_Init+0x2a4>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d058      	beq.n	8002eee <HAL_GPIO_Init+0xfa>
 8002e3c:	4a96      	ldr	r2, [pc, #600]	; (8003098 <HAL_GPIO_Init+0x2a4>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d86f      	bhi.n	8002f22 <HAL_GPIO_Init+0x12e>
 8002e42:	4a96      	ldr	r2, [pc, #600]	; (800309c <HAL_GPIO_Init+0x2a8>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d052      	beq.n	8002eee <HAL_GPIO_Init+0xfa>
 8002e48:	4a94      	ldr	r2, [pc, #592]	; (800309c <HAL_GPIO_Init+0x2a8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d869      	bhi.n	8002f22 <HAL_GPIO_Init+0x12e>
 8002e4e:	4a94      	ldr	r2, [pc, #592]	; (80030a0 <HAL_GPIO_Init+0x2ac>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d04c      	beq.n	8002eee <HAL_GPIO_Init+0xfa>
 8002e54:	4a92      	ldr	r2, [pc, #584]	; (80030a0 <HAL_GPIO_Init+0x2ac>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d863      	bhi.n	8002f22 <HAL_GPIO_Init+0x12e>
 8002e5a:	4a92      	ldr	r2, [pc, #584]	; (80030a4 <HAL_GPIO_Init+0x2b0>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d046      	beq.n	8002eee <HAL_GPIO_Init+0xfa>
 8002e60:	4a90      	ldr	r2, [pc, #576]	; (80030a4 <HAL_GPIO_Init+0x2b0>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d85d      	bhi.n	8002f22 <HAL_GPIO_Init+0x12e>
 8002e66:	2b12      	cmp	r3, #18
 8002e68:	d82a      	bhi.n	8002ec0 <HAL_GPIO_Init+0xcc>
 8002e6a:	2b12      	cmp	r3, #18
 8002e6c:	d859      	bhi.n	8002f22 <HAL_GPIO_Init+0x12e>
 8002e6e:	a201      	add	r2, pc, #4	; (adr r2, 8002e74 <HAL_GPIO_Init+0x80>)
 8002e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e74:	08002eef 	.word	0x08002eef
 8002e78:	08002ec9 	.word	0x08002ec9
 8002e7c:	08002edb 	.word	0x08002edb
 8002e80:	08002f1d 	.word	0x08002f1d
 8002e84:	08002f23 	.word	0x08002f23
 8002e88:	08002f23 	.word	0x08002f23
 8002e8c:	08002f23 	.word	0x08002f23
 8002e90:	08002f23 	.word	0x08002f23
 8002e94:	08002f23 	.word	0x08002f23
 8002e98:	08002f23 	.word	0x08002f23
 8002e9c:	08002f23 	.word	0x08002f23
 8002ea0:	08002f23 	.word	0x08002f23
 8002ea4:	08002f23 	.word	0x08002f23
 8002ea8:	08002f23 	.word	0x08002f23
 8002eac:	08002f23 	.word	0x08002f23
 8002eb0:	08002f23 	.word	0x08002f23
 8002eb4:	08002f23 	.word	0x08002f23
 8002eb8:	08002ed1 	.word	0x08002ed1
 8002ebc:	08002ee5 	.word	0x08002ee5
 8002ec0:	4a79      	ldr	r2, [pc, #484]	; (80030a8 <HAL_GPIO_Init+0x2b4>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d013      	beq.n	8002eee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ec6:	e02c      	b.n	8002f22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	623b      	str	r3, [r7, #32]
          break;
 8002ece:	e029      	b.n	8002f24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	623b      	str	r3, [r7, #32]
          break;
 8002ed8:	e024      	b.n	8002f24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	3308      	adds	r3, #8
 8002ee0:	623b      	str	r3, [r7, #32]
          break;
 8002ee2:	e01f      	b.n	8002f24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	330c      	adds	r3, #12
 8002eea:	623b      	str	r3, [r7, #32]
          break;
 8002eec:	e01a      	b.n	8002f24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d102      	bne.n	8002efc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ef6:	2304      	movs	r3, #4
 8002ef8:	623b      	str	r3, [r7, #32]
          break;
 8002efa:	e013      	b.n	8002f24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d105      	bne.n	8002f10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f04:	2308      	movs	r3, #8
 8002f06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	69fa      	ldr	r2, [r7, #28]
 8002f0c:	611a      	str	r2, [r3, #16]
          break;
 8002f0e:	e009      	b.n	8002f24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f10:	2308      	movs	r3, #8
 8002f12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	69fa      	ldr	r2, [r7, #28]
 8002f18:	615a      	str	r2, [r3, #20]
          break;
 8002f1a:	e003      	b.n	8002f24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	623b      	str	r3, [r7, #32]
          break;
 8002f20:	e000      	b.n	8002f24 <HAL_GPIO_Init+0x130>
          break;
 8002f22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	2bff      	cmp	r3, #255	; 0xff
 8002f28:	d801      	bhi.n	8002f2e <HAL_GPIO_Init+0x13a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	e001      	b.n	8002f32 <HAL_GPIO_Init+0x13e>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	3304      	adds	r3, #4
 8002f32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	2bff      	cmp	r3, #255	; 0xff
 8002f38:	d802      	bhi.n	8002f40 <HAL_GPIO_Init+0x14c>
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	e002      	b.n	8002f46 <HAL_GPIO_Init+0x152>
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	3b08      	subs	r3, #8
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	210f      	movs	r1, #15
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	fa01 f303 	lsl.w	r3, r1, r3
 8002f54:	43db      	mvns	r3, r3
 8002f56:	401a      	ands	r2, r3
 8002f58:	6a39      	ldr	r1, [r7, #32]
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f60:	431a      	orrs	r2, r3
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 80b1 	beq.w	80030d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f74:	4b4d      	ldr	r3, [pc, #308]	; (80030ac <HAL_GPIO_Init+0x2b8>)
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	4a4c      	ldr	r2, [pc, #304]	; (80030ac <HAL_GPIO_Init+0x2b8>)
 8002f7a:	f043 0301 	orr.w	r3, r3, #1
 8002f7e:	6193      	str	r3, [r2, #24]
 8002f80:	4b4a      	ldr	r3, [pc, #296]	; (80030ac <HAL_GPIO_Init+0x2b8>)
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	60bb      	str	r3, [r7, #8]
 8002f8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f8c:	4a48      	ldr	r2, [pc, #288]	; (80030b0 <HAL_GPIO_Init+0x2bc>)
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	089b      	lsrs	r3, r3, #2
 8002f92:	3302      	adds	r3, #2
 8002f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9c:	f003 0303 	and.w	r3, r3, #3
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	220f      	movs	r2, #15
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	4013      	ands	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a40      	ldr	r2, [pc, #256]	; (80030b4 <HAL_GPIO_Init+0x2c0>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d013      	beq.n	8002fe0 <HAL_GPIO_Init+0x1ec>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a3f      	ldr	r2, [pc, #252]	; (80030b8 <HAL_GPIO_Init+0x2c4>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d00d      	beq.n	8002fdc <HAL_GPIO_Init+0x1e8>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a3e      	ldr	r2, [pc, #248]	; (80030bc <HAL_GPIO_Init+0x2c8>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d007      	beq.n	8002fd8 <HAL_GPIO_Init+0x1e4>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a3d      	ldr	r2, [pc, #244]	; (80030c0 <HAL_GPIO_Init+0x2cc>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d101      	bne.n	8002fd4 <HAL_GPIO_Init+0x1e0>
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e006      	b.n	8002fe2 <HAL_GPIO_Init+0x1ee>
 8002fd4:	2304      	movs	r3, #4
 8002fd6:	e004      	b.n	8002fe2 <HAL_GPIO_Init+0x1ee>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e002      	b.n	8002fe2 <HAL_GPIO_Init+0x1ee>
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e000      	b.n	8002fe2 <HAL_GPIO_Init+0x1ee>
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe4:	f002 0203 	and.w	r2, r2, #3
 8002fe8:	0092      	lsls	r2, r2, #2
 8002fea:	4093      	lsls	r3, r2
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ff2:	492f      	ldr	r1, [pc, #188]	; (80030b0 <HAL_GPIO_Init+0x2bc>)
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	089b      	lsrs	r3, r3, #2
 8002ff8:	3302      	adds	r3, #2
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d006      	beq.n	800301a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800300c:	4b2d      	ldr	r3, [pc, #180]	; (80030c4 <HAL_GPIO_Init+0x2d0>)
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	492c      	ldr	r1, [pc, #176]	; (80030c4 <HAL_GPIO_Init+0x2d0>)
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	4313      	orrs	r3, r2
 8003016:	608b      	str	r3, [r1, #8]
 8003018:	e006      	b.n	8003028 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800301a:	4b2a      	ldr	r3, [pc, #168]	; (80030c4 <HAL_GPIO_Init+0x2d0>)
 800301c:	689a      	ldr	r2, [r3, #8]
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	43db      	mvns	r3, r3
 8003022:	4928      	ldr	r1, [pc, #160]	; (80030c4 <HAL_GPIO_Init+0x2d0>)
 8003024:	4013      	ands	r3, r2
 8003026:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d006      	beq.n	8003042 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003034:	4b23      	ldr	r3, [pc, #140]	; (80030c4 <HAL_GPIO_Init+0x2d0>)
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	4922      	ldr	r1, [pc, #136]	; (80030c4 <HAL_GPIO_Init+0x2d0>)
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	4313      	orrs	r3, r2
 800303e:	60cb      	str	r3, [r1, #12]
 8003040:	e006      	b.n	8003050 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003042:	4b20      	ldr	r3, [pc, #128]	; (80030c4 <HAL_GPIO_Init+0x2d0>)
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	43db      	mvns	r3, r3
 800304a:	491e      	ldr	r1, [pc, #120]	; (80030c4 <HAL_GPIO_Init+0x2d0>)
 800304c:	4013      	ands	r3, r2
 800304e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d006      	beq.n	800306a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800305c:	4b19      	ldr	r3, [pc, #100]	; (80030c4 <HAL_GPIO_Init+0x2d0>)
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	4918      	ldr	r1, [pc, #96]	; (80030c4 <HAL_GPIO_Init+0x2d0>)
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	4313      	orrs	r3, r2
 8003066:	604b      	str	r3, [r1, #4]
 8003068:	e006      	b.n	8003078 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800306a:	4b16      	ldr	r3, [pc, #88]	; (80030c4 <HAL_GPIO_Init+0x2d0>)
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	43db      	mvns	r3, r3
 8003072:	4914      	ldr	r1, [pc, #80]	; (80030c4 <HAL_GPIO_Init+0x2d0>)
 8003074:	4013      	ands	r3, r2
 8003076:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d021      	beq.n	80030c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003084:	4b0f      	ldr	r3, [pc, #60]	; (80030c4 <HAL_GPIO_Init+0x2d0>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	490e      	ldr	r1, [pc, #56]	; (80030c4 <HAL_GPIO_Init+0x2d0>)
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	4313      	orrs	r3, r2
 800308e:	600b      	str	r3, [r1, #0]
 8003090:	e021      	b.n	80030d6 <HAL_GPIO_Init+0x2e2>
 8003092:	bf00      	nop
 8003094:	10320000 	.word	0x10320000
 8003098:	10310000 	.word	0x10310000
 800309c:	10220000 	.word	0x10220000
 80030a0:	10210000 	.word	0x10210000
 80030a4:	10120000 	.word	0x10120000
 80030a8:	10110000 	.word	0x10110000
 80030ac:	40021000 	.word	0x40021000
 80030b0:	40010000 	.word	0x40010000
 80030b4:	40010800 	.word	0x40010800
 80030b8:	40010c00 	.word	0x40010c00
 80030bc:	40011000 	.word	0x40011000
 80030c0:	40011400 	.word	0x40011400
 80030c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030c8:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <HAL_GPIO_Init+0x304>)
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	43db      	mvns	r3, r3
 80030d0:	4909      	ldr	r1, [pc, #36]	; (80030f8 <HAL_GPIO_Init+0x304>)
 80030d2:	4013      	ands	r3, r2
 80030d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	3301      	adds	r3, #1
 80030da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	fa22 f303 	lsr.w	r3, r2, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f47f ae8e 	bne.w	8002e08 <HAL_GPIO_Init+0x14>
  }
}
 80030ec:	bf00      	nop
 80030ee:	bf00      	nop
 80030f0:	372c      	adds	r7, #44	; 0x2c
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr
 80030f8:	40010400 	.word	0x40010400

080030fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	460b      	mov	r3, r1
 8003106:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	887b      	ldrh	r3, [r7, #2]
 800310e:	4013      	ands	r3, r2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003114:	2301      	movs	r3, #1
 8003116:	73fb      	strb	r3, [r7, #15]
 8003118:	e001      	b.n	800311e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800311a:	2300      	movs	r3, #0
 800311c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800311e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr

0800312a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
 8003132:	460b      	mov	r3, r1
 8003134:	807b      	strh	r3, [r7, #2]
 8003136:	4613      	mov	r3, r2
 8003138:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800313a:	787b      	ldrb	r3, [r7, #1]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d003      	beq.n	8003148 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003140:	887a      	ldrh	r2, [r7, #2]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003146:	e003      	b.n	8003150 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003148:	887b      	ldrh	r3, [r7, #2]
 800314a:	041a      	lsls	r2, r3, #16
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	611a      	str	r2, [r3, #16]
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr
	...

0800315c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e12b      	b.n	80033c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d106      	bne.n	8003188 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7fe fbb2 	bl	80018ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2224      	movs	r2, #36	; 0x24
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0201 	bic.w	r2, r2, #1
 800319e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031c0:	f002 f9de 	bl	8005580 <HAL_RCC_GetPCLK1Freq>
 80031c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	4a81      	ldr	r2, [pc, #516]	; (80033d0 <HAL_I2C_Init+0x274>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d807      	bhi.n	80031e0 <HAL_I2C_Init+0x84>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4a80      	ldr	r2, [pc, #512]	; (80033d4 <HAL_I2C_Init+0x278>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	bf94      	ite	ls
 80031d8:	2301      	movls	r3, #1
 80031da:	2300      	movhi	r3, #0
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	e006      	b.n	80031ee <HAL_I2C_Init+0x92>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4a7d      	ldr	r2, [pc, #500]	; (80033d8 <HAL_I2C_Init+0x27c>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	bf94      	ite	ls
 80031e8:	2301      	movls	r3, #1
 80031ea:	2300      	movhi	r3, #0
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e0e7      	b.n	80033c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	4a78      	ldr	r2, [pc, #480]	; (80033dc <HAL_I2C_Init+0x280>)
 80031fa:	fba2 2303 	umull	r2, r3, r2, r3
 80031fe:	0c9b      	lsrs	r3, r3, #18
 8003200:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	430a      	orrs	r2, r1
 8003214:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	4a6a      	ldr	r2, [pc, #424]	; (80033d0 <HAL_I2C_Init+0x274>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d802      	bhi.n	8003230 <HAL_I2C_Init+0xd4>
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	3301      	adds	r3, #1
 800322e:	e009      	b.n	8003244 <HAL_I2C_Init+0xe8>
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003236:	fb02 f303 	mul.w	r3, r2, r3
 800323a:	4a69      	ldr	r2, [pc, #420]	; (80033e0 <HAL_I2C_Init+0x284>)
 800323c:	fba2 2303 	umull	r2, r3, r2, r3
 8003240:	099b      	lsrs	r3, r3, #6
 8003242:	3301      	adds	r3, #1
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6812      	ldr	r2, [r2, #0]
 8003248:	430b      	orrs	r3, r1
 800324a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003256:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	495c      	ldr	r1, [pc, #368]	; (80033d0 <HAL_I2C_Init+0x274>)
 8003260:	428b      	cmp	r3, r1
 8003262:	d819      	bhi.n	8003298 <HAL_I2C_Init+0x13c>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	1e59      	subs	r1, r3, #1
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003272:	1c59      	adds	r1, r3, #1
 8003274:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003278:	400b      	ands	r3, r1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00a      	beq.n	8003294 <HAL_I2C_Init+0x138>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	1e59      	subs	r1, r3, #1
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	fbb1 f3f3 	udiv	r3, r1, r3
 800328c:	3301      	adds	r3, #1
 800328e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003292:	e051      	b.n	8003338 <HAL_I2C_Init+0x1dc>
 8003294:	2304      	movs	r3, #4
 8003296:	e04f      	b.n	8003338 <HAL_I2C_Init+0x1dc>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d111      	bne.n	80032c4 <HAL_I2C_Init+0x168>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	1e58      	subs	r0, r3, #1
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6859      	ldr	r1, [r3, #4]
 80032a8:	460b      	mov	r3, r1
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	440b      	add	r3, r1
 80032ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80032b2:	3301      	adds	r3, #1
 80032b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	bf0c      	ite	eq
 80032bc:	2301      	moveq	r3, #1
 80032be:	2300      	movne	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	e012      	b.n	80032ea <HAL_I2C_Init+0x18e>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	1e58      	subs	r0, r3, #1
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6859      	ldr	r1, [r3, #4]
 80032cc:	460b      	mov	r3, r1
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	0099      	lsls	r1, r3, #2
 80032d4:	440b      	add	r3, r1
 80032d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032da:	3301      	adds	r3, #1
 80032dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	bf0c      	ite	eq
 80032e4:	2301      	moveq	r3, #1
 80032e6:	2300      	movne	r3, #0
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <HAL_I2C_Init+0x196>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e022      	b.n	8003338 <HAL_I2C_Init+0x1dc>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10e      	bne.n	8003318 <HAL_I2C_Init+0x1bc>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	1e58      	subs	r0, r3, #1
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6859      	ldr	r1, [r3, #4]
 8003302:	460b      	mov	r3, r1
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	440b      	add	r3, r1
 8003308:	fbb0 f3f3 	udiv	r3, r0, r3
 800330c:	3301      	adds	r3, #1
 800330e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003316:	e00f      	b.n	8003338 <HAL_I2C_Init+0x1dc>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	1e58      	subs	r0, r3, #1
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6859      	ldr	r1, [r3, #4]
 8003320:	460b      	mov	r3, r1
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	0099      	lsls	r1, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	fbb0 f3f3 	udiv	r3, r0, r3
 800332e:	3301      	adds	r3, #1
 8003330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003334:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	6809      	ldr	r1, [r1, #0]
 800333c:	4313      	orrs	r3, r2
 800333e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	69da      	ldr	r2, [r3, #28]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003366:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6911      	ldr	r1, [r2, #16]
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	68d2      	ldr	r2, [r2, #12]
 8003372:	4311      	orrs	r1, r2
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6812      	ldr	r2, [r2, #0]
 8003378:	430b      	orrs	r3, r1
 800337a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	695a      	ldr	r2, [r3, #20]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	431a      	orrs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0201 	orr.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2220      	movs	r2, #32
 80033b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	000186a0 	.word	0x000186a0
 80033d4:	001e847f 	.word	0x001e847f
 80033d8:	003d08ff 	.word	0x003d08ff
 80033dc:	431bde83 	.word	0x431bde83
 80033e0:	10624dd3 	.word	0x10624dd3

080033e4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f6:	2b80      	cmp	r3, #128	; 0x80
 80033f8:	d103      	bne.n	8003402 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2200      	movs	r2, #0
 8003400:	611a      	str	r2, [r3, #16]
  }
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr

0800340c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800342c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003434:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003436:	7bfb      	ldrb	r3, [r7, #15]
 8003438:	2b10      	cmp	r3, #16
 800343a:	d003      	beq.n	8003444 <HAL_I2C_EV_IRQHandler+0x38>
 800343c:	7bfb      	ldrb	r3, [r7, #15]
 800343e:	2b40      	cmp	r3, #64	; 0x40
 8003440:	f040 80c1 	bne.w	80035c6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10d      	bne.n	800347a <HAL_I2C_EV_IRQHandler+0x6e>
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003464:	d003      	beq.n	800346e <HAL_I2C_EV_IRQHandler+0x62>
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800346c:	d101      	bne.n	8003472 <HAL_I2C_EV_IRQHandler+0x66>
 800346e:	2301      	movs	r3, #1
 8003470:	e000      	b.n	8003474 <HAL_I2C_EV_IRQHandler+0x68>
 8003472:	2300      	movs	r3, #0
 8003474:	2b01      	cmp	r3, #1
 8003476:	f000 8132 	beq.w	80036de <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00c      	beq.n	800349e <HAL_I2C_EV_IRQHandler+0x92>
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	0a5b      	lsrs	r3, r3, #9
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b00      	cmp	r3, #0
 800348e:	d006      	beq.n	800349e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f001 fc87 	bl	8004da4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 fd85 	bl	8003fa6 <I2C_Master_SB>
 800349c:	e092      	b.n	80035c4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	08db      	lsrs	r3, r3, #3
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d009      	beq.n	80034be <HAL_I2C_EV_IRQHandler+0xb2>
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	0a5b      	lsrs	r3, r3, #9
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 fdfa 	bl	80040b0 <I2C_Master_ADD10>
 80034bc:	e082      	b.n	80035c4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	085b      	lsrs	r3, r3, #1
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d009      	beq.n	80034de <HAL_I2C_EV_IRQHandler+0xd2>
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	0a5b      	lsrs	r3, r3, #9
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 fe13 	bl	8004102 <I2C_Master_ADDR>
 80034dc:	e072      	b.n	80035c4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	089b      	lsrs	r3, r3, #2
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d03b      	beq.n	8003562 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034f8:	f000 80f3 	beq.w	80036e2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	09db      	lsrs	r3, r3, #7
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00f      	beq.n	8003528 <HAL_I2C_EV_IRQHandler+0x11c>
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	0a9b      	lsrs	r3, r3, #10
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b00      	cmp	r3, #0
 8003512:	d009      	beq.n	8003528 <HAL_I2C_EV_IRQHandler+0x11c>
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	089b      	lsrs	r3, r3, #2
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b00      	cmp	r3, #0
 800351e:	d103      	bne.n	8003528 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f9f1 	bl	8003908 <I2C_MasterTransmit_TXE>
 8003526:	e04d      	b.n	80035c4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	089b      	lsrs	r3, r3, #2
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 80d6 	beq.w	80036e2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	0a5b      	lsrs	r3, r3, #9
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 80cf 	beq.w	80036e2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003544:	7bbb      	ldrb	r3, [r7, #14]
 8003546:	2b21      	cmp	r3, #33	; 0x21
 8003548:	d103      	bne.n	8003552 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 fa78 	bl	8003a40 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003550:	e0c7      	b.n	80036e2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003552:	7bfb      	ldrb	r3, [r7, #15]
 8003554:	2b40      	cmp	r3, #64	; 0x40
 8003556:	f040 80c4 	bne.w	80036e2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 fae6 	bl	8003b2c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003560:	e0bf      	b.n	80036e2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800356c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003570:	f000 80b7 	beq.w	80036e2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	099b      	lsrs	r3, r3, #6
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00f      	beq.n	80035a0 <HAL_I2C_EV_IRQHandler+0x194>
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	0a9b      	lsrs	r3, r3, #10
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	d009      	beq.n	80035a0 <HAL_I2C_EV_IRQHandler+0x194>
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	089b      	lsrs	r3, r3, #2
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b00      	cmp	r3, #0
 8003596:	d103      	bne.n	80035a0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 fb5f 	bl	8003c5c <I2C_MasterReceive_RXNE>
 800359e:	e011      	b.n	80035c4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	089b      	lsrs	r3, r3, #2
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 809a 	beq.w	80036e2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	0a5b      	lsrs	r3, r3, #9
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 8093 	beq.w	80036e2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 fc08 	bl	8003dd2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035c2:	e08e      	b.n	80036e2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80035c4:	e08d      	b.n	80036e2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d004      	beq.n	80035d8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	61fb      	str	r3, [r7, #28]
 80035d6:	e007      	b.n	80035e8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	085b      	lsrs	r3, r3, #1
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d012      	beq.n	800361a <HAL_I2C_EV_IRQHandler+0x20e>
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	0a5b      	lsrs	r3, r3, #9
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00c      	beq.n	800361a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003610:	69b9      	ldr	r1, [r7, #24]
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 ffcc 	bl	80045b0 <I2C_Slave_ADDR>
 8003618:	e066      	b.n	80036e8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	091b      	lsrs	r3, r3, #4
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d009      	beq.n	800363a <HAL_I2C_EV_IRQHandler+0x22e>
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	0a5b      	lsrs	r3, r3, #9
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f001 f806 	bl	8004644 <I2C_Slave_STOPF>
 8003638:	e056      	b.n	80036e8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800363a:	7bbb      	ldrb	r3, [r7, #14]
 800363c:	2b21      	cmp	r3, #33	; 0x21
 800363e:	d002      	beq.n	8003646 <HAL_I2C_EV_IRQHandler+0x23a>
 8003640:	7bbb      	ldrb	r3, [r7, #14]
 8003642:	2b29      	cmp	r3, #41	; 0x29
 8003644:	d125      	bne.n	8003692 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	09db      	lsrs	r3, r3, #7
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00f      	beq.n	8003672 <HAL_I2C_EV_IRQHandler+0x266>
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	0a9b      	lsrs	r3, r3, #10
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d009      	beq.n	8003672 <HAL_I2C_EV_IRQHandler+0x266>
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	089b      	lsrs	r3, r3, #2
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d103      	bne.n	8003672 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 fee4 	bl	8004438 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003670:	e039      	b.n	80036e6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	089b      	lsrs	r3, r3, #2
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d033      	beq.n	80036e6 <HAL_I2C_EV_IRQHandler+0x2da>
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	0a5b      	lsrs	r3, r3, #9
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d02d      	beq.n	80036e6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 ff11 	bl	80044b2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003690:	e029      	b.n	80036e6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	099b      	lsrs	r3, r3, #6
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00f      	beq.n	80036be <HAL_I2C_EV_IRQHandler+0x2b2>
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	0a9b      	lsrs	r3, r3, #10
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d009      	beq.n	80036be <HAL_I2C_EV_IRQHandler+0x2b2>
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	089b      	lsrs	r3, r3, #2
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d103      	bne.n	80036be <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 ff1b 	bl	80044f2 <I2C_SlaveReceive_RXNE>
 80036bc:	e014      	b.n	80036e8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	089b      	lsrs	r3, r3, #2
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00e      	beq.n	80036e8 <HAL_I2C_EV_IRQHandler+0x2dc>
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	0a5b      	lsrs	r3, r3, #9
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d008      	beq.n	80036e8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 ff49 	bl	800456e <I2C_SlaveReceive_BTF>
 80036dc:	e004      	b.n	80036e8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80036de:	bf00      	nop
 80036e0:	e002      	b.n	80036e8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036e2:	bf00      	nop
 80036e4:	e000      	b.n	80036e8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036e6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80036e8:	3720      	adds	r7, #32
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b08a      	sub	sp, #40	; 0x28
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003706:	2300      	movs	r3, #0
 8003708:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003710:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	0a1b      	lsrs	r3, r3, #8
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d016      	beq.n	800374c <HAL_I2C_ER_IRQHandler+0x5e>
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	0a1b      	lsrs	r3, r3, #8
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d010      	beq.n	800374c <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	f043 0301 	orr.w	r3, r3, #1
 8003730:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800373a:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800374a:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	0a5b      	lsrs	r3, r3, #9
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00e      	beq.n	8003776 <HAL_I2C_ER_IRQHandler+0x88>
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	0a1b      	lsrs	r3, r3, #8
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b00      	cmp	r3, #0
 8003762:	d008      	beq.n	8003776 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	f043 0302 	orr.w	r3, r3, #2
 800376a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003774:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	0a9b      	lsrs	r3, r3, #10
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d03f      	beq.n	8003802 <HAL_I2C_ER_IRQHandler+0x114>
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	0a1b      	lsrs	r3, r3, #8
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d039      	beq.n	8003802 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 800378e:	7efb      	ldrb	r3, [r7, #27]
 8003790:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003796:	b29b      	uxth	r3, r3
 8003798:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80037a8:	7ebb      	ldrb	r3, [r7, #26]
 80037aa:	2b20      	cmp	r3, #32
 80037ac:	d112      	bne.n	80037d4 <HAL_I2C_ER_IRQHandler+0xe6>
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10f      	bne.n	80037d4 <HAL_I2C_ER_IRQHandler+0xe6>
 80037b4:	7cfb      	ldrb	r3, [r7, #19]
 80037b6:	2b21      	cmp	r3, #33	; 0x21
 80037b8:	d008      	beq.n	80037cc <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80037ba:	7cfb      	ldrb	r3, [r7, #19]
 80037bc:	2b29      	cmp	r3, #41	; 0x29
 80037be:	d005      	beq.n	80037cc <HAL_I2C_ER_IRQHandler+0xde>
 80037c0:	7cfb      	ldrb	r3, [r7, #19]
 80037c2:	2b28      	cmp	r3, #40	; 0x28
 80037c4:	d106      	bne.n	80037d4 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2b21      	cmp	r3, #33	; 0x21
 80037ca:	d103      	bne.n	80037d4 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f001 f869 	bl	80048a4 <I2C_Slave_AF>
 80037d2:	e016      	b.n	8003802 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037dc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	f043 0304 	orr.w	r3, r3, #4
 80037e4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80037e6:	7efb      	ldrb	r3, [r7, #27]
 80037e8:	2b10      	cmp	r3, #16
 80037ea:	d002      	beq.n	80037f2 <HAL_I2C_ER_IRQHandler+0x104>
 80037ec:	7efb      	ldrb	r3, [r7, #27]
 80037ee:	2b40      	cmp	r3, #64	; 0x40
 80037f0:	d107      	bne.n	8003802 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003800:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003802:	6a3b      	ldr	r3, [r7, #32]
 8003804:	0adb      	lsrs	r3, r3, #11
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00e      	beq.n	800382c <HAL_I2C_ER_IRQHandler+0x13e>
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	0a1b      	lsrs	r3, r3, #8
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d008      	beq.n	800382c <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381c:	f043 0308 	orr.w	r3, r3, #8
 8003820:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800382a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382e:	2b00      	cmp	r3, #0
 8003830:	d008      	beq.n	8003844 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	431a      	orrs	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f001 f8a4 	bl	800498c <I2C_ITError>
  }
}
 8003844:	bf00      	nop
 8003846:	3728      	adds	r7, #40	; 0x28
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	bc80      	pop	{r7}
 800385c:	4770      	bx	lr

0800385e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	bc80      	pop	{r7}
 800386e:	4770      	bx	lr

08003870 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	bc80      	pop	{r7}
 8003880:	4770      	bx	lr

08003882 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr

08003894 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	460b      	mov	r3, r1
 800389e:	70fb      	strb	r3, [r7, #3]
 80038a0:	4613      	mov	r3, r2
 80038a2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bc80      	pop	{r7}
 80038ac:	4770      	bx	lr

080038ae <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bc80      	pop	{r7}
 80038be:	4770      	bx	lr

080038c0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bc80      	pop	{r7}
 80038d0:	4770      	bx	lr

080038d2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr

080038e4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bc80      	pop	{r7}
 80038f4:	4770      	bx	lr

080038f6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	bc80      	pop	{r7}
 8003906:	4770      	bx	lr

08003908 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003916:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800391e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003924:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392a:	2b00      	cmp	r3, #0
 800392c:	d150      	bne.n	80039d0 <I2C_MasterTransmit_TXE+0xc8>
 800392e:	7bfb      	ldrb	r3, [r7, #15]
 8003930:	2b21      	cmp	r3, #33	; 0x21
 8003932:	d14d      	bne.n	80039d0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	2b08      	cmp	r3, #8
 8003938:	d01d      	beq.n	8003976 <I2C_MasterTransmit_TXE+0x6e>
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	2b20      	cmp	r3, #32
 800393e:	d01a      	beq.n	8003976 <I2C_MasterTransmit_TXE+0x6e>
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003946:	d016      	beq.n	8003976 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003956:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2211      	movs	r2, #17
 800395c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2220      	movs	r2, #32
 800396a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7ff ff6c 	bl	800384c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003974:	e060      	b.n	8003a38 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003984:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003994:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2220      	movs	r2, #32
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b40      	cmp	r3, #64	; 0x40
 80039ae:	d107      	bne.n	80039c0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f7ff ff81 	bl	80038c0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80039be:	e03b      	b.n	8003a38 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f7ff ff3f 	bl	800384c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80039ce:	e033      	b.n	8003a38 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
 80039d2:	2b21      	cmp	r3, #33	; 0x21
 80039d4:	d005      	beq.n	80039e2 <I2C_MasterTransmit_TXE+0xda>
 80039d6:	7bbb      	ldrb	r3, [r7, #14]
 80039d8:	2b40      	cmp	r3, #64	; 0x40
 80039da:	d12d      	bne.n	8003a38 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	2b22      	cmp	r3, #34	; 0x22
 80039e0:	d12a      	bne.n	8003a38 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d108      	bne.n	80039fe <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039fa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80039fc:	e01c      	b.n	8003a38 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b40      	cmp	r3, #64	; 0x40
 8003a08:	d103      	bne.n	8003a12 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f88e 	bl	8003b2c <I2C_MemoryTransmit_TXE_BTF>
}
 8003a10:	e012      	b.n	8003a38 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	781a      	ldrb	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a22:	1c5a      	adds	r2, r3, #1
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a36:	e7ff      	b.n	8003a38 <I2C_MasterTransmit_TXE+0x130>
 8003a38:	bf00      	nop
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b21      	cmp	r3, #33	; 0x21
 8003a58:	d164      	bne.n	8003b24 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d012      	beq.n	8003a8a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	781a      	ldrb	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	3b01      	subs	r3, #1
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003a88:	e04c      	b.n	8003b24 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	d01d      	beq.n	8003acc <I2C_MasterTransmit_BTF+0x8c>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2b20      	cmp	r3, #32
 8003a94:	d01a      	beq.n	8003acc <I2C_MasterTransmit_BTF+0x8c>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a9c:	d016      	beq.n	8003acc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003aac:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2211      	movs	r2, #17
 8003ab2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7ff fec1 	bl	800384c <HAL_I2C_MasterTxCpltCallback>
}
 8003aca:	e02b      	b.n	8003b24 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ada:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aea:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2220      	movs	r2, #32
 8003af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b40      	cmp	r3, #64	; 0x40
 8003b04:	d107      	bne.n	8003b16 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7ff fed6 	bl	80038c0 <HAL_I2C_MemTxCpltCallback>
}
 8003b14:	e006      	b.n	8003b24 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7ff fe94 	bl	800384c <HAL_I2C_MasterTxCpltCallback>
}
 8003b24:	bf00      	nop
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b3a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d11d      	bne.n	8003b80 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d10b      	bne.n	8003b64 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b5c:	1c9a      	adds	r2, r3, #2
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003b62:	e077      	b.n	8003c54 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	121b      	asrs	r3, r3, #8
 8003b6c:	b2da      	uxtb	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b78:	1c5a      	adds	r2, r3, #1
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003b7e:	e069      	b.n	8003c54 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d10b      	bne.n	8003ba0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003b9e:	e059      	b.n	8003c54 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d152      	bne.n	8003c4e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003ba8:	7bfb      	ldrb	r3, [r7, #15]
 8003baa:	2b22      	cmp	r3, #34	; 0x22
 8003bac:	d10d      	bne.n	8003bca <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bbc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc2:	1c5a      	adds	r2, r3, #1
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003bc8:	e044      	b.n	8003c54 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d015      	beq.n	8003c00 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
 8003bd6:	2b21      	cmp	r3, #33	; 0x21
 8003bd8:	d112      	bne.n	8003c00 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	781a      	ldrb	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	1c5a      	adds	r2, r3, #1
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003bfe:	e029      	b.n	8003c54 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d124      	bne.n	8003c54 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
 8003c0c:	2b21      	cmp	r3, #33	; 0x21
 8003c0e:	d121      	bne.n	8003c54 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c1e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c2e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7ff fe3a 	bl	80038c0 <HAL_I2C_MemTxCpltCallback>
}
 8003c4c:	e002      	b.n	8003c54 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7ff fbc8 	bl	80033e4 <I2C_Flush_DR>
}
 8003c54:	bf00      	nop
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b22      	cmp	r3, #34	; 0x22
 8003c6e:	f040 80ac 	bne.w	8003dca <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2b03      	cmp	r3, #3
 8003c7e:	d921      	bls.n	8003cc4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	691a      	ldr	r2, [r3, #16]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	2b03      	cmp	r3, #3
 8003cae:	f040 808c 	bne.w	8003dca <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cc0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003cc2:	e082      	b.n	8003dca <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d075      	beq.n	8003db8 <I2C_MasterReceive_RXNE+0x15c>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d002      	beq.n	8003cd8 <I2C_MasterReceive_RXNE+0x7c>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d16f      	bne.n	8003db8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f001 f831 	bl	8004d40 <I2C_WaitOnSTOPRequestThroughIT>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d142      	bne.n	8003d6a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cf2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d02:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	691a      	ldr	r2, [r3, #16]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	1c5a      	adds	r2, r3, #1
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	3b01      	subs	r3, #1
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b40      	cmp	r3, #64	; 0x40
 8003d3c:	d10a      	bne.n	8003d54 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7ff fdc0 	bl	80038d2 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d52:	e03a      	b.n	8003dca <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2212      	movs	r2, #18
 8003d60:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7ff fd7b 	bl	800385e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d68:	e02f      	b.n	8003dca <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d78:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	b2d2      	uxtb	r2, r2
 8003d86:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f7ff fd97 	bl	80038e4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003db6:	e008      	b.n	8003dca <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dc6:	605a      	str	r2, [r3, #4]
}
 8003dc8:	e7ff      	b.n	8003dca <I2C_MasterReceive_RXNE+0x16e>
 8003dca:	bf00      	nop
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b084      	sub	sp, #16
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dde:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d11b      	bne.n	8003e22 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003df8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	691a      	ldr	r2, [r3, #16]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003e20:	e0bd      	b.n	8003f9e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	2b03      	cmp	r3, #3
 8003e2a:	d129      	bne.n	8003e80 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e3a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2b04      	cmp	r3, #4
 8003e40:	d00a      	beq.n	8003e58 <I2C_MasterReceive_BTF+0x86>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d007      	beq.n	8003e58 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e56:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	691a      	ldr	r2, [r3, #16]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	b2d2      	uxtb	r2, r2
 8003e64:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	1c5a      	adds	r2, r3, #1
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003e7e:	e08e      	b.n	8003f9e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d176      	bne.n	8003f78 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d002      	beq.n	8003e96 <I2C_MasterReceive_BTF+0xc4>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2b10      	cmp	r3, #16
 8003e94:	d108      	bne.n	8003ea8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	e019      	b.n	8003edc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	d002      	beq.n	8003eb4 <I2C_MasterReceive_BTF+0xe2>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d108      	bne.n	8003ec6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	e00a      	b.n	8003edc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2b10      	cmp	r3, #16
 8003eca:	d007      	beq.n	8003edc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eda:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	691a      	ldr	r2, [r3, #16]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	691a      	ldr	r2, [r3, #16]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	b2d2      	uxtb	r2, r2
 8003f0e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	1c5a      	adds	r2, r3, #1
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003f36:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b40      	cmp	r3, #64	; 0x40
 8003f4a:	d10a      	bne.n	8003f62 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7ff fcb9 	bl	80038d2 <HAL_I2C_MemRxCpltCallback>
}
 8003f60:	e01d      	b.n	8003f9e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2212      	movs	r2, #18
 8003f6e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f7ff fc74 	bl	800385e <HAL_I2C_MasterRxCpltCallback>
}
 8003f76:	e012      	b.n	8003f9e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	691a      	ldr	r2, [r3, #16]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	3b01      	subs	r3, #1
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003f9e:	bf00      	nop
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b40      	cmp	r3, #64	; 0x40
 8003fb8:	d117      	bne.n	8003fea <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d109      	bne.n	8003fd6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	461a      	mov	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003fd2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003fd4:	e067      	b.n	80040a6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	f043 0301 	orr.w	r3, r3, #1
 8003fe0:	b2da      	uxtb	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	611a      	str	r2, [r3, #16]
}
 8003fe8:	e05d      	b.n	80040a6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ff2:	d133      	bne.n	800405c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b21      	cmp	r3, #33	; 0x21
 8003ffe:	d109      	bne.n	8004014 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004004:	b2db      	uxtb	r3, r3
 8004006:	461a      	mov	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004010:	611a      	str	r2, [r3, #16]
 8004012:	e008      	b.n	8004026 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004018:	b2db      	uxtb	r3, r3
 800401a:	f043 0301 	orr.w	r3, r3, #1
 800401e:	b2da      	uxtb	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800402a:	2b00      	cmp	r3, #0
 800402c:	d004      	beq.n	8004038 <I2C_Master_SB+0x92>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004034:	2b00      	cmp	r3, #0
 8004036:	d108      	bne.n	800404a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403c:	2b00      	cmp	r3, #0
 800403e:	d032      	beq.n	80040a6 <I2C_Master_SB+0x100>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004046:	2b00      	cmp	r3, #0
 8004048:	d02d      	beq.n	80040a6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004058:	605a      	str	r2, [r3, #4]
}
 800405a:	e024      	b.n	80040a6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10e      	bne.n	8004082 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004068:	b29b      	uxth	r3, r3
 800406a:	11db      	asrs	r3, r3, #7
 800406c:	b2db      	uxtb	r3, r3
 800406e:	f003 0306 	and.w	r3, r3, #6
 8004072:	b2db      	uxtb	r3, r3
 8004074:	f063 030f 	orn	r3, r3, #15
 8004078:	b2da      	uxtb	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	611a      	str	r2, [r3, #16]
}
 8004080:	e011      	b.n	80040a6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004086:	2b01      	cmp	r3, #1
 8004088:	d10d      	bne.n	80040a6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408e:	b29b      	uxth	r3, r3
 8004090:	11db      	asrs	r3, r3, #7
 8004092:	b2db      	uxtb	r3, r3
 8004094:	f003 0306 	and.w	r3, r3, #6
 8004098:	b2db      	uxtb	r3, r3
 800409a:	f063 030e 	orn	r3, r3, #14
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	611a      	str	r2, [r3, #16]
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bc80      	pop	{r7}
 80040ae:	4770      	bx	lr

080040b0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d004      	beq.n	80040d6 <I2C_Master_ADD10+0x26>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d108      	bne.n	80040e8 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00c      	beq.n	80040f8 <I2C_Master_ADD10+0x48>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d007      	beq.n	80040f8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040f6:	605a      	str	r2, [r3, #4]
  }
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bc80      	pop	{r7}
 8004100:	4770      	bx	lr

08004102 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004102:	b480      	push	{r7}
 8004104:	b091      	sub	sp, #68	; 0x44
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004110:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004118:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b22      	cmp	r3, #34	; 0x22
 800412a:	f040 8174 	bne.w	8004416 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10f      	bne.n	8004156 <I2C_Master_ADDR+0x54>
 8004136:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800413a:	2b40      	cmp	r3, #64	; 0x40
 800413c:	d10b      	bne.n	8004156 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800413e:	2300      	movs	r3, #0
 8004140:	633b      	str	r3, [r7, #48]	; 0x30
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	633b      	str	r3, [r7, #48]	; 0x30
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	633b      	str	r3, [r7, #48]	; 0x30
 8004152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004154:	e16b      	b.n	800442e <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800415a:	2b00      	cmp	r3, #0
 800415c:	d11d      	bne.n	800419a <I2C_Master_ADDR+0x98>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004166:	d118      	bne.n	800419a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004168:	2300      	movs	r3, #0
 800416a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800417c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800418c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	651a      	str	r2, [r3, #80]	; 0x50
 8004198:	e149      	b.n	800442e <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419e:	b29b      	uxth	r3, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d113      	bne.n	80041cc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041a4:	2300      	movs	r3, #0
 80041a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80041b8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	e120      	b.n	800440e <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	f040 808a 	bne.w	80042ec <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80041d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041de:	d137      	bne.n	8004250 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ee:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041fe:	d113      	bne.n	8004228 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800420e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004210:	2300      	movs	r3, #0
 8004212:	627b      	str	r3, [r7, #36]	; 0x24
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	627b      	str	r3, [r7, #36]	; 0x24
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	627b      	str	r3, [r7, #36]	; 0x24
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	e0f2      	b.n	800440e <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004228:	2300      	movs	r3, #0
 800422a:	623b      	str	r3, [r7, #32]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	623b      	str	r3, [r7, #32]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	623b      	str	r3, [r7, #32]
 800423c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	e0de      	b.n	800440e <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004252:	2b08      	cmp	r3, #8
 8004254:	d02e      	beq.n	80042b4 <I2C_Master_ADDR+0x1b2>
 8004256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004258:	2b20      	cmp	r3, #32
 800425a:	d02b      	beq.n	80042b4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800425c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800425e:	2b12      	cmp	r3, #18
 8004260:	d102      	bne.n	8004268 <I2C_Master_ADDR+0x166>
 8004262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004264:	2b01      	cmp	r3, #1
 8004266:	d125      	bne.n	80042b4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426a:	2b04      	cmp	r3, #4
 800426c:	d00e      	beq.n	800428c <I2C_Master_ADDR+0x18a>
 800426e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004270:	2b02      	cmp	r3, #2
 8004272:	d00b      	beq.n	800428c <I2C_Master_ADDR+0x18a>
 8004274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004276:	2b10      	cmp	r3, #16
 8004278:	d008      	beq.n	800428c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	e007      	b.n	800429c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800429a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800429c:	2300      	movs	r3, #0
 800429e:	61fb      	str	r3, [r7, #28]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	61fb      	str	r3, [r7, #28]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	61fb      	str	r3, [r7, #28]
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	e0ac      	b.n	800440e <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042c2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042c4:	2300      	movs	r3, #0
 80042c6:	61bb      	str	r3, [r7, #24]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	61bb      	str	r3, [r7, #24]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	61bb      	str	r3, [r7, #24]
 80042d8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	e090      	b.n	800440e <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d158      	bne.n	80043a8 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80042f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	d021      	beq.n	8004340 <I2C_Master_ADDR+0x23e>
 80042fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d01e      	beq.n	8004340 <I2C_Master_ADDR+0x23e>
 8004302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004304:	2b10      	cmp	r3, #16
 8004306:	d01b      	beq.n	8004340 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004316:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004318:	2300      	movs	r3, #0
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	617b      	str	r3, [r7, #20]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	e012      	b.n	8004366 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800434e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004350:	2300      	movs	r3, #0
 8004352:	613b      	str	r3, [r7, #16]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	613b      	str	r3, [r7, #16]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	613b      	str	r3, [r7, #16]
 8004364:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004370:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004374:	d14b      	bne.n	800440e <I2C_Master_ADDR+0x30c>
 8004376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004378:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800437c:	d00b      	beq.n	8004396 <I2C_Master_ADDR+0x294>
 800437e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004380:	2b01      	cmp	r3, #1
 8004382:	d008      	beq.n	8004396 <I2C_Master_ADDR+0x294>
 8004384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004386:	2b08      	cmp	r3, #8
 8004388:	d005      	beq.n	8004396 <I2C_Master_ADDR+0x294>
 800438a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800438c:	2b10      	cmp	r3, #16
 800438e:	d002      	beq.n	8004396 <I2C_Master_ADDR+0x294>
 8004390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004392:	2b20      	cmp	r3, #32
 8004394:	d13b      	bne.n	800440e <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043a4:	605a      	str	r2, [r3, #4]
 80043a6:	e032      	b.n	800440e <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043b6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043c6:	d117      	bne.n	80043f8 <I2C_Master_ADDR+0x2f6>
 80043c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043ce:	d00b      	beq.n	80043e8 <I2C_Master_ADDR+0x2e6>
 80043d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d008      	beq.n	80043e8 <I2C_Master_ADDR+0x2e6>
 80043d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d005      	beq.n	80043e8 <I2C_Master_ADDR+0x2e6>
 80043dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043de:	2b10      	cmp	r3, #16
 80043e0:	d002      	beq.n	80043e8 <I2C_Master_ADDR+0x2e6>
 80043e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e4:	2b20      	cmp	r3, #32
 80043e6:	d107      	bne.n	80043f8 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043f6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043f8:	2300      	movs	r3, #0
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	60fb      	str	r3, [r7, #12]
 800440c:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004414:	e00b      	b.n	800442e <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004416:	2300      	movs	r3, #0
 8004418:	60bb      	str	r3, [r7, #8]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	60bb      	str	r3, [r7, #8]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	60bb      	str	r3, [r7, #8]
 800442a:	68bb      	ldr	r3, [r7, #8]
}
 800442c:	e7ff      	b.n	800442e <I2C_Master_ADDR+0x32c>
 800442e:	bf00      	nop
 8004430:	3744      	adds	r7, #68	; 0x44
 8004432:	46bd      	mov	sp, r7
 8004434:	bc80      	pop	{r7}
 8004436:	4770      	bx	lr

08004438 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004446:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444c:	b29b      	uxth	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d02b      	beq.n	80044aa <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	781a      	ldrb	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	1c5a      	adds	r2, r3, #1
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446c:	b29b      	uxth	r3, r3
 800446e:	3b01      	subs	r3, #1
 8004470:	b29a      	uxth	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447a:	b29b      	uxth	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	d114      	bne.n	80044aa <I2C_SlaveTransmit_TXE+0x72>
 8004480:	7bfb      	ldrb	r3, [r7, #15]
 8004482:	2b29      	cmp	r3, #41	; 0x29
 8004484:	d111      	bne.n	80044aa <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004494:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2221      	movs	r2, #33	; 0x21
 800449a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2228      	movs	r2, #40	; 0x28
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f7ff f9e3 	bl	8003870 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80044aa:	bf00      	nop
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b083      	sub	sp, #12
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044be:	b29b      	uxth	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d011      	beq.n	80044e8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	781a      	ldrb	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d4:	1c5a      	adds	r2, r3, #1
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044de:	b29b      	uxth	r3, r3
 80044e0:	3b01      	subs	r3, #1
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bc80      	pop	{r7}
 80044f0:	4770      	bx	lr

080044f2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b084      	sub	sp, #16
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004500:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004506:	b29b      	uxth	r3, r3
 8004508:	2b00      	cmp	r3, #0
 800450a:	d02c      	beq.n	8004566 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	691a      	ldr	r2, [r3, #16]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	b2d2      	uxtb	r2, r2
 8004518:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451e:	1c5a      	adds	r2, r3, #1
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004528:	b29b      	uxth	r3, r3
 800452a:	3b01      	subs	r3, #1
 800452c:	b29a      	uxth	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004536:	b29b      	uxth	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	d114      	bne.n	8004566 <I2C_SlaveReceive_RXNE+0x74>
 800453c:	7bfb      	ldrb	r3, [r7, #15]
 800453e:	2b2a      	cmp	r3, #42	; 0x2a
 8004540:	d111      	bne.n	8004566 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004550:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2222      	movs	r2, #34	; 0x22
 8004556:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2228      	movs	r2, #40	; 0x28
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7ff f98e 	bl	8003882 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004566:	bf00      	nop
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800456e:	b480      	push	{r7}
 8004570:	b083      	sub	sp, #12
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457a:	b29b      	uxth	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	d012      	beq.n	80045a6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	691a      	ldr	r2, [r3, #16]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458a:	b2d2      	uxtb	r2, r2
 800458c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	1c5a      	adds	r2, r3, #1
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459c:	b29b      	uxth	r3, r3
 800459e:	3b01      	subs	r3, #1
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bc80      	pop	{r7}
 80045ae:	4770      	bx	lr

080045b0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80045ba:	2300      	movs	r3, #0
 80045bc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80045ca:	2b28      	cmp	r3, #40	; 0x28
 80045cc:	d127      	bne.n	800461e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045dc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	089b      	lsrs	r3, r3, #2
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80045ea:	2301      	movs	r3, #1
 80045ec:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	09db      	lsrs	r3, r3, #7
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d103      	bne.n	8004602 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	81bb      	strh	r3, [r7, #12]
 8004600:	e002      	b.n	8004608 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004610:	89ba      	ldrh	r2, [r7, #12]
 8004612:	7bfb      	ldrb	r3, [r7, #15]
 8004614:	4619      	mov	r1, r3
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f7ff f93c 	bl	8003894 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800461c:	e00e      	b.n	800463c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800461e:	2300      	movs	r3, #0
 8004620:	60bb      	str	r3, [r7, #8]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	60bb      	str	r3, [r7, #8]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	60bb      	str	r3, [r7, #8]
 8004632:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800463c:	bf00      	nop
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004652:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004662:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004664:	2300      	movs	r3, #0
 8004666:	60bb      	str	r3, [r7, #8]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	60bb      	str	r3, [r7, #8]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0201 	orr.w	r2, r2, #1
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004690:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800469c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046a0:	d172      	bne.n	8004788 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80046a2:	7bfb      	ldrb	r3, [r7, #15]
 80046a4:	2b22      	cmp	r3, #34	; 0x22
 80046a6:	d002      	beq.n	80046ae <I2C_Slave_STOPF+0x6a>
 80046a8:	7bfb      	ldrb	r3, [r7, #15]
 80046aa:	2b2a      	cmp	r3, #42	; 0x2a
 80046ac:	d135      	bne.n	800471a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d005      	beq.n	80046d2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	f043 0204 	orr.w	r2, r3, #4
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046e0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fe fb76 	bl	8002dd8 <HAL_DMA_GetState>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d049      	beq.n	8004786 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f6:	4a69      	ldr	r2, [pc, #420]	; (800489c <I2C_Slave_STOPF+0x258>)
 80046f8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fe faf2 	bl	8002ce8 <HAL_DMA_Abort_IT>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d03d      	beq.n	8004786 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004714:	4610      	mov	r0, r2
 8004716:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004718:	e035      	b.n	8004786 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	b29a      	uxth	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800472c:	b29b      	uxth	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d005      	beq.n	800473e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	f043 0204 	orr.w	r2, r3, #4
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800474c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004752:	4618      	mov	r0, r3
 8004754:	f7fe fb40 	bl	8002dd8 <HAL_DMA_GetState>
 8004758:	4603      	mov	r3, r0
 800475a:	2b01      	cmp	r3, #1
 800475c:	d014      	beq.n	8004788 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004762:	4a4e      	ldr	r2, [pc, #312]	; (800489c <I2C_Slave_STOPF+0x258>)
 8004764:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800476a:	4618      	mov	r0, r3
 800476c:	f7fe fabc 	bl	8002ce8 <HAL_DMA_Abort_IT>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d008      	beq.n	8004788 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004780:	4610      	mov	r0, r2
 8004782:	4798      	blx	r3
 8004784:	e000      	b.n	8004788 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004786:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800478c:	b29b      	uxth	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d03e      	beq.n	8004810 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b04      	cmp	r3, #4
 800479e:	d112      	bne.n	80047c6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	691a      	ldr	r2, [r3, #16]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	b2d2      	uxtb	r2, r2
 80047ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	1c5a      	adds	r2, r3, #1
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047bc:	b29b      	uxth	r3, r3
 80047be:	3b01      	subs	r3, #1
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d0:	2b40      	cmp	r3, #64	; 0x40
 80047d2:	d112      	bne.n	80047fa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	691a      	ldr	r2, [r3, #16]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	3b01      	subs	r3, #1
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047fe:	b29b      	uxth	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	d005      	beq.n	8004810 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004808:	f043 0204 	orr.w	r2, r3, #4
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004814:	2b00      	cmp	r3, #0
 8004816:	d003      	beq.n	8004820 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 f8b7 	bl	800498c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800481e:	e039      	b.n	8004894 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004820:	7bfb      	ldrb	r3, [r7, #15]
 8004822:	2b2a      	cmp	r3, #42	; 0x2a
 8004824:	d109      	bne.n	800483a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2228      	movs	r2, #40	; 0x28
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f7ff f824 	bl	8003882 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b28      	cmp	r3, #40	; 0x28
 8004844:	d111      	bne.n	800486a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a15      	ldr	r2, [pc, #84]	; (80048a0 <I2C_Slave_STOPF+0x25c>)
 800484a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2220      	movs	r2, #32
 8004856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7ff f823 	bl	80038ae <HAL_I2C_ListenCpltCallback>
}
 8004868:	e014      	b.n	8004894 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486e:	2b22      	cmp	r3, #34	; 0x22
 8004870:	d002      	beq.n	8004878 <I2C_Slave_STOPF+0x234>
 8004872:	7bfb      	ldrb	r3, [r7, #15]
 8004874:	2b22      	cmp	r3, #34	; 0x22
 8004876:	d10d      	bne.n	8004894 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2220      	movs	r2, #32
 8004882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f7fe fff7 	bl	8003882 <HAL_I2C_SlaveRxCpltCallback>
}
 8004894:	bf00      	nop
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	08004bf1 	.word	0x08004bf1
 80048a0:	ffff0000 	.word	0xffff0000

080048a4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d002      	beq.n	80048c6 <I2C_Slave_AF+0x22>
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	2b20      	cmp	r3, #32
 80048c4:	d129      	bne.n	800491a <I2C_Slave_AF+0x76>
 80048c6:	7bfb      	ldrb	r3, [r7, #15]
 80048c8:	2b28      	cmp	r3, #40	; 0x28
 80048ca:	d126      	bne.n	800491a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a2e      	ldr	r2, [pc, #184]	; (8004988 <I2C_Slave_AF+0xe4>)
 80048d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048e0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048ea:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048fa:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2220      	movs	r2, #32
 8004906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7fe ffcb 	bl	80038ae <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004918:	e031      	b.n	800497e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800491a:	7bfb      	ldrb	r3, [r7, #15]
 800491c:	2b21      	cmp	r3, #33	; 0x21
 800491e:	d129      	bne.n	8004974 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a19      	ldr	r2, [pc, #100]	; (8004988 <I2C_Slave_AF+0xe4>)
 8004924:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2221      	movs	r2, #33	; 0x21
 800492a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2220      	movs	r2, #32
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800494a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004954:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004964:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7fe fd3c 	bl	80033e4 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7fe ff7f 	bl	8003870 <HAL_I2C_SlaveTxCpltCallback>
}
 8004972:	e004      	b.n	800497e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800497c:	615a      	str	r2, [r3, #20]
}
 800497e:	bf00      	nop
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	ffff0000 	.word	0xffff0000

0800498c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800499a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049a2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80049a4:	7bbb      	ldrb	r3, [r7, #14]
 80049a6:	2b10      	cmp	r3, #16
 80049a8:	d002      	beq.n	80049b0 <I2C_ITError+0x24>
 80049aa:	7bbb      	ldrb	r3, [r7, #14]
 80049ac:	2b40      	cmp	r3, #64	; 0x40
 80049ae:	d10a      	bne.n	80049c6 <I2C_ITError+0x3a>
 80049b0:	7bfb      	ldrb	r3, [r7, #15]
 80049b2:	2b22      	cmp	r3, #34	; 0x22
 80049b4:	d107      	bne.n	80049c6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049c4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
 80049c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80049cc:	2b28      	cmp	r3, #40	; 0x28
 80049ce:	d107      	bne.n	80049e0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2228      	movs	r2, #40	; 0x28
 80049da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80049de:	e015      	b.n	8004a0c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ee:	d00a      	beq.n	8004a06 <I2C_ITError+0x7a>
 80049f0:	7bfb      	ldrb	r3, [r7, #15]
 80049f2:	2b60      	cmp	r3, #96	; 0x60
 80049f4:	d007      	beq.n	8004a06 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2220      	movs	r2, #32
 80049fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a1a:	d162      	bne.n	8004ae2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a2a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d020      	beq.n	8004a7c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a3e:	4a6a      	ldr	r2, [pc, #424]	; (8004be8 <I2C_ITError+0x25c>)
 8004a40:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fe f94e 	bl	8002ce8 <HAL_DMA_Abort_IT>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f000 8089 	beq.w	8004b66 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 0201 	bic.w	r2, r2, #1
 8004a62:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2220      	movs	r2, #32
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a76:	4610      	mov	r0, r2
 8004a78:	4798      	blx	r3
 8004a7a:	e074      	b.n	8004b66 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a80:	4a59      	ldr	r2, [pc, #356]	; (8004be8 <I2C_ITError+0x25c>)
 8004a82:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7fe f92d 	bl	8002ce8 <HAL_DMA_Abort_IT>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d068      	beq.n	8004b66 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9e:	2b40      	cmp	r3, #64	; 0x40
 8004aa0:	d10b      	bne.n	8004aba <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	691a      	ldr	r2, [r3, #16]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	b2d2      	uxtb	r2, r2
 8004aae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	1c5a      	adds	r2, r3, #1
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 0201 	bic.w	r2, r2, #1
 8004ac8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2220      	movs	r2, #32
 8004ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004adc:	4610      	mov	r0, r2
 8004ade:	4798      	blx	r3
 8004ae0:	e041      	b.n	8004b66 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b60      	cmp	r3, #96	; 0x60
 8004aec:	d125      	bne.n	8004b3a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b06:	2b40      	cmp	r3, #64	; 0x40
 8004b08:	d10b      	bne.n	8004b22 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	691a      	ldr	r2, [r3, #16]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	b2d2      	uxtb	r2, r2
 8004b16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	1c5a      	adds	r2, r3, #1
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f022 0201 	bic.w	r2, r2, #1
 8004b30:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7fe fedf 	bl	80038f6 <HAL_I2C_AbortCpltCallback>
 8004b38:	e015      	b.n	8004b66 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b44:	2b40      	cmp	r3, #64	; 0x40
 8004b46:	d10b      	bne.n	8004b60 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	691a      	ldr	r2, [r3, #16]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	b2d2      	uxtb	r2, r2
 8004b54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	1c5a      	adds	r2, r3, #1
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f7fe febf 	bl	80038e4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10e      	bne.n	8004b94 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d109      	bne.n	8004b94 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d104      	bne.n	8004b94 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d007      	beq.n	8004ba4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ba2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004baa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb0:	f003 0304 	and.w	r3, r3, #4
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d113      	bne.n	8004be0 <I2C_ITError+0x254>
 8004bb8:	7bfb      	ldrb	r3, [r7, #15]
 8004bba:	2b28      	cmp	r3, #40	; 0x28
 8004bbc:	d110      	bne.n	8004be0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a0a      	ldr	r2, [pc, #40]	; (8004bec <I2C_ITError+0x260>)
 8004bc2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7fe fe67 	bl	80038ae <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004be0:	bf00      	nop
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	08004bf1 	.word	0x08004bf1
 8004bec:	ffff0000 	.word	0xffff0000

08004bf0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c08:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c0a:	4b4b      	ldr	r3, [pc, #300]	; (8004d38 <I2C_DMAAbort+0x148>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	08db      	lsrs	r3, r3, #3
 8004c10:	4a4a      	ldr	r2, [pc, #296]	; (8004d3c <I2C_DMAAbort+0x14c>)
 8004c12:	fba2 2303 	umull	r2, r3, r2, r3
 8004c16:	0a1a      	lsrs	r2, r3, #8
 8004c18:	4613      	mov	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	00da      	lsls	r2, r3, #3
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d106      	bne.n	8004c38 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	f043 0220 	orr.w	r2, r3, #32
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004c36:	e00a      	b.n	8004c4e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c4c:	d0ea      	beq.n	8004c24 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c7c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2200      	movs	r2, #0
 8004c82:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c90:	2200      	movs	r2, #0
 8004c92:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 0201 	bic.w	r2, r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b60      	cmp	r3, #96	; 0x60
 8004cbe:	d10e      	bne.n	8004cde <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004cd6:	6978      	ldr	r0, [r7, #20]
 8004cd8:	f7fe fe0d 	bl	80038f6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004cdc:	e027      	b.n	8004d2e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004cde:	7cfb      	ldrb	r3, [r7, #19]
 8004ce0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ce4:	2b28      	cmp	r3, #40	; 0x28
 8004ce6:	d117      	bne.n	8004d18 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0201 	orr.w	r2, r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d06:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2228      	movs	r2, #40	; 0x28
 8004d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004d16:	e007      	b.n	8004d28 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004d28:	6978      	ldr	r0, [r7, #20]
 8004d2a:	f7fe fddb 	bl	80038e4 <HAL_I2C_ErrorCallback>
}
 8004d2e:	bf00      	nop
 8004d30:	3718      	adds	r7, #24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	20000000 	.word	0x20000000
 8004d3c:	14f8b589 	.word	0x14f8b589

08004d40 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d4c:	4b13      	ldr	r3, [pc, #76]	; (8004d9c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	08db      	lsrs	r3, r3, #3
 8004d52:	4a13      	ldr	r2, [pc, #76]	; (8004da0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004d54:	fba2 2303 	umull	r2, r3, r2, r3
 8004d58:	0a1a      	lsrs	r2, r3, #8
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4413      	add	r3, r2
 8004d60:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	3b01      	subs	r3, #1
 8004d66:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d107      	bne.n	8004d7e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	f043 0220 	orr.w	r2, r3, #32
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e008      	b.n	8004d90 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d8c:	d0e9      	beq.n	8004d62 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bc80      	pop	{r7}
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	20000000 	.word	0x20000000
 8004da0:	14f8b589 	.word	0x14f8b589

08004da4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004db4:	d103      	bne.n	8004dbe <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004dbc:	e007      	b.n	8004dce <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004dc6:	d102      	bne.n	8004dce <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2208      	movs	r2, #8
 8004dcc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004dce:	bf00      	nop
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bc80      	pop	{r7}
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004ddc:	4b03      	ldr	r3, [pc, #12]	; (8004dec <HAL_PWR_EnableBkUpAccess+0x14>)
 8004dde:	2201      	movs	r2, #1
 8004de0:	601a      	str	r2, [r3, #0]
}
 8004de2:	bf00      	nop
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bc80      	pop	{r7}
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	420e0020 	.word	0x420e0020

08004df0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e26c      	b.n	80052dc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f000 8087 	beq.w	8004f1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e10:	4b92      	ldr	r3, [pc, #584]	; (800505c <HAL_RCC_OscConfig+0x26c>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f003 030c 	and.w	r3, r3, #12
 8004e18:	2b04      	cmp	r3, #4
 8004e1a:	d00c      	beq.n	8004e36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004e1c:	4b8f      	ldr	r3, [pc, #572]	; (800505c <HAL_RCC_OscConfig+0x26c>)
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f003 030c 	and.w	r3, r3, #12
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d112      	bne.n	8004e4e <HAL_RCC_OscConfig+0x5e>
 8004e28:	4b8c      	ldr	r3, [pc, #560]	; (800505c <HAL_RCC_OscConfig+0x26c>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e34:	d10b      	bne.n	8004e4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e36:	4b89      	ldr	r3, [pc, #548]	; (800505c <HAL_RCC_OscConfig+0x26c>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d06c      	beq.n	8004f1c <HAL_RCC_OscConfig+0x12c>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d168      	bne.n	8004f1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e246      	b.n	80052dc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e56:	d106      	bne.n	8004e66 <HAL_RCC_OscConfig+0x76>
 8004e58:	4b80      	ldr	r3, [pc, #512]	; (800505c <HAL_RCC_OscConfig+0x26c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a7f      	ldr	r2, [pc, #508]	; (800505c <HAL_RCC_OscConfig+0x26c>)
 8004e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e62:	6013      	str	r3, [r2, #0]
 8004e64:	e02e      	b.n	8004ec4 <HAL_RCC_OscConfig+0xd4>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10c      	bne.n	8004e88 <HAL_RCC_OscConfig+0x98>
 8004e6e:	4b7b      	ldr	r3, [pc, #492]	; (800505c <HAL_RCC_OscConfig+0x26c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a7a      	ldr	r2, [pc, #488]	; (800505c <HAL_RCC_OscConfig+0x26c>)
 8004e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e78:	6013      	str	r3, [r2, #0]
 8004e7a:	4b78      	ldr	r3, [pc, #480]	; (800505c <HAL_RCC_OscConfig+0x26c>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a77      	ldr	r2, [pc, #476]	; (800505c <HAL_RCC_OscConfig+0x26c>)
 8004e80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e84:	6013      	str	r3, [r2, #0]
 8004e86:	e01d      	b.n	8004ec4 <HAL_RCC_OscConfig+0xd4>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e90:	d10c      	bne.n	8004eac <HAL_RCC_OscConfig+0xbc>
 8004e92:	4b72      	ldr	r3, [pc, #456]	; (800505c <HAL_RCC_OscConfig+0x26c>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a71      	ldr	r2, [pc, #452]	; (800505c <HAL_RCC_OscConfig+0x26c>)
 8004e98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e9c:	6013      	str	r3, [r2, #0]
 8004e9e:	4b6f      	ldr	r3, [pc, #444]	; (800505c <HAL_RCC_OscConfig+0x26c>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a6e      	ldr	r2, [pc, #440]	; (800505c <HAL_RCC_OscConfig+0x26c>)
 8004ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ea8:	6013      	str	r3, [r2, #0]
 8004eaa:	e00b      	b.n	8004ec4 <HAL_RCC_OscConfig+0xd4>
 8004eac:	4b6b      	ldr	r3, [pc, #428]	; (800505c <HAL_RCC_OscConfig+0x26c>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a6a      	ldr	r2, [pc, #424]	; (800505c <HAL_RCC_OscConfig+0x26c>)
 8004eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eb6:	6013      	str	r3, [r2, #0]
 8004eb8:	4b68      	ldr	r3, [pc, #416]	; (800505c <HAL_RCC_OscConfig+0x26c>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a67      	ldr	r2, [pc, #412]	; (800505c <HAL_RCC_OscConfig+0x26c>)
 8004ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ec2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d013      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ecc:	f7fd fbbe 	bl	800264c <HAL_GetTick>
 8004ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ed2:	e008      	b.n	8004ee6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ed4:	f7fd fbba 	bl	800264c <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b64      	cmp	r3, #100	; 0x64
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e1fa      	b.n	80052dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ee6:	4b5d      	ldr	r3, [pc, #372]	; (800505c <HAL_RCC_OscConfig+0x26c>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d0f0      	beq.n	8004ed4 <HAL_RCC_OscConfig+0xe4>
 8004ef2:	e014      	b.n	8004f1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef4:	f7fd fbaa 	bl	800264c <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004efc:	f7fd fba6 	bl	800264c <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b64      	cmp	r3, #100	; 0x64
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e1e6      	b.n	80052dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f0e:	4b53      	ldr	r3, [pc, #332]	; (800505c <HAL_RCC_OscConfig+0x26c>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1f0      	bne.n	8004efc <HAL_RCC_OscConfig+0x10c>
 8004f1a:	e000      	b.n	8004f1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d063      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f2a:	4b4c      	ldr	r3, [pc, #304]	; (800505c <HAL_RCC_OscConfig+0x26c>)
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f003 030c 	and.w	r3, r3, #12
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00b      	beq.n	8004f4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004f36:	4b49      	ldr	r3, [pc, #292]	; (800505c <HAL_RCC_OscConfig+0x26c>)
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f003 030c 	and.w	r3, r3, #12
 8004f3e:	2b08      	cmp	r3, #8
 8004f40:	d11c      	bne.n	8004f7c <HAL_RCC_OscConfig+0x18c>
 8004f42:	4b46      	ldr	r3, [pc, #280]	; (800505c <HAL_RCC_OscConfig+0x26c>)
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d116      	bne.n	8004f7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f4e:	4b43      	ldr	r3, [pc, #268]	; (800505c <HAL_RCC_OscConfig+0x26c>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d005      	beq.n	8004f66 <HAL_RCC_OscConfig+0x176>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d001      	beq.n	8004f66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e1ba      	b.n	80052dc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f66:	4b3d      	ldr	r3, [pc, #244]	; (800505c <HAL_RCC_OscConfig+0x26c>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	4939      	ldr	r1, [pc, #228]	; (800505c <HAL_RCC_OscConfig+0x26c>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f7a:	e03a      	b.n	8004ff2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d020      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f84:	4b36      	ldr	r3, [pc, #216]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 8004f86:	2201      	movs	r2, #1
 8004f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f8a:	f7fd fb5f 	bl	800264c <HAL_GetTick>
 8004f8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f90:	e008      	b.n	8004fa4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f92:	f7fd fb5b 	bl	800264c <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e19b      	b.n	80052dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fa4:	4b2d      	ldr	r3, [pc, #180]	; (800505c <HAL_RCC_OscConfig+0x26c>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0f0      	beq.n	8004f92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fb0:	4b2a      	ldr	r3, [pc, #168]	; (800505c <HAL_RCC_OscConfig+0x26c>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	4927      	ldr	r1, [pc, #156]	; (800505c <HAL_RCC_OscConfig+0x26c>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	600b      	str	r3, [r1, #0]
 8004fc4:	e015      	b.n	8004ff2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fc6:	4b26      	ldr	r3, [pc, #152]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fcc:	f7fd fb3e 	bl	800264c <HAL_GetTick>
 8004fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fd4:	f7fd fb3a 	bl	800264c <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e17a      	b.n	80052dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fe6:	4b1d      	ldr	r3, [pc, #116]	; (800505c <HAL_RCC_OscConfig+0x26c>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1f0      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0308 	and.w	r3, r3, #8
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d03a      	beq.n	8005074 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d019      	beq.n	800503a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005006:	4b17      	ldr	r3, [pc, #92]	; (8005064 <HAL_RCC_OscConfig+0x274>)
 8005008:	2201      	movs	r2, #1
 800500a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800500c:	f7fd fb1e 	bl	800264c <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005014:	f7fd fb1a 	bl	800264c <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e15a      	b.n	80052dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005026:	4b0d      	ldr	r3, [pc, #52]	; (800505c <HAL_RCC_OscConfig+0x26c>)
 8005028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0f0      	beq.n	8005014 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005032:	2001      	movs	r0, #1
 8005034:	f000 facc 	bl	80055d0 <RCC_Delay>
 8005038:	e01c      	b.n	8005074 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800503a:	4b0a      	ldr	r3, [pc, #40]	; (8005064 <HAL_RCC_OscConfig+0x274>)
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005040:	f7fd fb04 	bl	800264c <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005046:	e00f      	b.n	8005068 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005048:	f7fd fb00 	bl	800264c <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d908      	bls.n	8005068 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e140      	b.n	80052dc <HAL_RCC_OscConfig+0x4ec>
 800505a:	bf00      	nop
 800505c:	40021000 	.word	0x40021000
 8005060:	42420000 	.word	0x42420000
 8005064:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005068:	4b9e      	ldr	r3, [pc, #632]	; (80052e4 <HAL_RCC_OscConfig+0x4f4>)
 800506a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1e9      	bne.n	8005048 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0304 	and.w	r3, r3, #4
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 80a6 	beq.w	80051ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005082:	2300      	movs	r3, #0
 8005084:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005086:	4b97      	ldr	r3, [pc, #604]	; (80052e4 <HAL_RCC_OscConfig+0x4f4>)
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10d      	bne.n	80050ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005092:	4b94      	ldr	r3, [pc, #592]	; (80052e4 <HAL_RCC_OscConfig+0x4f4>)
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	4a93      	ldr	r2, [pc, #588]	; (80052e4 <HAL_RCC_OscConfig+0x4f4>)
 8005098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800509c:	61d3      	str	r3, [r2, #28]
 800509e:	4b91      	ldr	r3, [pc, #580]	; (80052e4 <HAL_RCC_OscConfig+0x4f4>)
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a6:	60bb      	str	r3, [r7, #8]
 80050a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050aa:	2301      	movs	r3, #1
 80050ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ae:	4b8e      	ldr	r3, [pc, #568]	; (80052e8 <HAL_RCC_OscConfig+0x4f8>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d118      	bne.n	80050ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050ba:	4b8b      	ldr	r3, [pc, #556]	; (80052e8 <HAL_RCC_OscConfig+0x4f8>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a8a      	ldr	r2, [pc, #552]	; (80052e8 <HAL_RCC_OscConfig+0x4f8>)
 80050c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050c6:	f7fd fac1 	bl	800264c <HAL_GetTick>
 80050ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050cc:	e008      	b.n	80050e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ce:	f7fd fabd 	bl	800264c <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	2b64      	cmp	r3, #100	; 0x64
 80050da:	d901      	bls.n	80050e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e0fd      	b.n	80052dc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050e0:	4b81      	ldr	r3, [pc, #516]	; (80052e8 <HAL_RCC_OscConfig+0x4f8>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d0f0      	beq.n	80050ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d106      	bne.n	8005102 <HAL_RCC_OscConfig+0x312>
 80050f4:	4b7b      	ldr	r3, [pc, #492]	; (80052e4 <HAL_RCC_OscConfig+0x4f4>)
 80050f6:	6a1b      	ldr	r3, [r3, #32]
 80050f8:	4a7a      	ldr	r2, [pc, #488]	; (80052e4 <HAL_RCC_OscConfig+0x4f4>)
 80050fa:	f043 0301 	orr.w	r3, r3, #1
 80050fe:	6213      	str	r3, [r2, #32]
 8005100:	e02d      	b.n	800515e <HAL_RCC_OscConfig+0x36e>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10c      	bne.n	8005124 <HAL_RCC_OscConfig+0x334>
 800510a:	4b76      	ldr	r3, [pc, #472]	; (80052e4 <HAL_RCC_OscConfig+0x4f4>)
 800510c:	6a1b      	ldr	r3, [r3, #32]
 800510e:	4a75      	ldr	r2, [pc, #468]	; (80052e4 <HAL_RCC_OscConfig+0x4f4>)
 8005110:	f023 0301 	bic.w	r3, r3, #1
 8005114:	6213      	str	r3, [r2, #32]
 8005116:	4b73      	ldr	r3, [pc, #460]	; (80052e4 <HAL_RCC_OscConfig+0x4f4>)
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	4a72      	ldr	r2, [pc, #456]	; (80052e4 <HAL_RCC_OscConfig+0x4f4>)
 800511c:	f023 0304 	bic.w	r3, r3, #4
 8005120:	6213      	str	r3, [r2, #32]
 8005122:	e01c      	b.n	800515e <HAL_RCC_OscConfig+0x36e>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	2b05      	cmp	r3, #5
 800512a:	d10c      	bne.n	8005146 <HAL_RCC_OscConfig+0x356>
 800512c:	4b6d      	ldr	r3, [pc, #436]	; (80052e4 <HAL_RCC_OscConfig+0x4f4>)
 800512e:	6a1b      	ldr	r3, [r3, #32]
 8005130:	4a6c      	ldr	r2, [pc, #432]	; (80052e4 <HAL_RCC_OscConfig+0x4f4>)
 8005132:	f043 0304 	orr.w	r3, r3, #4
 8005136:	6213      	str	r3, [r2, #32]
 8005138:	4b6a      	ldr	r3, [pc, #424]	; (80052e4 <HAL_RCC_OscConfig+0x4f4>)
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	4a69      	ldr	r2, [pc, #420]	; (80052e4 <HAL_RCC_OscConfig+0x4f4>)
 800513e:	f043 0301 	orr.w	r3, r3, #1
 8005142:	6213      	str	r3, [r2, #32]
 8005144:	e00b      	b.n	800515e <HAL_RCC_OscConfig+0x36e>
 8005146:	4b67      	ldr	r3, [pc, #412]	; (80052e4 <HAL_RCC_OscConfig+0x4f4>)
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	4a66      	ldr	r2, [pc, #408]	; (80052e4 <HAL_RCC_OscConfig+0x4f4>)
 800514c:	f023 0301 	bic.w	r3, r3, #1
 8005150:	6213      	str	r3, [r2, #32]
 8005152:	4b64      	ldr	r3, [pc, #400]	; (80052e4 <HAL_RCC_OscConfig+0x4f4>)
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	4a63      	ldr	r2, [pc, #396]	; (80052e4 <HAL_RCC_OscConfig+0x4f4>)
 8005158:	f023 0304 	bic.w	r3, r3, #4
 800515c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d015      	beq.n	8005192 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005166:	f7fd fa71 	bl	800264c <HAL_GetTick>
 800516a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800516c:	e00a      	b.n	8005184 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800516e:	f7fd fa6d 	bl	800264c <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	f241 3288 	movw	r2, #5000	; 0x1388
 800517c:	4293      	cmp	r3, r2
 800517e:	d901      	bls.n	8005184 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e0ab      	b.n	80052dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005184:	4b57      	ldr	r3, [pc, #348]	; (80052e4 <HAL_RCC_OscConfig+0x4f4>)
 8005186:	6a1b      	ldr	r3, [r3, #32]
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0ee      	beq.n	800516e <HAL_RCC_OscConfig+0x37e>
 8005190:	e014      	b.n	80051bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005192:	f7fd fa5b 	bl	800264c <HAL_GetTick>
 8005196:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005198:	e00a      	b.n	80051b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800519a:	f7fd fa57 	bl	800264c <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d901      	bls.n	80051b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e095      	b.n	80052dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051b0:	4b4c      	ldr	r3, [pc, #304]	; (80052e4 <HAL_RCC_OscConfig+0x4f4>)
 80051b2:	6a1b      	ldr	r3, [r3, #32]
 80051b4:	f003 0302 	and.w	r3, r3, #2
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1ee      	bne.n	800519a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80051bc:	7dfb      	ldrb	r3, [r7, #23]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d105      	bne.n	80051ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051c2:	4b48      	ldr	r3, [pc, #288]	; (80052e4 <HAL_RCC_OscConfig+0x4f4>)
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	4a47      	ldr	r2, [pc, #284]	; (80052e4 <HAL_RCC_OscConfig+0x4f4>)
 80051c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f000 8081 	beq.w	80052da <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051d8:	4b42      	ldr	r3, [pc, #264]	; (80052e4 <HAL_RCC_OscConfig+0x4f4>)
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f003 030c 	and.w	r3, r3, #12
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	d061      	beq.n	80052a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	69db      	ldr	r3, [r3, #28]
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d146      	bne.n	800527a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ec:	4b3f      	ldr	r3, [pc, #252]	; (80052ec <HAL_RCC_OscConfig+0x4fc>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f2:	f7fd fa2b 	bl	800264c <HAL_GetTick>
 80051f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051f8:	e008      	b.n	800520c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051fa:	f7fd fa27 	bl	800264c <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	2b02      	cmp	r3, #2
 8005206:	d901      	bls.n	800520c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e067      	b.n	80052dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800520c:	4b35      	ldr	r3, [pc, #212]	; (80052e4 <HAL_RCC_OscConfig+0x4f4>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1f0      	bne.n	80051fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005220:	d108      	bne.n	8005234 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005222:	4b30      	ldr	r3, [pc, #192]	; (80052e4 <HAL_RCC_OscConfig+0x4f4>)
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	492d      	ldr	r1, [pc, #180]	; (80052e4 <HAL_RCC_OscConfig+0x4f4>)
 8005230:	4313      	orrs	r3, r2
 8005232:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005234:	4b2b      	ldr	r3, [pc, #172]	; (80052e4 <HAL_RCC_OscConfig+0x4f4>)
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a19      	ldr	r1, [r3, #32]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005244:	430b      	orrs	r3, r1
 8005246:	4927      	ldr	r1, [pc, #156]	; (80052e4 <HAL_RCC_OscConfig+0x4f4>)
 8005248:	4313      	orrs	r3, r2
 800524a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800524c:	4b27      	ldr	r3, [pc, #156]	; (80052ec <HAL_RCC_OscConfig+0x4fc>)
 800524e:	2201      	movs	r2, #1
 8005250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005252:	f7fd f9fb 	bl	800264c <HAL_GetTick>
 8005256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005258:	e008      	b.n	800526c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800525a:	f7fd f9f7 	bl	800264c <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b02      	cmp	r3, #2
 8005266:	d901      	bls.n	800526c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e037      	b.n	80052dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800526c:	4b1d      	ldr	r3, [pc, #116]	; (80052e4 <HAL_RCC_OscConfig+0x4f4>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d0f0      	beq.n	800525a <HAL_RCC_OscConfig+0x46a>
 8005278:	e02f      	b.n	80052da <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800527a:	4b1c      	ldr	r3, [pc, #112]	; (80052ec <HAL_RCC_OscConfig+0x4fc>)
 800527c:	2200      	movs	r2, #0
 800527e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005280:	f7fd f9e4 	bl	800264c <HAL_GetTick>
 8005284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005286:	e008      	b.n	800529a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005288:	f7fd f9e0 	bl	800264c <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b02      	cmp	r3, #2
 8005294:	d901      	bls.n	800529a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e020      	b.n	80052dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800529a:	4b12      	ldr	r3, [pc, #72]	; (80052e4 <HAL_RCC_OscConfig+0x4f4>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1f0      	bne.n	8005288 <HAL_RCC_OscConfig+0x498>
 80052a6:	e018      	b.n	80052da <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d101      	bne.n	80052b4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e013      	b.n	80052dc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80052b4:	4b0b      	ldr	r3, [pc, #44]	; (80052e4 <HAL_RCC_OscConfig+0x4f4>)
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d106      	bne.n	80052d6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d001      	beq.n	80052da <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e000      	b.n	80052dc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3718      	adds	r7, #24
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	40021000 	.word	0x40021000
 80052e8:	40007000 	.word	0x40007000
 80052ec:	42420060 	.word	0x42420060

080052f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d101      	bne.n	8005304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e0d0      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005304:	4b6a      	ldr	r3, [pc, #424]	; (80054b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0307 	and.w	r3, r3, #7
 800530c:	683a      	ldr	r2, [r7, #0]
 800530e:	429a      	cmp	r2, r3
 8005310:	d910      	bls.n	8005334 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005312:	4b67      	ldr	r3, [pc, #412]	; (80054b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f023 0207 	bic.w	r2, r3, #7
 800531a:	4965      	ldr	r1, [pc, #404]	; (80054b0 <HAL_RCC_ClockConfig+0x1c0>)
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	4313      	orrs	r3, r2
 8005320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005322:	4b63      	ldr	r3, [pc, #396]	; (80054b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	683a      	ldr	r2, [r7, #0]
 800532c:	429a      	cmp	r2, r3
 800532e:	d001      	beq.n	8005334 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e0b8      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0302 	and.w	r3, r3, #2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d020      	beq.n	8005382 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0304 	and.w	r3, r3, #4
 8005348:	2b00      	cmp	r3, #0
 800534a:	d005      	beq.n	8005358 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800534c:	4b59      	ldr	r3, [pc, #356]	; (80054b4 <HAL_RCC_ClockConfig+0x1c4>)
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	4a58      	ldr	r2, [pc, #352]	; (80054b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005352:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005356:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0308 	and.w	r3, r3, #8
 8005360:	2b00      	cmp	r3, #0
 8005362:	d005      	beq.n	8005370 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005364:	4b53      	ldr	r3, [pc, #332]	; (80054b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	4a52      	ldr	r2, [pc, #328]	; (80054b4 <HAL_RCC_ClockConfig+0x1c4>)
 800536a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800536e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005370:	4b50      	ldr	r3, [pc, #320]	; (80054b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	494d      	ldr	r1, [pc, #308]	; (80054b4 <HAL_RCC_ClockConfig+0x1c4>)
 800537e:	4313      	orrs	r3, r2
 8005380:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b00      	cmp	r3, #0
 800538c:	d040      	beq.n	8005410 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d107      	bne.n	80053a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005396:	4b47      	ldr	r3, [pc, #284]	; (80054b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d115      	bne.n	80053ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e07f      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d107      	bne.n	80053be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053ae:	4b41      	ldr	r3, [pc, #260]	; (80054b4 <HAL_RCC_ClockConfig+0x1c4>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d109      	bne.n	80053ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e073      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053be:	4b3d      	ldr	r3, [pc, #244]	; (80054b4 <HAL_RCC_ClockConfig+0x1c4>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e06b      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053ce:	4b39      	ldr	r3, [pc, #228]	; (80054b4 <HAL_RCC_ClockConfig+0x1c4>)
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f023 0203 	bic.w	r2, r3, #3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	4936      	ldr	r1, [pc, #216]	; (80054b4 <HAL_RCC_ClockConfig+0x1c4>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053e0:	f7fd f934 	bl	800264c <HAL_GetTick>
 80053e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053e6:	e00a      	b.n	80053fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053e8:	f7fd f930 	bl	800264c <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e053      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053fe:	4b2d      	ldr	r3, [pc, #180]	; (80054b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f003 020c 	and.w	r2, r3, #12
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	429a      	cmp	r2, r3
 800540e:	d1eb      	bne.n	80053e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005410:	4b27      	ldr	r3, [pc, #156]	; (80054b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0307 	and.w	r3, r3, #7
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	429a      	cmp	r2, r3
 800541c:	d210      	bcs.n	8005440 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800541e:	4b24      	ldr	r3, [pc, #144]	; (80054b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f023 0207 	bic.w	r2, r3, #7
 8005426:	4922      	ldr	r1, [pc, #136]	; (80054b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	4313      	orrs	r3, r2
 800542c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800542e:	4b20      	ldr	r3, [pc, #128]	; (80054b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0307 	and.w	r3, r3, #7
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	429a      	cmp	r2, r3
 800543a:	d001      	beq.n	8005440 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e032      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0304 	and.w	r3, r3, #4
 8005448:	2b00      	cmp	r3, #0
 800544a:	d008      	beq.n	800545e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800544c:	4b19      	ldr	r3, [pc, #100]	; (80054b4 <HAL_RCC_ClockConfig+0x1c4>)
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	4916      	ldr	r1, [pc, #88]	; (80054b4 <HAL_RCC_ClockConfig+0x1c4>)
 800545a:	4313      	orrs	r3, r2
 800545c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0308 	and.w	r3, r3, #8
 8005466:	2b00      	cmp	r3, #0
 8005468:	d009      	beq.n	800547e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800546a:	4b12      	ldr	r3, [pc, #72]	; (80054b4 <HAL_RCC_ClockConfig+0x1c4>)
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	00db      	lsls	r3, r3, #3
 8005478:	490e      	ldr	r1, [pc, #56]	; (80054b4 <HAL_RCC_ClockConfig+0x1c4>)
 800547a:	4313      	orrs	r3, r2
 800547c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800547e:	f000 f821 	bl	80054c4 <HAL_RCC_GetSysClockFreq>
 8005482:	4602      	mov	r2, r0
 8005484:	4b0b      	ldr	r3, [pc, #44]	; (80054b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	091b      	lsrs	r3, r3, #4
 800548a:	f003 030f 	and.w	r3, r3, #15
 800548e:	490a      	ldr	r1, [pc, #40]	; (80054b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005490:	5ccb      	ldrb	r3, [r1, r3]
 8005492:	fa22 f303 	lsr.w	r3, r2, r3
 8005496:	4a09      	ldr	r2, [pc, #36]	; (80054bc <HAL_RCC_ClockConfig+0x1cc>)
 8005498:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800549a:	4b09      	ldr	r3, [pc, #36]	; (80054c0 <HAL_RCC_ClockConfig+0x1d0>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4618      	mov	r0, r3
 80054a0:	f7fd f892 	bl	80025c8 <HAL_InitTick>

  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	40022000 	.word	0x40022000
 80054b4:	40021000 	.word	0x40021000
 80054b8:	0800a150 	.word	0x0800a150
 80054bc:	20000000 	.word	0x20000000
 80054c0:	2000000c 	.word	0x2000000c

080054c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	60fb      	str	r3, [r7, #12]
 80054ce:	2300      	movs	r3, #0
 80054d0:	60bb      	str	r3, [r7, #8]
 80054d2:	2300      	movs	r3, #0
 80054d4:	617b      	str	r3, [r7, #20]
 80054d6:	2300      	movs	r3, #0
 80054d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80054da:	2300      	movs	r3, #0
 80054dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80054de:	4b1e      	ldr	r3, [pc, #120]	; (8005558 <HAL_RCC_GetSysClockFreq+0x94>)
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f003 030c 	and.w	r3, r3, #12
 80054ea:	2b04      	cmp	r3, #4
 80054ec:	d002      	beq.n	80054f4 <HAL_RCC_GetSysClockFreq+0x30>
 80054ee:	2b08      	cmp	r3, #8
 80054f0:	d003      	beq.n	80054fa <HAL_RCC_GetSysClockFreq+0x36>
 80054f2:	e027      	b.n	8005544 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80054f4:	4b19      	ldr	r3, [pc, #100]	; (800555c <HAL_RCC_GetSysClockFreq+0x98>)
 80054f6:	613b      	str	r3, [r7, #16]
      break;
 80054f8:	e027      	b.n	800554a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	0c9b      	lsrs	r3, r3, #18
 80054fe:	f003 030f 	and.w	r3, r3, #15
 8005502:	4a17      	ldr	r2, [pc, #92]	; (8005560 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005504:	5cd3      	ldrb	r3, [r2, r3]
 8005506:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d010      	beq.n	8005534 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005512:	4b11      	ldr	r3, [pc, #68]	; (8005558 <HAL_RCC_GetSysClockFreq+0x94>)
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	0c5b      	lsrs	r3, r3, #17
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	4a11      	ldr	r2, [pc, #68]	; (8005564 <HAL_RCC_GetSysClockFreq+0xa0>)
 800551e:	5cd3      	ldrb	r3, [r2, r3]
 8005520:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a0d      	ldr	r2, [pc, #52]	; (800555c <HAL_RCC_GetSysClockFreq+0x98>)
 8005526:	fb02 f203 	mul.w	r2, r2, r3
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005530:	617b      	str	r3, [r7, #20]
 8005532:	e004      	b.n	800553e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a0c      	ldr	r2, [pc, #48]	; (8005568 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005538:	fb02 f303 	mul.w	r3, r2, r3
 800553c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	613b      	str	r3, [r7, #16]
      break;
 8005542:	e002      	b.n	800554a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005544:	4b05      	ldr	r3, [pc, #20]	; (800555c <HAL_RCC_GetSysClockFreq+0x98>)
 8005546:	613b      	str	r3, [r7, #16]
      break;
 8005548:	bf00      	nop
    }
  }
  return sysclockfreq;
 800554a:	693b      	ldr	r3, [r7, #16]
}
 800554c:	4618      	mov	r0, r3
 800554e:	371c      	adds	r7, #28
 8005550:	46bd      	mov	sp, r7
 8005552:	bc80      	pop	{r7}
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	40021000 	.word	0x40021000
 800555c:	007a1200 	.word	0x007a1200
 8005560:	0800aec4 	.word	0x0800aec4
 8005564:	0800aed4 	.word	0x0800aed4
 8005568:	003d0900 	.word	0x003d0900

0800556c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800556c:	b480      	push	{r7}
 800556e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005570:	4b02      	ldr	r3, [pc, #8]	; (800557c <HAL_RCC_GetHCLKFreq+0x10>)
 8005572:	681b      	ldr	r3, [r3, #0]
}
 8005574:	4618      	mov	r0, r3
 8005576:	46bd      	mov	sp, r7
 8005578:	bc80      	pop	{r7}
 800557a:	4770      	bx	lr
 800557c:	20000000 	.word	0x20000000

08005580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005584:	f7ff fff2 	bl	800556c <HAL_RCC_GetHCLKFreq>
 8005588:	4602      	mov	r2, r0
 800558a:	4b05      	ldr	r3, [pc, #20]	; (80055a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	0a1b      	lsrs	r3, r3, #8
 8005590:	f003 0307 	and.w	r3, r3, #7
 8005594:	4903      	ldr	r1, [pc, #12]	; (80055a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005596:	5ccb      	ldrb	r3, [r1, r3]
 8005598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800559c:	4618      	mov	r0, r3
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	40021000 	.word	0x40021000
 80055a4:	0800a160 	.word	0x0800a160

080055a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80055ac:	f7ff ffde 	bl	800556c <HAL_RCC_GetHCLKFreq>
 80055b0:	4602      	mov	r2, r0
 80055b2:	4b05      	ldr	r3, [pc, #20]	; (80055c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	0adb      	lsrs	r3, r3, #11
 80055b8:	f003 0307 	and.w	r3, r3, #7
 80055bc:	4903      	ldr	r1, [pc, #12]	; (80055cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80055be:	5ccb      	ldrb	r3, [r1, r3]
 80055c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	40021000 	.word	0x40021000
 80055cc:	0800a160 	.word	0x0800a160

080055d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80055d8:	4b0a      	ldr	r3, [pc, #40]	; (8005604 <RCC_Delay+0x34>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a0a      	ldr	r2, [pc, #40]	; (8005608 <RCC_Delay+0x38>)
 80055de:	fba2 2303 	umull	r2, r3, r2, r3
 80055e2:	0a5b      	lsrs	r3, r3, #9
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	fb02 f303 	mul.w	r3, r2, r3
 80055ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80055ec:	bf00      	nop
  }
  while (Delay --);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	1e5a      	subs	r2, r3, #1
 80055f2:	60fa      	str	r2, [r7, #12]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1f9      	bne.n	80055ec <RCC_Delay+0x1c>
}
 80055f8:	bf00      	nop
 80055fa:	bf00      	nop
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	bc80      	pop	{r7}
 8005602:	4770      	bx	lr
 8005604:	20000000 	.word	0x20000000
 8005608:	10624dd3 	.word	0x10624dd3

0800560c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b086      	sub	sp, #24
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005614:	2300      	movs	r3, #0
 8005616:	613b      	str	r3, [r7, #16]
 8005618:	2300      	movs	r3, #0
 800561a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	2b00      	cmp	r3, #0
 8005626:	d07d      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005628:	2300      	movs	r3, #0
 800562a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800562c:	4b4f      	ldr	r3, [pc, #316]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800562e:	69db      	ldr	r3, [r3, #28]
 8005630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10d      	bne.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005638:	4b4c      	ldr	r3, [pc, #304]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800563a:	69db      	ldr	r3, [r3, #28]
 800563c:	4a4b      	ldr	r2, [pc, #300]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800563e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005642:	61d3      	str	r3, [r2, #28]
 8005644:	4b49      	ldr	r3, [pc, #292]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005646:	69db      	ldr	r3, [r3, #28]
 8005648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800564c:	60bb      	str	r3, [r7, #8]
 800564e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005650:	2301      	movs	r3, #1
 8005652:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005654:	4b46      	ldr	r3, [pc, #280]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565c:	2b00      	cmp	r3, #0
 800565e:	d118      	bne.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005660:	4b43      	ldr	r3, [pc, #268]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a42      	ldr	r2, [pc, #264]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800566a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800566c:	f7fc ffee 	bl	800264c <HAL_GetTick>
 8005670:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005672:	e008      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005674:	f7fc ffea 	bl	800264c <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b64      	cmp	r3, #100	; 0x64
 8005680:	d901      	bls.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e06d      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005686:	4b3a      	ldr	r3, [pc, #232]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568e:	2b00      	cmp	r3, #0
 8005690:	d0f0      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005692:	4b36      	ldr	r3, [pc, #216]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800569a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d02e      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d027      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056b0:	4b2e      	ldr	r3, [pc, #184]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056b2:	6a1b      	ldr	r3, [r3, #32]
 80056b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056ba:	4b2e      	ldr	r3, [pc, #184]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80056bc:	2201      	movs	r2, #1
 80056be:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056c0:	4b2c      	ldr	r3, [pc, #176]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80056c6:	4a29      	ldr	r2, [pc, #164]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d014      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d6:	f7fc ffb9 	bl	800264c <HAL_GetTick>
 80056da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056dc:	e00a      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056de:	f7fc ffb5 	bl	800264c <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d901      	bls.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e036      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056f4:	4b1d      	ldr	r3, [pc, #116]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056f6:	6a1b      	ldr	r3, [r3, #32]
 80056f8:	f003 0302 	and.w	r3, r3, #2
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d0ee      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005700:	4b1a      	ldr	r3, [pc, #104]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005702:	6a1b      	ldr	r3, [r3, #32]
 8005704:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	4917      	ldr	r1, [pc, #92]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800570e:	4313      	orrs	r3, r2
 8005710:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005712:	7dfb      	ldrb	r3, [r7, #23]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d105      	bne.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005718:	4b14      	ldr	r3, [pc, #80]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	4a13      	ldr	r2, [pc, #76]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800571e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005722:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0302 	and.w	r3, r3, #2
 800572c:	2b00      	cmp	r3, #0
 800572e:	d008      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005730:	4b0e      	ldr	r3, [pc, #56]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	490b      	ldr	r1, [pc, #44]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800573e:	4313      	orrs	r3, r2
 8005740:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0310 	and.w	r3, r3, #16
 800574a:	2b00      	cmp	r3, #0
 800574c:	d008      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800574e:	4b07      	ldr	r3, [pc, #28]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	4904      	ldr	r1, [pc, #16]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800575c:	4313      	orrs	r3, r2
 800575e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3718      	adds	r7, #24
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	40021000 	.word	0x40021000
 8005770:	40007000 	.word	0x40007000
 8005774:	42420440 	.word	0x42420440

08005778 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b088      	sub	sp, #32
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	617b      	str	r3, [r7, #20]
 8005784:	2300      	movs	r3, #0
 8005786:	61fb      	str	r3, [r7, #28]
 8005788:	2300      	movs	r3, #0
 800578a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800578c:	2300      	movs	r3, #0
 800578e:	60fb      	str	r3, [r7, #12]
 8005790:	2300      	movs	r3, #0
 8005792:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b10      	cmp	r3, #16
 8005798:	d00a      	beq.n	80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2b10      	cmp	r3, #16
 800579e:	f200 808a 	bhi.w	80058b6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d045      	beq.n	8005834 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d075      	beq.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80057ae:	e082      	b.n	80058b6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80057b0:	4b46      	ldr	r3, [pc, #280]	; (80058cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80057b6:	4b45      	ldr	r3, [pc, #276]	; (80058cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d07b      	beq.n	80058ba <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	0c9b      	lsrs	r3, r3, #18
 80057c6:	f003 030f 	and.w	r3, r3, #15
 80057ca:	4a41      	ldr	r2, [pc, #260]	; (80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80057cc:	5cd3      	ldrb	r3, [r2, r3]
 80057ce:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d015      	beq.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80057da:	4b3c      	ldr	r3, [pc, #240]	; (80058cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	0c5b      	lsrs	r3, r3, #17
 80057e0:	f003 0301 	and.w	r3, r3, #1
 80057e4:	4a3b      	ldr	r2, [pc, #236]	; (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80057e6:	5cd3      	ldrb	r3, [r2, r3]
 80057e8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00d      	beq.n	8005810 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80057f4:	4a38      	ldr	r2, [pc, #224]	; (80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	fb02 f303 	mul.w	r3, r2, r3
 8005802:	61fb      	str	r3, [r7, #28]
 8005804:	e004      	b.n	8005810 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	4a34      	ldr	r2, [pc, #208]	; (80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800580a:	fb02 f303 	mul.w	r3, r2, r3
 800580e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005810:	4b2e      	ldr	r3, [pc, #184]	; (80058cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005818:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800581c:	d102      	bne.n	8005824 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	61bb      	str	r3, [r7, #24]
      break;
 8005822:	e04a      	b.n	80058ba <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	005b      	lsls	r3, r3, #1
 8005828:	4a2d      	ldr	r2, [pc, #180]	; (80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800582a:	fba2 2303 	umull	r2, r3, r2, r3
 800582e:	085b      	lsrs	r3, r3, #1
 8005830:	61bb      	str	r3, [r7, #24]
      break;
 8005832:	e042      	b.n	80058ba <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005834:	4b25      	ldr	r3, [pc, #148]	; (80058cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005840:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005844:	d108      	bne.n	8005858 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d003      	beq.n	8005858 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005850:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005854:	61bb      	str	r3, [r7, #24]
 8005856:	e01f      	b.n	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800585e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005862:	d109      	bne.n	8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005864:	4b19      	ldr	r3, [pc, #100]	; (80058cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005868:	f003 0302 	and.w	r3, r3, #2
 800586c:	2b00      	cmp	r3, #0
 800586e:	d003      	beq.n	8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005870:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005874:	61bb      	str	r3, [r7, #24]
 8005876:	e00f      	b.n	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800587e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005882:	d11c      	bne.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005884:	4b11      	ldr	r3, [pc, #68]	; (80058cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d016      	beq.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005890:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005894:	61bb      	str	r3, [r7, #24]
      break;
 8005896:	e012      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005898:	e011      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800589a:	f7ff fe85 	bl	80055a8 <HAL_RCC_GetPCLK2Freq>
 800589e:	4602      	mov	r2, r0
 80058a0:	4b0a      	ldr	r3, [pc, #40]	; (80058cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	0b9b      	lsrs	r3, r3, #14
 80058a6:	f003 0303 	and.w	r3, r3, #3
 80058aa:	3301      	adds	r3, #1
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b2:	61bb      	str	r3, [r7, #24]
      break;
 80058b4:	e004      	b.n	80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80058b6:	bf00      	nop
 80058b8:	e002      	b.n	80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80058ba:	bf00      	nop
 80058bc:	e000      	b.n	80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80058be:	bf00      	nop
    }
  }
  return (frequency);
 80058c0:	69bb      	ldr	r3, [r7, #24]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3720      	adds	r7, #32
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	40021000 	.word	0x40021000
 80058d0:	0800aed8 	.word	0x0800aed8
 80058d4:	0800aee8 	.word	0x0800aee8
 80058d8:	007a1200 	.word	0x007a1200
 80058dc:	003d0900 	.word	0x003d0900
 80058e0:	aaaaaaab 	.word	0xaaaaaaab

080058e4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80058ec:	2300      	movs	r3, #0
 80058ee:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e07a      	b.n	80059f0 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	7c5b      	ldrb	r3, [r3, #17]
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b00      	cmp	r3, #0
 8005902:	d105      	bne.n	8005910 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f7fc f83e 	bl	800198c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2202      	movs	r2, #2
 8005914:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 faea 	bl	8005ef0 <HAL_RTC_WaitForSynchro>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d004      	beq.n	800592c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2204      	movs	r2, #4
 8005926:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e061      	b.n	80059f0 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 fba3 	bl	8006078 <RTC_EnterInitMode>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d004      	beq.n	8005942 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2204      	movs	r2, #4
 800593c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e056      	b.n	80059f0 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	685a      	ldr	r2, [r3, #4]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f022 0207 	bic.w	r2, r2, #7
 8005950:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d005      	beq.n	8005966 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800595a:	4b27      	ldr	r3, [pc, #156]	; (80059f8 <HAL_RTC_Init+0x114>)
 800595c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595e:	4a26      	ldr	r2, [pc, #152]	; (80059f8 <HAL_RTC_Init+0x114>)
 8005960:	f023 0301 	bic.w	r3, r3, #1
 8005964:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8005966:	4b24      	ldr	r3, [pc, #144]	; (80059f8 <HAL_RTC_Init+0x114>)
 8005968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	4921      	ldr	r1, [pc, #132]	; (80059f8 <HAL_RTC_Init+0x114>)
 8005974:	4313      	orrs	r3, r2
 8005976:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005980:	d003      	beq.n	800598a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	60fb      	str	r3, [r7, #12]
 8005988:	e00e      	b.n	80059a8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800598a:	2001      	movs	r0, #1
 800598c:	f7ff fef4 	bl	8005778 <HAL_RCCEx_GetPeriphCLKFreq>
 8005990:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d104      	bne.n	80059a2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2204      	movs	r2, #4
 800599c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e026      	b.n	80059f0 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	3b01      	subs	r3, #1
 80059a6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	0c1a      	lsrs	r2, r3, #16
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f002 020f 	and.w	r2, r2, #15
 80059b4:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	b292      	uxth	r2, r2
 80059be:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 fb81 	bl	80060c8 <RTC_ExitInitMode>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d004      	beq.n	80059d6 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2204      	movs	r2, #4
 80059d0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e00c      	b.n	80059f0 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80059ee:	2300      	movs	r3, #0
  }
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	40006c00 	.word	0x40006c00

080059fc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80059fc:	b590      	push	{r4, r7, lr}
 80059fe:	b087      	sub	sp, #28
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	617b      	str	r3, [r7, #20]
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d002      	beq.n	8005a1c <HAL_RTC_SetTime+0x20>
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d101      	bne.n	8005a20 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e080      	b.n	8005b22 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	7c1b      	ldrb	r3, [r3, #16]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d101      	bne.n	8005a2c <HAL_RTC_SetTime+0x30>
 8005a28:	2302      	movs	r3, #2
 8005a2a:	e07a      	b.n	8005b22 <HAL_RTC_SetTime+0x126>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2202      	movs	r2, #2
 8005a36:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d113      	bne.n	8005a66 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	461a      	mov	r2, r3
 8005a44:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005a48:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	785b      	ldrb	r3, [r3, #1]
 8005a50:	4619      	mov	r1, r3
 8005a52:	460b      	mov	r3, r1
 8005a54:	011b      	lsls	r3, r3, #4
 8005a56:	1a5b      	subs	r3, r3, r1
 8005a58:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005a5a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005a60:	4413      	add	r3, r2
 8005a62:	617b      	str	r3, [r7, #20]
 8005a64:	e01e      	b.n	8005aa4 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f000 fb71 	bl	8006152 <RTC_Bcd2ToByte>
 8005a70:	4603      	mov	r3, r0
 8005a72:	461a      	mov	r2, r3
 8005a74:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005a78:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	785b      	ldrb	r3, [r3, #1]
 8005a80:	4618      	mov	r0, r3
 8005a82:	f000 fb66 	bl	8006152 <RTC_Bcd2ToByte>
 8005a86:	4603      	mov	r3, r0
 8005a88:	461a      	mov	r2, r3
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	011b      	lsls	r3, r3, #4
 8005a8e:	1a9b      	subs	r3, r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005a92:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	789b      	ldrb	r3, [r3, #2]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f000 fb5a 	bl	8006152 <RTC_Bcd2ToByte>
 8005a9e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005aa0:	4423      	add	r3, r4
 8005aa2:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005aa4:	6979      	ldr	r1, [r7, #20]
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f000 fa7f 	bl	8005faa <RTC_WriteTimeCounter>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d007      	beq.n	8005ac2 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2204      	movs	r2, #4
 8005ab6:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e02f      	b.n	8005b22 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f022 0205 	bic.w	r2, r2, #5
 8005ad0:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f000 fa90 	bl	8005ff8 <RTC_ReadAlarmCounter>
 8005ad8:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae0:	d018      	beq.n	8005b14 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d214      	bcs.n	8005b14 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005af0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005af4:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005af6:	6939      	ldr	r1, [r7, #16]
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f000 fa96 	bl	800602a <RTC_WriteAlarmCounter>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d007      	beq.n	8005b14 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2204      	movs	r2, #4
 8005b08:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e006      	b.n	8005b22 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2201      	movs	r2, #1
 8005b18:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8005b20:	2300      	movs	r3, #0
  }
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	371c      	adds	r7, #28
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd90      	pop	{r4, r7, pc}
	...

08005b2c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b088      	sub	sp, #32
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	61bb      	str	r3, [r7, #24]
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	61fb      	str	r3, [r7, #28]
 8005b40:	2300      	movs	r3, #0
 8005b42:	617b      	str	r3, [r7, #20]
 8005b44:	2300      	movs	r3, #0
 8005b46:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d002      	beq.n	8005b54 <HAL_RTC_GetTime+0x28>
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e0b5      	b.n	8005cc4 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f003 0304 	and.w	r3, r3, #4
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d001      	beq.n	8005b6a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e0ac      	b.n	8005cc4 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f000 f9ed 	bl	8005f4a <RTC_ReadTimeCounter>
 8005b70:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	4a55      	ldr	r2, [pc, #340]	; (8005ccc <HAL_RTC_GetTime+0x1a0>)
 8005b76:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7a:	0adb      	lsrs	r3, r3, #11
 8005b7c:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	4b52      	ldr	r3, [pc, #328]	; (8005ccc <HAL_RTC_GetTime+0x1a0>)
 8005b82:	fba3 1302 	umull	r1, r3, r3, r2
 8005b86:	0adb      	lsrs	r3, r3, #11
 8005b88:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005b8c:	fb01 f303 	mul.w	r3, r1, r3
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	4a4f      	ldr	r2, [pc, #316]	; (8005cd0 <HAL_RTC_GetTime+0x1a4>)
 8005b94:	fba2 2303 	umull	r2, r3, r2, r3
 8005b98:	095b      	lsrs	r3, r3, #5
 8005b9a:	b2da      	uxtb	r2, r3
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	4a4a      	ldr	r2, [pc, #296]	; (8005ccc <HAL_RTC_GetTime+0x1a0>)
 8005ba4:	fba2 1203 	umull	r1, r2, r2, r3
 8005ba8:	0ad2      	lsrs	r2, r2, #11
 8005baa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005bae:	fb01 f202 	mul.w	r2, r1, r2
 8005bb2:	1a9a      	subs	r2, r3, r2
 8005bb4:	4b46      	ldr	r3, [pc, #280]	; (8005cd0 <HAL_RTC_GetTime+0x1a4>)
 8005bb6:	fba3 1302 	umull	r1, r3, r3, r2
 8005bba:	0959      	lsrs	r1, r3, #5
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	011b      	lsls	r3, r3, #4
 8005bc0:	1a5b      	subs	r3, r3, r1
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	1ad1      	subs	r1, r2, r3
 8005bc6:	b2ca      	uxtb	r2, r1
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	2b17      	cmp	r3, #23
 8005bd0:	d955      	bls.n	8005c7e <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	4a3f      	ldr	r2, [pc, #252]	; (8005cd4 <HAL_RTC_GetTime+0x1a8>)
 8005bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bda:	091b      	lsrs	r3, r3, #4
 8005bdc:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8005bde:	6939      	ldr	r1, [r7, #16]
 8005be0:	4b3c      	ldr	r3, [pc, #240]	; (8005cd4 <HAL_RTC_GetTime+0x1a8>)
 8005be2:	fba3 2301 	umull	r2, r3, r3, r1
 8005be6:	091a      	lsrs	r2, r3, #4
 8005be8:	4613      	mov	r3, r2
 8005bea:	005b      	lsls	r3, r3, #1
 8005bec:	4413      	add	r3, r2
 8005bee:	00db      	lsls	r3, r3, #3
 8005bf0:	1aca      	subs	r2, r1, r3
 8005bf2:	b2d2      	uxtb	r2, r2
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f000 f9fd 	bl	8005ff8 <RTC_ReadAlarmCounter>
 8005bfe:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c06:	d008      	beq.n	8005c1a <HAL_RTC_GetTime+0xee>
 8005c08:	69fa      	ldr	r2, [r7, #28]
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d904      	bls.n	8005c1a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8005c10:	69fa      	ldr	r2, [r7, #28]
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	61fb      	str	r3, [r7, #28]
 8005c18:	e002      	b.n	8005c20 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8005c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c1e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	4a2d      	ldr	r2, [pc, #180]	; (8005cd8 <HAL_RTC_GetTime+0x1ac>)
 8005c24:	fb02 f303 	mul.w	r3, r2, r3
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005c2e:	69b9      	ldr	r1, [r7, #24]
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f000 f9ba 	bl	8005faa <RTC_WriteTimeCounter>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d001      	beq.n	8005c40 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e041      	b.n	8005cc4 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c46:	d00c      	beq.n	8005c62 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8005c48:	69fa      	ldr	r2, [r7, #28]
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005c50:	69f9      	ldr	r1, [r7, #28]
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f000 f9e9 	bl	800602a <RTC_WriteAlarmCounter>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00a      	beq.n	8005c74 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e030      	b.n	8005cc4 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005c62:	69f9      	ldr	r1, [r7, #28]
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f000 f9e0 	bl	800602a <RTC_WriteAlarmCounter>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d001      	beq.n	8005c74 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e027      	b.n	8005cc4 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8005c74:	6979      	ldr	r1, [r7, #20]
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f000 fa88 	bl	800618c <RTC_DateUpdate>
 8005c7c:	e003      	b.n	8005c86 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	b2da      	uxtb	r2, r3
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d01a      	beq.n	8005cc2 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f000 fa41 	bl	8006118 <RTC_ByteToBcd2>
 8005c96:	4603      	mov	r3, r0
 8005c98:	461a      	mov	r2, r3
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	785b      	ldrb	r3, [r3, #1]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f000 fa38 	bl	8006118 <RTC_ByteToBcd2>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	461a      	mov	r2, r3
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	789b      	ldrb	r3, [r3, #2]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f000 fa2f 	bl	8006118 <RTC_ByteToBcd2>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3720      	adds	r7, #32
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	91a2b3c5 	.word	0x91a2b3c5
 8005cd0:	88888889 	.word	0x88888889
 8005cd4:	aaaaaaab 	.word	0xaaaaaaab
 8005cd8:	00015180 	.word	0x00015180

08005cdc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b088      	sub	sp, #32
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	61fb      	str	r3, [r7, #28]
 8005cec:	2300      	movs	r3, #0
 8005cee:	61bb      	str	r3, [r7, #24]
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d002      	beq.n	8005d00 <HAL_RTC_SetDate+0x24>
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d101      	bne.n	8005d04 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e097      	b.n	8005e34 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	7c1b      	ldrb	r3, [r3, #16]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d101      	bne.n	8005d10 <HAL_RTC_SetDate+0x34>
 8005d0c:	2302      	movs	r3, #2
 8005d0e:	e091      	b.n	8005e34 <HAL_RTC_SetDate+0x158>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2201      	movs	r2, #1
 8005d14:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2202      	movs	r2, #2
 8005d1a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10c      	bne.n	8005d3c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	78da      	ldrb	r2, [r3, #3]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	785a      	ldrb	r2, [r3, #1]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	789a      	ldrb	r2, [r3, #2]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	739a      	strb	r2, [r3, #14]
 8005d3a:	e01a      	b.n	8005d72 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	78db      	ldrb	r3, [r3, #3]
 8005d40:	4618      	mov	r0, r3
 8005d42:	f000 fa06 	bl	8006152 <RTC_Bcd2ToByte>
 8005d46:	4603      	mov	r3, r0
 8005d48:	461a      	mov	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	785b      	ldrb	r3, [r3, #1]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 f9fd 	bl	8006152 <RTC_Bcd2ToByte>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	789b      	ldrb	r3, [r3, #2]
 8005d64:	4618      	mov	r0, r3
 8005d66:	f000 f9f4 	bl	8006152 <RTC_Bcd2ToByte>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	7bdb      	ldrb	r3, [r3, #15]
 8005d76:	4618      	mov	r0, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	7b59      	ldrb	r1, [r3, #13]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	7b9b      	ldrb	r3, [r3, #14]
 8005d80:	461a      	mov	r2, r3
 8005d82:	f000 fadf 	bl	8006344 <RTC_WeekDayNum>
 8005d86:	4603      	mov	r3, r0
 8005d88:	461a      	mov	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	7b1a      	ldrb	r2, [r3, #12]
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 f8d7 	bl	8005f4a <RTC_ReadTimeCounter>
 8005d9c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	4a26      	ldr	r2, [pc, #152]	; (8005e3c <HAL_RTC_SetDate+0x160>)
 8005da2:	fba2 2303 	umull	r2, r3, r2, r3
 8005da6:	0adb      	lsrs	r3, r3, #11
 8005da8:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2b18      	cmp	r3, #24
 8005dae:	d93a      	bls.n	8005e26 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	4a23      	ldr	r2, [pc, #140]	; (8005e40 <HAL_RTC_SetDate+0x164>)
 8005db4:	fba2 2303 	umull	r2, r3, r2, r3
 8005db8:	091b      	lsrs	r3, r3, #4
 8005dba:	4a22      	ldr	r2, [pc, #136]	; (8005e44 <HAL_RTC_SetDate+0x168>)
 8005dbc:	fb02 f303 	mul.w	r3, r2, r3
 8005dc0:	69fa      	ldr	r2, [r7, #28]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005dc6:	69f9      	ldr	r1, [r7, #28]
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f000 f8ee 	bl	8005faa <RTC_WriteTimeCounter>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d007      	beq.n	8005de4 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2204      	movs	r2, #4
 8005dd8:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e027      	b.n	8005e34 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 f907 	bl	8005ff8 <RTC_ReadAlarmCounter>
 8005dea:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df2:	d018      	beq.n	8005e26 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8005df4:	69ba      	ldr	r2, [r7, #24]
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d214      	bcs.n	8005e26 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005e02:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005e06:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005e08:	69b9      	ldr	r1, [r7, #24]
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f000 f90d 	bl	800602a <RTC_WriteAlarmCounter>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d007      	beq.n	8005e26 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2204      	movs	r2, #4
 8005e1a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e006      	b.n	8005e34 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3720      	adds	r7, #32
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	91a2b3c5 	.word	0x91a2b3c5
 8005e40:	aaaaaaab 	.word	0xaaaaaaab
 8005e44:	00015180 	.word	0x00015180

08005e48 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8005e54:	f107 0314 	add.w	r3, r7, #20
 8005e58:	2100      	movs	r1, #0
 8005e5a:	460a      	mov	r2, r1
 8005e5c:	801a      	strh	r2, [r3, #0]
 8005e5e:	460a      	mov	r2, r1
 8005e60:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d002      	beq.n	8005e6e <HAL_RTC_GetDate+0x26>
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e03a      	b.n	8005ee8 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8005e72:	f107 0314 	add.w	r3, r7, #20
 8005e76:	2200      	movs	r2, #0
 8005e78:	4619      	mov	r1, r3
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f7ff fe56 	bl	8005b2c <HAL_RTC_GetTime>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e02e      	b.n	8005ee8 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	7b1a      	ldrb	r2, [r3, #12]
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	7bda      	ldrb	r2, [r3, #15]
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	7b5a      	ldrb	r2, [r3, #13]
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	7b9a      	ldrb	r2, [r3, #14]
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d01a      	beq.n	8005ee6 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	78db      	ldrb	r3, [r3, #3]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 f92f 	bl	8006118 <RTC_ByteToBcd2>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	785b      	ldrb	r3, [r3, #1]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f000 f926 	bl	8006118 <RTC_ByteToBcd2>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	461a      	mov	r2, r3
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	789b      	ldrb	r3, [r3, #2]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f000 f91d 	bl	8006118 <RTC_ByteToBcd2>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3718      	adds	r7, #24
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e01d      	b.n	8005f42 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f022 0208 	bic.w	r2, r2, #8
 8005f14:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005f16:	f7fc fb99 	bl	800264c <HAL_GetTick>
 8005f1a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005f1c:	e009      	b.n	8005f32 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005f1e:	f7fc fb95 	bl	800264c <HAL_GetTick>
 8005f22:	4602      	mov	r2, r0
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f2c:	d901      	bls.n	8005f32 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e007      	b.n	8005f42 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f003 0308 	and.w	r3, r3, #8
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d0ee      	beq.n	8005f1e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b087      	sub	sp, #28
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8005f52:	2300      	movs	r3, #0
 8005f54:	827b      	strh	r3, [r7, #18]
 8005f56:	2300      	movs	r3, #0
 8005f58:	823b      	strh	r3, [r7, #16]
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	69db      	ldr	r3, [r3, #28]
 8005f70:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8005f7a:	8a7a      	ldrh	r2, [r7, #18]
 8005f7c:	8a3b      	ldrh	r3, [r7, #16]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d008      	beq.n	8005f94 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8005f82:	8a3b      	ldrh	r3, [r7, #16]
 8005f84:	041a      	lsls	r2, r3, #16
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	69db      	ldr	r3, [r3, #28]
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	617b      	str	r3, [r7, #20]
 8005f92:	e004      	b.n	8005f9e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005f94:	8a7b      	ldrh	r3, [r7, #18]
 8005f96:	041a      	lsls	r2, r3, #16
 8005f98:	89fb      	ldrh	r3, [r7, #14]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8005f9e:	697b      	ldr	r3, [r7, #20]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	371c      	adds	r7, #28
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bc80      	pop	{r7}
 8005fa8:	4770      	bx	lr

08005faa <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b084      	sub	sp, #16
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 f85d 	bl	8006078 <RTC_EnterInitMode>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d002      	beq.n	8005fca <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	73fb      	strb	r3, [r7, #15]
 8005fc8:	e011      	b.n	8005fee <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	0c12      	lsrs	r2, r2, #16
 8005fd2:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	b292      	uxth	r2, r2
 8005fdc:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f872 	bl	80060c8 <RTC_ExitInitMode>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d001      	beq.n	8005fee <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8006000:	2300      	movs	r3, #0
 8006002:	81fb      	strh	r3, [r7, #14]
 8006004:	2300      	movs	r3, #0
 8006006:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006016:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8006018:	89fb      	ldrh	r3, [r7, #14]
 800601a:	041a      	lsls	r2, r3, #16
 800601c:	89bb      	ldrh	r3, [r7, #12]
 800601e:	4313      	orrs	r3, r2
}
 8006020:	4618      	mov	r0, r3
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	bc80      	pop	{r7}
 8006028:	4770      	bx	lr

0800602a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b084      	sub	sp, #16
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
 8006032:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006034:	2300      	movs	r3, #0
 8006036:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 f81d 	bl	8006078 <RTC_EnterInitMode>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d002      	beq.n	800604a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	73fb      	strb	r3, [r7, #15]
 8006048:	e011      	b.n	800606e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	0c12      	lsrs	r2, r2, #16
 8006052:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	683a      	ldr	r2, [r7, #0]
 800605a:	b292      	uxth	r2, r2
 800605c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 f832 	bl	80060c8 <RTC_ExitInitMode>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d001      	beq.n	800606e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800606e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006080:	2300      	movs	r3, #0
 8006082:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8006084:	f7fc fae2 	bl	800264c <HAL_GetTick>
 8006088:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800608a:	e009      	b.n	80060a0 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800608c:	f7fc fade 	bl	800264c <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800609a:	d901      	bls.n	80060a0 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	e00f      	b.n	80060c0 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f003 0320 	and.w	r3, r3, #32
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d0ee      	beq.n	800608c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f042 0210 	orr.w	r2, r2, #16
 80060bc:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060d0:	2300      	movs	r3, #0
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	685a      	ldr	r2, [r3, #4]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 0210 	bic.w	r2, r2, #16
 80060e2:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80060e4:	f7fc fab2 	bl	800264c <HAL_GetTick>
 80060e8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80060ea:	e009      	b.n	8006100 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80060ec:	f7fc faae 	bl	800264c <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060fa:	d901      	bls.n	8006100 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e007      	b.n	8006110 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f003 0320 	and.w	r3, r3, #32
 800610a:	2b00      	cmp	r3, #0
 800610c:	d0ee      	beq.n	80060ec <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	4603      	mov	r3, r0
 8006120:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006122:	2300      	movs	r3, #0
 8006124:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8006126:	e005      	b.n	8006134 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	3301      	adds	r3, #1
 800612c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800612e:	79fb      	ldrb	r3, [r7, #7]
 8006130:	3b0a      	subs	r3, #10
 8006132:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8006134:	79fb      	ldrb	r3, [r7, #7]
 8006136:	2b09      	cmp	r3, #9
 8006138:	d8f6      	bhi.n	8006128 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	b2db      	uxtb	r3, r3
 800613e:	011b      	lsls	r3, r3, #4
 8006140:	b2da      	uxtb	r2, r3
 8006142:	79fb      	ldrb	r3, [r7, #7]
 8006144:	4313      	orrs	r3, r2
 8006146:	b2db      	uxtb	r3, r3
}
 8006148:	4618      	mov	r0, r3
 800614a:	3714      	adds	r7, #20
 800614c:	46bd      	mov	sp, r7
 800614e:	bc80      	pop	{r7}
 8006150:	4770      	bx	lr

08006152 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006152:	b480      	push	{r7}
 8006154:	b085      	sub	sp, #20
 8006156:	af00      	add	r7, sp, #0
 8006158:	4603      	mov	r3, r0
 800615a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800615c:	2300      	movs	r3, #0
 800615e:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8006160:	79fb      	ldrb	r3, [r7, #7]
 8006162:	091b      	lsrs	r3, r3, #4
 8006164:	b2db      	uxtb	r3, r3
 8006166:	461a      	mov	r2, r3
 8006168:	4613      	mov	r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	005b      	lsls	r3, r3, #1
 8006170:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8006172:	79fb      	ldrb	r3, [r7, #7]
 8006174:	f003 030f 	and.w	r3, r3, #15
 8006178:	b2da      	uxtb	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	b2db      	uxtb	r3, r3
 800617e:	4413      	add	r3, r2
 8006180:	b2db      	uxtb	r3, r3
}
 8006182:	4618      	mov	r0, r3
 8006184:	3714      	adds	r7, #20
 8006186:	46bd      	mov	sp, r7
 8006188:	bc80      	pop	{r7}
 800618a:	4770      	bx	lr

0800618c <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b086      	sub	sp, #24
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8006196:	2300      	movs	r3, #0
 8006198:	617b      	str	r3, [r7, #20]
 800619a:	2300      	movs	r3, #0
 800619c:	613b      	str	r3, [r7, #16]
 800619e:	2300      	movs	r3, #0
 80061a0:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80061a2:	2300      	movs	r3, #0
 80061a4:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	7bdb      	ldrb	r3, [r3, #15]
 80061aa:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	7b5b      	ldrb	r3, [r3, #13]
 80061b0:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	7b9b      	ldrb	r3, [r3, #14]
 80061b6:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80061b8:	2300      	movs	r3, #0
 80061ba:	60bb      	str	r3, [r7, #8]
 80061bc:	e06f      	b.n	800629e <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d011      	beq.n	80061e8 <RTC_DateUpdate+0x5c>
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	2b03      	cmp	r3, #3
 80061c8:	d00e      	beq.n	80061e8 <RTC_DateUpdate+0x5c>
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	2b05      	cmp	r3, #5
 80061ce:	d00b      	beq.n	80061e8 <RTC_DateUpdate+0x5c>
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	2b07      	cmp	r3, #7
 80061d4:	d008      	beq.n	80061e8 <RTC_DateUpdate+0x5c>
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	2b08      	cmp	r3, #8
 80061da:	d005      	beq.n	80061e8 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	2b0a      	cmp	r3, #10
 80061e0:	d002      	beq.n	80061e8 <RTC_DateUpdate+0x5c>
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	2b0c      	cmp	r3, #12
 80061e6:	d117      	bne.n	8006218 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2b1e      	cmp	r3, #30
 80061ec:	d803      	bhi.n	80061f6 <RTC_DateUpdate+0x6a>
      {
        day++;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	3301      	adds	r3, #1
 80061f2:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80061f4:	e050      	b.n	8006298 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	2b0c      	cmp	r3, #12
 80061fa:	d005      	beq.n	8006208 <RTC_DateUpdate+0x7c>
        {
          month++;
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	3301      	adds	r3, #1
 8006200:	613b      	str	r3, [r7, #16]
          day = 1U;
 8006202:	2301      	movs	r3, #1
 8006204:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8006206:	e047      	b.n	8006298 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8006208:	2301      	movs	r3, #1
 800620a:	613b      	str	r3, [r7, #16]
          day = 1U;
 800620c:	2301      	movs	r3, #1
 800620e:	60fb      	str	r3, [r7, #12]
          year++;
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	3301      	adds	r3, #1
 8006214:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8006216:	e03f      	b.n	8006298 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	2b04      	cmp	r3, #4
 800621c:	d008      	beq.n	8006230 <RTC_DateUpdate+0xa4>
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	2b06      	cmp	r3, #6
 8006222:	d005      	beq.n	8006230 <RTC_DateUpdate+0xa4>
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	2b09      	cmp	r3, #9
 8006228:	d002      	beq.n	8006230 <RTC_DateUpdate+0xa4>
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	2b0b      	cmp	r3, #11
 800622e:	d10c      	bne.n	800624a <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2b1d      	cmp	r3, #29
 8006234:	d803      	bhi.n	800623e <RTC_DateUpdate+0xb2>
      {
        day++;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	3301      	adds	r3, #1
 800623a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800623c:	e02c      	b.n	8006298 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	3301      	adds	r3, #1
 8006242:	613b      	str	r3, [r7, #16]
        day = 1U;
 8006244:	2301      	movs	r3, #1
 8006246:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8006248:	e026      	b.n	8006298 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	2b02      	cmp	r3, #2
 800624e:	d123      	bne.n	8006298 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2b1b      	cmp	r3, #27
 8006254:	d803      	bhi.n	800625e <RTC_DateUpdate+0xd2>
      {
        day++;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	3301      	adds	r3, #1
 800625a:	60fb      	str	r3, [r7, #12]
 800625c:	e01c      	b.n	8006298 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2b1c      	cmp	r3, #28
 8006262:	d111      	bne.n	8006288 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	b29b      	uxth	r3, r3
 8006268:	4618      	mov	r0, r3
 800626a:	f000 f839 	bl	80062e0 <RTC_IsLeapYear>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d003      	beq.n	800627c <RTC_DateUpdate+0xf0>
        {
          day++;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	3301      	adds	r3, #1
 8006278:	60fb      	str	r3, [r7, #12]
 800627a:	e00d      	b.n	8006298 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	3301      	adds	r3, #1
 8006280:	613b      	str	r3, [r7, #16]
          day = 1U;
 8006282:	2301      	movs	r3, #1
 8006284:	60fb      	str	r3, [r7, #12]
 8006286:	e007      	b.n	8006298 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2b1d      	cmp	r3, #29
 800628c:	d104      	bne.n	8006298 <RTC_DateUpdate+0x10c>
      {
        month++;
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	3301      	adds	r3, #1
 8006292:	613b      	str	r3, [r7, #16]
        day = 1U;
 8006294:	2301      	movs	r3, #1
 8006296:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	3301      	adds	r3, #1
 800629c:	60bb      	str	r3, [r7, #8]
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d38b      	bcc.n	80061be <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	b2da      	uxtb	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	b2da      	uxtb	r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	b2da      	uxtb	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	b2d2      	uxtb	r2, r2
 80062c6:	4619      	mov	r1, r3
 80062c8:	6978      	ldr	r0, [r7, #20]
 80062ca:	f000 f83b 	bl	8006344 <RTC_WeekDayNum>
 80062ce:	4603      	mov	r3, r0
 80062d0:	461a      	mov	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	731a      	strb	r2, [r3, #12]
}
 80062d6:	bf00      	nop
 80062d8:	3718      	adds	r7, #24
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
	...

080062e0 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	4603      	mov	r3, r0
 80062e8:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80062ea:	88fb      	ldrh	r3, [r7, #6]
 80062ec:	f003 0303 	and.w	r3, r3, #3
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80062f6:	2300      	movs	r3, #0
 80062f8:	e01d      	b.n	8006336 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80062fa:	88fb      	ldrh	r3, [r7, #6]
 80062fc:	4a10      	ldr	r2, [pc, #64]	; (8006340 <RTC_IsLeapYear+0x60>)
 80062fe:	fba2 1203 	umull	r1, r2, r2, r3
 8006302:	0952      	lsrs	r2, r2, #5
 8006304:	2164      	movs	r1, #100	; 0x64
 8006306:	fb01 f202 	mul.w	r2, r1, r2
 800630a:	1a9b      	subs	r3, r3, r2
 800630c:	b29b      	uxth	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8006312:	2301      	movs	r3, #1
 8006314:	e00f      	b.n	8006336 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8006316:	88fb      	ldrh	r3, [r7, #6]
 8006318:	4a09      	ldr	r2, [pc, #36]	; (8006340 <RTC_IsLeapYear+0x60>)
 800631a:	fba2 1203 	umull	r1, r2, r2, r3
 800631e:	09d2      	lsrs	r2, r2, #7
 8006320:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006324:	fb01 f202 	mul.w	r2, r1, r2
 8006328:	1a9b      	subs	r3, r3, r2
 800632a:	b29b      	uxth	r3, r3
 800632c:	2b00      	cmp	r3, #0
 800632e:	d101      	bne.n	8006334 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8006330:	2301      	movs	r3, #1
 8006332:	e000      	b.n	8006336 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8006334:	2300      	movs	r3, #0
  }
}
 8006336:	4618      	mov	r0, r3
 8006338:	370c      	adds	r7, #12
 800633a:	46bd      	mov	sp, r7
 800633c:	bc80      	pop	{r7}
 800633e:	4770      	bx	lr
 8006340:	51eb851f 	.word	0x51eb851f

08006344 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8006344:	b480      	push	{r7}
 8006346:	b085      	sub	sp, #20
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	460b      	mov	r3, r1
 800634e:	70fb      	strb	r3, [r7, #3]
 8006350:	4613      	mov	r3, r2
 8006352:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8006354:	2300      	movs	r3, #0
 8006356:	60bb      	str	r3, [r7, #8]
 8006358:	2300      	movs	r3, #0
 800635a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8006362:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8006364:	78fb      	ldrb	r3, [r7, #3]
 8006366:	2b02      	cmp	r3, #2
 8006368:	d82d      	bhi.n	80063c6 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800636a:	78fa      	ldrb	r2, [r7, #3]
 800636c:	4613      	mov	r3, r2
 800636e:	005b      	lsls	r3, r3, #1
 8006370:	4413      	add	r3, r2
 8006372:	00db      	lsls	r3, r3, #3
 8006374:	1a9b      	subs	r3, r3, r2
 8006376:	4a2c      	ldr	r2, [pc, #176]	; (8006428 <RTC_WeekDayNum+0xe4>)
 8006378:	fba2 2303 	umull	r2, r3, r2, r3
 800637c:	085a      	lsrs	r2, r3, #1
 800637e:	78bb      	ldrb	r3, [r7, #2]
 8006380:	441a      	add	r2, r3
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	441a      	add	r2, r3
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	3b01      	subs	r3, #1
 800638a:	089b      	lsrs	r3, r3, #2
 800638c:	441a      	add	r2, r3
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	3b01      	subs	r3, #1
 8006392:	4926      	ldr	r1, [pc, #152]	; (800642c <RTC_WeekDayNum+0xe8>)
 8006394:	fba1 1303 	umull	r1, r3, r1, r3
 8006398:	095b      	lsrs	r3, r3, #5
 800639a:	1ad2      	subs	r2, r2, r3
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	3b01      	subs	r3, #1
 80063a0:	4922      	ldr	r1, [pc, #136]	; (800642c <RTC_WeekDayNum+0xe8>)
 80063a2:	fba1 1303 	umull	r1, r3, r1, r3
 80063a6:	09db      	lsrs	r3, r3, #7
 80063a8:	4413      	add	r3, r2
 80063aa:	1d1a      	adds	r2, r3, #4
 80063ac:	4b20      	ldr	r3, [pc, #128]	; (8006430 <RTC_WeekDayNum+0xec>)
 80063ae:	fba3 1302 	umull	r1, r3, r3, r2
 80063b2:	1ad1      	subs	r1, r2, r3
 80063b4:	0849      	lsrs	r1, r1, #1
 80063b6:	440b      	add	r3, r1
 80063b8:	0899      	lsrs	r1, r3, #2
 80063ba:	460b      	mov	r3, r1
 80063bc:	00db      	lsls	r3, r3, #3
 80063be:	1a5b      	subs	r3, r3, r1
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	60fb      	str	r3, [r7, #12]
 80063c4:	e029      	b.n	800641a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80063c6:	78fa      	ldrb	r2, [r7, #3]
 80063c8:	4613      	mov	r3, r2
 80063ca:	005b      	lsls	r3, r3, #1
 80063cc:	4413      	add	r3, r2
 80063ce:	00db      	lsls	r3, r3, #3
 80063d0:	1a9b      	subs	r3, r3, r2
 80063d2:	4a15      	ldr	r2, [pc, #84]	; (8006428 <RTC_WeekDayNum+0xe4>)
 80063d4:	fba2 2303 	umull	r2, r3, r2, r3
 80063d8:	085a      	lsrs	r2, r3, #1
 80063da:	78bb      	ldrb	r3, [r7, #2]
 80063dc:	441a      	add	r2, r3
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	441a      	add	r2, r3
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	089b      	lsrs	r3, r3, #2
 80063e6:	441a      	add	r2, r3
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	4910      	ldr	r1, [pc, #64]	; (800642c <RTC_WeekDayNum+0xe8>)
 80063ec:	fba1 1303 	umull	r1, r3, r1, r3
 80063f0:	095b      	lsrs	r3, r3, #5
 80063f2:	1ad2      	subs	r2, r2, r3
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	490d      	ldr	r1, [pc, #52]	; (800642c <RTC_WeekDayNum+0xe8>)
 80063f8:	fba1 1303 	umull	r1, r3, r1, r3
 80063fc:	09db      	lsrs	r3, r3, #7
 80063fe:	4413      	add	r3, r2
 8006400:	1c9a      	adds	r2, r3, #2
 8006402:	4b0b      	ldr	r3, [pc, #44]	; (8006430 <RTC_WeekDayNum+0xec>)
 8006404:	fba3 1302 	umull	r1, r3, r3, r2
 8006408:	1ad1      	subs	r1, r2, r3
 800640a:	0849      	lsrs	r1, r1, #1
 800640c:	440b      	add	r3, r1
 800640e:	0899      	lsrs	r1, r3, #2
 8006410:	460b      	mov	r3, r1
 8006412:	00db      	lsls	r3, r3, #3
 8006414:	1a5b      	subs	r3, r3, r1
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	b2db      	uxtb	r3, r3
}
 800641e:	4618      	mov	r0, r3
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	bc80      	pop	{r7}
 8006426:	4770      	bx	lr
 8006428:	38e38e39 	.word	0x38e38e39
 800642c:	51eb851f 	.word	0x51eb851f
 8006430:	24924925 	.word	0x24924925

08006434 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e076      	b.n	8006534 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644a:	2b00      	cmp	r3, #0
 800644c:	d108      	bne.n	8006460 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006456:	d009      	beq.n	800646c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	61da      	str	r2, [r3, #28]
 800645e:	e005      	b.n	800646c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	d106      	bne.n	800648c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7fb faa4 	bl	80019d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2202      	movs	r2, #2
 8006490:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80064b4:	431a      	orrs	r2, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064be:	431a      	orrs	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	f003 0302 	and.w	r3, r3, #2
 80064c8:	431a      	orrs	r2, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	431a      	orrs	r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064dc:	431a      	orrs	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	69db      	ldr	r3, [r3, #28]
 80064e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064e6:	431a      	orrs	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a1b      	ldr	r3, [r3, #32]
 80064ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f0:	ea42 0103 	orr.w	r1, r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	430a      	orrs	r2, r1
 8006502:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	0c1a      	lsrs	r2, r3, #16
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f002 0204 	and.w	r2, r2, #4
 8006512:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	69da      	ldr	r2, [r3, #28]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006522:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2201      	movs	r2, #1
 800652e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b088      	sub	sp, #32
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	603b      	str	r3, [r7, #0]
 8006548:	4613      	mov	r3, r2
 800654a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800654c:	2300      	movs	r3, #0
 800654e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006556:	2b01      	cmp	r3, #1
 8006558:	d101      	bne.n	800655e <HAL_SPI_Transmit+0x22>
 800655a:	2302      	movs	r3, #2
 800655c:	e12d      	b.n	80067ba <HAL_SPI_Transmit+0x27e>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006566:	f7fc f871 	bl	800264c <HAL_GetTick>
 800656a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800656c:	88fb      	ldrh	r3, [r7, #6]
 800656e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006576:	b2db      	uxtb	r3, r3
 8006578:	2b01      	cmp	r3, #1
 800657a:	d002      	beq.n	8006582 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800657c:	2302      	movs	r3, #2
 800657e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006580:	e116      	b.n	80067b0 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d002      	beq.n	800658e <HAL_SPI_Transmit+0x52>
 8006588:	88fb      	ldrh	r3, [r7, #6]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d102      	bne.n	8006594 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006592:	e10d      	b.n	80067b0 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2203      	movs	r2, #3
 8006598:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	88fa      	ldrh	r2, [r7, #6]
 80065ac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	88fa      	ldrh	r2, [r7, #6]
 80065b2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065da:	d10f      	bne.n	80065fc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065fa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006606:	2b40      	cmp	r3, #64	; 0x40
 8006608:	d007      	beq.n	800661a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006618:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006622:	d14f      	bne.n	80066c4 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d002      	beq.n	8006632 <HAL_SPI_Transmit+0xf6>
 800662c:	8afb      	ldrh	r3, [r7, #22]
 800662e:	2b01      	cmp	r3, #1
 8006630:	d142      	bne.n	80066b8 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006636:	881a      	ldrh	r2, [r3, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006642:	1c9a      	adds	r2, r3, #2
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800664c:	b29b      	uxth	r3, r3
 800664e:	3b01      	subs	r3, #1
 8006650:	b29a      	uxth	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006656:	e02f      	b.n	80066b8 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f003 0302 	and.w	r3, r3, #2
 8006662:	2b02      	cmp	r3, #2
 8006664:	d112      	bne.n	800668c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666a:	881a      	ldrh	r2, [r3, #0]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006676:	1c9a      	adds	r2, r3, #2
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006680:	b29b      	uxth	r3, r3
 8006682:	3b01      	subs	r3, #1
 8006684:	b29a      	uxth	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	86da      	strh	r2, [r3, #54]	; 0x36
 800668a:	e015      	b.n	80066b8 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800668c:	f7fb ffde 	bl	800264c <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	683a      	ldr	r2, [r7, #0]
 8006698:	429a      	cmp	r2, r3
 800669a:	d803      	bhi.n	80066a4 <HAL_SPI_Transmit+0x168>
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a2:	d102      	bne.n	80066aa <HAL_SPI_Transmit+0x16e>
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d106      	bne.n	80066b8 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80066b6:	e07b      	b.n	80067b0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066bc:	b29b      	uxth	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1ca      	bne.n	8006658 <HAL_SPI_Transmit+0x11c>
 80066c2:	e050      	b.n	8006766 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <HAL_SPI_Transmit+0x196>
 80066cc:	8afb      	ldrh	r3, [r7, #22]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d144      	bne.n	800675c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	330c      	adds	r3, #12
 80066dc:	7812      	ldrb	r2, [r2, #0]
 80066de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e4:	1c5a      	adds	r2, r3, #1
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	3b01      	subs	r3, #1
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80066f8:	e030      	b.n	800675c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b02      	cmp	r3, #2
 8006706:	d113      	bne.n	8006730 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	330c      	adds	r3, #12
 8006712:	7812      	ldrb	r2, [r2, #0]
 8006714:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671a:	1c5a      	adds	r2, r3, #1
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006724:	b29b      	uxth	r3, r3
 8006726:	3b01      	subs	r3, #1
 8006728:	b29a      	uxth	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	86da      	strh	r2, [r3, #54]	; 0x36
 800672e:	e015      	b.n	800675c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006730:	f7fb ff8c 	bl	800264c <HAL_GetTick>
 8006734:	4602      	mov	r2, r0
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	429a      	cmp	r2, r3
 800673e:	d803      	bhi.n	8006748 <HAL_SPI_Transmit+0x20c>
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006746:	d102      	bne.n	800674e <HAL_SPI_Transmit+0x212>
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d106      	bne.n	800675c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800675a:	e029      	b.n	80067b0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006760:	b29b      	uxth	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1c9      	bne.n	80066fa <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006766:	69ba      	ldr	r2, [r7, #24]
 8006768:	6839      	ldr	r1, [r7, #0]
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f000 f8b2 	bl	80068d4 <SPI_EndRxTxTransaction>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d002      	beq.n	800677c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2220      	movs	r2, #32
 800677a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10a      	bne.n	800679a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006784:	2300      	movs	r3, #0
 8006786:	613b      	str	r3, [r7, #16]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	613b      	str	r3, [r7, #16]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	613b      	str	r3, [r7, #16]
 8006798:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d002      	beq.n	80067a8 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	77fb      	strb	r3, [r7, #31]
 80067a6:	e003      	b.n	80067b0 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80067b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3720      	adds	r7, #32
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
	...

080067c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b088      	sub	sp, #32
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	603b      	str	r3, [r7, #0]
 80067d0:	4613      	mov	r3, r2
 80067d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80067d4:	f7fb ff3a 	bl	800264c <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067dc:	1a9b      	subs	r3, r3, r2
 80067de:	683a      	ldr	r2, [r7, #0]
 80067e0:	4413      	add	r3, r2
 80067e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80067e4:	f7fb ff32 	bl	800264c <HAL_GetTick>
 80067e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80067ea:	4b39      	ldr	r3, [pc, #228]	; (80068d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	015b      	lsls	r3, r3, #5
 80067f0:	0d1b      	lsrs	r3, r3, #20
 80067f2:	69fa      	ldr	r2, [r7, #28]
 80067f4:	fb02 f303 	mul.w	r3, r2, r3
 80067f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067fa:	e054      	b.n	80068a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006802:	d050      	beq.n	80068a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006804:	f7fb ff22 	bl	800264c <HAL_GetTick>
 8006808:	4602      	mov	r2, r0
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	69fa      	ldr	r2, [r7, #28]
 8006810:	429a      	cmp	r2, r3
 8006812:	d902      	bls.n	800681a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d13d      	bne.n	8006896 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	685a      	ldr	r2, [r3, #4]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006828:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006832:	d111      	bne.n	8006858 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800683c:	d004      	beq.n	8006848 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006846:	d107      	bne.n	8006858 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006856:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006860:	d10f      	bne.n	8006882 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006870:	601a      	str	r2, [r3, #0]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006880:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e017      	b.n	80068c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d101      	bne.n	80068a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800689c:	2300      	movs	r3, #0
 800689e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	3b01      	subs	r3, #1
 80068a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	689a      	ldr	r2, [r3, #8]
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	4013      	ands	r3, r2
 80068b0:	68ba      	ldr	r2, [r7, #8]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	bf0c      	ite	eq
 80068b6:	2301      	moveq	r3, #1
 80068b8:	2300      	movne	r3, #0
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	461a      	mov	r2, r3
 80068be:	79fb      	ldrb	r3, [r7, #7]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d19b      	bne.n	80067fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3720      	adds	r7, #32
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	20000000 	.word	0x20000000

080068d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af02      	add	r7, sp, #8
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	2200      	movs	r2, #0
 80068e8:	2180      	movs	r1, #128	; 0x80
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f7ff ff6a 	bl	80067c4 <SPI_WaitFlagStateUntilTimeout>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d007      	beq.n	8006906 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068fa:	f043 0220 	orr.w	r2, r3, #32
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	e000      	b.n	8006908 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3710      	adds	r7, #16
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d101      	bne.n	8006922 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e041      	b.n	80069a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	d106      	bne.n	800693c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f7fb f898 	bl	8001a6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2202      	movs	r2, #2
 8006940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	3304      	adds	r3, #4
 800694c:	4619      	mov	r1, r3
 800694e:	4610      	mov	r0, r2
 8006950:	f000 fa74 	bl	8006e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3708      	adds	r7, #8
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
	...

080069b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d001      	beq.n	80069c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e03a      	b.n	8006a3e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2202      	movs	r2, #2
 80069cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68da      	ldr	r2, [r3, #12]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f042 0201 	orr.w	r2, r2, #1
 80069de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a18      	ldr	r2, [pc, #96]	; (8006a48 <HAL_TIM_Base_Start_IT+0x98>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d00e      	beq.n	8006a08 <HAL_TIM_Base_Start_IT+0x58>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069f2:	d009      	beq.n	8006a08 <HAL_TIM_Base_Start_IT+0x58>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a14      	ldr	r2, [pc, #80]	; (8006a4c <HAL_TIM_Base_Start_IT+0x9c>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d004      	beq.n	8006a08 <HAL_TIM_Base_Start_IT+0x58>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a13      	ldr	r2, [pc, #76]	; (8006a50 <HAL_TIM_Base_Start_IT+0xa0>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d111      	bne.n	8006a2c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f003 0307 	and.w	r3, r3, #7
 8006a12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2b06      	cmp	r3, #6
 8006a18:	d010      	beq.n	8006a3c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f042 0201 	orr.w	r2, r2, #1
 8006a28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a2a:	e007      	b.n	8006a3c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f042 0201 	orr.w	r2, r2, #1
 8006a3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3714      	adds	r7, #20
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bc80      	pop	{r7}
 8006a46:	4770      	bx	lr
 8006a48:	40012c00 	.word	0x40012c00
 8006a4c:	40000400 	.word	0x40000400
 8006a50:	40000800 	.word	0x40000800

08006a54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	f003 0302 	and.w	r3, r3, #2
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d122      	bne.n	8006ab0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	f003 0302 	and.w	r3, r3, #2
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d11b      	bne.n	8006ab0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f06f 0202 	mvn.w	r2, #2
 8006a80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	f003 0303 	and.w	r3, r3, #3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d003      	beq.n	8006a9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 f9b4 	bl	8006e04 <HAL_TIM_IC_CaptureCallback>
 8006a9c:	e005      	b.n	8006aaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f9a7 	bl	8006df2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f9b6 	bl	8006e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	f003 0304 	and.w	r3, r3, #4
 8006aba:	2b04      	cmp	r3, #4
 8006abc:	d122      	bne.n	8006b04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	f003 0304 	and.w	r3, r3, #4
 8006ac8:	2b04      	cmp	r3, #4
 8006aca:	d11b      	bne.n	8006b04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f06f 0204 	mvn.w	r2, #4
 8006ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2202      	movs	r2, #2
 8006ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d003      	beq.n	8006af2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f98a 	bl	8006e04 <HAL_TIM_IC_CaptureCallback>
 8006af0:	e005      	b.n	8006afe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f97d 	bl	8006df2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 f98c 	bl	8006e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	f003 0308 	and.w	r3, r3, #8
 8006b0e:	2b08      	cmp	r3, #8
 8006b10:	d122      	bne.n	8006b58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	f003 0308 	and.w	r3, r3, #8
 8006b1c:	2b08      	cmp	r3, #8
 8006b1e:	d11b      	bne.n	8006b58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f06f 0208 	mvn.w	r2, #8
 8006b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2204      	movs	r2, #4
 8006b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	69db      	ldr	r3, [r3, #28]
 8006b36:	f003 0303 	and.w	r3, r3, #3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d003      	beq.n	8006b46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f960 	bl	8006e04 <HAL_TIM_IC_CaptureCallback>
 8006b44:	e005      	b.n	8006b52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 f953 	bl	8006df2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 f962 	bl	8006e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	f003 0310 	and.w	r3, r3, #16
 8006b62:	2b10      	cmp	r3, #16
 8006b64:	d122      	bne.n	8006bac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	f003 0310 	and.w	r3, r3, #16
 8006b70:	2b10      	cmp	r3, #16
 8006b72:	d11b      	bne.n	8006bac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f06f 0210 	mvn.w	r2, #16
 8006b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2208      	movs	r2, #8
 8006b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	69db      	ldr	r3, [r3, #28]
 8006b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d003      	beq.n	8006b9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f936 	bl	8006e04 <HAL_TIM_IC_CaptureCallback>
 8006b98:	e005      	b.n	8006ba6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f929 	bl	8006df2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 f938 	bl	8006e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	f003 0301 	and.w	r3, r3, #1
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d10e      	bne.n	8006bd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	f003 0301 	and.w	r3, r3, #1
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d107      	bne.n	8006bd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f06f 0201 	mvn.w	r2, #1
 8006bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7fa fa34 	bl	8001040 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006be2:	2b80      	cmp	r3, #128	; 0x80
 8006be4:	d10e      	bne.n	8006c04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bf0:	2b80      	cmp	r3, #128	; 0x80
 8006bf2:	d107      	bne.n	8006c04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 fa7b 	bl	80070fa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c0e:	2b40      	cmp	r3, #64	; 0x40
 8006c10:	d10e      	bne.n	8006c30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c1c:	2b40      	cmp	r3, #64	; 0x40
 8006c1e:	d107      	bne.n	8006c30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 f8fc 	bl	8006e28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	f003 0320 	and.w	r3, r3, #32
 8006c3a:	2b20      	cmp	r3, #32
 8006c3c:	d10e      	bne.n	8006c5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	f003 0320 	and.w	r3, r3, #32
 8006c48:	2b20      	cmp	r3, #32
 8006c4a:	d107      	bne.n	8006c5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f06f 0220 	mvn.w	r2, #32
 8006c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 fa46 	bl	80070e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c5c:	bf00      	nop
 8006c5e:	3708      	adds	r7, #8
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d101      	bne.n	8006c80 <HAL_TIM_ConfigClockSource+0x1c>
 8006c7c:	2302      	movs	r3, #2
 8006c7e:	e0b4      	b.n	8006dea <HAL_TIM_ConfigClockSource+0x186>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ca6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cb8:	d03e      	beq.n	8006d38 <HAL_TIM_ConfigClockSource+0xd4>
 8006cba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cbe:	f200 8087 	bhi.w	8006dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cc6:	f000 8086 	beq.w	8006dd6 <HAL_TIM_ConfigClockSource+0x172>
 8006cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cce:	d87f      	bhi.n	8006dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006cd0:	2b70      	cmp	r3, #112	; 0x70
 8006cd2:	d01a      	beq.n	8006d0a <HAL_TIM_ConfigClockSource+0xa6>
 8006cd4:	2b70      	cmp	r3, #112	; 0x70
 8006cd6:	d87b      	bhi.n	8006dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006cd8:	2b60      	cmp	r3, #96	; 0x60
 8006cda:	d050      	beq.n	8006d7e <HAL_TIM_ConfigClockSource+0x11a>
 8006cdc:	2b60      	cmp	r3, #96	; 0x60
 8006cde:	d877      	bhi.n	8006dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ce0:	2b50      	cmp	r3, #80	; 0x50
 8006ce2:	d03c      	beq.n	8006d5e <HAL_TIM_ConfigClockSource+0xfa>
 8006ce4:	2b50      	cmp	r3, #80	; 0x50
 8006ce6:	d873      	bhi.n	8006dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ce8:	2b40      	cmp	r3, #64	; 0x40
 8006cea:	d058      	beq.n	8006d9e <HAL_TIM_ConfigClockSource+0x13a>
 8006cec:	2b40      	cmp	r3, #64	; 0x40
 8006cee:	d86f      	bhi.n	8006dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006cf0:	2b30      	cmp	r3, #48	; 0x30
 8006cf2:	d064      	beq.n	8006dbe <HAL_TIM_ConfigClockSource+0x15a>
 8006cf4:	2b30      	cmp	r3, #48	; 0x30
 8006cf6:	d86b      	bhi.n	8006dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006cf8:	2b20      	cmp	r3, #32
 8006cfa:	d060      	beq.n	8006dbe <HAL_TIM_ConfigClockSource+0x15a>
 8006cfc:	2b20      	cmp	r3, #32
 8006cfe:	d867      	bhi.n	8006dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d05c      	beq.n	8006dbe <HAL_TIM_ConfigClockSource+0x15a>
 8006d04:	2b10      	cmp	r3, #16
 8006d06:	d05a      	beq.n	8006dbe <HAL_TIM_ConfigClockSource+0x15a>
 8006d08:	e062      	b.n	8006dd0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6818      	ldr	r0, [r3, #0]
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	6899      	ldr	r1, [r3, #8]
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	685a      	ldr	r2, [r3, #4]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	f000 f968 	bl	8006fee <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	609a      	str	r2, [r3, #8]
      break;
 8006d36:	e04f      	b.n	8006dd8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6818      	ldr	r0, [r3, #0]
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	6899      	ldr	r1, [r3, #8]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	685a      	ldr	r2, [r3, #4]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	f000 f951 	bl	8006fee <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	689a      	ldr	r2, [r3, #8]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d5a:	609a      	str	r2, [r3, #8]
      break;
 8006d5c:	e03c      	b.n	8006dd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6818      	ldr	r0, [r3, #0]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	6859      	ldr	r1, [r3, #4]
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	f000 f8c8 	bl	8006f00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2150      	movs	r1, #80	; 0x50
 8006d76:	4618      	mov	r0, r3
 8006d78:	f000 f91f 	bl	8006fba <TIM_ITRx_SetConfig>
      break;
 8006d7c:	e02c      	b.n	8006dd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6818      	ldr	r0, [r3, #0]
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	6859      	ldr	r1, [r3, #4]
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	f000 f8e6 	bl	8006f5c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2160      	movs	r1, #96	; 0x60
 8006d96:	4618      	mov	r0, r3
 8006d98:	f000 f90f 	bl	8006fba <TIM_ITRx_SetConfig>
      break;
 8006d9c:	e01c      	b.n	8006dd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6818      	ldr	r0, [r3, #0]
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	6859      	ldr	r1, [r3, #4]
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	461a      	mov	r2, r3
 8006dac:	f000 f8a8 	bl	8006f00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2140      	movs	r1, #64	; 0x40
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 f8ff 	bl	8006fba <TIM_ITRx_SetConfig>
      break;
 8006dbc:	e00c      	b.n	8006dd8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	4610      	mov	r0, r2
 8006dca:	f000 f8f6 	bl	8006fba <TIM_ITRx_SetConfig>
      break;
 8006dce:	e003      	b.n	8006dd8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8006dd4:	e000      	b.n	8006dd8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006dd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006df2:	b480      	push	{r7}
 8006df4:	b083      	sub	sp, #12
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006dfa:	bf00      	nop
 8006dfc:	370c      	adds	r7, #12
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bc80      	pop	{r7}
 8006e02:	4770      	bx	lr

08006e04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bc80      	pop	{r7}
 8006e14:	4770      	bx	lr

08006e16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e16:	b480      	push	{r7}
 8006e18:	b083      	sub	sp, #12
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e1e:	bf00      	nop
 8006e20:	370c      	adds	r7, #12
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bc80      	pop	{r7}
 8006e26:	4770      	bx	lr

08006e28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bc80      	pop	{r7}
 8006e38:	4770      	bx	lr
	...

08006e3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a29      	ldr	r2, [pc, #164]	; (8006ef4 <TIM_Base_SetConfig+0xb8>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d00b      	beq.n	8006e6c <TIM_Base_SetConfig+0x30>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e5a:	d007      	beq.n	8006e6c <TIM_Base_SetConfig+0x30>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a26      	ldr	r2, [pc, #152]	; (8006ef8 <TIM_Base_SetConfig+0xbc>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d003      	beq.n	8006e6c <TIM_Base_SetConfig+0x30>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a25      	ldr	r2, [pc, #148]	; (8006efc <TIM_Base_SetConfig+0xc0>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d108      	bne.n	8006e7e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a1c      	ldr	r2, [pc, #112]	; (8006ef4 <TIM_Base_SetConfig+0xb8>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d00b      	beq.n	8006e9e <TIM_Base_SetConfig+0x62>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e8c:	d007      	beq.n	8006e9e <TIM_Base_SetConfig+0x62>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a19      	ldr	r2, [pc, #100]	; (8006ef8 <TIM_Base_SetConfig+0xbc>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d003      	beq.n	8006e9e <TIM_Base_SetConfig+0x62>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a18      	ldr	r2, [pc, #96]	; (8006efc <TIM_Base_SetConfig+0xc0>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d108      	bne.n	8006eb0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ea4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	689a      	ldr	r2, [r3, #8]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a07      	ldr	r2, [pc, #28]	; (8006ef4 <TIM_Base_SetConfig+0xb8>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d103      	bne.n	8006ee4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	691a      	ldr	r2, [r3, #16]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	615a      	str	r2, [r3, #20]
}
 8006eea:	bf00      	nop
 8006eec:	3714      	adds	r7, #20
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bc80      	pop	{r7}
 8006ef2:	4770      	bx	lr
 8006ef4:	40012c00 	.word	0x40012c00
 8006ef8:	40000400 	.word	0x40000400
 8006efc:	40000800 	.word	0x40000800

08006f00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b087      	sub	sp, #28
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6a1b      	ldr	r3, [r3, #32]
 8006f10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	f023 0201 	bic.w	r2, r3, #1
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	699b      	ldr	r3, [r3, #24]
 8006f22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	011b      	lsls	r3, r3, #4
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	f023 030a 	bic.w	r3, r3, #10
 8006f3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	621a      	str	r2, [r3, #32]
}
 8006f52:	bf00      	nop
 8006f54:	371c      	adds	r7, #28
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bc80      	pop	{r7}
 8006f5a:	4770      	bx	lr

08006f5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b087      	sub	sp, #28
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6a1b      	ldr	r3, [r3, #32]
 8006f6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	f023 0210 	bic.w	r2, r3, #16
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	031b      	lsls	r3, r3, #12
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f98:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	011b      	lsls	r3, r3, #4
 8006f9e:	697a      	ldr	r2, [r7, #20]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	693a      	ldr	r2, [r7, #16]
 8006fa8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	697a      	ldr	r2, [r7, #20]
 8006fae:	621a      	str	r2, [r3, #32]
}
 8006fb0:	bf00      	nop
 8006fb2:	371c      	adds	r7, #28
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bc80      	pop	{r7}
 8006fb8:	4770      	bx	lr

08006fba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b085      	sub	sp, #20
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
 8006fc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006fd2:	683a      	ldr	r2, [r7, #0]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	f043 0307 	orr.w	r3, r3, #7
 8006fdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	609a      	str	r2, [r3, #8]
}
 8006fe4:	bf00      	nop
 8006fe6:	3714      	adds	r7, #20
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bc80      	pop	{r7}
 8006fec:	4770      	bx	lr

08006fee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006fee:	b480      	push	{r7}
 8006ff0:	b087      	sub	sp, #28
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	60f8      	str	r0, [r7, #12]
 8006ff6:	60b9      	str	r1, [r7, #8]
 8006ff8:	607a      	str	r2, [r7, #4]
 8006ffa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007008:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	021a      	lsls	r2, r3, #8
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	431a      	orrs	r2, r3
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	4313      	orrs	r3, r2
 8007016:	697a      	ldr	r2, [r7, #20]
 8007018:	4313      	orrs	r3, r2
 800701a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	609a      	str	r2, [r3, #8]
}
 8007022:	bf00      	nop
 8007024:	371c      	adds	r7, #28
 8007026:	46bd      	mov	sp, r7
 8007028:	bc80      	pop	{r7}
 800702a:	4770      	bx	lr

0800702c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800703c:	2b01      	cmp	r3, #1
 800703e:	d101      	bne.n	8007044 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007040:	2302      	movs	r3, #2
 8007042:	e046      	b.n	80070d2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2202      	movs	r2, #2
 8007050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800706a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	4313      	orrs	r3, r2
 8007074:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a16      	ldr	r2, [pc, #88]	; (80070dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d00e      	beq.n	80070a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007090:	d009      	beq.n	80070a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a12      	ldr	r2, [pc, #72]	; (80070e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d004      	beq.n	80070a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a10      	ldr	r2, [pc, #64]	; (80070e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d10c      	bne.n	80070c0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	68ba      	ldr	r2, [r7, #8]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3714      	adds	r7, #20
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bc80      	pop	{r7}
 80070da:	4770      	bx	lr
 80070dc:	40012c00 	.word	0x40012c00
 80070e0:	40000400 	.word	0x40000400
 80070e4:	40000800 	.word	0x40000800

080070e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80070f0:	bf00      	nop
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bc80      	pop	{r7}
 80070f8:	4770      	bx	lr

080070fa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070fa:	b480      	push	{r7}
 80070fc:	b083      	sub	sp, #12
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007102:	bf00      	nop
 8007104:	370c      	adds	r7, #12
 8007106:	46bd      	mov	sp, r7
 8007108:	bc80      	pop	{r7}
 800710a:	4770      	bx	lr

0800710c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d101      	bne.n	800711e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e042      	b.n	80071a4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007124:	b2db      	uxtb	r3, r3
 8007126:	2b00      	cmp	r3, #0
 8007128:	d106      	bne.n	8007138 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7fa fcd2 	bl	8001adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2224      	movs	r2, #36	; 0x24
 800713c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68da      	ldr	r2, [r3, #12]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800714e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 f82b 	bl	80071ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	691a      	ldr	r2, [r3, #16]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007164:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	695a      	ldr	r2, [r3, #20]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007174:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68da      	ldr	r2, [r3, #12]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007184:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2220      	movs	r2, #32
 8007190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2220      	movs	r2, #32
 8007198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	68da      	ldr	r2, [r3, #12]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	430a      	orrs	r2, r1
 80071c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	689a      	ldr	r2, [r3, #8]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	431a      	orrs	r2, r3
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	695b      	ldr	r3, [r3, #20]
 80071d8:	4313      	orrs	r3, r2
 80071da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80071e6:	f023 030c 	bic.w	r3, r3, #12
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	6812      	ldr	r2, [r2, #0]
 80071ee:	68b9      	ldr	r1, [r7, #8]
 80071f0:	430b      	orrs	r3, r1
 80071f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	695b      	ldr	r3, [r3, #20]
 80071fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	699a      	ldr	r2, [r3, #24]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	430a      	orrs	r2, r1
 8007208:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a2c      	ldr	r2, [pc, #176]	; (80072c0 <UART_SetConfig+0x114>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d103      	bne.n	800721c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007214:	f7fe f9c8 	bl	80055a8 <HAL_RCC_GetPCLK2Freq>
 8007218:	60f8      	str	r0, [r7, #12]
 800721a:	e002      	b.n	8007222 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800721c:	f7fe f9b0 	bl	8005580 <HAL_RCC_GetPCLK1Freq>
 8007220:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	4613      	mov	r3, r2
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4413      	add	r3, r2
 800722a:	009a      	lsls	r2, r3, #2
 800722c:	441a      	add	r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	fbb2 f3f3 	udiv	r3, r2, r3
 8007238:	4a22      	ldr	r2, [pc, #136]	; (80072c4 <UART_SetConfig+0x118>)
 800723a:	fba2 2303 	umull	r2, r3, r2, r3
 800723e:	095b      	lsrs	r3, r3, #5
 8007240:	0119      	lsls	r1, r3, #4
 8007242:	68fa      	ldr	r2, [r7, #12]
 8007244:	4613      	mov	r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	4413      	add	r3, r2
 800724a:	009a      	lsls	r2, r3, #2
 800724c:	441a      	add	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	fbb2 f2f3 	udiv	r2, r2, r3
 8007258:	4b1a      	ldr	r3, [pc, #104]	; (80072c4 <UART_SetConfig+0x118>)
 800725a:	fba3 0302 	umull	r0, r3, r3, r2
 800725e:	095b      	lsrs	r3, r3, #5
 8007260:	2064      	movs	r0, #100	; 0x64
 8007262:	fb00 f303 	mul.w	r3, r0, r3
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	011b      	lsls	r3, r3, #4
 800726a:	3332      	adds	r3, #50	; 0x32
 800726c:	4a15      	ldr	r2, [pc, #84]	; (80072c4 <UART_SetConfig+0x118>)
 800726e:	fba2 2303 	umull	r2, r3, r2, r3
 8007272:	095b      	lsrs	r3, r3, #5
 8007274:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007278:	4419      	add	r1, r3
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	4613      	mov	r3, r2
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	4413      	add	r3, r2
 8007282:	009a      	lsls	r2, r3, #2
 8007284:	441a      	add	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007290:	4b0c      	ldr	r3, [pc, #48]	; (80072c4 <UART_SetConfig+0x118>)
 8007292:	fba3 0302 	umull	r0, r3, r3, r2
 8007296:	095b      	lsrs	r3, r3, #5
 8007298:	2064      	movs	r0, #100	; 0x64
 800729a:	fb00 f303 	mul.w	r3, r0, r3
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	011b      	lsls	r3, r3, #4
 80072a2:	3332      	adds	r3, #50	; 0x32
 80072a4:	4a07      	ldr	r2, [pc, #28]	; (80072c4 <UART_SetConfig+0x118>)
 80072a6:	fba2 2303 	umull	r2, r3, r2, r3
 80072aa:	095b      	lsrs	r3, r3, #5
 80072ac:	f003 020f 	and.w	r2, r3, #15
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	440a      	add	r2, r1
 80072b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80072b8:	bf00      	nop
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	40013800 	.word	0x40013800
 80072c4:	51eb851f 	.word	0x51eb851f

080072c8 <__errno>:
 80072c8:	4b01      	ldr	r3, [pc, #4]	; (80072d0 <__errno+0x8>)
 80072ca:	6818      	ldr	r0, [r3, #0]
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	20000014 	.word	0x20000014

080072d4 <__libc_init_array>:
 80072d4:	b570      	push	{r4, r5, r6, lr}
 80072d6:	2600      	movs	r6, #0
 80072d8:	4d0c      	ldr	r5, [pc, #48]	; (800730c <__libc_init_array+0x38>)
 80072da:	4c0d      	ldr	r4, [pc, #52]	; (8007310 <__libc_init_array+0x3c>)
 80072dc:	1b64      	subs	r4, r4, r5
 80072de:	10a4      	asrs	r4, r4, #2
 80072e0:	42a6      	cmp	r6, r4
 80072e2:	d109      	bne.n	80072f8 <__libc_init_array+0x24>
 80072e4:	f002 feba 	bl	800a05c <_init>
 80072e8:	2600      	movs	r6, #0
 80072ea:	4d0a      	ldr	r5, [pc, #40]	; (8007314 <__libc_init_array+0x40>)
 80072ec:	4c0a      	ldr	r4, [pc, #40]	; (8007318 <__libc_init_array+0x44>)
 80072ee:	1b64      	subs	r4, r4, r5
 80072f0:	10a4      	asrs	r4, r4, #2
 80072f2:	42a6      	cmp	r6, r4
 80072f4:	d105      	bne.n	8007302 <__libc_init_array+0x2e>
 80072f6:	bd70      	pop	{r4, r5, r6, pc}
 80072f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80072fc:	4798      	blx	r3
 80072fe:	3601      	adds	r6, #1
 8007300:	e7ee      	b.n	80072e0 <__libc_init_array+0xc>
 8007302:	f855 3b04 	ldr.w	r3, [r5], #4
 8007306:	4798      	blx	r3
 8007308:	3601      	adds	r6, #1
 800730a:	e7f2      	b.n	80072f2 <__libc_init_array+0x1e>
 800730c:	0800b2cc 	.word	0x0800b2cc
 8007310:	0800b2cc 	.word	0x0800b2cc
 8007314:	0800b2cc 	.word	0x0800b2cc
 8007318:	0800b2d0 	.word	0x0800b2d0

0800731c <malloc>:
 800731c:	4b02      	ldr	r3, [pc, #8]	; (8007328 <malloc+0xc>)
 800731e:	4601      	mov	r1, r0
 8007320:	6818      	ldr	r0, [r3, #0]
 8007322:	f000 b865 	b.w	80073f0 <_malloc_r>
 8007326:	bf00      	nop
 8007328:	20000014 	.word	0x20000014

0800732c <memcpy>:
 800732c:	440a      	add	r2, r1
 800732e:	4291      	cmp	r1, r2
 8007330:	f100 33ff 	add.w	r3, r0, #4294967295
 8007334:	d100      	bne.n	8007338 <memcpy+0xc>
 8007336:	4770      	bx	lr
 8007338:	b510      	push	{r4, lr}
 800733a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800733e:	4291      	cmp	r1, r2
 8007340:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007344:	d1f9      	bne.n	800733a <memcpy+0xe>
 8007346:	bd10      	pop	{r4, pc}

08007348 <memset>:
 8007348:	4603      	mov	r3, r0
 800734a:	4402      	add	r2, r0
 800734c:	4293      	cmp	r3, r2
 800734e:	d100      	bne.n	8007352 <memset+0xa>
 8007350:	4770      	bx	lr
 8007352:	f803 1b01 	strb.w	r1, [r3], #1
 8007356:	e7f9      	b.n	800734c <memset+0x4>

08007358 <_free_r>:
 8007358:	b538      	push	{r3, r4, r5, lr}
 800735a:	4605      	mov	r5, r0
 800735c:	2900      	cmp	r1, #0
 800735e:	d043      	beq.n	80073e8 <_free_r+0x90>
 8007360:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007364:	1f0c      	subs	r4, r1, #4
 8007366:	2b00      	cmp	r3, #0
 8007368:	bfb8      	it	lt
 800736a:	18e4      	addlt	r4, r4, r3
 800736c:	f001 fbb8 	bl	8008ae0 <__malloc_lock>
 8007370:	4a1e      	ldr	r2, [pc, #120]	; (80073ec <_free_r+0x94>)
 8007372:	6813      	ldr	r3, [r2, #0]
 8007374:	4610      	mov	r0, r2
 8007376:	b933      	cbnz	r3, 8007386 <_free_r+0x2e>
 8007378:	6063      	str	r3, [r4, #4]
 800737a:	6014      	str	r4, [r2, #0]
 800737c:	4628      	mov	r0, r5
 800737e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007382:	f001 bbb3 	b.w	8008aec <__malloc_unlock>
 8007386:	42a3      	cmp	r3, r4
 8007388:	d90a      	bls.n	80073a0 <_free_r+0x48>
 800738a:	6821      	ldr	r1, [r4, #0]
 800738c:	1862      	adds	r2, r4, r1
 800738e:	4293      	cmp	r3, r2
 8007390:	bf01      	itttt	eq
 8007392:	681a      	ldreq	r2, [r3, #0]
 8007394:	685b      	ldreq	r3, [r3, #4]
 8007396:	1852      	addeq	r2, r2, r1
 8007398:	6022      	streq	r2, [r4, #0]
 800739a:	6063      	str	r3, [r4, #4]
 800739c:	6004      	str	r4, [r0, #0]
 800739e:	e7ed      	b.n	800737c <_free_r+0x24>
 80073a0:	461a      	mov	r2, r3
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	b10b      	cbz	r3, 80073aa <_free_r+0x52>
 80073a6:	42a3      	cmp	r3, r4
 80073a8:	d9fa      	bls.n	80073a0 <_free_r+0x48>
 80073aa:	6811      	ldr	r1, [r2, #0]
 80073ac:	1850      	adds	r0, r2, r1
 80073ae:	42a0      	cmp	r0, r4
 80073b0:	d10b      	bne.n	80073ca <_free_r+0x72>
 80073b2:	6820      	ldr	r0, [r4, #0]
 80073b4:	4401      	add	r1, r0
 80073b6:	1850      	adds	r0, r2, r1
 80073b8:	4283      	cmp	r3, r0
 80073ba:	6011      	str	r1, [r2, #0]
 80073bc:	d1de      	bne.n	800737c <_free_r+0x24>
 80073be:	6818      	ldr	r0, [r3, #0]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	4401      	add	r1, r0
 80073c4:	6011      	str	r1, [r2, #0]
 80073c6:	6053      	str	r3, [r2, #4]
 80073c8:	e7d8      	b.n	800737c <_free_r+0x24>
 80073ca:	d902      	bls.n	80073d2 <_free_r+0x7a>
 80073cc:	230c      	movs	r3, #12
 80073ce:	602b      	str	r3, [r5, #0]
 80073d0:	e7d4      	b.n	800737c <_free_r+0x24>
 80073d2:	6820      	ldr	r0, [r4, #0]
 80073d4:	1821      	adds	r1, r4, r0
 80073d6:	428b      	cmp	r3, r1
 80073d8:	bf01      	itttt	eq
 80073da:	6819      	ldreq	r1, [r3, #0]
 80073dc:	685b      	ldreq	r3, [r3, #4]
 80073de:	1809      	addeq	r1, r1, r0
 80073e0:	6021      	streq	r1, [r4, #0]
 80073e2:	6063      	str	r3, [r4, #4]
 80073e4:	6054      	str	r4, [r2, #4]
 80073e6:	e7c9      	b.n	800737c <_free_r+0x24>
 80073e8:	bd38      	pop	{r3, r4, r5, pc}
 80073ea:	bf00      	nop
 80073ec:	20000244 	.word	0x20000244

080073f0 <_malloc_r>:
 80073f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f2:	1ccd      	adds	r5, r1, #3
 80073f4:	f025 0503 	bic.w	r5, r5, #3
 80073f8:	3508      	adds	r5, #8
 80073fa:	2d0c      	cmp	r5, #12
 80073fc:	bf38      	it	cc
 80073fe:	250c      	movcc	r5, #12
 8007400:	2d00      	cmp	r5, #0
 8007402:	4606      	mov	r6, r0
 8007404:	db01      	blt.n	800740a <_malloc_r+0x1a>
 8007406:	42a9      	cmp	r1, r5
 8007408:	d903      	bls.n	8007412 <_malloc_r+0x22>
 800740a:	230c      	movs	r3, #12
 800740c:	6033      	str	r3, [r6, #0]
 800740e:	2000      	movs	r0, #0
 8007410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007412:	f001 fb65 	bl	8008ae0 <__malloc_lock>
 8007416:	4921      	ldr	r1, [pc, #132]	; (800749c <_malloc_r+0xac>)
 8007418:	680a      	ldr	r2, [r1, #0]
 800741a:	4614      	mov	r4, r2
 800741c:	b99c      	cbnz	r4, 8007446 <_malloc_r+0x56>
 800741e:	4f20      	ldr	r7, [pc, #128]	; (80074a0 <_malloc_r+0xb0>)
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	b923      	cbnz	r3, 800742e <_malloc_r+0x3e>
 8007424:	4621      	mov	r1, r4
 8007426:	4630      	mov	r0, r6
 8007428:	f000 fc9c 	bl	8007d64 <_sbrk_r>
 800742c:	6038      	str	r0, [r7, #0]
 800742e:	4629      	mov	r1, r5
 8007430:	4630      	mov	r0, r6
 8007432:	f000 fc97 	bl	8007d64 <_sbrk_r>
 8007436:	1c43      	adds	r3, r0, #1
 8007438:	d123      	bne.n	8007482 <_malloc_r+0x92>
 800743a:	230c      	movs	r3, #12
 800743c:	4630      	mov	r0, r6
 800743e:	6033      	str	r3, [r6, #0]
 8007440:	f001 fb54 	bl	8008aec <__malloc_unlock>
 8007444:	e7e3      	b.n	800740e <_malloc_r+0x1e>
 8007446:	6823      	ldr	r3, [r4, #0]
 8007448:	1b5b      	subs	r3, r3, r5
 800744a:	d417      	bmi.n	800747c <_malloc_r+0x8c>
 800744c:	2b0b      	cmp	r3, #11
 800744e:	d903      	bls.n	8007458 <_malloc_r+0x68>
 8007450:	6023      	str	r3, [r4, #0]
 8007452:	441c      	add	r4, r3
 8007454:	6025      	str	r5, [r4, #0]
 8007456:	e004      	b.n	8007462 <_malloc_r+0x72>
 8007458:	6863      	ldr	r3, [r4, #4]
 800745a:	42a2      	cmp	r2, r4
 800745c:	bf0c      	ite	eq
 800745e:	600b      	streq	r3, [r1, #0]
 8007460:	6053      	strne	r3, [r2, #4]
 8007462:	4630      	mov	r0, r6
 8007464:	f001 fb42 	bl	8008aec <__malloc_unlock>
 8007468:	f104 000b 	add.w	r0, r4, #11
 800746c:	1d23      	adds	r3, r4, #4
 800746e:	f020 0007 	bic.w	r0, r0, #7
 8007472:	1ac2      	subs	r2, r0, r3
 8007474:	d0cc      	beq.n	8007410 <_malloc_r+0x20>
 8007476:	1a1b      	subs	r3, r3, r0
 8007478:	50a3      	str	r3, [r4, r2]
 800747a:	e7c9      	b.n	8007410 <_malloc_r+0x20>
 800747c:	4622      	mov	r2, r4
 800747e:	6864      	ldr	r4, [r4, #4]
 8007480:	e7cc      	b.n	800741c <_malloc_r+0x2c>
 8007482:	1cc4      	adds	r4, r0, #3
 8007484:	f024 0403 	bic.w	r4, r4, #3
 8007488:	42a0      	cmp	r0, r4
 800748a:	d0e3      	beq.n	8007454 <_malloc_r+0x64>
 800748c:	1a21      	subs	r1, r4, r0
 800748e:	4630      	mov	r0, r6
 8007490:	f000 fc68 	bl	8007d64 <_sbrk_r>
 8007494:	3001      	adds	r0, #1
 8007496:	d1dd      	bne.n	8007454 <_malloc_r+0x64>
 8007498:	e7cf      	b.n	800743a <_malloc_r+0x4a>
 800749a:	bf00      	nop
 800749c:	20000244 	.word	0x20000244
 80074a0:	20000248 	.word	0x20000248

080074a4 <__cvt>:
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074aa:	461f      	mov	r7, r3
 80074ac:	bfbb      	ittet	lt
 80074ae:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80074b2:	461f      	movlt	r7, r3
 80074b4:	2300      	movge	r3, #0
 80074b6:	232d      	movlt	r3, #45	; 0x2d
 80074b8:	b088      	sub	sp, #32
 80074ba:	4614      	mov	r4, r2
 80074bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80074be:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80074c0:	7013      	strb	r3, [r2, #0]
 80074c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80074c4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80074c8:	f023 0820 	bic.w	r8, r3, #32
 80074cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80074d0:	d005      	beq.n	80074de <__cvt+0x3a>
 80074d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80074d6:	d100      	bne.n	80074da <__cvt+0x36>
 80074d8:	3501      	adds	r5, #1
 80074da:	2302      	movs	r3, #2
 80074dc:	e000      	b.n	80074e0 <__cvt+0x3c>
 80074de:	2303      	movs	r3, #3
 80074e0:	aa07      	add	r2, sp, #28
 80074e2:	9204      	str	r2, [sp, #16]
 80074e4:	aa06      	add	r2, sp, #24
 80074e6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80074ea:	e9cd 3500 	strd	r3, r5, [sp]
 80074ee:	4622      	mov	r2, r4
 80074f0:	463b      	mov	r3, r7
 80074f2:	f000 fcf5 	bl	8007ee0 <_dtoa_r>
 80074f6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80074fa:	4606      	mov	r6, r0
 80074fc:	d102      	bne.n	8007504 <__cvt+0x60>
 80074fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007500:	07db      	lsls	r3, r3, #31
 8007502:	d522      	bpl.n	800754a <__cvt+0xa6>
 8007504:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007508:	eb06 0905 	add.w	r9, r6, r5
 800750c:	d110      	bne.n	8007530 <__cvt+0x8c>
 800750e:	7833      	ldrb	r3, [r6, #0]
 8007510:	2b30      	cmp	r3, #48	; 0x30
 8007512:	d10a      	bne.n	800752a <__cvt+0x86>
 8007514:	2200      	movs	r2, #0
 8007516:	2300      	movs	r3, #0
 8007518:	4620      	mov	r0, r4
 800751a:	4639      	mov	r1, r7
 800751c:	f7f9 fa44 	bl	80009a8 <__aeabi_dcmpeq>
 8007520:	b918      	cbnz	r0, 800752a <__cvt+0x86>
 8007522:	f1c5 0501 	rsb	r5, r5, #1
 8007526:	f8ca 5000 	str.w	r5, [sl]
 800752a:	f8da 3000 	ldr.w	r3, [sl]
 800752e:	4499      	add	r9, r3
 8007530:	2200      	movs	r2, #0
 8007532:	2300      	movs	r3, #0
 8007534:	4620      	mov	r0, r4
 8007536:	4639      	mov	r1, r7
 8007538:	f7f9 fa36 	bl	80009a8 <__aeabi_dcmpeq>
 800753c:	b108      	cbz	r0, 8007542 <__cvt+0x9e>
 800753e:	f8cd 901c 	str.w	r9, [sp, #28]
 8007542:	2230      	movs	r2, #48	; 0x30
 8007544:	9b07      	ldr	r3, [sp, #28]
 8007546:	454b      	cmp	r3, r9
 8007548:	d307      	bcc.n	800755a <__cvt+0xb6>
 800754a:	4630      	mov	r0, r6
 800754c:	9b07      	ldr	r3, [sp, #28]
 800754e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007550:	1b9b      	subs	r3, r3, r6
 8007552:	6013      	str	r3, [r2, #0]
 8007554:	b008      	add	sp, #32
 8007556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800755a:	1c59      	adds	r1, r3, #1
 800755c:	9107      	str	r1, [sp, #28]
 800755e:	701a      	strb	r2, [r3, #0]
 8007560:	e7f0      	b.n	8007544 <__cvt+0xa0>

08007562 <__exponent>:
 8007562:	4603      	mov	r3, r0
 8007564:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007566:	2900      	cmp	r1, #0
 8007568:	f803 2b02 	strb.w	r2, [r3], #2
 800756c:	bfb6      	itet	lt
 800756e:	222d      	movlt	r2, #45	; 0x2d
 8007570:	222b      	movge	r2, #43	; 0x2b
 8007572:	4249      	neglt	r1, r1
 8007574:	2909      	cmp	r1, #9
 8007576:	7042      	strb	r2, [r0, #1]
 8007578:	dd2b      	ble.n	80075d2 <__exponent+0x70>
 800757a:	f10d 0407 	add.w	r4, sp, #7
 800757e:	46a4      	mov	ip, r4
 8007580:	270a      	movs	r7, #10
 8007582:	fb91 f6f7 	sdiv	r6, r1, r7
 8007586:	460a      	mov	r2, r1
 8007588:	46a6      	mov	lr, r4
 800758a:	fb07 1516 	mls	r5, r7, r6, r1
 800758e:	2a63      	cmp	r2, #99	; 0x63
 8007590:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007594:	4631      	mov	r1, r6
 8007596:	f104 34ff 	add.w	r4, r4, #4294967295
 800759a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800759e:	dcf0      	bgt.n	8007582 <__exponent+0x20>
 80075a0:	3130      	adds	r1, #48	; 0x30
 80075a2:	f1ae 0502 	sub.w	r5, lr, #2
 80075a6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80075aa:	4629      	mov	r1, r5
 80075ac:	1c44      	adds	r4, r0, #1
 80075ae:	4561      	cmp	r1, ip
 80075b0:	d30a      	bcc.n	80075c8 <__exponent+0x66>
 80075b2:	f10d 0209 	add.w	r2, sp, #9
 80075b6:	eba2 020e 	sub.w	r2, r2, lr
 80075ba:	4565      	cmp	r5, ip
 80075bc:	bf88      	it	hi
 80075be:	2200      	movhi	r2, #0
 80075c0:	4413      	add	r3, r2
 80075c2:	1a18      	subs	r0, r3, r0
 80075c4:	b003      	add	sp, #12
 80075c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075cc:	f804 2f01 	strb.w	r2, [r4, #1]!
 80075d0:	e7ed      	b.n	80075ae <__exponent+0x4c>
 80075d2:	2330      	movs	r3, #48	; 0x30
 80075d4:	3130      	adds	r1, #48	; 0x30
 80075d6:	7083      	strb	r3, [r0, #2]
 80075d8:	70c1      	strb	r1, [r0, #3]
 80075da:	1d03      	adds	r3, r0, #4
 80075dc:	e7f1      	b.n	80075c2 <__exponent+0x60>
	...

080075e0 <_printf_float>:
 80075e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e4:	b091      	sub	sp, #68	; 0x44
 80075e6:	460c      	mov	r4, r1
 80075e8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80075ec:	4616      	mov	r6, r2
 80075ee:	461f      	mov	r7, r3
 80075f0:	4605      	mov	r5, r0
 80075f2:	f001 fa63 	bl	8008abc <_localeconv_r>
 80075f6:	6803      	ldr	r3, [r0, #0]
 80075f8:	4618      	mov	r0, r3
 80075fa:	9309      	str	r3, [sp, #36]	; 0x24
 80075fc:	f7f8 fda8 	bl	8000150 <strlen>
 8007600:	2300      	movs	r3, #0
 8007602:	930e      	str	r3, [sp, #56]	; 0x38
 8007604:	f8d8 3000 	ldr.w	r3, [r8]
 8007608:	900a      	str	r0, [sp, #40]	; 0x28
 800760a:	3307      	adds	r3, #7
 800760c:	f023 0307 	bic.w	r3, r3, #7
 8007610:	f103 0208 	add.w	r2, r3, #8
 8007614:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007618:	f8d4 b000 	ldr.w	fp, [r4]
 800761c:	f8c8 2000 	str.w	r2, [r8]
 8007620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007624:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007628:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800762c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007630:	930b      	str	r3, [sp, #44]	; 0x2c
 8007632:	f04f 32ff 	mov.w	r2, #4294967295
 8007636:	4640      	mov	r0, r8
 8007638:	4b9c      	ldr	r3, [pc, #624]	; (80078ac <_printf_float+0x2cc>)
 800763a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800763c:	f7f9 f9e6 	bl	8000a0c <__aeabi_dcmpun>
 8007640:	bb70      	cbnz	r0, 80076a0 <_printf_float+0xc0>
 8007642:	f04f 32ff 	mov.w	r2, #4294967295
 8007646:	4640      	mov	r0, r8
 8007648:	4b98      	ldr	r3, [pc, #608]	; (80078ac <_printf_float+0x2cc>)
 800764a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800764c:	f7f9 f9c0 	bl	80009d0 <__aeabi_dcmple>
 8007650:	bb30      	cbnz	r0, 80076a0 <_printf_float+0xc0>
 8007652:	2200      	movs	r2, #0
 8007654:	2300      	movs	r3, #0
 8007656:	4640      	mov	r0, r8
 8007658:	4651      	mov	r1, sl
 800765a:	f7f9 f9af 	bl	80009bc <__aeabi_dcmplt>
 800765e:	b110      	cbz	r0, 8007666 <_printf_float+0x86>
 8007660:	232d      	movs	r3, #45	; 0x2d
 8007662:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007666:	4b92      	ldr	r3, [pc, #584]	; (80078b0 <_printf_float+0x2d0>)
 8007668:	4892      	ldr	r0, [pc, #584]	; (80078b4 <_printf_float+0x2d4>)
 800766a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800766e:	bf94      	ite	ls
 8007670:	4698      	movls	r8, r3
 8007672:	4680      	movhi	r8, r0
 8007674:	2303      	movs	r3, #3
 8007676:	f04f 0a00 	mov.w	sl, #0
 800767a:	6123      	str	r3, [r4, #16]
 800767c:	f02b 0304 	bic.w	r3, fp, #4
 8007680:	6023      	str	r3, [r4, #0]
 8007682:	4633      	mov	r3, r6
 8007684:	4621      	mov	r1, r4
 8007686:	4628      	mov	r0, r5
 8007688:	9700      	str	r7, [sp, #0]
 800768a:	aa0f      	add	r2, sp, #60	; 0x3c
 800768c:	f000 f9d4 	bl	8007a38 <_printf_common>
 8007690:	3001      	adds	r0, #1
 8007692:	f040 8090 	bne.w	80077b6 <_printf_float+0x1d6>
 8007696:	f04f 30ff 	mov.w	r0, #4294967295
 800769a:	b011      	add	sp, #68	; 0x44
 800769c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076a0:	4642      	mov	r2, r8
 80076a2:	4653      	mov	r3, sl
 80076a4:	4640      	mov	r0, r8
 80076a6:	4651      	mov	r1, sl
 80076a8:	f7f9 f9b0 	bl	8000a0c <__aeabi_dcmpun>
 80076ac:	b148      	cbz	r0, 80076c2 <_printf_float+0xe2>
 80076ae:	f1ba 0f00 	cmp.w	sl, #0
 80076b2:	bfb8      	it	lt
 80076b4:	232d      	movlt	r3, #45	; 0x2d
 80076b6:	4880      	ldr	r0, [pc, #512]	; (80078b8 <_printf_float+0x2d8>)
 80076b8:	bfb8      	it	lt
 80076ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80076be:	4b7f      	ldr	r3, [pc, #508]	; (80078bc <_printf_float+0x2dc>)
 80076c0:	e7d3      	b.n	800766a <_printf_float+0x8a>
 80076c2:	6863      	ldr	r3, [r4, #4]
 80076c4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80076c8:	1c5a      	adds	r2, r3, #1
 80076ca:	d142      	bne.n	8007752 <_printf_float+0x172>
 80076cc:	2306      	movs	r3, #6
 80076ce:	6063      	str	r3, [r4, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	9206      	str	r2, [sp, #24]
 80076d4:	aa0e      	add	r2, sp, #56	; 0x38
 80076d6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80076da:	aa0d      	add	r2, sp, #52	; 0x34
 80076dc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80076e0:	9203      	str	r2, [sp, #12]
 80076e2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80076e6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80076ea:	6023      	str	r3, [r4, #0]
 80076ec:	6863      	ldr	r3, [r4, #4]
 80076ee:	4642      	mov	r2, r8
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	4628      	mov	r0, r5
 80076f4:	4653      	mov	r3, sl
 80076f6:	910b      	str	r1, [sp, #44]	; 0x2c
 80076f8:	f7ff fed4 	bl	80074a4 <__cvt>
 80076fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80076fe:	4680      	mov	r8, r0
 8007700:	2947      	cmp	r1, #71	; 0x47
 8007702:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007704:	d108      	bne.n	8007718 <_printf_float+0x138>
 8007706:	1cc8      	adds	r0, r1, #3
 8007708:	db02      	blt.n	8007710 <_printf_float+0x130>
 800770a:	6863      	ldr	r3, [r4, #4]
 800770c:	4299      	cmp	r1, r3
 800770e:	dd40      	ble.n	8007792 <_printf_float+0x1b2>
 8007710:	f1a9 0902 	sub.w	r9, r9, #2
 8007714:	fa5f f989 	uxtb.w	r9, r9
 8007718:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800771c:	d81f      	bhi.n	800775e <_printf_float+0x17e>
 800771e:	464a      	mov	r2, r9
 8007720:	3901      	subs	r1, #1
 8007722:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007726:	910d      	str	r1, [sp, #52]	; 0x34
 8007728:	f7ff ff1b 	bl	8007562 <__exponent>
 800772c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800772e:	4682      	mov	sl, r0
 8007730:	1813      	adds	r3, r2, r0
 8007732:	2a01      	cmp	r2, #1
 8007734:	6123      	str	r3, [r4, #16]
 8007736:	dc02      	bgt.n	800773e <_printf_float+0x15e>
 8007738:	6822      	ldr	r2, [r4, #0]
 800773a:	07d2      	lsls	r2, r2, #31
 800773c:	d501      	bpl.n	8007742 <_printf_float+0x162>
 800773e:	3301      	adds	r3, #1
 8007740:	6123      	str	r3, [r4, #16]
 8007742:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007746:	2b00      	cmp	r3, #0
 8007748:	d09b      	beq.n	8007682 <_printf_float+0xa2>
 800774a:	232d      	movs	r3, #45	; 0x2d
 800774c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007750:	e797      	b.n	8007682 <_printf_float+0xa2>
 8007752:	2947      	cmp	r1, #71	; 0x47
 8007754:	d1bc      	bne.n	80076d0 <_printf_float+0xf0>
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1ba      	bne.n	80076d0 <_printf_float+0xf0>
 800775a:	2301      	movs	r3, #1
 800775c:	e7b7      	b.n	80076ce <_printf_float+0xee>
 800775e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007762:	d118      	bne.n	8007796 <_printf_float+0x1b6>
 8007764:	2900      	cmp	r1, #0
 8007766:	6863      	ldr	r3, [r4, #4]
 8007768:	dd0b      	ble.n	8007782 <_printf_float+0x1a2>
 800776a:	6121      	str	r1, [r4, #16]
 800776c:	b913      	cbnz	r3, 8007774 <_printf_float+0x194>
 800776e:	6822      	ldr	r2, [r4, #0]
 8007770:	07d0      	lsls	r0, r2, #31
 8007772:	d502      	bpl.n	800777a <_printf_float+0x19a>
 8007774:	3301      	adds	r3, #1
 8007776:	440b      	add	r3, r1
 8007778:	6123      	str	r3, [r4, #16]
 800777a:	f04f 0a00 	mov.w	sl, #0
 800777e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007780:	e7df      	b.n	8007742 <_printf_float+0x162>
 8007782:	b913      	cbnz	r3, 800778a <_printf_float+0x1aa>
 8007784:	6822      	ldr	r2, [r4, #0]
 8007786:	07d2      	lsls	r2, r2, #31
 8007788:	d501      	bpl.n	800778e <_printf_float+0x1ae>
 800778a:	3302      	adds	r3, #2
 800778c:	e7f4      	b.n	8007778 <_printf_float+0x198>
 800778e:	2301      	movs	r3, #1
 8007790:	e7f2      	b.n	8007778 <_printf_float+0x198>
 8007792:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007796:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007798:	4299      	cmp	r1, r3
 800779a:	db05      	blt.n	80077a8 <_printf_float+0x1c8>
 800779c:	6823      	ldr	r3, [r4, #0]
 800779e:	6121      	str	r1, [r4, #16]
 80077a0:	07d8      	lsls	r0, r3, #31
 80077a2:	d5ea      	bpl.n	800777a <_printf_float+0x19a>
 80077a4:	1c4b      	adds	r3, r1, #1
 80077a6:	e7e7      	b.n	8007778 <_printf_float+0x198>
 80077a8:	2900      	cmp	r1, #0
 80077aa:	bfcc      	ite	gt
 80077ac:	2201      	movgt	r2, #1
 80077ae:	f1c1 0202 	rsble	r2, r1, #2
 80077b2:	4413      	add	r3, r2
 80077b4:	e7e0      	b.n	8007778 <_printf_float+0x198>
 80077b6:	6823      	ldr	r3, [r4, #0]
 80077b8:	055a      	lsls	r2, r3, #21
 80077ba:	d407      	bmi.n	80077cc <_printf_float+0x1ec>
 80077bc:	6923      	ldr	r3, [r4, #16]
 80077be:	4642      	mov	r2, r8
 80077c0:	4631      	mov	r1, r6
 80077c2:	4628      	mov	r0, r5
 80077c4:	47b8      	blx	r7
 80077c6:	3001      	adds	r0, #1
 80077c8:	d12b      	bne.n	8007822 <_printf_float+0x242>
 80077ca:	e764      	b.n	8007696 <_printf_float+0xb6>
 80077cc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80077d0:	f240 80dd 	bls.w	800798e <_printf_float+0x3ae>
 80077d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80077d8:	2200      	movs	r2, #0
 80077da:	2300      	movs	r3, #0
 80077dc:	f7f9 f8e4 	bl	80009a8 <__aeabi_dcmpeq>
 80077e0:	2800      	cmp	r0, #0
 80077e2:	d033      	beq.n	800784c <_printf_float+0x26c>
 80077e4:	2301      	movs	r3, #1
 80077e6:	4631      	mov	r1, r6
 80077e8:	4628      	mov	r0, r5
 80077ea:	4a35      	ldr	r2, [pc, #212]	; (80078c0 <_printf_float+0x2e0>)
 80077ec:	47b8      	blx	r7
 80077ee:	3001      	adds	r0, #1
 80077f0:	f43f af51 	beq.w	8007696 <_printf_float+0xb6>
 80077f4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80077f8:	429a      	cmp	r2, r3
 80077fa:	db02      	blt.n	8007802 <_printf_float+0x222>
 80077fc:	6823      	ldr	r3, [r4, #0]
 80077fe:	07d8      	lsls	r0, r3, #31
 8007800:	d50f      	bpl.n	8007822 <_printf_float+0x242>
 8007802:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007806:	4631      	mov	r1, r6
 8007808:	4628      	mov	r0, r5
 800780a:	47b8      	blx	r7
 800780c:	3001      	adds	r0, #1
 800780e:	f43f af42 	beq.w	8007696 <_printf_float+0xb6>
 8007812:	f04f 0800 	mov.w	r8, #0
 8007816:	f104 091a 	add.w	r9, r4, #26
 800781a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800781c:	3b01      	subs	r3, #1
 800781e:	4543      	cmp	r3, r8
 8007820:	dc09      	bgt.n	8007836 <_printf_float+0x256>
 8007822:	6823      	ldr	r3, [r4, #0]
 8007824:	079b      	lsls	r3, r3, #30
 8007826:	f100 8102 	bmi.w	8007a2e <_printf_float+0x44e>
 800782a:	68e0      	ldr	r0, [r4, #12]
 800782c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800782e:	4298      	cmp	r0, r3
 8007830:	bfb8      	it	lt
 8007832:	4618      	movlt	r0, r3
 8007834:	e731      	b.n	800769a <_printf_float+0xba>
 8007836:	2301      	movs	r3, #1
 8007838:	464a      	mov	r2, r9
 800783a:	4631      	mov	r1, r6
 800783c:	4628      	mov	r0, r5
 800783e:	47b8      	blx	r7
 8007840:	3001      	adds	r0, #1
 8007842:	f43f af28 	beq.w	8007696 <_printf_float+0xb6>
 8007846:	f108 0801 	add.w	r8, r8, #1
 800784a:	e7e6      	b.n	800781a <_printf_float+0x23a>
 800784c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800784e:	2b00      	cmp	r3, #0
 8007850:	dc38      	bgt.n	80078c4 <_printf_float+0x2e4>
 8007852:	2301      	movs	r3, #1
 8007854:	4631      	mov	r1, r6
 8007856:	4628      	mov	r0, r5
 8007858:	4a19      	ldr	r2, [pc, #100]	; (80078c0 <_printf_float+0x2e0>)
 800785a:	47b8      	blx	r7
 800785c:	3001      	adds	r0, #1
 800785e:	f43f af1a 	beq.w	8007696 <_printf_float+0xb6>
 8007862:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007866:	4313      	orrs	r3, r2
 8007868:	d102      	bne.n	8007870 <_printf_float+0x290>
 800786a:	6823      	ldr	r3, [r4, #0]
 800786c:	07d9      	lsls	r1, r3, #31
 800786e:	d5d8      	bpl.n	8007822 <_printf_float+0x242>
 8007870:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007874:	4631      	mov	r1, r6
 8007876:	4628      	mov	r0, r5
 8007878:	47b8      	blx	r7
 800787a:	3001      	adds	r0, #1
 800787c:	f43f af0b 	beq.w	8007696 <_printf_float+0xb6>
 8007880:	f04f 0900 	mov.w	r9, #0
 8007884:	f104 0a1a 	add.w	sl, r4, #26
 8007888:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800788a:	425b      	negs	r3, r3
 800788c:	454b      	cmp	r3, r9
 800788e:	dc01      	bgt.n	8007894 <_printf_float+0x2b4>
 8007890:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007892:	e794      	b.n	80077be <_printf_float+0x1de>
 8007894:	2301      	movs	r3, #1
 8007896:	4652      	mov	r2, sl
 8007898:	4631      	mov	r1, r6
 800789a:	4628      	mov	r0, r5
 800789c:	47b8      	blx	r7
 800789e:	3001      	adds	r0, #1
 80078a0:	f43f aef9 	beq.w	8007696 <_printf_float+0xb6>
 80078a4:	f109 0901 	add.w	r9, r9, #1
 80078a8:	e7ee      	b.n	8007888 <_printf_float+0x2a8>
 80078aa:	bf00      	nop
 80078ac:	7fefffff 	.word	0x7fefffff
 80078b0:	0800aef0 	.word	0x0800aef0
 80078b4:	0800aef4 	.word	0x0800aef4
 80078b8:	0800aefc 	.word	0x0800aefc
 80078bc:	0800aef8 	.word	0x0800aef8
 80078c0:	0800af00 	.word	0x0800af00
 80078c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078c8:	429a      	cmp	r2, r3
 80078ca:	bfa8      	it	ge
 80078cc:	461a      	movge	r2, r3
 80078ce:	2a00      	cmp	r2, #0
 80078d0:	4691      	mov	r9, r2
 80078d2:	dc37      	bgt.n	8007944 <_printf_float+0x364>
 80078d4:	f04f 0b00 	mov.w	fp, #0
 80078d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078dc:	f104 021a 	add.w	r2, r4, #26
 80078e0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80078e4:	ebaa 0309 	sub.w	r3, sl, r9
 80078e8:	455b      	cmp	r3, fp
 80078ea:	dc33      	bgt.n	8007954 <_printf_float+0x374>
 80078ec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80078f0:	429a      	cmp	r2, r3
 80078f2:	db3b      	blt.n	800796c <_printf_float+0x38c>
 80078f4:	6823      	ldr	r3, [r4, #0]
 80078f6:	07da      	lsls	r2, r3, #31
 80078f8:	d438      	bmi.n	800796c <_printf_float+0x38c>
 80078fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078fc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80078fe:	eba2 030a 	sub.w	r3, r2, sl
 8007902:	eba2 0901 	sub.w	r9, r2, r1
 8007906:	4599      	cmp	r9, r3
 8007908:	bfa8      	it	ge
 800790a:	4699      	movge	r9, r3
 800790c:	f1b9 0f00 	cmp.w	r9, #0
 8007910:	dc34      	bgt.n	800797c <_printf_float+0x39c>
 8007912:	f04f 0800 	mov.w	r8, #0
 8007916:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800791a:	f104 0a1a 	add.w	sl, r4, #26
 800791e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007922:	1a9b      	subs	r3, r3, r2
 8007924:	eba3 0309 	sub.w	r3, r3, r9
 8007928:	4543      	cmp	r3, r8
 800792a:	f77f af7a 	ble.w	8007822 <_printf_float+0x242>
 800792e:	2301      	movs	r3, #1
 8007930:	4652      	mov	r2, sl
 8007932:	4631      	mov	r1, r6
 8007934:	4628      	mov	r0, r5
 8007936:	47b8      	blx	r7
 8007938:	3001      	adds	r0, #1
 800793a:	f43f aeac 	beq.w	8007696 <_printf_float+0xb6>
 800793e:	f108 0801 	add.w	r8, r8, #1
 8007942:	e7ec      	b.n	800791e <_printf_float+0x33e>
 8007944:	4613      	mov	r3, r2
 8007946:	4631      	mov	r1, r6
 8007948:	4642      	mov	r2, r8
 800794a:	4628      	mov	r0, r5
 800794c:	47b8      	blx	r7
 800794e:	3001      	adds	r0, #1
 8007950:	d1c0      	bne.n	80078d4 <_printf_float+0x2f4>
 8007952:	e6a0      	b.n	8007696 <_printf_float+0xb6>
 8007954:	2301      	movs	r3, #1
 8007956:	4631      	mov	r1, r6
 8007958:	4628      	mov	r0, r5
 800795a:	920b      	str	r2, [sp, #44]	; 0x2c
 800795c:	47b8      	blx	r7
 800795e:	3001      	adds	r0, #1
 8007960:	f43f ae99 	beq.w	8007696 <_printf_float+0xb6>
 8007964:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007966:	f10b 0b01 	add.w	fp, fp, #1
 800796a:	e7b9      	b.n	80078e0 <_printf_float+0x300>
 800796c:	4631      	mov	r1, r6
 800796e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007972:	4628      	mov	r0, r5
 8007974:	47b8      	blx	r7
 8007976:	3001      	adds	r0, #1
 8007978:	d1bf      	bne.n	80078fa <_printf_float+0x31a>
 800797a:	e68c      	b.n	8007696 <_printf_float+0xb6>
 800797c:	464b      	mov	r3, r9
 800797e:	4631      	mov	r1, r6
 8007980:	4628      	mov	r0, r5
 8007982:	eb08 020a 	add.w	r2, r8, sl
 8007986:	47b8      	blx	r7
 8007988:	3001      	adds	r0, #1
 800798a:	d1c2      	bne.n	8007912 <_printf_float+0x332>
 800798c:	e683      	b.n	8007696 <_printf_float+0xb6>
 800798e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007990:	2a01      	cmp	r2, #1
 8007992:	dc01      	bgt.n	8007998 <_printf_float+0x3b8>
 8007994:	07db      	lsls	r3, r3, #31
 8007996:	d537      	bpl.n	8007a08 <_printf_float+0x428>
 8007998:	2301      	movs	r3, #1
 800799a:	4642      	mov	r2, r8
 800799c:	4631      	mov	r1, r6
 800799e:	4628      	mov	r0, r5
 80079a0:	47b8      	blx	r7
 80079a2:	3001      	adds	r0, #1
 80079a4:	f43f ae77 	beq.w	8007696 <_printf_float+0xb6>
 80079a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079ac:	4631      	mov	r1, r6
 80079ae:	4628      	mov	r0, r5
 80079b0:	47b8      	blx	r7
 80079b2:	3001      	adds	r0, #1
 80079b4:	f43f ae6f 	beq.w	8007696 <_printf_float+0xb6>
 80079b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80079bc:	2200      	movs	r2, #0
 80079be:	2300      	movs	r3, #0
 80079c0:	f7f8 fff2 	bl	80009a8 <__aeabi_dcmpeq>
 80079c4:	b9d8      	cbnz	r0, 80079fe <_printf_float+0x41e>
 80079c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079c8:	f108 0201 	add.w	r2, r8, #1
 80079cc:	3b01      	subs	r3, #1
 80079ce:	4631      	mov	r1, r6
 80079d0:	4628      	mov	r0, r5
 80079d2:	47b8      	blx	r7
 80079d4:	3001      	adds	r0, #1
 80079d6:	d10e      	bne.n	80079f6 <_printf_float+0x416>
 80079d8:	e65d      	b.n	8007696 <_printf_float+0xb6>
 80079da:	2301      	movs	r3, #1
 80079dc:	464a      	mov	r2, r9
 80079de:	4631      	mov	r1, r6
 80079e0:	4628      	mov	r0, r5
 80079e2:	47b8      	blx	r7
 80079e4:	3001      	adds	r0, #1
 80079e6:	f43f ae56 	beq.w	8007696 <_printf_float+0xb6>
 80079ea:	f108 0801 	add.w	r8, r8, #1
 80079ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079f0:	3b01      	subs	r3, #1
 80079f2:	4543      	cmp	r3, r8
 80079f4:	dcf1      	bgt.n	80079da <_printf_float+0x3fa>
 80079f6:	4653      	mov	r3, sl
 80079f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80079fc:	e6e0      	b.n	80077c0 <_printf_float+0x1e0>
 80079fe:	f04f 0800 	mov.w	r8, #0
 8007a02:	f104 091a 	add.w	r9, r4, #26
 8007a06:	e7f2      	b.n	80079ee <_printf_float+0x40e>
 8007a08:	2301      	movs	r3, #1
 8007a0a:	4642      	mov	r2, r8
 8007a0c:	e7df      	b.n	80079ce <_printf_float+0x3ee>
 8007a0e:	2301      	movs	r3, #1
 8007a10:	464a      	mov	r2, r9
 8007a12:	4631      	mov	r1, r6
 8007a14:	4628      	mov	r0, r5
 8007a16:	47b8      	blx	r7
 8007a18:	3001      	adds	r0, #1
 8007a1a:	f43f ae3c 	beq.w	8007696 <_printf_float+0xb6>
 8007a1e:	f108 0801 	add.w	r8, r8, #1
 8007a22:	68e3      	ldr	r3, [r4, #12]
 8007a24:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007a26:	1a5b      	subs	r3, r3, r1
 8007a28:	4543      	cmp	r3, r8
 8007a2a:	dcf0      	bgt.n	8007a0e <_printf_float+0x42e>
 8007a2c:	e6fd      	b.n	800782a <_printf_float+0x24a>
 8007a2e:	f04f 0800 	mov.w	r8, #0
 8007a32:	f104 0919 	add.w	r9, r4, #25
 8007a36:	e7f4      	b.n	8007a22 <_printf_float+0x442>

08007a38 <_printf_common>:
 8007a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a3c:	4616      	mov	r6, r2
 8007a3e:	4699      	mov	r9, r3
 8007a40:	688a      	ldr	r2, [r1, #8]
 8007a42:	690b      	ldr	r3, [r1, #16]
 8007a44:	4607      	mov	r7, r0
 8007a46:	4293      	cmp	r3, r2
 8007a48:	bfb8      	it	lt
 8007a4a:	4613      	movlt	r3, r2
 8007a4c:	6033      	str	r3, [r6, #0]
 8007a4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a52:	460c      	mov	r4, r1
 8007a54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a58:	b10a      	cbz	r2, 8007a5e <_printf_common+0x26>
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	6033      	str	r3, [r6, #0]
 8007a5e:	6823      	ldr	r3, [r4, #0]
 8007a60:	0699      	lsls	r1, r3, #26
 8007a62:	bf42      	ittt	mi
 8007a64:	6833      	ldrmi	r3, [r6, #0]
 8007a66:	3302      	addmi	r3, #2
 8007a68:	6033      	strmi	r3, [r6, #0]
 8007a6a:	6825      	ldr	r5, [r4, #0]
 8007a6c:	f015 0506 	ands.w	r5, r5, #6
 8007a70:	d106      	bne.n	8007a80 <_printf_common+0x48>
 8007a72:	f104 0a19 	add.w	sl, r4, #25
 8007a76:	68e3      	ldr	r3, [r4, #12]
 8007a78:	6832      	ldr	r2, [r6, #0]
 8007a7a:	1a9b      	subs	r3, r3, r2
 8007a7c:	42ab      	cmp	r3, r5
 8007a7e:	dc28      	bgt.n	8007ad2 <_printf_common+0x9a>
 8007a80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a84:	1e13      	subs	r3, r2, #0
 8007a86:	6822      	ldr	r2, [r4, #0]
 8007a88:	bf18      	it	ne
 8007a8a:	2301      	movne	r3, #1
 8007a8c:	0692      	lsls	r2, r2, #26
 8007a8e:	d42d      	bmi.n	8007aec <_printf_common+0xb4>
 8007a90:	4649      	mov	r1, r9
 8007a92:	4638      	mov	r0, r7
 8007a94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a98:	47c0      	blx	r8
 8007a9a:	3001      	adds	r0, #1
 8007a9c:	d020      	beq.n	8007ae0 <_printf_common+0xa8>
 8007a9e:	6823      	ldr	r3, [r4, #0]
 8007aa0:	68e5      	ldr	r5, [r4, #12]
 8007aa2:	f003 0306 	and.w	r3, r3, #6
 8007aa6:	2b04      	cmp	r3, #4
 8007aa8:	bf18      	it	ne
 8007aaa:	2500      	movne	r5, #0
 8007aac:	6832      	ldr	r2, [r6, #0]
 8007aae:	f04f 0600 	mov.w	r6, #0
 8007ab2:	68a3      	ldr	r3, [r4, #8]
 8007ab4:	bf08      	it	eq
 8007ab6:	1aad      	subeq	r5, r5, r2
 8007ab8:	6922      	ldr	r2, [r4, #16]
 8007aba:	bf08      	it	eq
 8007abc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	bfc4      	itt	gt
 8007ac4:	1a9b      	subgt	r3, r3, r2
 8007ac6:	18ed      	addgt	r5, r5, r3
 8007ac8:	341a      	adds	r4, #26
 8007aca:	42b5      	cmp	r5, r6
 8007acc:	d11a      	bne.n	8007b04 <_printf_common+0xcc>
 8007ace:	2000      	movs	r0, #0
 8007ad0:	e008      	b.n	8007ae4 <_printf_common+0xac>
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	4652      	mov	r2, sl
 8007ad6:	4649      	mov	r1, r9
 8007ad8:	4638      	mov	r0, r7
 8007ada:	47c0      	blx	r8
 8007adc:	3001      	adds	r0, #1
 8007ade:	d103      	bne.n	8007ae8 <_printf_common+0xb0>
 8007ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ae8:	3501      	adds	r5, #1
 8007aea:	e7c4      	b.n	8007a76 <_printf_common+0x3e>
 8007aec:	2030      	movs	r0, #48	; 0x30
 8007aee:	18e1      	adds	r1, r4, r3
 8007af0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007af4:	1c5a      	adds	r2, r3, #1
 8007af6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007afa:	4422      	add	r2, r4
 8007afc:	3302      	adds	r3, #2
 8007afe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b02:	e7c5      	b.n	8007a90 <_printf_common+0x58>
 8007b04:	2301      	movs	r3, #1
 8007b06:	4622      	mov	r2, r4
 8007b08:	4649      	mov	r1, r9
 8007b0a:	4638      	mov	r0, r7
 8007b0c:	47c0      	blx	r8
 8007b0e:	3001      	adds	r0, #1
 8007b10:	d0e6      	beq.n	8007ae0 <_printf_common+0xa8>
 8007b12:	3601      	adds	r6, #1
 8007b14:	e7d9      	b.n	8007aca <_printf_common+0x92>
	...

08007b18 <_printf_i>:
 8007b18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b1c:	460c      	mov	r4, r1
 8007b1e:	7e27      	ldrb	r7, [r4, #24]
 8007b20:	4691      	mov	r9, r2
 8007b22:	2f78      	cmp	r7, #120	; 0x78
 8007b24:	4680      	mov	r8, r0
 8007b26:	469a      	mov	sl, r3
 8007b28:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007b2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b2e:	d807      	bhi.n	8007b40 <_printf_i+0x28>
 8007b30:	2f62      	cmp	r7, #98	; 0x62
 8007b32:	d80a      	bhi.n	8007b4a <_printf_i+0x32>
 8007b34:	2f00      	cmp	r7, #0
 8007b36:	f000 80d9 	beq.w	8007cec <_printf_i+0x1d4>
 8007b3a:	2f58      	cmp	r7, #88	; 0x58
 8007b3c:	f000 80a4 	beq.w	8007c88 <_printf_i+0x170>
 8007b40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b48:	e03a      	b.n	8007bc0 <_printf_i+0xa8>
 8007b4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b4e:	2b15      	cmp	r3, #21
 8007b50:	d8f6      	bhi.n	8007b40 <_printf_i+0x28>
 8007b52:	a001      	add	r0, pc, #4	; (adr r0, 8007b58 <_printf_i+0x40>)
 8007b54:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007b58:	08007bb1 	.word	0x08007bb1
 8007b5c:	08007bc5 	.word	0x08007bc5
 8007b60:	08007b41 	.word	0x08007b41
 8007b64:	08007b41 	.word	0x08007b41
 8007b68:	08007b41 	.word	0x08007b41
 8007b6c:	08007b41 	.word	0x08007b41
 8007b70:	08007bc5 	.word	0x08007bc5
 8007b74:	08007b41 	.word	0x08007b41
 8007b78:	08007b41 	.word	0x08007b41
 8007b7c:	08007b41 	.word	0x08007b41
 8007b80:	08007b41 	.word	0x08007b41
 8007b84:	08007cd3 	.word	0x08007cd3
 8007b88:	08007bf5 	.word	0x08007bf5
 8007b8c:	08007cb5 	.word	0x08007cb5
 8007b90:	08007b41 	.word	0x08007b41
 8007b94:	08007b41 	.word	0x08007b41
 8007b98:	08007cf5 	.word	0x08007cf5
 8007b9c:	08007b41 	.word	0x08007b41
 8007ba0:	08007bf5 	.word	0x08007bf5
 8007ba4:	08007b41 	.word	0x08007b41
 8007ba8:	08007b41 	.word	0x08007b41
 8007bac:	08007cbd 	.word	0x08007cbd
 8007bb0:	680b      	ldr	r3, [r1, #0]
 8007bb2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007bb6:	1d1a      	adds	r2, r3, #4
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	600a      	str	r2, [r1, #0]
 8007bbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e0a4      	b.n	8007d0e <_printf_i+0x1f6>
 8007bc4:	6825      	ldr	r5, [r4, #0]
 8007bc6:	6808      	ldr	r0, [r1, #0]
 8007bc8:	062e      	lsls	r6, r5, #24
 8007bca:	f100 0304 	add.w	r3, r0, #4
 8007bce:	d50a      	bpl.n	8007be6 <_printf_i+0xce>
 8007bd0:	6805      	ldr	r5, [r0, #0]
 8007bd2:	600b      	str	r3, [r1, #0]
 8007bd4:	2d00      	cmp	r5, #0
 8007bd6:	da03      	bge.n	8007be0 <_printf_i+0xc8>
 8007bd8:	232d      	movs	r3, #45	; 0x2d
 8007bda:	426d      	negs	r5, r5
 8007bdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007be0:	230a      	movs	r3, #10
 8007be2:	485e      	ldr	r0, [pc, #376]	; (8007d5c <_printf_i+0x244>)
 8007be4:	e019      	b.n	8007c1a <_printf_i+0x102>
 8007be6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007bea:	6805      	ldr	r5, [r0, #0]
 8007bec:	600b      	str	r3, [r1, #0]
 8007bee:	bf18      	it	ne
 8007bf0:	b22d      	sxthne	r5, r5
 8007bf2:	e7ef      	b.n	8007bd4 <_printf_i+0xbc>
 8007bf4:	680b      	ldr	r3, [r1, #0]
 8007bf6:	6825      	ldr	r5, [r4, #0]
 8007bf8:	1d18      	adds	r0, r3, #4
 8007bfa:	6008      	str	r0, [r1, #0]
 8007bfc:	0628      	lsls	r0, r5, #24
 8007bfe:	d501      	bpl.n	8007c04 <_printf_i+0xec>
 8007c00:	681d      	ldr	r5, [r3, #0]
 8007c02:	e002      	b.n	8007c0a <_printf_i+0xf2>
 8007c04:	0669      	lsls	r1, r5, #25
 8007c06:	d5fb      	bpl.n	8007c00 <_printf_i+0xe8>
 8007c08:	881d      	ldrh	r5, [r3, #0]
 8007c0a:	2f6f      	cmp	r7, #111	; 0x6f
 8007c0c:	bf0c      	ite	eq
 8007c0e:	2308      	moveq	r3, #8
 8007c10:	230a      	movne	r3, #10
 8007c12:	4852      	ldr	r0, [pc, #328]	; (8007d5c <_printf_i+0x244>)
 8007c14:	2100      	movs	r1, #0
 8007c16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c1a:	6866      	ldr	r6, [r4, #4]
 8007c1c:	2e00      	cmp	r6, #0
 8007c1e:	bfa8      	it	ge
 8007c20:	6821      	ldrge	r1, [r4, #0]
 8007c22:	60a6      	str	r6, [r4, #8]
 8007c24:	bfa4      	itt	ge
 8007c26:	f021 0104 	bicge.w	r1, r1, #4
 8007c2a:	6021      	strge	r1, [r4, #0]
 8007c2c:	b90d      	cbnz	r5, 8007c32 <_printf_i+0x11a>
 8007c2e:	2e00      	cmp	r6, #0
 8007c30:	d04d      	beq.n	8007cce <_printf_i+0x1b6>
 8007c32:	4616      	mov	r6, r2
 8007c34:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c38:	fb03 5711 	mls	r7, r3, r1, r5
 8007c3c:	5dc7      	ldrb	r7, [r0, r7]
 8007c3e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c42:	462f      	mov	r7, r5
 8007c44:	42bb      	cmp	r3, r7
 8007c46:	460d      	mov	r5, r1
 8007c48:	d9f4      	bls.n	8007c34 <_printf_i+0x11c>
 8007c4a:	2b08      	cmp	r3, #8
 8007c4c:	d10b      	bne.n	8007c66 <_printf_i+0x14e>
 8007c4e:	6823      	ldr	r3, [r4, #0]
 8007c50:	07df      	lsls	r7, r3, #31
 8007c52:	d508      	bpl.n	8007c66 <_printf_i+0x14e>
 8007c54:	6923      	ldr	r3, [r4, #16]
 8007c56:	6861      	ldr	r1, [r4, #4]
 8007c58:	4299      	cmp	r1, r3
 8007c5a:	bfde      	ittt	le
 8007c5c:	2330      	movle	r3, #48	; 0x30
 8007c5e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c62:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c66:	1b92      	subs	r2, r2, r6
 8007c68:	6122      	str	r2, [r4, #16]
 8007c6a:	464b      	mov	r3, r9
 8007c6c:	4621      	mov	r1, r4
 8007c6e:	4640      	mov	r0, r8
 8007c70:	f8cd a000 	str.w	sl, [sp]
 8007c74:	aa03      	add	r2, sp, #12
 8007c76:	f7ff fedf 	bl	8007a38 <_printf_common>
 8007c7a:	3001      	adds	r0, #1
 8007c7c:	d14c      	bne.n	8007d18 <_printf_i+0x200>
 8007c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c82:	b004      	add	sp, #16
 8007c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c88:	4834      	ldr	r0, [pc, #208]	; (8007d5c <_printf_i+0x244>)
 8007c8a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007c8e:	680e      	ldr	r6, [r1, #0]
 8007c90:	6823      	ldr	r3, [r4, #0]
 8007c92:	f856 5b04 	ldr.w	r5, [r6], #4
 8007c96:	061f      	lsls	r7, r3, #24
 8007c98:	600e      	str	r6, [r1, #0]
 8007c9a:	d514      	bpl.n	8007cc6 <_printf_i+0x1ae>
 8007c9c:	07d9      	lsls	r1, r3, #31
 8007c9e:	bf44      	itt	mi
 8007ca0:	f043 0320 	orrmi.w	r3, r3, #32
 8007ca4:	6023      	strmi	r3, [r4, #0]
 8007ca6:	b91d      	cbnz	r5, 8007cb0 <_printf_i+0x198>
 8007ca8:	6823      	ldr	r3, [r4, #0]
 8007caa:	f023 0320 	bic.w	r3, r3, #32
 8007cae:	6023      	str	r3, [r4, #0]
 8007cb0:	2310      	movs	r3, #16
 8007cb2:	e7af      	b.n	8007c14 <_printf_i+0xfc>
 8007cb4:	6823      	ldr	r3, [r4, #0]
 8007cb6:	f043 0320 	orr.w	r3, r3, #32
 8007cba:	6023      	str	r3, [r4, #0]
 8007cbc:	2378      	movs	r3, #120	; 0x78
 8007cbe:	4828      	ldr	r0, [pc, #160]	; (8007d60 <_printf_i+0x248>)
 8007cc0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007cc4:	e7e3      	b.n	8007c8e <_printf_i+0x176>
 8007cc6:	065e      	lsls	r6, r3, #25
 8007cc8:	bf48      	it	mi
 8007cca:	b2ad      	uxthmi	r5, r5
 8007ccc:	e7e6      	b.n	8007c9c <_printf_i+0x184>
 8007cce:	4616      	mov	r6, r2
 8007cd0:	e7bb      	b.n	8007c4a <_printf_i+0x132>
 8007cd2:	680b      	ldr	r3, [r1, #0]
 8007cd4:	6826      	ldr	r6, [r4, #0]
 8007cd6:	1d1d      	adds	r5, r3, #4
 8007cd8:	6960      	ldr	r0, [r4, #20]
 8007cda:	600d      	str	r5, [r1, #0]
 8007cdc:	0635      	lsls	r5, r6, #24
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	d501      	bpl.n	8007ce6 <_printf_i+0x1ce>
 8007ce2:	6018      	str	r0, [r3, #0]
 8007ce4:	e002      	b.n	8007cec <_printf_i+0x1d4>
 8007ce6:	0671      	lsls	r1, r6, #25
 8007ce8:	d5fb      	bpl.n	8007ce2 <_printf_i+0x1ca>
 8007cea:	8018      	strh	r0, [r3, #0]
 8007cec:	2300      	movs	r3, #0
 8007cee:	4616      	mov	r6, r2
 8007cf0:	6123      	str	r3, [r4, #16]
 8007cf2:	e7ba      	b.n	8007c6a <_printf_i+0x152>
 8007cf4:	680b      	ldr	r3, [r1, #0]
 8007cf6:	1d1a      	adds	r2, r3, #4
 8007cf8:	600a      	str	r2, [r1, #0]
 8007cfa:	681e      	ldr	r6, [r3, #0]
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	4630      	mov	r0, r6
 8007d00:	6862      	ldr	r2, [r4, #4]
 8007d02:	f000 fedf 	bl	8008ac4 <memchr>
 8007d06:	b108      	cbz	r0, 8007d0c <_printf_i+0x1f4>
 8007d08:	1b80      	subs	r0, r0, r6
 8007d0a:	6060      	str	r0, [r4, #4]
 8007d0c:	6863      	ldr	r3, [r4, #4]
 8007d0e:	6123      	str	r3, [r4, #16]
 8007d10:	2300      	movs	r3, #0
 8007d12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d16:	e7a8      	b.n	8007c6a <_printf_i+0x152>
 8007d18:	4632      	mov	r2, r6
 8007d1a:	4649      	mov	r1, r9
 8007d1c:	4640      	mov	r0, r8
 8007d1e:	6923      	ldr	r3, [r4, #16]
 8007d20:	47d0      	blx	sl
 8007d22:	3001      	adds	r0, #1
 8007d24:	d0ab      	beq.n	8007c7e <_printf_i+0x166>
 8007d26:	6823      	ldr	r3, [r4, #0]
 8007d28:	079b      	lsls	r3, r3, #30
 8007d2a:	d413      	bmi.n	8007d54 <_printf_i+0x23c>
 8007d2c:	68e0      	ldr	r0, [r4, #12]
 8007d2e:	9b03      	ldr	r3, [sp, #12]
 8007d30:	4298      	cmp	r0, r3
 8007d32:	bfb8      	it	lt
 8007d34:	4618      	movlt	r0, r3
 8007d36:	e7a4      	b.n	8007c82 <_printf_i+0x16a>
 8007d38:	2301      	movs	r3, #1
 8007d3a:	4632      	mov	r2, r6
 8007d3c:	4649      	mov	r1, r9
 8007d3e:	4640      	mov	r0, r8
 8007d40:	47d0      	blx	sl
 8007d42:	3001      	adds	r0, #1
 8007d44:	d09b      	beq.n	8007c7e <_printf_i+0x166>
 8007d46:	3501      	adds	r5, #1
 8007d48:	68e3      	ldr	r3, [r4, #12]
 8007d4a:	9903      	ldr	r1, [sp, #12]
 8007d4c:	1a5b      	subs	r3, r3, r1
 8007d4e:	42ab      	cmp	r3, r5
 8007d50:	dcf2      	bgt.n	8007d38 <_printf_i+0x220>
 8007d52:	e7eb      	b.n	8007d2c <_printf_i+0x214>
 8007d54:	2500      	movs	r5, #0
 8007d56:	f104 0619 	add.w	r6, r4, #25
 8007d5a:	e7f5      	b.n	8007d48 <_printf_i+0x230>
 8007d5c:	0800af02 	.word	0x0800af02
 8007d60:	0800af13 	.word	0x0800af13

08007d64 <_sbrk_r>:
 8007d64:	b538      	push	{r3, r4, r5, lr}
 8007d66:	2300      	movs	r3, #0
 8007d68:	4d05      	ldr	r5, [pc, #20]	; (8007d80 <_sbrk_r+0x1c>)
 8007d6a:	4604      	mov	r4, r0
 8007d6c:	4608      	mov	r0, r1
 8007d6e:	602b      	str	r3, [r5, #0]
 8007d70:	f7f9 ffd0 	bl	8001d14 <_sbrk>
 8007d74:	1c43      	adds	r3, r0, #1
 8007d76:	d102      	bne.n	8007d7e <_sbrk_r+0x1a>
 8007d78:	682b      	ldr	r3, [r5, #0]
 8007d7a:	b103      	cbz	r3, 8007d7e <_sbrk_r+0x1a>
 8007d7c:	6023      	str	r3, [r4, #0]
 8007d7e:	bd38      	pop	{r3, r4, r5, pc}
 8007d80:	20000570 	.word	0x20000570

08007d84 <siprintf>:
 8007d84:	b40e      	push	{r1, r2, r3}
 8007d86:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007d8a:	b500      	push	{lr}
 8007d8c:	b09c      	sub	sp, #112	; 0x70
 8007d8e:	ab1d      	add	r3, sp, #116	; 0x74
 8007d90:	9002      	str	r0, [sp, #8]
 8007d92:	9006      	str	r0, [sp, #24]
 8007d94:	9107      	str	r1, [sp, #28]
 8007d96:	9104      	str	r1, [sp, #16]
 8007d98:	4808      	ldr	r0, [pc, #32]	; (8007dbc <siprintf+0x38>)
 8007d9a:	4909      	ldr	r1, [pc, #36]	; (8007dc0 <siprintf+0x3c>)
 8007d9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007da0:	9105      	str	r1, [sp, #20]
 8007da2:	6800      	ldr	r0, [r0, #0]
 8007da4:	a902      	add	r1, sp, #8
 8007da6:	9301      	str	r3, [sp, #4]
 8007da8:	f001 fa92 	bl	80092d0 <_svfiprintf_r>
 8007dac:	2200      	movs	r2, #0
 8007dae:	9b02      	ldr	r3, [sp, #8]
 8007db0:	701a      	strb	r2, [r3, #0]
 8007db2:	b01c      	add	sp, #112	; 0x70
 8007db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007db8:	b003      	add	sp, #12
 8007dba:	4770      	bx	lr
 8007dbc:	20000014 	.word	0x20000014
 8007dc0:	ffff0208 	.word	0xffff0208

08007dc4 <quorem>:
 8007dc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc8:	6903      	ldr	r3, [r0, #16]
 8007dca:	690c      	ldr	r4, [r1, #16]
 8007dcc:	4607      	mov	r7, r0
 8007dce:	42a3      	cmp	r3, r4
 8007dd0:	f2c0 8083 	blt.w	8007eda <quorem+0x116>
 8007dd4:	3c01      	subs	r4, #1
 8007dd6:	f100 0514 	add.w	r5, r0, #20
 8007dda:	f101 0814 	add.w	r8, r1, #20
 8007dde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007de2:	9301      	str	r3, [sp, #4]
 8007de4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007de8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007dec:	3301      	adds	r3, #1
 8007dee:	429a      	cmp	r2, r3
 8007df0:	fbb2 f6f3 	udiv	r6, r2, r3
 8007df4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007df8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007dfc:	d332      	bcc.n	8007e64 <quorem+0xa0>
 8007dfe:	f04f 0e00 	mov.w	lr, #0
 8007e02:	4640      	mov	r0, r8
 8007e04:	46ac      	mov	ip, r5
 8007e06:	46f2      	mov	sl, lr
 8007e08:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e0c:	b293      	uxth	r3, r2
 8007e0e:	fb06 e303 	mla	r3, r6, r3, lr
 8007e12:	0c12      	lsrs	r2, r2, #16
 8007e14:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007e18:	fb06 e202 	mla	r2, r6, r2, lr
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	ebaa 0303 	sub.w	r3, sl, r3
 8007e22:	f8dc a000 	ldr.w	sl, [ip]
 8007e26:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007e2a:	fa1f fa8a 	uxth.w	sl, sl
 8007e2e:	4453      	add	r3, sl
 8007e30:	fa1f fa82 	uxth.w	sl, r2
 8007e34:	f8dc 2000 	ldr.w	r2, [ip]
 8007e38:	4581      	cmp	r9, r0
 8007e3a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007e3e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e48:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007e4c:	f84c 3b04 	str.w	r3, [ip], #4
 8007e50:	d2da      	bcs.n	8007e08 <quorem+0x44>
 8007e52:	f855 300b 	ldr.w	r3, [r5, fp]
 8007e56:	b92b      	cbnz	r3, 8007e64 <quorem+0xa0>
 8007e58:	9b01      	ldr	r3, [sp, #4]
 8007e5a:	3b04      	subs	r3, #4
 8007e5c:	429d      	cmp	r5, r3
 8007e5e:	461a      	mov	r2, r3
 8007e60:	d32f      	bcc.n	8007ec2 <quorem+0xfe>
 8007e62:	613c      	str	r4, [r7, #16]
 8007e64:	4638      	mov	r0, r7
 8007e66:	f001 f8c1 	bl	8008fec <__mcmp>
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	db25      	blt.n	8007eba <quorem+0xf6>
 8007e6e:	4628      	mov	r0, r5
 8007e70:	f04f 0c00 	mov.w	ip, #0
 8007e74:	3601      	adds	r6, #1
 8007e76:	f858 1b04 	ldr.w	r1, [r8], #4
 8007e7a:	f8d0 e000 	ldr.w	lr, [r0]
 8007e7e:	b28b      	uxth	r3, r1
 8007e80:	ebac 0303 	sub.w	r3, ip, r3
 8007e84:	fa1f f28e 	uxth.w	r2, lr
 8007e88:	4413      	add	r3, r2
 8007e8a:	0c0a      	lsrs	r2, r1, #16
 8007e8c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007e90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e9a:	45c1      	cmp	r9, r8
 8007e9c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007ea0:	f840 3b04 	str.w	r3, [r0], #4
 8007ea4:	d2e7      	bcs.n	8007e76 <quorem+0xb2>
 8007ea6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007eaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007eae:	b922      	cbnz	r2, 8007eba <quorem+0xf6>
 8007eb0:	3b04      	subs	r3, #4
 8007eb2:	429d      	cmp	r5, r3
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	d30a      	bcc.n	8007ece <quorem+0x10a>
 8007eb8:	613c      	str	r4, [r7, #16]
 8007eba:	4630      	mov	r0, r6
 8007ebc:	b003      	add	sp, #12
 8007ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec2:	6812      	ldr	r2, [r2, #0]
 8007ec4:	3b04      	subs	r3, #4
 8007ec6:	2a00      	cmp	r2, #0
 8007ec8:	d1cb      	bne.n	8007e62 <quorem+0x9e>
 8007eca:	3c01      	subs	r4, #1
 8007ecc:	e7c6      	b.n	8007e5c <quorem+0x98>
 8007ece:	6812      	ldr	r2, [r2, #0]
 8007ed0:	3b04      	subs	r3, #4
 8007ed2:	2a00      	cmp	r2, #0
 8007ed4:	d1f0      	bne.n	8007eb8 <quorem+0xf4>
 8007ed6:	3c01      	subs	r4, #1
 8007ed8:	e7eb      	b.n	8007eb2 <quorem+0xee>
 8007eda:	2000      	movs	r0, #0
 8007edc:	e7ee      	b.n	8007ebc <quorem+0xf8>
	...

08007ee0 <_dtoa_r>:
 8007ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee4:	4616      	mov	r6, r2
 8007ee6:	461f      	mov	r7, r3
 8007ee8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007eea:	b099      	sub	sp, #100	; 0x64
 8007eec:	4605      	mov	r5, r0
 8007eee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007ef2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007ef6:	b974      	cbnz	r4, 8007f16 <_dtoa_r+0x36>
 8007ef8:	2010      	movs	r0, #16
 8007efa:	f7ff fa0f 	bl	800731c <malloc>
 8007efe:	4602      	mov	r2, r0
 8007f00:	6268      	str	r0, [r5, #36]	; 0x24
 8007f02:	b920      	cbnz	r0, 8007f0e <_dtoa_r+0x2e>
 8007f04:	21ea      	movs	r1, #234	; 0xea
 8007f06:	4bae      	ldr	r3, [pc, #696]	; (80081c0 <_dtoa_r+0x2e0>)
 8007f08:	48ae      	ldr	r0, [pc, #696]	; (80081c4 <_dtoa_r+0x2e4>)
 8007f0a:	f001 fae1 	bl	80094d0 <__assert_func>
 8007f0e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f12:	6004      	str	r4, [r0, #0]
 8007f14:	60c4      	str	r4, [r0, #12]
 8007f16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f18:	6819      	ldr	r1, [r3, #0]
 8007f1a:	b151      	cbz	r1, 8007f32 <_dtoa_r+0x52>
 8007f1c:	685a      	ldr	r2, [r3, #4]
 8007f1e:	2301      	movs	r3, #1
 8007f20:	4093      	lsls	r3, r2
 8007f22:	604a      	str	r2, [r1, #4]
 8007f24:	608b      	str	r3, [r1, #8]
 8007f26:	4628      	mov	r0, r5
 8007f28:	f000 fe26 	bl	8008b78 <_Bfree>
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f30:	601a      	str	r2, [r3, #0]
 8007f32:	1e3b      	subs	r3, r7, #0
 8007f34:	bfaf      	iteee	ge
 8007f36:	2300      	movge	r3, #0
 8007f38:	2201      	movlt	r2, #1
 8007f3a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007f3e:	9305      	strlt	r3, [sp, #20]
 8007f40:	bfa8      	it	ge
 8007f42:	f8c8 3000 	strge.w	r3, [r8]
 8007f46:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007f4a:	4b9f      	ldr	r3, [pc, #636]	; (80081c8 <_dtoa_r+0x2e8>)
 8007f4c:	bfb8      	it	lt
 8007f4e:	f8c8 2000 	strlt.w	r2, [r8]
 8007f52:	ea33 0309 	bics.w	r3, r3, r9
 8007f56:	d119      	bne.n	8007f8c <_dtoa_r+0xac>
 8007f58:	f242 730f 	movw	r3, #9999	; 0x270f
 8007f5c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007f5e:	6013      	str	r3, [r2, #0]
 8007f60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f64:	4333      	orrs	r3, r6
 8007f66:	f000 8580 	beq.w	8008a6a <_dtoa_r+0xb8a>
 8007f6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007f6c:	b953      	cbnz	r3, 8007f84 <_dtoa_r+0xa4>
 8007f6e:	4b97      	ldr	r3, [pc, #604]	; (80081cc <_dtoa_r+0x2ec>)
 8007f70:	e022      	b.n	8007fb8 <_dtoa_r+0xd8>
 8007f72:	4b97      	ldr	r3, [pc, #604]	; (80081d0 <_dtoa_r+0x2f0>)
 8007f74:	9308      	str	r3, [sp, #32]
 8007f76:	3308      	adds	r3, #8
 8007f78:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007f7a:	6013      	str	r3, [r2, #0]
 8007f7c:	9808      	ldr	r0, [sp, #32]
 8007f7e:	b019      	add	sp, #100	; 0x64
 8007f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f84:	4b91      	ldr	r3, [pc, #580]	; (80081cc <_dtoa_r+0x2ec>)
 8007f86:	9308      	str	r3, [sp, #32]
 8007f88:	3303      	adds	r3, #3
 8007f8a:	e7f5      	b.n	8007f78 <_dtoa_r+0x98>
 8007f8c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007f90:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007f94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f98:	2200      	movs	r2, #0
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	f7f8 fd04 	bl	80009a8 <__aeabi_dcmpeq>
 8007fa0:	4680      	mov	r8, r0
 8007fa2:	b158      	cbz	r0, 8007fbc <_dtoa_r+0xdc>
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007fa8:	6013      	str	r3, [r2, #0]
 8007faa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f000 8559 	beq.w	8008a64 <_dtoa_r+0xb84>
 8007fb2:	4888      	ldr	r0, [pc, #544]	; (80081d4 <_dtoa_r+0x2f4>)
 8007fb4:	6018      	str	r0, [r3, #0]
 8007fb6:	1e43      	subs	r3, r0, #1
 8007fb8:	9308      	str	r3, [sp, #32]
 8007fba:	e7df      	b.n	8007f7c <_dtoa_r+0x9c>
 8007fbc:	ab16      	add	r3, sp, #88	; 0x58
 8007fbe:	9301      	str	r3, [sp, #4]
 8007fc0:	ab17      	add	r3, sp, #92	; 0x5c
 8007fc2:	9300      	str	r3, [sp, #0]
 8007fc4:	4628      	mov	r0, r5
 8007fc6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007fca:	f001 f8bb 	bl	8009144 <__d2b>
 8007fce:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007fd2:	4682      	mov	sl, r0
 8007fd4:	2c00      	cmp	r4, #0
 8007fd6:	d07e      	beq.n	80080d6 <_dtoa_r+0x1f6>
 8007fd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007fdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fde:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007fe2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fe6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007fea:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007fee:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	4b78      	ldr	r3, [pc, #480]	; (80081d8 <_dtoa_r+0x2f8>)
 8007ff6:	f7f8 f8b7 	bl	8000168 <__aeabi_dsub>
 8007ffa:	a36b      	add	r3, pc, #428	; (adr r3, 80081a8 <_dtoa_r+0x2c8>)
 8007ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008000:	f7f8 fa6a 	bl	80004d8 <__aeabi_dmul>
 8008004:	a36a      	add	r3, pc, #424	; (adr r3, 80081b0 <_dtoa_r+0x2d0>)
 8008006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800a:	f7f8 f8af 	bl	800016c <__adddf3>
 800800e:	4606      	mov	r6, r0
 8008010:	4620      	mov	r0, r4
 8008012:	460f      	mov	r7, r1
 8008014:	f7f8 f9f6 	bl	8000404 <__aeabi_i2d>
 8008018:	a367      	add	r3, pc, #412	; (adr r3, 80081b8 <_dtoa_r+0x2d8>)
 800801a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801e:	f7f8 fa5b 	bl	80004d8 <__aeabi_dmul>
 8008022:	4602      	mov	r2, r0
 8008024:	460b      	mov	r3, r1
 8008026:	4630      	mov	r0, r6
 8008028:	4639      	mov	r1, r7
 800802a:	f7f8 f89f 	bl	800016c <__adddf3>
 800802e:	4606      	mov	r6, r0
 8008030:	460f      	mov	r7, r1
 8008032:	f7f8 fd01 	bl	8000a38 <__aeabi_d2iz>
 8008036:	2200      	movs	r2, #0
 8008038:	4681      	mov	r9, r0
 800803a:	2300      	movs	r3, #0
 800803c:	4630      	mov	r0, r6
 800803e:	4639      	mov	r1, r7
 8008040:	f7f8 fcbc 	bl	80009bc <__aeabi_dcmplt>
 8008044:	b148      	cbz	r0, 800805a <_dtoa_r+0x17a>
 8008046:	4648      	mov	r0, r9
 8008048:	f7f8 f9dc 	bl	8000404 <__aeabi_i2d>
 800804c:	4632      	mov	r2, r6
 800804e:	463b      	mov	r3, r7
 8008050:	f7f8 fcaa 	bl	80009a8 <__aeabi_dcmpeq>
 8008054:	b908      	cbnz	r0, 800805a <_dtoa_r+0x17a>
 8008056:	f109 39ff 	add.w	r9, r9, #4294967295
 800805a:	f1b9 0f16 	cmp.w	r9, #22
 800805e:	d857      	bhi.n	8008110 <_dtoa_r+0x230>
 8008060:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008064:	4b5d      	ldr	r3, [pc, #372]	; (80081dc <_dtoa_r+0x2fc>)
 8008066:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800806a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806e:	f7f8 fca5 	bl	80009bc <__aeabi_dcmplt>
 8008072:	2800      	cmp	r0, #0
 8008074:	d04e      	beq.n	8008114 <_dtoa_r+0x234>
 8008076:	2300      	movs	r3, #0
 8008078:	f109 39ff 	add.w	r9, r9, #4294967295
 800807c:	930f      	str	r3, [sp, #60]	; 0x3c
 800807e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008080:	1b1c      	subs	r4, r3, r4
 8008082:	1e63      	subs	r3, r4, #1
 8008084:	9309      	str	r3, [sp, #36]	; 0x24
 8008086:	bf49      	itett	mi
 8008088:	f1c4 0301 	rsbmi	r3, r4, #1
 800808c:	2300      	movpl	r3, #0
 800808e:	9306      	strmi	r3, [sp, #24]
 8008090:	2300      	movmi	r3, #0
 8008092:	bf54      	ite	pl
 8008094:	9306      	strpl	r3, [sp, #24]
 8008096:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008098:	f1b9 0f00 	cmp.w	r9, #0
 800809c:	db3c      	blt.n	8008118 <_dtoa_r+0x238>
 800809e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080a0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80080a4:	444b      	add	r3, r9
 80080a6:	9309      	str	r3, [sp, #36]	; 0x24
 80080a8:	2300      	movs	r3, #0
 80080aa:	930a      	str	r3, [sp, #40]	; 0x28
 80080ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080ae:	2b09      	cmp	r3, #9
 80080b0:	d86c      	bhi.n	800818c <_dtoa_r+0x2ac>
 80080b2:	2b05      	cmp	r3, #5
 80080b4:	bfc4      	itt	gt
 80080b6:	3b04      	subgt	r3, #4
 80080b8:	9322      	strgt	r3, [sp, #136]	; 0x88
 80080ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080bc:	bfc8      	it	gt
 80080be:	2400      	movgt	r4, #0
 80080c0:	f1a3 0302 	sub.w	r3, r3, #2
 80080c4:	bfd8      	it	le
 80080c6:	2401      	movle	r4, #1
 80080c8:	2b03      	cmp	r3, #3
 80080ca:	f200 808b 	bhi.w	80081e4 <_dtoa_r+0x304>
 80080ce:	e8df f003 	tbb	[pc, r3]
 80080d2:	4f2d      	.short	0x4f2d
 80080d4:	5b4d      	.short	0x5b4d
 80080d6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80080da:	441c      	add	r4, r3
 80080dc:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80080e0:	2b20      	cmp	r3, #32
 80080e2:	bfc3      	ittte	gt
 80080e4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80080e8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80080ec:	fa09 f303 	lslgt.w	r3, r9, r3
 80080f0:	f1c3 0320 	rsble	r3, r3, #32
 80080f4:	bfc6      	itte	gt
 80080f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80080fa:	4318      	orrgt	r0, r3
 80080fc:	fa06 f003 	lslle.w	r0, r6, r3
 8008100:	f7f8 f970 	bl	80003e4 <__aeabi_ui2d>
 8008104:	2301      	movs	r3, #1
 8008106:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800810a:	3c01      	subs	r4, #1
 800810c:	9313      	str	r3, [sp, #76]	; 0x4c
 800810e:	e770      	b.n	8007ff2 <_dtoa_r+0x112>
 8008110:	2301      	movs	r3, #1
 8008112:	e7b3      	b.n	800807c <_dtoa_r+0x19c>
 8008114:	900f      	str	r0, [sp, #60]	; 0x3c
 8008116:	e7b2      	b.n	800807e <_dtoa_r+0x19e>
 8008118:	9b06      	ldr	r3, [sp, #24]
 800811a:	eba3 0309 	sub.w	r3, r3, r9
 800811e:	9306      	str	r3, [sp, #24]
 8008120:	f1c9 0300 	rsb	r3, r9, #0
 8008124:	930a      	str	r3, [sp, #40]	; 0x28
 8008126:	2300      	movs	r3, #0
 8008128:	930e      	str	r3, [sp, #56]	; 0x38
 800812a:	e7bf      	b.n	80080ac <_dtoa_r+0x1cc>
 800812c:	2300      	movs	r3, #0
 800812e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008130:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008132:	2b00      	cmp	r3, #0
 8008134:	dc59      	bgt.n	80081ea <_dtoa_r+0x30a>
 8008136:	f04f 0b01 	mov.w	fp, #1
 800813a:	465b      	mov	r3, fp
 800813c:	f8cd b008 	str.w	fp, [sp, #8]
 8008140:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8008144:	2200      	movs	r2, #0
 8008146:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008148:	6042      	str	r2, [r0, #4]
 800814a:	2204      	movs	r2, #4
 800814c:	f102 0614 	add.w	r6, r2, #20
 8008150:	429e      	cmp	r6, r3
 8008152:	6841      	ldr	r1, [r0, #4]
 8008154:	d94f      	bls.n	80081f6 <_dtoa_r+0x316>
 8008156:	4628      	mov	r0, r5
 8008158:	f000 fcce 	bl	8008af8 <_Balloc>
 800815c:	9008      	str	r0, [sp, #32]
 800815e:	2800      	cmp	r0, #0
 8008160:	d14d      	bne.n	80081fe <_dtoa_r+0x31e>
 8008162:	4602      	mov	r2, r0
 8008164:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008168:	4b1d      	ldr	r3, [pc, #116]	; (80081e0 <_dtoa_r+0x300>)
 800816a:	e6cd      	b.n	8007f08 <_dtoa_r+0x28>
 800816c:	2301      	movs	r3, #1
 800816e:	e7de      	b.n	800812e <_dtoa_r+0x24e>
 8008170:	2300      	movs	r3, #0
 8008172:	930b      	str	r3, [sp, #44]	; 0x2c
 8008174:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008176:	eb09 0b03 	add.w	fp, r9, r3
 800817a:	f10b 0301 	add.w	r3, fp, #1
 800817e:	2b01      	cmp	r3, #1
 8008180:	9302      	str	r3, [sp, #8]
 8008182:	bfb8      	it	lt
 8008184:	2301      	movlt	r3, #1
 8008186:	e7dd      	b.n	8008144 <_dtoa_r+0x264>
 8008188:	2301      	movs	r3, #1
 800818a:	e7f2      	b.n	8008172 <_dtoa_r+0x292>
 800818c:	2401      	movs	r4, #1
 800818e:	2300      	movs	r3, #0
 8008190:	940b      	str	r4, [sp, #44]	; 0x2c
 8008192:	9322      	str	r3, [sp, #136]	; 0x88
 8008194:	f04f 3bff 	mov.w	fp, #4294967295
 8008198:	2200      	movs	r2, #0
 800819a:	2312      	movs	r3, #18
 800819c:	f8cd b008 	str.w	fp, [sp, #8]
 80081a0:	9223      	str	r2, [sp, #140]	; 0x8c
 80081a2:	e7cf      	b.n	8008144 <_dtoa_r+0x264>
 80081a4:	f3af 8000 	nop.w
 80081a8:	636f4361 	.word	0x636f4361
 80081ac:	3fd287a7 	.word	0x3fd287a7
 80081b0:	8b60c8b3 	.word	0x8b60c8b3
 80081b4:	3fc68a28 	.word	0x3fc68a28
 80081b8:	509f79fb 	.word	0x509f79fb
 80081bc:	3fd34413 	.word	0x3fd34413
 80081c0:	0800af31 	.word	0x0800af31
 80081c4:	0800af48 	.word	0x0800af48
 80081c8:	7ff00000 	.word	0x7ff00000
 80081cc:	0800af2d 	.word	0x0800af2d
 80081d0:	0800af24 	.word	0x0800af24
 80081d4:	0800af01 	.word	0x0800af01
 80081d8:	3ff80000 	.word	0x3ff80000
 80081dc:	0800b040 	.word	0x0800b040
 80081e0:	0800afa7 	.word	0x0800afa7
 80081e4:	2301      	movs	r3, #1
 80081e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80081e8:	e7d4      	b.n	8008194 <_dtoa_r+0x2b4>
 80081ea:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80081ee:	465b      	mov	r3, fp
 80081f0:	f8cd b008 	str.w	fp, [sp, #8]
 80081f4:	e7a6      	b.n	8008144 <_dtoa_r+0x264>
 80081f6:	3101      	adds	r1, #1
 80081f8:	6041      	str	r1, [r0, #4]
 80081fa:	0052      	lsls	r2, r2, #1
 80081fc:	e7a6      	b.n	800814c <_dtoa_r+0x26c>
 80081fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008200:	9a08      	ldr	r2, [sp, #32]
 8008202:	601a      	str	r2, [r3, #0]
 8008204:	9b02      	ldr	r3, [sp, #8]
 8008206:	2b0e      	cmp	r3, #14
 8008208:	f200 80a8 	bhi.w	800835c <_dtoa_r+0x47c>
 800820c:	2c00      	cmp	r4, #0
 800820e:	f000 80a5 	beq.w	800835c <_dtoa_r+0x47c>
 8008212:	f1b9 0f00 	cmp.w	r9, #0
 8008216:	dd34      	ble.n	8008282 <_dtoa_r+0x3a2>
 8008218:	4a9a      	ldr	r2, [pc, #616]	; (8008484 <_dtoa_r+0x5a4>)
 800821a:	f009 030f 	and.w	r3, r9, #15
 800821e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008222:	f419 7f80 	tst.w	r9, #256	; 0x100
 8008226:	e9d3 3400 	ldrd	r3, r4, [r3]
 800822a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800822e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8008232:	d016      	beq.n	8008262 <_dtoa_r+0x382>
 8008234:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008238:	4b93      	ldr	r3, [pc, #588]	; (8008488 <_dtoa_r+0x5a8>)
 800823a:	2703      	movs	r7, #3
 800823c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008240:	f7f8 fa74 	bl	800072c <__aeabi_ddiv>
 8008244:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008248:	f004 040f 	and.w	r4, r4, #15
 800824c:	4e8e      	ldr	r6, [pc, #568]	; (8008488 <_dtoa_r+0x5a8>)
 800824e:	b954      	cbnz	r4, 8008266 <_dtoa_r+0x386>
 8008250:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008254:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008258:	f7f8 fa68 	bl	800072c <__aeabi_ddiv>
 800825c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008260:	e029      	b.n	80082b6 <_dtoa_r+0x3d6>
 8008262:	2702      	movs	r7, #2
 8008264:	e7f2      	b.n	800824c <_dtoa_r+0x36c>
 8008266:	07e1      	lsls	r1, r4, #31
 8008268:	d508      	bpl.n	800827c <_dtoa_r+0x39c>
 800826a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800826e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008272:	f7f8 f931 	bl	80004d8 <__aeabi_dmul>
 8008276:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800827a:	3701      	adds	r7, #1
 800827c:	1064      	asrs	r4, r4, #1
 800827e:	3608      	adds	r6, #8
 8008280:	e7e5      	b.n	800824e <_dtoa_r+0x36e>
 8008282:	f000 80a5 	beq.w	80083d0 <_dtoa_r+0x4f0>
 8008286:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800828a:	f1c9 0400 	rsb	r4, r9, #0
 800828e:	4b7d      	ldr	r3, [pc, #500]	; (8008484 <_dtoa_r+0x5a4>)
 8008290:	f004 020f 	and.w	r2, r4, #15
 8008294:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829c:	f7f8 f91c 	bl	80004d8 <__aeabi_dmul>
 80082a0:	2702      	movs	r7, #2
 80082a2:	2300      	movs	r3, #0
 80082a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082a8:	4e77      	ldr	r6, [pc, #476]	; (8008488 <_dtoa_r+0x5a8>)
 80082aa:	1124      	asrs	r4, r4, #4
 80082ac:	2c00      	cmp	r4, #0
 80082ae:	f040 8084 	bne.w	80083ba <_dtoa_r+0x4da>
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d1d2      	bne.n	800825c <_dtoa_r+0x37c>
 80082b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	f000 808b 	beq.w	80083d4 <_dtoa_r+0x4f4>
 80082be:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80082c2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80082c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80082ca:	2200      	movs	r2, #0
 80082cc:	4b6f      	ldr	r3, [pc, #444]	; (800848c <_dtoa_r+0x5ac>)
 80082ce:	f7f8 fb75 	bl	80009bc <__aeabi_dcmplt>
 80082d2:	2800      	cmp	r0, #0
 80082d4:	d07e      	beq.n	80083d4 <_dtoa_r+0x4f4>
 80082d6:	9b02      	ldr	r3, [sp, #8]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d07b      	beq.n	80083d4 <_dtoa_r+0x4f4>
 80082dc:	f1bb 0f00 	cmp.w	fp, #0
 80082e0:	dd38      	ble.n	8008354 <_dtoa_r+0x474>
 80082e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80082e6:	2200      	movs	r2, #0
 80082e8:	4b69      	ldr	r3, [pc, #420]	; (8008490 <_dtoa_r+0x5b0>)
 80082ea:	f7f8 f8f5 	bl	80004d8 <__aeabi_dmul>
 80082ee:	465c      	mov	r4, fp
 80082f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082f4:	f109 38ff 	add.w	r8, r9, #4294967295
 80082f8:	3701      	adds	r7, #1
 80082fa:	4638      	mov	r0, r7
 80082fc:	f7f8 f882 	bl	8000404 <__aeabi_i2d>
 8008300:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008304:	f7f8 f8e8 	bl	80004d8 <__aeabi_dmul>
 8008308:	2200      	movs	r2, #0
 800830a:	4b62      	ldr	r3, [pc, #392]	; (8008494 <_dtoa_r+0x5b4>)
 800830c:	f7f7 ff2e 	bl	800016c <__adddf3>
 8008310:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008314:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008318:	9611      	str	r6, [sp, #68]	; 0x44
 800831a:	2c00      	cmp	r4, #0
 800831c:	d15d      	bne.n	80083da <_dtoa_r+0x4fa>
 800831e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008322:	2200      	movs	r2, #0
 8008324:	4b5c      	ldr	r3, [pc, #368]	; (8008498 <_dtoa_r+0x5b8>)
 8008326:	f7f7 ff1f 	bl	8000168 <__aeabi_dsub>
 800832a:	4602      	mov	r2, r0
 800832c:	460b      	mov	r3, r1
 800832e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008332:	4633      	mov	r3, r6
 8008334:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008336:	f7f8 fb5f 	bl	80009f8 <__aeabi_dcmpgt>
 800833a:	2800      	cmp	r0, #0
 800833c:	f040 829e 	bne.w	800887c <_dtoa_r+0x99c>
 8008340:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008344:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008346:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800834a:	f7f8 fb37 	bl	80009bc <__aeabi_dcmplt>
 800834e:	2800      	cmp	r0, #0
 8008350:	f040 8292 	bne.w	8008878 <_dtoa_r+0x998>
 8008354:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008358:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800835c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800835e:	2b00      	cmp	r3, #0
 8008360:	f2c0 8153 	blt.w	800860a <_dtoa_r+0x72a>
 8008364:	f1b9 0f0e 	cmp.w	r9, #14
 8008368:	f300 814f 	bgt.w	800860a <_dtoa_r+0x72a>
 800836c:	4b45      	ldr	r3, [pc, #276]	; (8008484 <_dtoa_r+0x5a4>)
 800836e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008372:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008376:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800837a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800837c:	2b00      	cmp	r3, #0
 800837e:	f280 80db 	bge.w	8008538 <_dtoa_r+0x658>
 8008382:	9b02      	ldr	r3, [sp, #8]
 8008384:	2b00      	cmp	r3, #0
 8008386:	f300 80d7 	bgt.w	8008538 <_dtoa_r+0x658>
 800838a:	f040 8274 	bne.w	8008876 <_dtoa_r+0x996>
 800838e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008392:	2200      	movs	r2, #0
 8008394:	4b40      	ldr	r3, [pc, #256]	; (8008498 <_dtoa_r+0x5b8>)
 8008396:	f7f8 f89f 	bl	80004d8 <__aeabi_dmul>
 800839a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800839e:	f7f8 fb21 	bl	80009e4 <__aeabi_dcmpge>
 80083a2:	9c02      	ldr	r4, [sp, #8]
 80083a4:	4626      	mov	r6, r4
 80083a6:	2800      	cmp	r0, #0
 80083a8:	f040 824a 	bne.w	8008840 <_dtoa_r+0x960>
 80083ac:	2331      	movs	r3, #49	; 0x31
 80083ae:	9f08      	ldr	r7, [sp, #32]
 80083b0:	f109 0901 	add.w	r9, r9, #1
 80083b4:	f807 3b01 	strb.w	r3, [r7], #1
 80083b8:	e246      	b.n	8008848 <_dtoa_r+0x968>
 80083ba:	07e2      	lsls	r2, r4, #31
 80083bc:	d505      	bpl.n	80083ca <_dtoa_r+0x4ea>
 80083be:	e9d6 2300 	ldrd	r2, r3, [r6]
 80083c2:	f7f8 f889 	bl	80004d8 <__aeabi_dmul>
 80083c6:	2301      	movs	r3, #1
 80083c8:	3701      	adds	r7, #1
 80083ca:	1064      	asrs	r4, r4, #1
 80083cc:	3608      	adds	r6, #8
 80083ce:	e76d      	b.n	80082ac <_dtoa_r+0x3cc>
 80083d0:	2702      	movs	r7, #2
 80083d2:	e770      	b.n	80082b6 <_dtoa_r+0x3d6>
 80083d4:	46c8      	mov	r8, r9
 80083d6:	9c02      	ldr	r4, [sp, #8]
 80083d8:	e78f      	b.n	80082fa <_dtoa_r+0x41a>
 80083da:	9908      	ldr	r1, [sp, #32]
 80083dc:	4b29      	ldr	r3, [pc, #164]	; (8008484 <_dtoa_r+0x5a4>)
 80083de:	4421      	add	r1, r4
 80083e0:	9112      	str	r1, [sp, #72]	; 0x48
 80083e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80083e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80083e8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80083ec:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80083f0:	2900      	cmp	r1, #0
 80083f2:	d055      	beq.n	80084a0 <_dtoa_r+0x5c0>
 80083f4:	2000      	movs	r0, #0
 80083f6:	4929      	ldr	r1, [pc, #164]	; (800849c <_dtoa_r+0x5bc>)
 80083f8:	f7f8 f998 	bl	800072c <__aeabi_ddiv>
 80083fc:	463b      	mov	r3, r7
 80083fe:	4632      	mov	r2, r6
 8008400:	f7f7 feb2 	bl	8000168 <__aeabi_dsub>
 8008404:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008408:	9f08      	ldr	r7, [sp, #32]
 800840a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800840e:	f7f8 fb13 	bl	8000a38 <__aeabi_d2iz>
 8008412:	4604      	mov	r4, r0
 8008414:	f7f7 fff6 	bl	8000404 <__aeabi_i2d>
 8008418:	4602      	mov	r2, r0
 800841a:	460b      	mov	r3, r1
 800841c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008420:	f7f7 fea2 	bl	8000168 <__aeabi_dsub>
 8008424:	4602      	mov	r2, r0
 8008426:	460b      	mov	r3, r1
 8008428:	3430      	adds	r4, #48	; 0x30
 800842a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800842e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008432:	f807 4b01 	strb.w	r4, [r7], #1
 8008436:	f7f8 fac1 	bl	80009bc <__aeabi_dcmplt>
 800843a:	2800      	cmp	r0, #0
 800843c:	d174      	bne.n	8008528 <_dtoa_r+0x648>
 800843e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008442:	2000      	movs	r0, #0
 8008444:	4911      	ldr	r1, [pc, #68]	; (800848c <_dtoa_r+0x5ac>)
 8008446:	f7f7 fe8f 	bl	8000168 <__aeabi_dsub>
 800844a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800844e:	f7f8 fab5 	bl	80009bc <__aeabi_dcmplt>
 8008452:	2800      	cmp	r0, #0
 8008454:	f040 80b6 	bne.w	80085c4 <_dtoa_r+0x6e4>
 8008458:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800845a:	429f      	cmp	r7, r3
 800845c:	f43f af7a 	beq.w	8008354 <_dtoa_r+0x474>
 8008460:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008464:	2200      	movs	r2, #0
 8008466:	4b0a      	ldr	r3, [pc, #40]	; (8008490 <_dtoa_r+0x5b0>)
 8008468:	f7f8 f836 	bl	80004d8 <__aeabi_dmul>
 800846c:	2200      	movs	r2, #0
 800846e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008472:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008476:	4b06      	ldr	r3, [pc, #24]	; (8008490 <_dtoa_r+0x5b0>)
 8008478:	f7f8 f82e 	bl	80004d8 <__aeabi_dmul>
 800847c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008480:	e7c3      	b.n	800840a <_dtoa_r+0x52a>
 8008482:	bf00      	nop
 8008484:	0800b040 	.word	0x0800b040
 8008488:	0800b018 	.word	0x0800b018
 800848c:	3ff00000 	.word	0x3ff00000
 8008490:	40240000 	.word	0x40240000
 8008494:	401c0000 	.word	0x401c0000
 8008498:	40140000 	.word	0x40140000
 800849c:	3fe00000 	.word	0x3fe00000
 80084a0:	4630      	mov	r0, r6
 80084a2:	4639      	mov	r1, r7
 80084a4:	f7f8 f818 	bl	80004d8 <__aeabi_dmul>
 80084a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80084aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80084ae:	9c08      	ldr	r4, [sp, #32]
 80084b0:	9314      	str	r3, [sp, #80]	; 0x50
 80084b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084b6:	f7f8 fabf 	bl	8000a38 <__aeabi_d2iz>
 80084ba:	9015      	str	r0, [sp, #84]	; 0x54
 80084bc:	f7f7 ffa2 	bl	8000404 <__aeabi_i2d>
 80084c0:	4602      	mov	r2, r0
 80084c2:	460b      	mov	r3, r1
 80084c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084c8:	f7f7 fe4e 	bl	8000168 <__aeabi_dsub>
 80084cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084ce:	4606      	mov	r6, r0
 80084d0:	3330      	adds	r3, #48	; 0x30
 80084d2:	f804 3b01 	strb.w	r3, [r4], #1
 80084d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80084d8:	460f      	mov	r7, r1
 80084da:	429c      	cmp	r4, r3
 80084dc:	f04f 0200 	mov.w	r2, #0
 80084e0:	d124      	bne.n	800852c <_dtoa_r+0x64c>
 80084e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80084e6:	4bb3      	ldr	r3, [pc, #716]	; (80087b4 <_dtoa_r+0x8d4>)
 80084e8:	f7f7 fe40 	bl	800016c <__adddf3>
 80084ec:	4602      	mov	r2, r0
 80084ee:	460b      	mov	r3, r1
 80084f0:	4630      	mov	r0, r6
 80084f2:	4639      	mov	r1, r7
 80084f4:	f7f8 fa80 	bl	80009f8 <__aeabi_dcmpgt>
 80084f8:	2800      	cmp	r0, #0
 80084fa:	d162      	bne.n	80085c2 <_dtoa_r+0x6e2>
 80084fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008500:	2000      	movs	r0, #0
 8008502:	49ac      	ldr	r1, [pc, #688]	; (80087b4 <_dtoa_r+0x8d4>)
 8008504:	f7f7 fe30 	bl	8000168 <__aeabi_dsub>
 8008508:	4602      	mov	r2, r0
 800850a:	460b      	mov	r3, r1
 800850c:	4630      	mov	r0, r6
 800850e:	4639      	mov	r1, r7
 8008510:	f7f8 fa54 	bl	80009bc <__aeabi_dcmplt>
 8008514:	2800      	cmp	r0, #0
 8008516:	f43f af1d 	beq.w	8008354 <_dtoa_r+0x474>
 800851a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800851c:	1e7b      	subs	r3, r7, #1
 800851e:	9314      	str	r3, [sp, #80]	; 0x50
 8008520:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008524:	2b30      	cmp	r3, #48	; 0x30
 8008526:	d0f8      	beq.n	800851a <_dtoa_r+0x63a>
 8008528:	46c1      	mov	r9, r8
 800852a:	e03a      	b.n	80085a2 <_dtoa_r+0x6c2>
 800852c:	4ba2      	ldr	r3, [pc, #648]	; (80087b8 <_dtoa_r+0x8d8>)
 800852e:	f7f7 ffd3 	bl	80004d8 <__aeabi_dmul>
 8008532:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008536:	e7bc      	b.n	80084b2 <_dtoa_r+0x5d2>
 8008538:	9f08      	ldr	r7, [sp, #32]
 800853a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800853e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008542:	f7f8 f8f3 	bl	800072c <__aeabi_ddiv>
 8008546:	f7f8 fa77 	bl	8000a38 <__aeabi_d2iz>
 800854a:	4604      	mov	r4, r0
 800854c:	f7f7 ff5a 	bl	8000404 <__aeabi_i2d>
 8008550:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008554:	f7f7 ffc0 	bl	80004d8 <__aeabi_dmul>
 8008558:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800855c:	460b      	mov	r3, r1
 800855e:	4602      	mov	r2, r0
 8008560:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008564:	f7f7 fe00 	bl	8000168 <__aeabi_dsub>
 8008568:	f807 6b01 	strb.w	r6, [r7], #1
 800856c:	9e08      	ldr	r6, [sp, #32]
 800856e:	9b02      	ldr	r3, [sp, #8]
 8008570:	1bbe      	subs	r6, r7, r6
 8008572:	42b3      	cmp	r3, r6
 8008574:	d13a      	bne.n	80085ec <_dtoa_r+0x70c>
 8008576:	4602      	mov	r2, r0
 8008578:	460b      	mov	r3, r1
 800857a:	f7f7 fdf7 	bl	800016c <__adddf3>
 800857e:	4602      	mov	r2, r0
 8008580:	460b      	mov	r3, r1
 8008582:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008586:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800858a:	f7f8 fa35 	bl	80009f8 <__aeabi_dcmpgt>
 800858e:	bb58      	cbnz	r0, 80085e8 <_dtoa_r+0x708>
 8008590:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008594:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008598:	f7f8 fa06 	bl	80009a8 <__aeabi_dcmpeq>
 800859c:	b108      	cbz	r0, 80085a2 <_dtoa_r+0x6c2>
 800859e:	07e1      	lsls	r1, r4, #31
 80085a0:	d422      	bmi.n	80085e8 <_dtoa_r+0x708>
 80085a2:	4628      	mov	r0, r5
 80085a4:	4651      	mov	r1, sl
 80085a6:	f000 fae7 	bl	8008b78 <_Bfree>
 80085aa:	2300      	movs	r3, #0
 80085ac:	703b      	strb	r3, [r7, #0]
 80085ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80085b0:	f109 0001 	add.w	r0, r9, #1
 80085b4:	6018      	str	r0, [r3, #0]
 80085b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f43f acdf 	beq.w	8007f7c <_dtoa_r+0x9c>
 80085be:	601f      	str	r7, [r3, #0]
 80085c0:	e4dc      	b.n	8007f7c <_dtoa_r+0x9c>
 80085c2:	4627      	mov	r7, r4
 80085c4:	463b      	mov	r3, r7
 80085c6:	461f      	mov	r7, r3
 80085c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085cc:	2a39      	cmp	r2, #57	; 0x39
 80085ce:	d107      	bne.n	80085e0 <_dtoa_r+0x700>
 80085d0:	9a08      	ldr	r2, [sp, #32]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d1f7      	bne.n	80085c6 <_dtoa_r+0x6e6>
 80085d6:	2230      	movs	r2, #48	; 0x30
 80085d8:	9908      	ldr	r1, [sp, #32]
 80085da:	f108 0801 	add.w	r8, r8, #1
 80085de:	700a      	strb	r2, [r1, #0]
 80085e0:	781a      	ldrb	r2, [r3, #0]
 80085e2:	3201      	adds	r2, #1
 80085e4:	701a      	strb	r2, [r3, #0]
 80085e6:	e79f      	b.n	8008528 <_dtoa_r+0x648>
 80085e8:	46c8      	mov	r8, r9
 80085ea:	e7eb      	b.n	80085c4 <_dtoa_r+0x6e4>
 80085ec:	2200      	movs	r2, #0
 80085ee:	4b72      	ldr	r3, [pc, #456]	; (80087b8 <_dtoa_r+0x8d8>)
 80085f0:	f7f7 ff72 	bl	80004d8 <__aeabi_dmul>
 80085f4:	4602      	mov	r2, r0
 80085f6:	460b      	mov	r3, r1
 80085f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80085fc:	2200      	movs	r2, #0
 80085fe:	2300      	movs	r3, #0
 8008600:	f7f8 f9d2 	bl	80009a8 <__aeabi_dcmpeq>
 8008604:	2800      	cmp	r0, #0
 8008606:	d098      	beq.n	800853a <_dtoa_r+0x65a>
 8008608:	e7cb      	b.n	80085a2 <_dtoa_r+0x6c2>
 800860a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800860c:	2a00      	cmp	r2, #0
 800860e:	f000 80cd 	beq.w	80087ac <_dtoa_r+0x8cc>
 8008612:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008614:	2a01      	cmp	r2, #1
 8008616:	f300 80af 	bgt.w	8008778 <_dtoa_r+0x898>
 800861a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800861c:	2a00      	cmp	r2, #0
 800861e:	f000 80a7 	beq.w	8008770 <_dtoa_r+0x890>
 8008622:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008626:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008628:	9f06      	ldr	r7, [sp, #24]
 800862a:	9a06      	ldr	r2, [sp, #24]
 800862c:	2101      	movs	r1, #1
 800862e:	441a      	add	r2, r3
 8008630:	9206      	str	r2, [sp, #24]
 8008632:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008634:	4628      	mov	r0, r5
 8008636:	441a      	add	r2, r3
 8008638:	9209      	str	r2, [sp, #36]	; 0x24
 800863a:	f000 fb57 	bl	8008cec <__i2b>
 800863e:	4606      	mov	r6, r0
 8008640:	2f00      	cmp	r7, #0
 8008642:	dd0c      	ble.n	800865e <_dtoa_r+0x77e>
 8008644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008646:	2b00      	cmp	r3, #0
 8008648:	dd09      	ble.n	800865e <_dtoa_r+0x77e>
 800864a:	42bb      	cmp	r3, r7
 800864c:	bfa8      	it	ge
 800864e:	463b      	movge	r3, r7
 8008650:	9a06      	ldr	r2, [sp, #24]
 8008652:	1aff      	subs	r7, r7, r3
 8008654:	1ad2      	subs	r2, r2, r3
 8008656:	9206      	str	r2, [sp, #24]
 8008658:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800865a:	1ad3      	subs	r3, r2, r3
 800865c:	9309      	str	r3, [sp, #36]	; 0x24
 800865e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008660:	b1f3      	cbz	r3, 80086a0 <_dtoa_r+0x7c0>
 8008662:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008664:	2b00      	cmp	r3, #0
 8008666:	f000 80a9 	beq.w	80087bc <_dtoa_r+0x8dc>
 800866a:	2c00      	cmp	r4, #0
 800866c:	dd10      	ble.n	8008690 <_dtoa_r+0x7b0>
 800866e:	4631      	mov	r1, r6
 8008670:	4622      	mov	r2, r4
 8008672:	4628      	mov	r0, r5
 8008674:	f000 fbf4 	bl	8008e60 <__pow5mult>
 8008678:	4652      	mov	r2, sl
 800867a:	4601      	mov	r1, r0
 800867c:	4606      	mov	r6, r0
 800867e:	4628      	mov	r0, r5
 8008680:	f000 fb4a 	bl	8008d18 <__multiply>
 8008684:	4680      	mov	r8, r0
 8008686:	4651      	mov	r1, sl
 8008688:	4628      	mov	r0, r5
 800868a:	f000 fa75 	bl	8008b78 <_Bfree>
 800868e:	46c2      	mov	sl, r8
 8008690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008692:	1b1a      	subs	r2, r3, r4
 8008694:	d004      	beq.n	80086a0 <_dtoa_r+0x7c0>
 8008696:	4651      	mov	r1, sl
 8008698:	4628      	mov	r0, r5
 800869a:	f000 fbe1 	bl	8008e60 <__pow5mult>
 800869e:	4682      	mov	sl, r0
 80086a0:	2101      	movs	r1, #1
 80086a2:	4628      	mov	r0, r5
 80086a4:	f000 fb22 	bl	8008cec <__i2b>
 80086a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086aa:	4604      	mov	r4, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f340 8087 	ble.w	80087c0 <_dtoa_r+0x8e0>
 80086b2:	461a      	mov	r2, r3
 80086b4:	4601      	mov	r1, r0
 80086b6:	4628      	mov	r0, r5
 80086b8:	f000 fbd2 	bl	8008e60 <__pow5mult>
 80086bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80086be:	4604      	mov	r4, r0
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	f340 8080 	ble.w	80087c6 <_dtoa_r+0x8e6>
 80086c6:	f04f 0800 	mov.w	r8, #0
 80086ca:	6923      	ldr	r3, [r4, #16]
 80086cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80086d0:	6918      	ldr	r0, [r3, #16]
 80086d2:	f000 fabd 	bl	8008c50 <__hi0bits>
 80086d6:	f1c0 0020 	rsb	r0, r0, #32
 80086da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086dc:	4418      	add	r0, r3
 80086de:	f010 001f 	ands.w	r0, r0, #31
 80086e2:	f000 8092 	beq.w	800880a <_dtoa_r+0x92a>
 80086e6:	f1c0 0320 	rsb	r3, r0, #32
 80086ea:	2b04      	cmp	r3, #4
 80086ec:	f340 808a 	ble.w	8008804 <_dtoa_r+0x924>
 80086f0:	f1c0 001c 	rsb	r0, r0, #28
 80086f4:	9b06      	ldr	r3, [sp, #24]
 80086f6:	4407      	add	r7, r0
 80086f8:	4403      	add	r3, r0
 80086fa:	9306      	str	r3, [sp, #24]
 80086fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086fe:	4403      	add	r3, r0
 8008700:	9309      	str	r3, [sp, #36]	; 0x24
 8008702:	9b06      	ldr	r3, [sp, #24]
 8008704:	2b00      	cmp	r3, #0
 8008706:	dd05      	ble.n	8008714 <_dtoa_r+0x834>
 8008708:	4651      	mov	r1, sl
 800870a:	461a      	mov	r2, r3
 800870c:	4628      	mov	r0, r5
 800870e:	f000 fc01 	bl	8008f14 <__lshift>
 8008712:	4682      	mov	sl, r0
 8008714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008716:	2b00      	cmp	r3, #0
 8008718:	dd05      	ble.n	8008726 <_dtoa_r+0x846>
 800871a:	4621      	mov	r1, r4
 800871c:	461a      	mov	r2, r3
 800871e:	4628      	mov	r0, r5
 8008720:	f000 fbf8 	bl	8008f14 <__lshift>
 8008724:	4604      	mov	r4, r0
 8008726:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008728:	2b00      	cmp	r3, #0
 800872a:	d070      	beq.n	800880e <_dtoa_r+0x92e>
 800872c:	4621      	mov	r1, r4
 800872e:	4650      	mov	r0, sl
 8008730:	f000 fc5c 	bl	8008fec <__mcmp>
 8008734:	2800      	cmp	r0, #0
 8008736:	da6a      	bge.n	800880e <_dtoa_r+0x92e>
 8008738:	2300      	movs	r3, #0
 800873a:	4651      	mov	r1, sl
 800873c:	220a      	movs	r2, #10
 800873e:	4628      	mov	r0, r5
 8008740:	f000 fa3c 	bl	8008bbc <__multadd>
 8008744:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008746:	4682      	mov	sl, r0
 8008748:	f109 39ff 	add.w	r9, r9, #4294967295
 800874c:	2b00      	cmp	r3, #0
 800874e:	f000 8193 	beq.w	8008a78 <_dtoa_r+0xb98>
 8008752:	4631      	mov	r1, r6
 8008754:	2300      	movs	r3, #0
 8008756:	220a      	movs	r2, #10
 8008758:	4628      	mov	r0, r5
 800875a:	f000 fa2f 	bl	8008bbc <__multadd>
 800875e:	f1bb 0f00 	cmp.w	fp, #0
 8008762:	4606      	mov	r6, r0
 8008764:	f300 8093 	bgt.w	800888e <_dtoa_r+0x9ae>
 8008768:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800876a:	2b02      	cmp	r3, #2
 800876c:	dc57      	bgt.n	800881e <_dtoa_r+0x93e>
 800876e:	e08e      	b.n	800888e <_dtoa_r+0x9ae>
 8008770:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008772:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008776:	e756      	b.n	8008626 <_dtoa_r+0x746>
 8008778:	9b02      	ldr	r3, [sp, #8]
 800877a:	1e5c      	subs	r4, r3, #1
 800877c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800877e:	42a3      	cmp	r3, r4
 8008780:	bfb7      	itett	lt
 8008782:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008784:	1b1c      	subge	r4, r3, r4
 8008786:	1ae2      	sublt	r2, r4, r3
 8008788:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800878a:	bfbe      	ittt	lt
 800878c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800878e:	189b      	addlt	r3, r3, r2
 8008790:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008792:	9b02      	ldr	r3, [sp, #8]
 8008794:	bfb8      	it	lt
 8008796:	2400      	movlt	r4, #0
 8008798:	2b00      	cmp	r3, #0
 800879a:	bfbb      	ittet	lt
 800879c:	9b06      	ldrlt	r3, [sp, #24]
 800879e:	9a02      	ldrlt	r2, [sp, #8]
 80087a0:	9f06      	ldrge	r7, [sp, #24]
 80087a2:	1a9f      	sublt	r7, r3, r2
 80087a4:	bfac      	ite	ge
 80087a6:	9b02      	ldrge	r3, [sp, #8]
 80087a8:	2300      	movlt	r3, #0
 80087aa:	e73e      	b.n	800862a <_dtoa_r+0x74a>
 80087ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80087ae:	9f06      	ldr	r7, [sp, #24]
 80087b0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80087b2:	e745      	b.n	8008640 <_dtoa_r+0x760>
 80087b4:	3fe00000 	.word	0x3fe00000
 80087b8:	40240000 	.word	0x40240000
 80087bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087be:	e76a      	b.n	8008696 <_dtoa_r+0x7b6>
 80087c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	dc19      	bgt.n	80087fa <_dtoa_r+0x91a>
 80087c6:	9b04      	ldr	r3, [sp, #16]
 80087c8:	b9bb      	cbnz	r3, 80087fa <_dtoa_r+0x91a>
 80087ca:	9b05      	ldr	r3, [sp, #20]
 80087cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087d0:	b99b      	cbnz	r3, 80087fa <_dtoa_r+0x91a>
 80087d2:	9b05      	ldr	r3, [sp, #20]
 80087d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087d8:	0d1b      	lsrs	r3, r3, #20
 80087da:	051b      	lsls	r3, r3, #20
 80087dc:	b183      	cbz	r3, 8008800 <_dtoa_r+0x920>
 80087de:	f04f 0801 	mov.w	r8, #1
 80087e2:	9b06      	ldr	r3, [sp, #24]
 80087e4:	3301      	adds	r3, #1
 80087e6:	9306      	str	r3, [sp, #24]
 80087e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087ea:	3301      	adds	r3, #1
 80087ec:	9309      	str	r3, [sp, #36]	; 0x24
 80087ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f47f af6a 	bne.w	80086ca <_dtoa_r+0x7ea>
 80087f6:	2001      	movs	r0, #1
 80087f8:	e76f      	b.n	80086da <_dtoa_r+0x7fa>
 80087fa:	f04f 0800 	mov.w	r8, #0
 80087fe:	e7f6      	b.n	80087ee <_dtoa_r+0x90e>
 8008800:	4698      	mov	r8, r3
 8008802:	e7f4      	b.n	80087ee <_dtoa_r+0x90e>
 8008804:	f43f af7d 	beq.w	8008702 <_dtoa_r+0x822>
 8008808:	4618      	mov	r0, r3
 800880a:	301c      	adds	r0, #28
 800880c:	e772      	b.n	80086f4 <_dtoa_r+0x814>
 800880e:	9b02      	ldr	r3, [sp, #8]
 8008810:	2b00      	cmp	r3, #0
 8008812:	dc36      	bgt.n	8008882 <_dtoa_r+0x9a2>
 8008814:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008816:	2b02      	cmp	r3, #2
 8008818:	dd33      	ble.n	8008882 <_dtoa_r+0x9a2>
 800881a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800881e:	f1bb 0f00 	cmp.w	fp, #0
 8008822:	d10d      	bne.n	8008840 <_dtoa_r+0x960>
 8008824:	4621      	mov	r1, r4
 8008826:	465b      	mov	r3, fp
 8008828:	2205      	movs	r2, #5
 800882a:	4628      	mov	r0, r5
 800882c:	f000 f9c6 	bl	8008bbc <__multadd>
 8008830:	4601      	mov	r1, r0
 8008832:	4604      	mov	r4, r0
 8008834:	4650      	mov	r0, sl
 8008836:	f000 fbd9 	bl	8008fec <__mcmp>
 800883a:	2800      	cmp	r0, #0
 800883c:	f73f adb6 	bgt.w	80083ac <_dtoa_r+0x4cc>
 8008840:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008842:	9f08      	ldr	r7, [sp, #32]
 8008844:	ea6f 0903 	mvn.w	r9, r3
 8008848:	f04f 0800 	mov.w	r8, #0
 800884c:	4621      	mov	r1, r4
 800884e:	4628      	mov	r0, r5
 8008850:	f000 f992 	bl	8008b78 <_Bfree>
 8008854:	2e00      	cmp	r6, #0
 8008856:	f43f aea4 	beq.w	80085a2 <_dtoa_r+0x6c2>
 800885a:	f1b8 0f00 	cmp.w	r8, #0
 800885e:	d005      	beq.n	800886c <_dtoa_r+0x98c>
 8008860:	45b0      	cmp	r8, r6
 8008862:	d003      	beq.n	800886c <_dtoa_r+0x98c>
 8008864:	4641      	mov	r1, r8
 8008866:	4628      	mov	r0, r5
 8008868:	f000 f986 	bl	8008b78 <_Bfree>
 800886c:	4631      	mov	r1, r6
 800886e:	4628      	mov	r0, r5
 8008870:	f000 f982 	bl	8008b78 <_Bfree>
 8008874:	e695      	b.n	80085a2 <_dtoa_r+0x6c2>
 8008876:	2400      	movs	r4, #0
 8008878:	4626      	mov	r6, r4
 800887a:	e7e1      	b.n	8008840 <_dtoa_r+0x960>
 800887c:	46c1      	mov	r9, r8
 800887e:	4626      	mov	r6, r4
 8008880:	e594      	b.n	80083ac <_dtoa_r+0x4cc>
 8008882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008884:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008888:	2b00      	cmp	r3, #0
 800888a:	f000 80fc 	beq.w	8008a86 <_dtoa_r+0xba6>
 800888e:	2f00      	cmp	r7, #0
 8008890:	dd05      	ble.n	800889e <_dtoa_r+0x9be>
 8008892:	4631      	mov	r1, r6
 8008894:	463a      	mov	r2, r7
 8008896:	4628      	mov	r0, r5
 8008898:	f000 fb3c 	bl	8008f14 <__lshift>
 800889c:	4606      	mov	r6, r0
 800889e:	f1b8 0f00 	cmp.w	r8, #0
 80088a2:	d05c      	beq.n	800895e <_dtoa_r+0xa7e>
 80088a4:	4628      	mov	r0, r5
 80088a6:	6871      	ldr	r1, [r6, #4]
 80088a8:	f000 f926 	bl	8008af8 <_Balloc>
 80088ac:	4607      	mov	r7, r0
 80088ae:	b928      	cbnz	r0, 80088bc <_dtoa_r+0x9dc>
 80088b0:	4602      	mov	r2, r0
 80088b2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80088b6:	4b7e      	ldr	r3, [pc, #504]	; (8008ab0 <_dtoa_r+0xbd0>)
 80088b8:	f7ff bb26 	b.w	8007f08 <_dtoa_r+0x28>
 80088bc:	6932      	ldr	r2, [r6, #16]
 80088be:	f106 010c 	add.w	r1, r6, #12
 80088c2:	3202      	adds	r2, #2
 80088c4:	0092      	lsls	r2, r2, #2
 80088c6:	300c      	adds	r0, #12
 80088c8:	f7fe fd30 	bl	800732c <memcpy>
 80088cc:	2201      	movs	r2, #1
 80088ce:	4639      	mov	r1, r7
 80088d0:	4628      	mov	r0, r5
 80088d2:	f000 fb1f 	bl	8008f14 <__lshift>
 80088d6:	46b0      	mov	r8, r6
 80088d8:	4606      	mov	r6, r0
 80088da:	9b08      	ldr	r3, [sp, #32]
 80088dc:	3301      	adds	r3, #1
 80088de:	9302      	str	r3, [sp, #8]
 80088e0:	9b08      	ldr	r3, [sp, #32]
 80088e2:	445b      	add	r3, fp
 80088e4:	930a      	str	r3, [sp, #40]	; 0x28
 80088e6:	9b04      	ldr	r3, [sp, #16]
 80088e8:	f003 0301 	and.w	r3, r3, #1
 80088ec:	9309      	str	r3, [sp, #36]	; 0x24
 80088ee:	9b02      	ldr	r3, [sp, #8]
 80088f0:	4621      	mov	r1, r4
 80088f2:	4650      	mov	r0, sl
 80088f4:	f103 3bff 	add.w	fp, r3, #4294967295
 80088f8:	f7ff fa64 	bl	8007dc4 <quorem>
 80088fc:	4603      	mov	r3, r0
 80088fe:	4641      	mov	r1, r8
 8008900:	3330      	adds	r3, #48	; 0x30
 8008902:	9004      	str	r0, [sp, #16]
 8008904:	4650      	mov	r0, sl
 8008906:	930b      	str	r3, [sp, #44]	; 0x2c
 8008908:	f000 fb70 	bl	8008fec <__mcmp>
 800890c:	4632      	mov	r2, r6
 800890e:	9006      	str	r0, [sp, #24]
 8008910:	4621      	mov	r1, r4
 8008912:	4628      	mov	r0, r5
 8008914:	f000 fb86 	bl	8009024 <__mdiff>
 8008918:	68c2      	ldr	r2, [r0, #12]
 800891a:	4607      	mov	r7, r0
 800891c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800891e:	bb02      	cbnz	r2, 8008962 <_dtoa_r+0xa82>
 8008920:	4601      	mov	r1, r0
 8008922:	4650      	mov	r0, sl
 8008924:	f000 fb62 	bl	8008fec <__mcmp>
 8008928:	4602      	mov	r2, r0
 800892a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800892c:	4639      	mov	r1, r7
 800892e:	4628      	mov	r0, r5
 8008930:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008934:	f000 f920 	bl	8008b78 <_Bfree>
 8008938:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800893a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800893c:	9f02      	ldr	r7, [sp, #8]
 800893e:	ea43 0102 	orr.w	r1, r3, r2
 8008942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008944:	430b      	orrs	r3, r1
 8008946:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008948:	d10d      	bne.n	8008966 <_dtoa_r+0xa86>
 800894a:	2b39      	cmp	r3, #57	; 0x39
 800894c:	d027      	beq.n	800899e <_dtoa_r+0xabe>
 800894e:	9a06      	ldr	r2, [sp, #24]
 8008950:	2a00      	cmp	r2, #0
 8008952:	dd01      	ble.n	8008958 <_dtoa_r+0xa78>
 8008954:	9b04      	ldr	r3, [sp, #16]
 8008956:	3331      	adds	r3, #49	; 0x31
 8008958:	f88b 3000 	strb.w	r3, [fp]
 800895c:	e776      	b.n	800884c <_dtoa_r+0x96c>
 800895e:	4630      	mov	r0, r6
 8008960:	e7b9      	b.n	80088d6 <_dtoa_r+0x9f6>
 8008962:	2201      	movs	r2, #1
 8008964:	e7e2      	b.n	800892c <_dtoa_r+0xa4c>
 8008966:	9906      	ldr	r1, [sp, #24]
 8008968:	2900      	cmp	r1, #0
 800896a:	db04      	blt.n	8008976 <_dtoa_r+0xa96>
 800896c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800896e:	4301      	orrs	r1, r0
 8008970:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008972:	4301      	orrs	r1, r0
 8008974:	d120      	bne.n	80089b8 <_dtoa_r+0xad8>
 8008976:	2a00      	cmp	r2, #0
 8008978:	ddee      	ble.n	8008958 <_dtoa_r+0xa78>
 800897a:	4651      	mov	r1, sl
 800897c:	2201      	movs	r2, #1
 800897e:	4628      	mov	r0, r5
 8008980:	9302      	str	r3, [sp, #8]
 8008982:	f000 fac7 	bl	8008f14 <__lshift>
 8008986:	4621      	mov	r1, r4
 8008988:	4682      	mov	sl, r0
 800898a:	f000 fb2f 	bl	8008fec <__mcmp>
 800898e:	2800      	cmp	r0, #0
 8008990:	9b02      	ldr	r3, [sp, #8]
 8008992:	dc02      	bgt.n	800899a <_dtoa_r+0xaba>
 8008994:	d1e0      	bne.n	8008958 <_dtoa_r+0xa78>
 8008996:	07da      	lsls	r2, r3, #31
 8008998:	d5de      	bpl.n	8008958 <_dtoa_r+0xa78>
 800899a:	2b39      	cmp	r3, #57	; 0x39
 800899c:	d1da      	bne.n	8008954 <_dtoa_r+0xa74>
 800899e:	2339      	movs	r3, #57	; 0x39
 80089a0:	f88b 3000 	strb.w	r3, [fp]
 80089a4:	463b      	mov	r3, r7
 80089a6:	461f      	mov	r7, r3
 80089a8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80089ac:	3b01      	subs	r3, #1
 80089ae:	2a39      	cmp	r2, #57	; 0x39
 80089b0:	d050      	beq.n	8008a54 <_dtoa_r+0xb74>
 80089b2:	3201      	adds	r2, #1
 80089b4:	701a      	strb	r2, [r3, #0]
 80089b6:	e749      	b.n	800884c <_dtoa_r+0x96c>
 80089b8:	2a00      	cmp	r2, #0
 80089ba:	dd03      	ble.n	80089c4 <_dtoa_r+0xae4>
 80089bc:	2b39      	cmp	r3, #57	; 0x39
 80089be:	d0ee      	beq.n	800899e <_dtoa_r+0xabe>
 80089c0:	3301      	adds	r3, #1
 80089c2:	e7c9      	b.n	8008958 <_dtoa_r+0xa78>
 80089c4:	9a02      	ldr	r2, [sp, #8]
 80089c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80089c8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80089cc:	428a      	cmp	r2, r1
 80089ce:	d02a      	beq.n	8008a26 <_dtoa_r+0xb46>
 80089d0:	4651      	mov	r1, sl
 80089d2:	2300      	movs	r3, #0
 80089d4:	220a      	movs	r2, #10
 80089d6:	4628      	mov	r0, r5
 80089d8:	f000 f8f0 	bl	8008bbc <__multadd>
 80089dc:	45b0      	cmp	r8, r6
 80089de:	4682      	mov	sl, r0
 80089e0:	f04f 0300 	mov.w	r3, #0
 80089e4:	f04f 020a 	mov.w	r2, #10
 80089e8:	4641      	mov	r1, r8
 80089ea:	4628      	mov	r0, r5
 80089ec:	d107      	bne.n	80089fe <_dtoa_r+0xb1e>
 80089ee:	f000 f8e5 	bl	8008bbc <__multadd>
 80089f2:	4680      	mov	r8, r0
 80089f4:	4606      	mov	r6, r0
 80089f6:	9b02      	ldr	r3, [sp, #8]
 80089f8:	3301      	adds	r3, #1
 80089fa:	9302      	str	r3, [sp, #8]
 80089fc:	e777      	b.n	80088ee <_dtoa_r+0xa0e>
 80089fe:	f000 f8dd 	bl	8008bbc <__multadd>
 8008a02:	4631      	mov	r1, r6
 8008a04:	4680      	mov	r8, r0
 8008a06:	2300      	movs	r3, #0
 8008a08:	220a      	movs	r2, #10
 8008a0a:	4628      	mov	r0, r5
 8008a0c:	f000 f8d6 	bl	8008bbc <__multadd>
 8008a10:	4606      	mov	r6, r0
 8008a12:	e7f0      	b.n	80089f6 <_dtoa_r+0xb16>
 8008a14:	f1bb 0f00 	cmp.w	fp, #0
 8008a18:	bfcc      	ite	gt
 8008a1a:	465f      	movgt	r7, fp
 8008a1c:	2701      	movle	r7, #1
 8008a1e:	f04f 0800 	mov.w	r8, #0
 8008a22:	9a08      	ldr	r2, [sp, #32]
 8008a24:	4417      	add	r7, r2
 8008a26:	4651      	mov	r1, sl
 8008a28:	2201      	movs	r2, #1
 8008a2a:	4628      	mov	r0, r5
 8008a2c:	9302      	str	r3, [sp, #8]
 8008a2e:	f000 fa71 	bl	8008f14 <__lshift>
 8008a32:	4621      	mov	r1, r4
 8008a34:	4682      	mov	sl, r0
 8008a36:	f000 fad9 	bl	8008fec <__mcmp>
 8008a3a:	2800      	cmp	r0, #0
 8008a3c:	dcb2      	bgt.n	80089a4 <_dtoa_r+0xac4>
 8008a3e:	d102      	bne.n	8008a46 <_dtoa_r+0xb66>
 8008a40:	9b02      	ldr	r3, [sp, #8]
 8008a42:	07db      	lsls	r3, r3, #31
 8008a44:	d4ae      	bmi.n	80089a4 <_dtoa_r+0xac4>
 8008a46:	463b      	mov	r3, r7
 8008a48:	461f      	mov	r7, r3
 8008a4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a4e:	2a30      	cmp	r2, #48	; 0x30
 8008a50:	d0fa      	beq.n	8008a48 <_dtoa_r+0xb68>
 8008a52:	e6fb      	b.n	800884c <_dtoa_r+0x96c>
 8008a54:	9a08      	ldr	r2, [sp, #32]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d1a5      	bne.n	80089a6 <_dtoa_r+0xac6>
 8008a5a:	2331      	movs	r3, #49	; 0x31
 8008a5c:	f109 0901 	add.w	r9, r9, #1
 8008a60:	7013      	strb	r3, [r2, #0]
 8008a62:	e6f3      	b.n	800884c <_dtoa_r+0x96c>
 8008a64:	4b13      	ldr	r3, [pc, #76]	; (8008ab4 <_dtoa_r+0xbd4>)
 8008a66:	f7ff baa7 	b.w	8007fb8 <_dtoa_r+0xd8>
 8008a6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	f47f aa80 	bne.w	8007f72 <_dtoa_r+0x92>
 8008a72:	4b11      	ldr	r3, [pc, #68]	; (8008ab8 <_dtoa_r+0xbd8>)
 8008a74:	f7ff baa0 	b.w	8007fb8 <_dtoa_r+0xd8>
 8008a78:	f1bb 0f00 	cmp.w	fp, #0
 8008a7c:	dc03      	bgt.n	8008a86 <_dtoa_r+0xba6>
 8008a7e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	f73f aecc 	bgt.w	800881e <_dtoa_r+0x93e>
 8008a86:	9f08      	ldr	r7, [sp, #32]
 8008a88:	4621      	mov	r1, r4
 8008a8a:	4650      	mov	r0, sl
 8008a8c:	f7ff f99a 	bl	8007dc4 <quorem>
 8008a90:	9a08      	ldr	r2, [sp, #32]
 8008a92:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008a96:	f807 3b01 	strb.w	r3, [r7], #1
 8008a9a:	1aba      	subs	r2, r7, r2
 8008a9c:	4593      	cmp	fp, r2
 8008a9e:	ddb9      	ble.n	8008a14 <_dtoa_r+0xb34>
 8008aa0:	4651      	mov	r1, sl
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	220a      	movs	r2, #10
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	f000 f888 	bl	8008bbc <__multadd>
 8008aac:	4682      	mov	sl, r0
 8008aae:	e7eb      	b.n	8008a88 <_dtoa_r+0xba8>
 8008ab0:	0800afa7 	.word	0x0800afa7
 8008ab4:	0800af00 	.word	0x0800af00
 8008ab8:	0800af24 	.word	0x0800af24

08008abc <_localeconv_r>:
 8008abc:	4800      	ldr	r0, [pc, #0]	; (8008ac0 <_localeconv_r+0x4>)
 8008abe:	4770      	bx	lr
 8008ac0:	20000168 	.word	0x20000168

08008ac4 <memchr>:
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	b510      	push	{r4, lr}
 8008ac8:	b2c9      	uxtb	r1, r1
 8008aca:	4402      	add	r2, r0
 8008acc:	4293      	cmp	r3, r2
 8008ace:	4618      	mov	r0, r3
 8008ad0:	d101      	bne.n	8008ad6 <memchr+0x12>
 8008ad2:	2000      	movs	r0, #0
 8008ad4:	e003      	b.n	8008ade <memchr+0x1a>
 8008ad6:	7804      	ldrb	r4, [r0, #0]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	428c      	cmp	r4, r1
 8008adc:	d1f6      	bne.n	8008acc <memchr+0x8>
 8008ade:	bd10      	pop	{r4, pc}

08008ae0 <__malloc_lock>:
 8008ae0:	4801      	ldr	r0, [pc, #4]	; (8008ae8 <__malloc_lock+0x8>)
 8008ae2:	f000 bd26 	b.w	8009532 <__retarget_lock_acquire_recursive>
 8008ae6:	bf00      	nop
 8008ae8:	20000578 	.word	0x20000578

08008aec <__malloc_unlock>:
 8008aec:	4801      	ldr	r0, [pc, #4]	; (8008af4 <__malloc_unlock+0x8>)
 8008aee:	f000 bd21 	b.w	8009534 <__retarget_lock_release_recursive>
 8008af2:	bf00      	nop
 8008af4:	20000578 	.word	0x20000578

08008af8 <_Balloc>:
 8008af8:	b570      	push	{r4, r5, r6, lr}
 8008afa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008afc:	4604      	mov	r4, r0
 8008afe:	460d      	mov	r5, r1
 8008b00:	b976      	cbnz	r6, 8008b20 <_Balloc+0x28>
 8008b02:	2010      	movs	r0, #16
 8008b04:	f7fe fc0a 	bl	800731c <malloc>
 8008b08:	4602      	mov	r2, r0
 8008b0a:	6260      	str	r0, [r4, #36]	; 0x24
 8008b0c:	b920      	cbnz	r0, 8008b18 <_Balloc+0x20>
 8008b0e:	2166      	movs	r1, #102	; 0x66
 8008b10:	4b17      	ldr	r3, [pc, #92]	; (8008b70 <_Balloc+0x78>)
 8008b12:	4818      	ldr	r0, [pc, #96]	; (8008b74 <_Balloc+0x7c>)
 8008b14:	f000 fcdc 	bl	80094d0 <__assert_func>
 8008b18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b1c:	6006      	str	r6, [r0, #0]
 8008b1e:	60c6      	str	r6, [r0, #12]
 8008b20:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008b22:	68f3      	ldr	r3, [r6, #12]
 8008b24:	b183      	cbz	r3, 8008b48 <_Balloc+0x50>
 8008b26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008b2e:	b9b8      	cbnz	r0, 8008b60 <_Balloc+0x68>
 8008b30:	2101      	movs	r1, #1
 8008b32:	fa01 f605 	lsl.w	r6, r1, r5
 8008b36:	1d72      	adds	r2, r6, #5
 8008b38:	4620      	mov	r0, r4
 8008b3a:	0092      	lsls	r2, r2, #2
 8008b3c:	f000 fb5e 	bl	80091fc <_calloc_r>
 8008b40:	b160      	cbz	r0, 8008b5c <_Balloc+0x64>
 8008b42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008b46:	e00e      	b.n	8008b66 <_Balloc+0x6e>
 8008b48:	2221      	movs	r2, #33	; 0x21
 8008b4a:	2104      	movs	r1, #4
 8008b4c:	4620      	mov	r0, r4
 8008b4e:	f000 fb55 	bl	80091fc <_calloc_r>
 8008b52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b54:	60f0      	str	r0, [r6, #12]
 8008b56:	68db      	ldr	r3, [r3, #12]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d1e4      	bne.n	8008b26 <_Balloc+0x2e>
 8008b5c:	2000      	movs	r0, #0
 8008b5e:	bd70      	pop	{r4, r5, r6, pc}
 8008b60:	6802      	ldr	r2, [r0, #0]
 8008b62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008b66:	2300      	movs	r3, #0
 8008b68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008b6c:	e7f7      	b.n	8008b5e <_Balloc+0x66>
 8008b6e:	bf00      	nop
 8008b70:	0800af31 	.word	0x0800af31
 8008b74:	0800afb8 	.word	0x0800afb8

08008b78 <_Bfree>:
 8008b78:	b570      	push	{r4, r5, r6, lr}
 8008b7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008b7c:	4605      	mov	r5, r0
 8008b7e:	460c      	mov	r4, r1
 8008b80:	b976      	cbnz	r6, 8008ba0 <_Bfree+0x28>
 8008b82:	2010      	movs	r0, #16
 8008b84:	f7fe fbca 	bl	800731c <malloc>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	6268      	str	r0, [r5, #36]	; 0x24
 8008b8c:	b920      	cbnz	r0, 8008b98 <_Bfree+0x20>
 8008b8e:	218a      	movs	r1, #138	; 0x8a
 8008b90:	4b08      	ldr	r3, [pc, #32]	; (8008bb4 <_Bfree+0x3c>)
 8008b92:	4809      	ldr	r0, [pc, #36]	; (8008bb8 <_Bfree+0x40>)
 8008b94:	f000 fc9c 	bl	80094d0 <__assert_func>
 8008b98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b9c:	6006      	str	r6, [r0, #0]
 8008b9e:	60c6      	str	r6, [r0, #12]
 8008ba0:	b13c      	cbz	r4, 8008bb2 <_Bfree+0x3a>
 8008ba2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008ba4:	6862      	ldr	r2, [r4, #4]
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008bac:	6021      	str	r1, [r4, #0]
 8008bae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008bb2:	bd70      	pop	{r4, r5, r6, pc}
 8008bb4:	0800af31 	.word	0x0800af31
 8008bb8:	0800afb8 	.word	0x0800afb8

08008bbc <__multadd>:
 8008bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bc0:	4698      	mov	r8, r3
 8008bc2:	460c      	mov	r4, r1
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	690e      	ldr	r6, [r1, #16]
 8008bc8:	4607      	mov	r7, r0
 8008bca:	f101 0014 	add.w	r0, r1, #20
 8008bce:	6805      	ldr	r5, [r0, #0]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	b2a9      	uxth	r1, r5
 8008bd4:	fb02 8101 	mla	r1, r2, r1, r8
 8008bd8:	0c2d      	lsrs	r5, r5, #16
 8008bda:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008bde:	fb02 c505 	mla	r5, r2, r5, ip
 8008be2:	b289      	uxth	r1, r1
 8008be4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008be8:	429e      	cmp	r6, r3
 8008bea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008bee:	f840 1b04 	str.w	r1, [r0], #4
 8008bf2:	dcec      	bgt.n	8008bce <__multadd+0x12>
 8008bf4:	f1b8 0f00 	cmp.w	r8, #0
 8008bf8:	d022      	beq.n	8008c40 <__multadd+0x84>
 8008bfa:	68a3      	ldr	r3, [r4, #8]
 8008bfc:	42b3      	cmp	r3, r6
 8008bfe:	dc19      	bgt.n	8008c34 <__multadd+0x78>
 8008c00:	6861      	ldr	r1, [r4, #4]
 8008c02:	4638      	mov	r0, r7
 8008c04:	3101      	adds	r1, #1
 8008c06:	f7ff ff77 	bl	8008af8 <_Balloc>
 8008c0a:	4605      	mov	r5, r0
 8008c0c:	b928      	cbnz	r0, 8008c1a <__multadd+0x5e>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	21b5      	movs	r1, #181	; 0xb5
 8008c12:	4b0d      	ldr	r3, [pc, #52]	; (8008c48 <__multadd+0x8c>)
 8008c14:	480d      	ldr	r0, [pc, #52]	; (8008c4c <__multadd+0x90>)
 8008c16:	f000 fc5b 	bl	80094d0 <__assert_func>
 8008c1a:	6922      	ldr	r2, [r4, #16]
 8008c1c:	f104 010c 	add.w	r1, r4, #12
 8008c20:	3202      	adds	r2, #2
 8008c22:	0092      	lsls	r2, r2, #2
 8008c24:	300c      	adds	r0, #12
 8008c26:	f7fe fb81 	bl	800732c <memcpy>
 8008c2a:	4621      	mov	r1, r4
 8008c2c:	4638      	mov	r0, r7
 8008c2e:	f7ff ffa3 	bl	8008b78 <_Bfree>
 8008c32:	462c      	mov	r4, r5
 8008c34:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008c38:	3601      	adds	r6, #1
 8008c3a:	f8c3 8014 	str.w	r8, [r3, #20]
 8008c3e:	6126      	str	r6, [r4, #16]
 8008c40:	4620      	mov	r0, r4
 8008c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c46:	bf00      	nop
 8008c48:	0800afa7 	.word	0x0800afa7
 8008c4c:	0800afb8 	.word	0x0800afb8

08008c50 <__hi0bits>:
 8008c50:	0c02      	lsrs	r2, r0, #16
 8008c52:	0412      	lsls	r2, r2, #16
 8008c54:	4603      	mov	r3, r0
 8008c56:	b9ca      	cbnz	r2, 8008c8c <__hi0bits+0x3c>
 8008c58:	0403      	lsls	r3, r0, #16
 8008c5a:	2010      	movs	r0, #16
 8008c5c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008c60:	bf04      	itt	eq
 8008c62:	021b      	lsleq	r3, r3, #8
 8008c64:	3008      	addeq	r0, #8
 8008c66:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008c6a:	bf04      	itt	eq
 8008c6c:	011b      	lsleq	r3, r3, #4
 8008c6e:	3004      	addeq	r0, #4
 8008c70:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008c74:	bf04      	itt	eq
 8008c76:	009b      	lsleq	r3, r3, #2
 8008c78:	3002      	addeq	r0, #2
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	db05      	blt.n	8008c8a <__hi0bits+0x3a>
 8008c7e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008c82:	f100 0001 	add.w	r0, r0, #1
 8008c86:	bf08      	it	eq
 8008c88:	2020      	moveq	r0, #32
 8008c8a:	4770      	bx	lr
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	e7e5      	b.n	8008c5c <__hi0bits+0xc>

08008c90 <__lo0bits>:
 8008c90:	6803      	ldr	r3, [r0, #0]
 8008c92:	4602      	mov	r2, r0
 8008c94:	f013 0007 	ands.w	r0, r3, #7
 8008c98:	d00b      	beq.n	8008cb2 <__lo0bits+0x22>
 8008c9a:	07d9      	lsls	r1, r3, #31
 8008c9c:	d422      	bmi.n	8008ce4 <__lo0bits+0x54>
 8008c9e:	0798      	lsls	r0, r3, #30
 8008ca0:	bf49      	itett	mi
 8008ca2:	085b      	lsrmi	r3, r3, #1
 8008ca4:	089b      	lsrpl	r3, r3, #2
 8008ca6:	2001      	movmi	r0, #1
 8008ca8:	6013      	strmi	r3, [r2, #0]
 8008caa:	bf5c      	itt	pl
 8008cac:	2002      	movpl	r0, #2
 8008cae:	6013      	strpl	r3, [r2, #0]
 8008cb0:	4770      	bx	lr
 8008cb2:	b299      	uxth	r1, r3
 8008cb4:	b909      	cbnz	r1, 8008cba <__lo0bits+0x2a>
 8008cb6:	2010      	movs	r0, #16
 8008cb8:	0c1b      	lsrs	r3, r3, #16
 8008cba:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008cbe:	bf04      	itt	eq
 8008cc0:	0a1b      	lsreq	r3, r3, #8
 8008cc2:	3008      	addeq	r0, #8
 8008cc4:	0719      	lsls	r1, r3, #28
 8008cc6:	bf04      	itt	eq
 8008cc8:	091b      	lsreq	r3, r3, #4
 8008cca:	3004      	addeq	r0, #4
 8008ccc:	0799      	lsls	r1, r3, #30
 8008cce:	bf04      	itt	eq
 8008cd0:	089b      	lsreq	r3, r3, #2
 8008cd2:	3002      	addeq	r0, #2
 8008cd4:	07d9      	lsls	r1, r3, #31
 8008cd6:	d403      	bmi.n	8008ce0 <__lo0bits+0x50>
 8008cd8:	085b      	lsrs	r3, r3, #1
 8008cda:	f100 0001 	add.w	r0, r0, #1
 8008cde:	d003      	beq.n	8008ce8 <__lo0bits+0x58>
 8008ce0:	6013      	str	r3, [r2, #0]
 8008ce2:	4770      	bx	lr
 8008ce4:	2000      	movs	r0, #0
 8008ce6:	4770      	bx	lr
 8008ce8:	2020      	movs	r0, #32
 8008cea:	4770      	bx	lr

08008cec <__i2b>:
 8008cec:	b510      	push	{r4, lr}
 8008cee:	460c      	mov	r4, r1
 8008cf0:	2101      	movs	r1, #1
 8008cf2:	f7ff ff01 	bl	8008af8 <_Balloc>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	b928      	cbnz	r0, 8008d06 <__i2b+0x1a>
 8008cfa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008cfe:	4b04      	ldr	r3, [pc, #16]	; (8008d10 <__i2b+0x24>)
 8008d00:	4804      	ldr	r0, [pc, #16]	; (8008d14 <__i2b+0x28>)
 8008d02:	f000 fbe5 	bl	80094d0 <__assert_func>
 8008d06:	2301      	movs	r3, #1
 8008d08:	6144      	str	r4, [r0, #20]
 8008d0a:	6103      	str	r3, [r0, #16]
 8008d0c:	bd10      	pop	{r4, pc}
 8008d0e:	bf00      	nop
 8008d10:	0800afa7 	.word	0x0800afa7
 8008d14:	0800afb8 	.word	0x0800afb8

08008d18 <__multiply>:
 8008d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d1c:	4614      	mov	r4, r2
 8008d1e:	690a      	ldr	r2, [r1, #16]
 8008d20:	6923      	ldr	r3, [r4, #16]
 8008d22:	460d      	mov	r5, r1
 8008d24:	429a      	cmp	r2, r3
 8008d26:	bfbe      	ittt	lt
 8008d28:	460b      	movlt	r3, r1
 8008d2a:	4625      	movlt	r5, r4
 8008d2c:	461c      	movlt	r4, r3
 8008d2e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008d32:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008d36:	68ab      	ldr	r3, [r5, #8]
 8008d38:	6869      	ldr	r1, [r5, #4]
 8008d3a:	eb0a 0709 	add.w	r7, sl, r9
 8008d3e:	42bb      	cmp	r3, r7
 8008d40:	b085      	sub	sp, #20
 8008d42:	bfb8      	it	lt
 8008d44:	3101      	addlt	r1, #1
 8008d46:	f7ff fed7 	bl	8008af8 <_Balloc>
 8008d4a:	b930      	cbnz	r0, 8008d5a <__multiply+0x42>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	f240 115d 	movw	r1, #349	; 0x15d
 8008d52:	4b41      	ldr	r3, [pc, #260]	; (8008e58 <__multiply+0x140>)
 8008d54:	4841      	ldr	r0, [pc, #260]	; (8008e5c <__multiply+0x144>)
 8008d56:	f000 fbbb 	bl	80094d0 <__assert_func>
 8008d5a:	f100 0614 	add.w	r6, r0, #20
 8008d5e:	4633      	mov	r3, r6
 8008d60:	2200      	movs	r2, #0
 8008d62:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008d66:	4543      	cmp	r3, r8
 8008d68:	d31e      	bcc.n	8008da8 <__multiply+0x90>
 8008d6a:	f105 0c14 	add.w	ip, r5, #20
 8008d6e:	f104 0314 	add.w	r3, r4, #20
 8008d72:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008d76:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008d7a:	9202      	str	r2, [sp, #8]
 8008d7c:	ebac 0205 	sub.w	r2, ip, r5
 8008d80:	3a15      	subs	r2, #21
 8008d82:	f022 0203 	bic.w	r2, r2, #3
 8008d86:	3204      	adds	r2, #4
 8008d88:	f105 0115 	add.w	r1, r5, #21
 8008d8c:	458c      	cmp	ip, r1
 8008d8e:	bf38      	it	cc
 8008d90:	2204      	movcc	r2, #4
 8008d92:	9201      	str	r2, [sp, #4]
 8008d94:	9a02      	ldr	r2, [sp, #8]
 8008d96:	9303      	str	r3, [sp, #12]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d808      	bhi.n	8008dae <__multiply+0x96>
 8008d9c:	2f00      	cmp	r7, #0
 8008d9e:	dc55      	bgt.n	8008e4c <__multiply+0x134>
 8008da0:	6107      	str	r7, [r0, #16]
 8008da2:	b005      	add	sp, #20
 8008da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008da8:	f843 2b04 	str.w	r2, [r3], #4
 8008dac:	e7db      	b.n	8008d66 <__multiply+0x4e>
 8008dae:	f8b3 a000 	ldrh.w	sl, [r3]
 8008db2:	f1ba 0f00 	cmp.w	sl, #0
 8008db6:	d020      	beq.n	8008dfa <__multiply+0xe2>
 8008db8:	46b1      	mov	r9, r6
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f105 0e14 	add.w	lr, r5, #20
 8008dc0:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008dc4:	f8d9 b000 	ldr.w	fp, [r9]
 8008dc8:	b2a1      	uxth	r1, r4
 8008dca:	fa1f fb8b 	uxth.w	fp, fp
 8008dce:	fb0a b101 	mla	r1, sl, r1, fp
 8008dd2:	4411      	add	r1, r2
 8008dd4:	f8d9 2000 	ldr.w	r2, [r9]
 8008dd8:	0c24      	lsrs	r4, r4, #16
 8008dda:	0c12      	lsrs	r2, r2, #16
 8008ddc:	fb0a 2404 	mla	r4, sl, r4, r2
 8008de0:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008de4:	b289      	uxth	r1, r1
 8008de6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008dea:	45f4      	cmp	ip, lr
 8008dec:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008df0:	f849 1b04 	str.w	r1, [r9], #4
 8008df4:	d8e4      	bhi.n	8008dc0 <__multiply+0xa8>
 8008df6:	9901      	ldr	r1, [sp, #4]
 8008df8:	5072      	str	r2, [r6, r1]
 8008dfa:	9a03      	ldr	r2, [sp, #12]
 8008dfc:	3304      	adds	r3, #4
 8008dfe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008e02:	f1b9 0f00 	cmp.w	r9, #0
 8008e06:	d01f      	beq.n	8008e48 <__multiply+0x130>
 8008e08:	46b6      	mov	lr, r6
 8008e0a:	f04f 0a00 	mov.w	sl, #0
 8008e0e:	6834      	ldr	r4, [r6, #0]
 8008e10:	f105 0114 	add.w	r1, r5, #20
 8008e14:	880a      	ldrh	r2, [r1, #0]
 8008e16:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008e1a:	b2a4      	uxth	r4, r4
 8008e1c:	fb09 b202 	mla	r2, r9, r2, fp
 8008e20:	4492      	add	sl, r2
 8008e22:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008e26:	f84e 4b04 	str.w	r4, [lr], #4
 8008e2a:	f851 4b04 	ldr.w	r4, [r1], #4
 8008e2e:	f8be 2000 	ldrh.w	r2, [lr]
 8008e32:	0c24      	lsrs	r4, r4, #16
 8008e34:	fb09 2404 	mla	r4, r9, r4, r2
 8008e38:	458c      	cmp	ip, r1
 8008e3a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008e3e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008e42:	d8e7      	bhi.n	8008e14 <__multiply+0xfc>
 8008e44:	9a01      	ldr	r2, [sp, #4]
 8008e46:	50b4      	str	r4, [r6, r2]
 8008e48:	3604      	adds	r6, #4
 8008e4a:	e7a3      	b.n	8008d94 <__multiply+0x7c>
 8008e4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d1a5      	bne.n	8008da0 <__multiply+0x88>
 8008e54:	3f01      	subs	r7, #1
 8008e56:	e7a1      	b.n	8008d9c <__multiply+0x84>
 8008e58:	0800afa7 	.word	0x0800afa7
 8008e5c:	0800afb8 	.word	0x0800afb8

08008e60 <__pow5mult>:
 8008e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e64:	4615      	mov	r5, r2
 8008e66:	f012 0203 	ands.w	r2, r2, #3
 8008e6a:	4606      	mov	r6, r0
 8008e6c:	460f      	mov	r7, r1
 8008e6e:	d007      	beq.n	8008e80 <__pow5mult+0x20>
 8008e70:	4c25      	ldr	r4, [pc, #148]	; (8008f08 <__pow5mult+0xa8>)
 8008e72:	3a01      	subs	r2, #1
 8008e74:	2300      	movs	r3, #0
 8008e76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e7a:	f7ff fe9f 	bl	8008bbc <__multadd>
 8008e7e:	4607      	mov	r7, r0
 8008e80:	10ad      	asrs	r5, r5, #2
 8008e82:	d03d      	beq.n	8008f00 <__pow5mult+0xa0>
 8008e84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008e86:	b97c      	cbnz	r4, 8008ea8 <__pow5mult+0x48>
 8008e88:	2010      	movs	r0, #16
 8008e8a:	f7fe fa47 	bl	800731c <malloc>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	6270      	str	r0, [r6, #36]	; 0x24
 8008e92:	b928      	cbnz	r0, 8008ea0 <__pow5mult+0x40>
 8008e94:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008e98:	4b1c      	ldr	r3, [pc, #112]	; (8008f0c <__pow5mult+0xac>)
 8008e9a:	481d      	ldr	r0, [pc, #116]	; (8008f10 <__pow5mult+0xb0>)
 8008e9c:	f000 fb18 	bl	80094d0 <__assert_func>
 8008ea0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ea4:	6004      	str	r4, [r0, #0]
 8008ea6:	60c4      	str	r4, [r0, #12]
 8008ea8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008eac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008eb0:	b94c      	cbnz	r4, 8008ec6 <__pow5mult+0x66>
 8008eb2:	f240 2171 	movw	r1, #625	; 0x271
 8008eb6:	4630      	mov	r0, r6
 8008eb8:	f7ff ff18 	bl	8008cec <__i2b>
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	4604      	mov	r4, r0
 8008ec0:	f8c8 0008 	str.w	r0, [r8, #8]
 8008ec4:	6003      	str	r3, [r0, #0]
 8008ec6:	f04f 0900 	mov.w	r9, #0
 8008eca:	07eb      	lsls	r3, r5, #31
 8008ecc:	d50a      	bpl.n	8008ee4 <__pow5mult+0x84>
 8008ece:	4639      	mov	r1, r7
 8008ed0:	4622      	mov	r2, r4
 8008ed2:	4630      	mov	r0, r6
 8008ed4:	f7ff ff20 	bl	8008d18 <__multiply>
 8008ed8:	4680      	mov	r8, r0
 8008eda:	4639      	mov	r1, r7
 8008edc:	4630      	mov	r0, r6
 8008ede:	f7ff fe4b 	bl	8008b78 <_Bfree>
 8008ee2:	4647      	mov	r7, r8
 8008ee4:	106d      	asrs	r5, r5, #1
 8008ee6:	d00b      	beq.n	8008f00 <__pow5mult+0xa0>
 8008ee8:	6820      	ldr	r0, [r4, #0]
 8008eea:	b938      	cbnz	r0, 8008efc <__pow5mult+0x9c>
 8008eec:	4622      	mov	r2, r4
 8008eee:	4621      	mov	r1, r4
 8008ef0:	4630      	mov	r0, r6
 8008ef2:	f7ff ff11 	bl	8008d18 <__multiply>
 8008ef6:	6020      	str	r0, [r4, #0]
 8008ef8:	f8c0 9000 	str.w	r9, [r0]
 8008efc:	4604      	mov	r4, r0
 8008efe:	e7e4      	b.n	8008eca <__pow5mult+0x6a>
 8008f00:	4638      	mov	r0, r7
 8008f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f06:	bf00      	nop
 8008f08:	0800b108 	.word	0x0800b108
 8008f0c:	0800af31 	.word	0x0800af31
 8008f10:	0800afb8 	.word	0x0800afb8

08008f14 <__lshift>:
 8008f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f18:	460c      	mov	r4, r1
 8008f1a:	4607      	mov	r7, r0
 8008f1c:	4691      	mov	r9, r2
 8008f1e:	6923      	ldr	r3, [r4, #16]
 8008f20:	6849      	ldr	r1, [r1, #4]
 8008f22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008f26:	68a3      	ldr	r3, [r4, #8]
 8008f28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f2c:	f108 0601 	add.w	r6, r8, #1
 8008f30:	42b3      	cmp	r3, r6
 8008f32:	db0b      	blt.n	8008f4c <__lshift+0x38>
 8008f34:	4638      	mov	r0, r7
 8008f36:	f7ff fddf 	bl	8008af8 <_Balloc>
 8008f3a:	4605      	mov	r5, r0
 8008f3c:	b948      	cbnz	r0, 8008f52 <__lshift+0x3e>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008f44:	4b27      	ldr	r3, [pc, #156]	; (8008fe4 <__lshift+0xd0>)
 8008f46:	4828      	ldr	r0, [pc, #160]	; (8008fe8 <__lshift+0xd4>)
 8008f48:	f000 fac2 	bl	80094d0 <__assert_func>
 8008f4c:	3101      	adds	r1, #1
 8008f4e:	005b      	lsls	r3, r3, #1
 8008f50:	e7ee      	b.n	8008f30 <__lshift+0x1c>
 8008f52:	2300      	movs	r3, #0
 8008f54:	f100 0114 	add.w	r1, r0, #20
 8008f58:	f100 0210 	add.w	r2, r0, #16
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	4553      	cmp	r3, sl
 8008f60:	db33      	blt.n	8008fca <__lshift+0xb6>
 8008f62:	6920      	ldr	r0, [r4, #16]
 8008f64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f68:	f104 0314 	add.w	r3, r4, #20
 8008f6c:	f019 091f 	ands.w	r9, r9, #31
 8008f70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f78:	d02b      	beq.n	8008fd2 <__lshift+0xbe>
 8008f7a:	468a      	mov	sl, r1
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f1c9 0e20 	rsb	lr, r9, #32
 8008f82:	6818      	ldr	r0, [r3, #0]
 8008f84:	fa00 f009 	lsl.w	r0, r0, r9
 8008f88:	4302      	orrs	r2, r0
 8008f8a:	f84a 2b04 	str.w	r2, [sl], #4
 8008f8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f92:	459c      	cmp	ip, r3
 8008f94:	fa22 f20e 	lsr.w	r2, r2, lr
 8008f98:	d8f3      	bhi.n	8008f82 <__lshift+0x6e>
 8008f9a:	ebac 0304 	sub.w	r3, ip, r4
 8008f9e:	3b15      	subs	r3, #21
 8008fa0:	f023 0303 	bic.w	r3, r3, #3
 8008fa4:	3304      	adds	r3, #4
 8008fa6:	f104 0015 	add.w	r0, r4, #21
 8008faa:	4584      	cmp	ip, r0
 8008fac:	bf38      	it	cc
 8008fae:	2304      	movcc	r3, #4
 8008fb0:	50ca      	str	r2, [r1, r3]
 8008fb2:	b10a      	cbz	r2, 8008fb8 <__lshift+0xa4>
 8008fb4:	f108 0602 	add.w	r6, r8, #2
 8008fb8:	3e01      	subs	r6, #1
 8008fba:	4638      	mov	r0, r7
 8008fbc:	4621      	mov	r1, r4
 8008fbe:	612e      	str	r6, [r5, #16]
 8008fc0:	f7ff fdda 	bl	8008b78 <_Bfree>
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fca:	f842 0f04 	str.w	r0, [r2, #4]!
 8008fce:	3301      	adds	r3, #1
 8008fd0:	e7c5      	b.n	8008f5e <__lshift+0x4a>
 8008fd2:	3904      	subs	r1, #4
 8008fd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fd8:	459c      	cmp	ip, r3
 8008fda:	f841 2f04 	str.w	r2, [r1, #4]!
 8008fde:	d8f9      	bhi.n	8008fd4 <__lshift+0xc0>
 8008fe0:	e7ea      	b.n	8008fb8 <__lshift+0xa4>
 8008fe2:	bf00      	nop
 8008fe4:	0800afa7 	.word	0x0800afa7
 8008fe8:	0800afb8 	.word	0x0800afb8

08008fec <__mcmp>:
 8008fec:	4603      	mov	r3, r0
 8008fee:	690a      	ldr	r2, [r1, #16]
 8008ff0:	6900      	ldr	r0, [r0, #16]
 8008ff2:	b530      	push	{r4, r5, lr}
 8008ff4:	1a80      	subs	r0, r0, r2
 8008ff6:	d10d      	bne.n	8009014 <__mcmp+0x28>
 8008ff8:	3314      	adds	r3, #20
 8008ffa:	3114      	adds	r1, #20
 8008ffc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009000:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009004:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009008:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800900c:	4295      	cmp	r5, r2
 800900e:	d002      	beq.n	8009016 <__mcmp+0x2a>
 8009010:	d304      	bcc.n	800901c <__mcmp+0x30>
 8009012:	2001      	movs	r0, #1
 8009014:	bd30      	pop	{r4, r5, pc}
 8009016:	42a3      	cmp	r3, r4
 8009018:	d3f4      	bcc.n	8009004 <__mcmp+0x18>
 800901a:	e7fb      	b.n	8009014 <__mcmp+0x28>
 800901c:	f04f 30ff 	mov.w	r0, #4294967295
 8009020:	e7f8      	b.n	8009014 <__mcmp+0x28>
	...

08009024 <__mdiff>:
 8009024:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009028:	460c      	mov	r4, r1
 800902a:	4606      	mov	r6, r0
 800902c:	4611      	mov	r1, r2
 800902e:	4620      	mov	r0, r4
 8009030:	4692      	mov	sl, r2
 8009032:	f7ff ffdb 	bl	8008fec <__mcmp>
 8009036:	1e05      	subs	r5, r0, #0
 8009038:	d111      	bne.n	800905e <__mdiff+0x3a>
 800903a:	4629      	mov	r1, r5
 800903c:	4630      	mov	r0, r6
 800903e:	f7ff fd5b 	bl	8008af8 <_Balloc>
 8009042:	4602      	mov	r2, r0
 8009044:	b928      	cbnz	r0, 8009052 <__mdiff+0x2e>
 8009046:	f240 2132 	movw	r1, #562	; 0x232
 800904a:	4b3c      	ldr	r3, [pc, #240]	; (800913c <__mdiff+0x118>)
 800904c:	483c      	ldr	r0, [pc, #240]	; (8009140 <__mdiff+0x11c>)
 800904e:	f000 fa3f 	bl	80094d0 <__assert_func>
 8009052:	2301      	movs	r3, #1
 8009054:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009058:	4610      	mov	r0, r2
 800905a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800905e:	bfa4      	itt	ge
 8009060:	4653      	movge	r3, sl
 8009062:	46a2      	movge	sl, r4
 8009064:	4630      	mov	r0, r6
 8009066:	f8da 1004 	ldr.w	r1, [sl, #4]
 800906a:	bfa6      	itte	ge
 800906c:	461c      	movge	r4, r3
 800906e:	2500      	movge	r5, #0
 8009070:	2501      	movlt	r5, #1
 8009072:	f7ff fd41 	bl	8008af8 <_Balloc>
 8009076:	4602      	mov	r2, r0
 8009078:	b918      	cbnz	r0, 8009082 <__mdiff+0x5e>
 800907a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800907e:	4b2f      	ldr	r3, [pc, #188]	; (800913c <__mdiff+0x118>)
 8009080:	e7e4      	b.n	800904c <__mdiff+0x28>
 8009082:	f100 0814 	add.w	r8, r0, #20
 8009086:	f8da 7010 	ldr.w	r7, [sl, #16]
 800908a:	60c5      	str	r5, [r0, #12]
 800908c:	f04f 0c00 	mov.w	ip, #0
 8009090:	f10a 0514 	add.w	r5, sl, #20
 8009094:	f10a 0010 	add.w	r0, sl, #16
 8009098:	46c2      	mov	sl, r8
 800909a:	6926      	ldr	r6, [r4, #16]
 800909c:	f104 0914 	add.w	r9, r4, #20
 80090a0:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80090a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80090a8:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80090ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80090b0:	fa1f f18b 	uxth.w	r1, fp
 80090b4:	4461      	add	r1, ip
 80090b6:	fa1f fc83 	uxth.w	ip, r3
 80090ba:	0c1b      	lsrs	r3, r3, #16
 80090bc:	eba1 010c 	sub.w	r1, r1, ip
 80090c0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80090c4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80090c8:	b289      	uxth	r1, r1
 80090ca:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80090ce:	454e      	cmp	r6, r9
 80090d0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80090d4:	f84a 3b04 	str.w	r3, [sl], #4
 80090d8:	d8e6      	bhi.n	80090a8 <__mdiff+0x84>
 80090da:	1b33      	subs	r3, r6, r4
 80090dc:	3b15      	subs	r3, #21
 80090de:	f023 0303 	bic.w	r3, r3, #3
 80090e2:	3415      	adds	r4, #21
 80090e4:	3304      	adds	r3, #4
 80090e6:	42a6      	cmp	r6, r4
 80090e8:	bf38      	it	cc
 80090ea:	2304      	movcc	r3, #4
 80090ec:	441d      	add	r5, r3
 80090ee:	4443      	add	r3, r8
 80090f0:	461e      	mov	r6, r3
 80090f2:	462c      	mov	r4, r5
 80090f4:	4574      	cmp	r4, lr
 80090f6:	d30e      	bcc.n	8009116 <__mdiff+0xf2>
 80090f8:	f10e 0103 	add.w	r1, lr, #3
 80090fc:	1b49      	subs	r1, r1, r5
 80090fe:	f021 0103 	bic.w	r1, r1, #3
 8009102:	3d03      	subs	r5, #3
 8009104:	45ae      	cmp	lr, r5
 8009106:	bf38      	it	cc
 8009108:	2100      	movcc	r1, #0
 800910a:	4419      	add	r1, r3
 800910c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009110:	b18b      	cbz	r3, 8009136 <__mdiff+0x112>
 8009112:	6117      	str	r7, [r2, #16]
 8009114:	e7a0      	b.n	8009058 <__mdiff+0x34>
 8009116:	f854 8b04 	ldr.w	r8, [r4], #4
 800911a:	fa1f f188 	uxth.w	r1, r8
 800911e:	4461      	add	r1, ip
 8009120:	1408      	asrs	r0, r1, #16
 8009122:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8009126:	b289      	uxth	r1, r1
 8009128:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800912c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009130:	f846 1b04 	str.w	r1, [r6], #4
 8009134:	e7de      	b.n	80090f4 <__mdiff+0xd0>
 8009136:	3f01      	subs	r7, #1
 8009138:	e7e8      	b.n	800910c <__mdiff+0xe8>
 800913a:	bf00      	nop
 800913c:	0800afa7 	.word	0x0800afa7
 8009140:	0800afb8 	.word	0x0800afb8

08009144 <__d2b>:
 8009144:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009148:	2101      	movs	r1, #1
 800914a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800914e:	4690      	mov	r8, r2
 8009150:	461d      	mov	r5, r3
 8009152:	f7ff fcd1 	bl	8008af8 <_Balloc>
 8009156:	4604      	mov	r4, r0
 8009158:	b930      	cbnz	r0, 8009168 <__d2b+0x24>
 800915a:	4602      	mov	r2, r0
 800915c:	f240 310a 	movw	r1, #778	; 0x30a
 8009160:	4b24      	ldr	r3, [pc, #144]	; (80091f4 <__d2b+0xb0>)
 8009162:	4825      	ldr	r0, [pc, #148]	; (80091f8 <__d2b+0xb4>)
 8009164:	f000 f9b4 	bl	80094d0 <__assert_func>
 8009168:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800916c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009170:	bb2d      	cbnz	r5, 80091be <__d2b+0x7a>
 8009172:	9301      	str	r3, [sp, #4]
 8009174:	f1b8 0300 	subs.w	r3, r8, #0
 8009178:	d026      	beq.n	80091c8 <__d2b+0x84>
 800917a:	4668      	mov	r0, sp
 800917c:	9300      	str	r3, [sp, #0]
 800917e:	f7ff fd87 	bl	8008c90 <__lo0bits>
 8009182:	9900      	ldr	r1, [sp, #0]
 8009184:	b1f0      	cbz	r0, 80091c4 <__d2b+0x80>
 8009186:	9a01      	ldr	r2, [sp, #4]
 8009188:	f1c0 0320 	rsb	r3, r0, #32
 800918c:	fa02 f303 	lsl.w	r3, r2, r3
 8009190:	430b      	orrs	r3, r1
 8009192:	40c2      	lsrs	r2, r0
 8009194:	6163      	str	r3, [r4, #20]
 8009196:	9201      	str	r2, [sp, #4]
 8009198:	9b01      	ldr	r3, [sp, #4]
 800919a:	2b00      	cmp	r3, #0
 800919c:	bf14      	ite	ne
 800919e:	2102      	movne	r1, #2
 80091a0:	2101      	moveq	r1, #1
 80091a2:	61a3      	str	r3, [r4, #24]
 80091a4:	6121      	str	r1, [r4, #16]
 80091a6:	b1c5      	cbz	r5, 80091da <__d2b+0x96>
 80091a8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80091ac:	4405      	add	r5, r0
 80091ae:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80091b2:	603d      	str	r5, [r7, #0]
 80091b4:	6030      	str	r0, [r6, #0]
 80091b6:	4620      	mov	r0, r4
 80091b8:	b002      	add	sp, #8
 80091ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80091c2:	e7d6      	b.n	8009172 <__d2b+0x2e>
 80091c4:	6161      	str	r1, [r4, #20]
 80091c6:	e7e7      	b.n	8009198 <__d2b+0x54>
 80091c8:	a801      	add	r0, sp, #4
 80091ca:	f7ff fd61 	bl	8008c90 <__lo0bits>
 80091ce:	2101      	movs	r1, #1
 80091d0:	9b01      	ldr	r3, [sp, #4]
 80091d2:	6121      	str	r1, [r4, #16]
 80091d4:	6163      	str	r3, [r4, #20]
 80091d6:	3020      	adds	r0, #32
 80091d8:	e7e5      	b.n	80091a6 <__d2b+0x62>
 80091da:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80091de:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80091e2:	6038      	str	r0, [r7, #0]
 80091e4:	6918      	ldr	r0, [r3, #16]
 80091e6:	f7ff fd33 	bl	8008c50 <__hi0bits>
 80091ea:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80091ee:	6031      	str	r1, [r6, #0]
 80091f0:	e7e1      	b.n	80091b6 <__d2b+0x72>
 80091f2:	bf00      	nop
 80091f4:	0800afa7 	.word	0x0800afa7
 80091f8:	0800afb8 	.word	0x0800afb8

080091fc <_calloc_r>:
 80091fc:	b538      	push	{r3, r4, r5, lr}
 80091fe:	fb02 f501 	mul.w	r5, r2, r1
 8009202:	4629      	mov	r1, r5
 8009204:	f7fe f8f4 	bl	80073f0 <_malloc_r>
 8009208:	4604      	mov	r4, r0
 800920a:	b118      	cbz	r0, 8009214 <_calloc_r+0x18>
 800920c:	462a      	mov	r2, r5
 800920e:	2100      	movs	r1, #0
 8009210:	f7fe f89a 	bl	8007348 <memset>
 8009214:	4620      	mov	r0, r4
 8009216:	bd38      	pop	{r3, r4, r5, pc}

08009218 <__ssputs_r>:
 8009218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800921c:	688e      	ldr	r6, [r1, #8]
 800921e:	4682      	mov	sl, r0
 8009220:	429e      	cmp	r6, r3
 8009222:	460c      	mov	r4, r1
 8009224:	4690      	mov	r8, r2
 8009226:	461f      	mov	r7, r3
 8009228:	d838      	bhi.n	800929c <__ssputs_r+0x84>
 800922a:	898a      	ldrh	r2, [r1, #12]
 800922c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009230:	d032      	beq.n	8009298 <__ssputs_r+0x80>
 8009232:	6825      	ldr	r5, [r4, #0]
 8009234:	6909      	ldr	r1, [r1, #16]
 8009236:	3301      	adds	r3, #1
 8009238:	eba5 0901 	sub.w	r9, r5, r1
 800923c:	6965      	ldr	r5, [r4, #20]
 800923e:	444b      	add	r3, r9
 8009240:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009244:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009248:	106d      	asrs	r5, r5, #1
 800924a:	429d      	cmp	r5, r3
 800924c:	bf38      	it	cc
 800924e:	461d      	movcc	r5, r3
 8009250:	0553      	lsls	r3, r2, #21
 8009252:	d531      	bpl.n	80092b8 <__ssputs_r+0xa0>
 8009254:	4629      	mov	r1, r5
 8009256:	f7fe f8cb 	bl	80073f0 <_malloc_r>
 800925a:	4606      	mov	r6, r0
 800925c:	b950      	cbnz	r0, 8009274 <__ssputs_r+0x5c>
 800925e:	230c      	movs	r3, #12
 8009260:	f04f 30ff 	mov.w	r0, #4294967295
 8009264:	f8ca 3000 	str.w	r3, [sl]
 8009268:	89a3      	ldrh	r3, [r4, #12]
 800926a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800926e:	81a3      	strh	r3, [r4, #12]
 8009270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009274:	464a      	mov	r2, r9
 8009276:	6921      	ldr	r1, [r4, #16]
 8009278:	f7fe f858 	bl	800732c <memcpy>
 800927c:	89a3      	ldrh	r3, [r4, #12]
 800927e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009286:	81a3      	strh	r3, [r4, #12]
 8009288:	6126      	str	r6, [r4, #16]
 800928a:	444e      	add	r6, r9
 800928c:	6026      	str	r6, [r4, #0]
 800928e:	463e      	mov	r6, r7
 8009290:	6165      	str	r5, [r4, #20]
 8009292:	eba5 0509 	sub.w	r5, r5, r9
 8009296:	60a5      	str	r5, [r4, #8]
 8009298:	42be      	cmp	r6, r7
 800929a:	d900      	bls.n	800929e <__ssputs_r+0x86>
 800929c:	463e      	mov	r6, r7
 800929e:	4632      	mov	r2, r6
 80092a0:	4641      	mov	r1, r8
 80092a2:	6820      	ldr	r0, [r4, #0]
 80092a4:	f000 f959 	bl	800955a <memmove>
 80092a8:	68a3      	ldr	r3, [r4, #8]
 80092aa:	6822      	ldr	r2, [r4, #0]
 80092ac:	1b9b      	subs	r3, r3, r6
 80092ae:	4432      	add	r2, r6
 80092b0:	2000      	movs	r0, #0
 80092b2:	60a3      	str	r3, [r4, #8]
 80092b4:	6022      	str	r2, [r4, #0]
 80092b6:	e7db      	b.n	8009270 <__ssputs_r+0x58>
 80092b8:	462a      	mov	r2, r5
 80092ba:	f000 f968 	bl	800958e <_realloc_r>
 80092be:	4606      	mov	r6, r0
 80092c0:	2800      	cmp	r0, #0
 80092c2:	d1e1      	bne.n	8009288 <__ssputs_r+0x70>
 80092c4:	4650      	mov	r0, sl
 80092c6:	6921      	ldr	r1, [r4, #16]
 80092c8:	f7fe f846 	bl	8007358 <_free_r>
 80092cc:	e7c7      	b.n	800925e <__ssputs_r+0x46>
	...

080092d0 <_svfiprintf_r>:
 80092d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d4:	4698      	mov	r8, r3
 80092d6:	898b      	ldrh	r3, [r1, #12]
 80092d8:	4607      	mov	r7, r0
 80092da:	061b      	lsls	r3, r3, #24
 80092dc:	460d      	mov	r5, r1
 80092de:	4614      	mov	r4, r2
 80092e0:	b09d      	sub	sp, #116	; 0x74
 80092e2:	d50e      	bpl.n	8009302 <_svfiprintf_r+0x32>
 80092e4:	690b      	ldr	r3, [r1, #16]
 80092e6:	b963      	cbnz	r3, 8009302 <_svfiprintf_r+0x32>
 80092e8:	2140      	movs	r1, #64	; 0x40
 80092ea:	f7fe f881 	bl	80073f0 <_malloc_r>
 80092ee:	6028      	str	r0, [r5, #0]
 80092f0:	6128      	str	r0, [r5, #16]
 80092f2:	b920      	cbnz	r0, 80092fe <_svfiprintf_r+0x2e>
 80092f4:	230c      	movs	r3, #12
 80092f6:	603b      	str	r3, [r7, #0]
 80092f8:	f04f 30ff 	mov.w	r0, #4294967295
 80092fc:	e0d1      	b.n	80094a2 <_svfiprintf_r+0x1d2>
 80092fe:	2340      	movs	r3, #64	; 0x40
 8009300:	616b      	str	r3, [r5, #20]
 8009302:	2300      	movs	r3, #0
 8009304:	9309      	str	r3, [sp, #36]	; 0x24
 8009306:	2320      	movs	r3, #32
 8009308:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800930c:	2330      	movs	r3, #48	; 0x30
 800930e:	f04f 0901 	mov.w	r9, #1
 8009312:	f8cd 800c 	str.w	r8, [sp, #12]
 8009316:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80094bc <_svfiprintf_r+0x1ec>
 800931a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800931e:	4623      	mov	r3, r4
 8009320:	469a      	mov	sl, r3
 8009322:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009326:	b10a      	cbz	r2, 800932c <_svfiprintf_r+0x5c>
 8009328:	2a25      	cmp	r2, #37	; 0x25
 800932a:	d1f9      	bne.n	8009320 <_svfiprintf_r+0x50>
 800932c:	ebba 0b04 	subs.w	fp, sl, r4
 8009330:	d00b      	beq.n	800934a <_svfiprintf_r+0x7a>
 8009332:	465b      	mov	r3, fp
 8009334:	4622      	mov	r2, r4
 8009336:	4629      	mov	r1, r5
 8009338:	4638      	mov	r0, r7
 800933a:	f7ff ff6d 	bl	8009218 <__ssputs_r>
 800933e:	3001      	adds	r0, #1
 8009340:	f000 80aa 	beq.w	8009498 <_svfiprintf_r+0x1c8>
 8009344:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009346:	445a      	add	r2, fp
 8009348:	9209      	str	r2, [sp, #36]	; 0x24
 800934a:	f89a 3000 	ldrb.w	r3, [sl]
 800934e:	2b00      	cmp	r3, #0
 8009350:	f000 80a2 	beq.w	8009498 <_svfiprintf_r+0x1c8>
 8009354:	2300      	movs	r3, #0
 8009356:	f04f 32ff 	mov.w	r2, #4294967295
 800935a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800935e:	f10a 0a01 	add.w	sl, sl, #1
 8009362:	9304      	str	r3, [sp, #16]
 8009364:	9307      	str	r3, [sp, #28]
 8009366:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800936a:	931a      	str	r3, [sp, #104]	; 0x68
 800936c:	4654      	mov	r4, sl
 800936e:	2205      	movs	r2, #5
 8009370:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009374:	4851      	ldr	r0, [pc, #324]	; (80094bc <_svfiprintf_r+0x1ec>)
 8009376:	f7ff fba5 	bl	8008ac4 <memchr>
 800937a:	9a04      	ldr	r2, [sp, #16]
 800937c:	b9d8      	cbnz	r0, 80093b6 <_svfiprintf_r+0xe6>
 800937e:	06d0      	lsls	r0, r2, #27
 8009380:	bf44      	itt	mi
 8009382:	2320      	movmi	r3, #32
 8009384:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009388:	0711      	lsls	r1, r2, #28
 800938a:	bf44      	itt	mi
 800938c:	232b      	movmi	r3, #43	; 0x2b
 800938e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009392:	f89a 3000 	ldrb.w	r3, [sl]
 8009396:	2b2a      	cmp	r3, #42	; 0x2a
 8009398:	d015      	beq.n	80093c6 <_svfiprintf_r+0xf6>
 800939a:	4654      	mov	r4, sl
 800939c:	2000      	movs	r0, #0
 800939e:	f04f 0c0a 	mov.w	ip, #10
 80093a2:	9a07      	ldr	r2, [sp, #28]
 80093a4:	4621      	mov	r1, r4
 80093a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093aa:	3b30      	subs	r3, #48	; 0x30
 80093ac:	2b09      	cmp	r3, #9
 80093ae:	d94e      	bls.n	800944e <_svfiprintf_r+0x17e>
 80093b0:	b1b0      	cbz	r0, 80093e0 <_svfiprintf_r+0x110>
 80093b2:	9207      	str	r2, [sp, #28]
 80093b4:	e014      	b.n	80093e0 <_svfiprintf_r+0x110>
 80093b6:	eba0 0308 	sub.w	r3, r0, r8
 80093ba:	fa09 f303 	lsl.w	r3, r9, r3
 80093be:	4313      	orrs	r3, r2
 80093c0:	46a2      	mov	sl, r4
 80093c2:	9304      	str	r3, [sp, #16]
 80093c4:	e7d2      	b.n	800936c <_svfiprintf_r+0x9c>
 80093c6:	9b03      	ldr	r3, [sp, #12]
 80093c8:	1d19      	adds	r1, r3, #4
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	9103      	str	r1, [sp, #12]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	bfbb      	ittet	lt
 80093d2:	425b      	neglt	r3, r3
 80093d4:	f042 0202 	orrlt.w	r2, r2, #2
 80093d8:	9307      	strge	r3, [sp, #28]
 80093da:	9307      	strlt	r3, [sp, #28]
 80093dc:	bfb8      	it	lt
 80093de:	9204      	strlt	r2, [sp, #16]
 80093e0:	7823      	ldrb	r3, [r4, #0]
 80093e2:	2b2e      	cmp	r3, #46	; 0x2e
 80093e4:	d10c      	bne.n	8009400 <_svfiprintf_r+0x130>
 80093e6:	7863      	ldrb	r3, [r4, #1]
 80093e8:	2b2a      	cmp	r3, #42	; 0x2a
 80093ea:	d135      	bne.n	8009458 <_svfiprintf_r+0x188>
 80093ec:	9b03      	ldr	r3, [sp, #12]
 80093ee:	3402      	adds	r4, #2
 80093f0:	1d1a      	adds	r2, r3, #4
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	9203      	str	r2, [sp, #12]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	bfb8      	it	lt
 80093fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80093fe:	9305      	str	r3, [sp, #20]
 8009400:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80094cc <_svfiprintf_r+0x1fc>
 8009404:	2203      	movs	r2, #3
 8009406:	4650      	mov	r0, sl
 8009408:	7821      	ldrb	r1, [r4, #0]
 800940a:	f7ff fb5b 	bl	8008ac4 <memchr>
 800940e:	b140      	cbz	r0, 8009422 <_svfiprintf_r+0x152>
 8009410:	2340      	movs	r3, #64	; 0x40
 8009412:	eba0 000a 	sub.w	r0, r0, sl
 8009416:	fa03 f000 	lsl.w	r0, r3, r0
 800941a:	9b04      	ldr	r3, [sp, #16]
 800941c:	3401      	adds	r4, #1
 800941e:	4303      	orrs	r3, r0
 8009420:	9304      	str	r3, [sp, #16]
 8009422:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009426:	2206      	movs	r2, #6
 8009428:	4825      	ldr	r0, [pc, #148]	; (80094c0 <_svfiprintf_r+0x1f0>)
 800942a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800942e:	f7ff fb49 	bl	8008ac4 <memchr>
 8009432:	2800      	cmp	r0, #0
 8009434:	d038      	beq.n	80094a8 <_svfiprintf_r+0x1d8>
 8009436:	4b23      	ldr	r3, [pc, #140]	; (80094c4 <_svfiprintf_r+0x1f4>)
 8009438:	bb1b      	cbnz	r3, 8009482 <_svfiprintf_r+0x1b2>
 800943a:	9b03      	ldr	r3, [sp, #12]
 800943c:	3307      	adds	r3, #7
 800943e:	f023 0307 	bic.w	r3, r3, #7
 8009442:	3308      	adds	r3, #8
 8009444:	9303      	str	r3, [sp, #12]
 8009446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009448:	4433      	add	r3, r6
 800944a:	9309      	str	r3, [sp, #36]	; 0x24
 800944c:	e767      	b.n	800931e <_svfiprintf_r+0x4e>
 800944e:	460c      	mov	r4, r1
 8009450:	2001      	movs	r0, #1
 8009452:	fb0c 3202 	mla	r2, ip, r2, r3
 8009456:	e7a5      	b.n	80093a4 <_svfiprintf_r+0xd4>
 8009458:	2300      	movs	r3, #0
 800945a:	f04f 0c0a 	mov.w	ip, #10
 800945e:	4619      	mov	r1, r3
 8009460:	3401      	adds	r4, #1
 8009462:	9305      	str	r3, [sp, #20]
 8009464:	4620      	mov	r0, r4
 8009466:	f810 2b01 	ldrb.w	r2, [r0], #1
 800946a:	3a30      	subs	r2, #48	; 0x30
 800946c:	2a09      	cmp	r2, #9
 800946e:	d903      	bls.n	8009478 <_svfiprintf_r+0x1a8>
 8009470:	2b00      	cmp	r3, #0
 8009472:	d0c5      	beq.n	8009400 <_svfiprintf_r+0x130>
 8009474:	9105      	str	r1, [sp, #20]
 8009476:	e7c3      	b.n	8009400 <_svfiprintf_r+0x130>
 8009478:	4604      	mov	r4, r0
 800947a:	2301      	movs	r3, #1
 800947c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009480:	e7f0      	b.n	8009464 <_svfiprintf_r+0x194>
 8009482:	ab03      	add	r3, sp, #12
 8009484:	9300      	str	r3, [sp, #0]
 8009486:	462a      	mov	r2, r5
 8009488:	4638      	mov	r0, r7
 800948a:	4b0f      	ldr	r3, [pc, #60]	; (80094c8 <_svfiprintf_r+0x1f8>)
 800948c:	a904      	add	r1, sp, #16
 800948e:	f7fe f8a7 	bl	80075e0 <_printf_float>
 8009492:	1c42      	adds	r2, r0, #1
 8009494:	4606      	mov	r6, r0
 8009496:	d1d6      	bne.n	8009446 <_svfiprintf_r+0x176>
 8009498:	89ab      	ldrh	r3, [r5, #12]
 800949a:	065b      	lsls	r3, r3, #25
 800949c:	f53f af2c 	bmi.w	80092f8 <_svfiprintf_r+0x28>
 80094a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094a2:	b01d      	add	sp, #116	; 0x74
 80094a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a8:	ab03      	add	r3, sp, #12
 80094aa:	9300      	str	r3, [sp, #0]
 80094ac:	462a      	mov	r2, r5
 80094ae:	4638      	mov	r0, r7
 80094b0:	4b05      	ldr	r3, [pc, #20]	; (80094c8 <_svfiprintf_r+0x1f8>)
 80094b2:	a904      	add	r1, sp, #16
 80094b4:	f7fe fb30 	bl	8007b18 <_printf_i>
 80094b8:	e7eb      	b.n	8009492 <_svfiprintf_r+0x1c2>
 80094ba:	bf00      	nop
 80094bc:	0800b114 	.word	0x0800b114
 80094c0:	0800b11e 	.word	0x0800b11e
 80094c4:	080075e1 	.word	0x080075e1
 80094c8:	08009219 	.word	0x08009219
 80094cc:	0800b11a 	.word	0x0800b11a

080094d0 <__assert_func>:
 80094d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80094d2:	4614      	mov	r4, r2
 80094d4:	461a      	mov	r2, r3
 80094d6:	4b09      	ldr	r3, [pc, #36]	; (80094fc <__assert_func+0x2c>)
 80094d8:	4605      	mov	r5, r0
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	68d8      	ldr	r0, [r3, #12]
 80094de:	b14c      	cbz	r4, 80094f4 <__assert_func+0x24>
 80094e0:	4b07      	ldr	r3, [pc, #28]	; (8009500 <__assert_func+0x30>)
 80094e2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80094e6:	9100      	str	r1, [sp, #0]
 80094e8:	462b      	mov	r3, r5
 80094ea:	4906      	ldr	r1, [pc, #24]	; (8009504 <__assert_func+0x34>)
 80094ec:	f000 f80e 	bl	800950c <fiprintf>
 80094f0:	f000 fa98 	bl	8009a24 <abort>
 80094f4:	4b04      	ldr	r3, [pc, #16]	; (8009508 <__assert_func+0x38>)
 80094f6:	461c      	mov	r4, r3
 80094f8:	e7f3      	b.n	80094e2 <__assert_func+0x12>
 80094fa:	bf00      	nop
 80094fc:	20000014 	.word	0x20000014
 8009500:	0800b125 	.word	0x0800b125
 8009504:	0800b132 	.word	0x0800b132
 8009508:	0800b160 	.word	0x0800b160

0800950c <fiprintf>:
 800950c:	b40e      	push	{r1, r2, r3}
 800950e:	b503      	push	{r0, r1, lr}
 8009510:	4601      	mov	r1, r0
 8009512:	ab03      	add	r3, sp, #12
 8009514:	4805      	ldr	r0, [pc, #20]	; (800952c <fiprintf+0x20>)
 8009516:	f853 2b04 	ldr.w	r2, [r3], #4
 800951a:	6800      	ldr	r0, [r0, #0]
 800951c:	9301      	str	r3, [sp, #4]
 800951e:	f000 f883 	bl	8009628 <_vfiprintf_r>
 8009522:	b002      	add	sp, #8
 8009524:	f85d eb04 	ldr.w	lr, [sp], #4
 8009528:	b003      	add	sp, #12
 800952a:	4770      	bx	lr
 800952c:	20000014 	.word	0x20000014

08009530 <__retarget_lock_init_recursive>:
 8009530:	4770      	bx	lr

08009532 <__retarget_lock_acquire_recursive>:
 8009532:	4770      	bx	lr

08009534 <__retarget_lock_release_recursive>:
 8009534:	4770      	bx	lr

08009536 <__ascii_mbtowc>:
 8009536:	b082      	sub	sp, #8
 8009538:	b901      	cbnz	r1, 800953c <__ascii_mbtowc+0x6>
 800953a:	a901      	add	r1, sp, #4
 800953c:	b142      	cbz	r2, 8009550 <__ascii_mbtowc+0x1a>
 800953e:	b14b      	cbz	r3, 8009554 <__ascii_mbtowc+0x1e>
 8009540:	7813      	ldrb	r3, [r2, #0]
 8009542:	600b      	str	r3, [r1, #0]
 8009544:	7812      	ldrb	r2, [r2, #0]
 8009546:	1e10      	subs	r0, r2, #0
 8009548:	bf18      	it	ne
 800954a:	2001      	movne	r0, #1
 800954c:	b002      	add	sp, #8
 800954e:	4770      	bx	lr
 8009550:	4610      	mov	r0, r2
 8009552:	e7fb      	b.n	800954c <__ascii_mbtowc+0x16>
 8009554:	f06f 0001 	mvn.w	r0, #1
 8009558:	e7f8      	b.n	800954c <__ascii_mbtowc+0x16>

0800955a <memmove>:
 800955a:	4288      	cmp	r0, r1
 800955c:	b510      	push	{r4, lr}
 800955e:	eb01 0402 	add.w	r4, r1, r2
 8009562:	d902      	bls.n	800956a <memmove+0x10>
 8009564:	4284      	cmp	r4, r0
 8009566:	4623      	mov	r3, r4
 8009568:	d807      	bhi.n	800957a <memmove+0x20>
 800956a:	1e43      	subs	r3, r0, #1
 800956c:	42a1      	cmp	r1, r4
 800956e:	d008      	beq.n	8009582 <memmove+0x28>
 8009570:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009574:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009578:	e7f8      	b.n	800956c <memmove+0x12>
 800957a:	4601      	mov	r1, r0
 800957c:	4402      	add	r2, r0
 800957e:	428a      	cmp	r2, r1
 8009580:	d100      	bne.n	8009584 <memmove+0x2a>
 8009582:	bd10      	pop	{r4, pc}
 8009584:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009588:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800958c:	e7f7      	b.n	800957e <memmove+0x24>

0800958e <_realloc_r>:
 800958e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009590:	4607      	mov	r7, r0
 8009592:	4614      	mov	r4, r2
 8009594:	460e      	mov	r6, r1
 8009596:	b921      	cbnz	r1, 80095a2 <_realloc_r+0x14>
 8009598:	4611      	mov	r1, r2
 800959a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800959e:	f7fd bf27 	b.w	80073f0 <_malloc_r>
 80095a2:	b922      	cbnz	r2, 80095ae <_realloc_r+0x20>
 80095a4:	f7fd fed8 	bl	8007358 <_free_r>
 80095a8:	4625      	mov	r5, r4
 80095aa:	4628      	mov	r0, r5
 80095ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095ae:	f000 fc5d 	bl	8009e6c <_malloc_usable_size_r>
 80095b2:	42a0      	cmp	r0, r4
 80095b4:	d20f      	bcs.n	80095d6 <_realloc_r+0x48>
 80095b6:	4621      	mov	r1, r4
 80095b8:	4638      	mov	r0, r7
 80095ba:	f7fd ff19 	bl	80073f0 <_malloc_r>
 80095be:	4605      	mov	r5, r0
 80095c0:	2800      	cmp	r0, #0
 80095c2:	d0f2      	beq.n	80095aa <_realloc_r+0x1c>
 80095c4:	4631      	mov	r1, r6
 80095c6:	4622      	mov	r2, r4
 80095c8:	f7fd feb0 	bl	800732c <memcpy>
 80095cc:	4631      	mov	r1, r6
 80095ce:	4638      	mov	r0, r7
 80095d0:	f7fd fec2 	bl	8007358 <_free_r>
 80095d4:	e7e9      	b.n	80095aa <_realloc_r+0x1c>
 80095d6:	4635      	mov	r5, r6
 80095d8:	e7e7      	b.n	80095aa <_realloc_r+0x1c>

080095da <__sfputc_r>:
 80095da:	6893      	ldr	r3, [r2, #8]
 80095dc:	b410      	push	{r4}
 80095de:	3b01      	subs	r3, #1
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	6093      	str	r3, [r2, #8]
 80095e4:	da07      	bge.n	80095f6 <__sfputc_r+0x1c>
 80095e6:	6994      	ldr	r4, [r2, #24]
 80095e8:	42a3      	cmp	r3, r4
 80095ea:	db01      	blt.n	80095f0 <__sfputc_r+0x16>
 80095ec:	290a      	cmp	r1, #10
 80095ee:	d102      	bne.n	80095f6 <__sfputc_r+0x1c>
 80095f0:	bc10      	pop	{r4}
 80095f2:	f000 b949 	b.w	8009888 <__swbuf_r>
 80095f6:	6813      	ldr	r3, [r2, #0]
 80095f8:	1c58      	adds	r0, r3, #1
 80095fa:	6010      	str	r0, [r2, #0]
 80095fc:	7019      	strb	r1, [r3, #0]
 80095fe:	4608      	mov	r0, r1
 8009600:	bc10      	pop	{r4}
 8009602:	4770      	bx	lr

08009604 <__sfputs_r>:
 8009604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009606:	4606      	mov	r6, r0
 8009608:	460f      	mov	r7, r1
 800960a:	4614      	mov	r4, r2
 800960c:	18d5      	adds	r5, r2, r3
 800960e:	42ac      	cmp	r4, r5
 8009610:	d101      	bne.n	8009616 <__sfputs_r+0x12>
 8009612:	2000      	movs	r0, #0
 8009614:	e007      	b.n	8009626 <__sfputs_r+0x22>
 8009616:	463a      	mov	r2, r7
 8009618:	4630      	mov	r0, r6
 800961a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800961e:	f7ff ffdc 	bl	80095da <__sfputc_r>
 8009622:	1c43      	adds	r3, r0, #1
 8009624:	d1f3      	bne.n	800960e <__sfputs_r+0xa>
 8009626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009628 <_vfiprintf_r>:
 8009628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800962c:	460d      	mov	r5, r1
 800962e:	4614      	mov	r4, r2
 8009630:	4698      	mov	r8, r3
 8009632:	4606      	mov	r6, r0
 8009634:	b09d      	sub	sp, #116	; 0x74
 8009636:	b118      	cbz	r0, 8009640 <_vfiprintf_r+0x18>
 8009638:	6983      	ldr	r3, [r0, #24]
 800963a:	b90b      	cbnz	r3, 8009640 <_vfiprintf_r+0x18>
 800963c:	f000 fb14 	bl	8009c68 <__sinit>
 8009640:	4b89      	ldr	r3, [pc, #548]	; (8009868 <_vfiprintf_r+0x240>)
 8009642:	429d      	cmp	r5, r3
 8009644:	d11b      	bne.n	800967e <_vfiprintf_r+0x56>
 8009646:	6875      	ldr	r5, [r6, #4]
 8009648:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800964a:	07d9      	lsls	r1, r3, #31
 800964c:	d405      	bmi.n	800965a <_vfiprintf_r+0x32>
 800964e:	89ab      	ldrh	r3, [r5, #12]
 8009650:	059a      	lsls	r2, r3, #22
 8009652:	d402      	bmi.n	800965a <_vfiprintf_r+0x32>
 8009654:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009656:	f7ff ff6c 	bl	8009532 <__retarget_lock_acquire_recursive>
 800965a:	89ab      	ldrh	r3, [r5, #12]
 800965c:	071b      	lsls	r3, r3, #28
 800965e:	d501      	bpl.n	8009664 <_vfiprintf_r+0x3c>
 8009660:	692b      	ldr	r3, [r5, #16]
 8009662:	b9eb      	cbnz	r3, 80096a0 <_vfiprintf_r+0x78>
 8009664:	4629      	mov	r1, r5
 8009666:	4630      	mov	r0, r6
 8009668:	f000 f96e 	bl	8009948 <__swsetup_r>
 800966c:	b1c0      	cbz	r0, 80096a0 <_vfiprintf_r+0x78>
 800966e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009670:	07dc      	lsls	r4, r3, #31
 8009672:	d50e      	bpl.n	8009692 <_vfiprintf_r+0x6a>
 8009674:	f04f 30ff 	mov.w	r0, #4294967295
 8009678:	b01d      	add	sp, #116	; 0x74
 800967a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800967e:	4b7b      	ldr	r3, [pc, #492]	; (800986c <_vfiprintf_r+0x244>)
 8009680:	429d      	cmp	r5, r3
 8009682:	d101      	bne.n	8009688 <_vfiprintf_r+0x60>
 8009684:	68b5      	ldr	r5, [r6, #8]
 8009686:	e7df      	b.n	8009648 <_vfiprintf_r+0x20>
 8009688:	4b79      	ldr	r3, [pc, #484]	; (8009870 <_vfiprintf_r+0x248>)
 800968a:	429d      	cmp	r5, r3
 800968c:	bf08      	it	eq
 800968e:	68f5      	ldreq	r5, [r6, #12]
 8009690:	e7da      	b.n	8009648 <_vfiprintf_r+0x20>
 8009692:	89ab      	ldrh	r3, [r5, #12]
 8009694:	0598      	lsls	r0, r3, #22
 8009696:	d4ed      	bmi.n	8009674 <_vfiprintf_r+0x4c>
 8009698:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800969a:	f7ff ff4b 	bl	8009534 <__retarget_lock_release_recursive>
 800969e:	e7e9      	b.n	8009674 <_vfiprintf_r+0x4c>
 80096a0:	2300      	movs	r3, #0
 80096a2:	9309      	str	r3, [sp, #36]	; 0x24
 80096a4:	2320      	movs	r3, #32
 80096a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096aa:	2330      	movs	r3, #48	; 0x30
 80096ac:	f04f 0901 	mov.w	r9, #1
 80096b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80096b4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009874 <_vfiprintf_r+0x24c>
 80096b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096bc:	4623      	mov	r3, r4
 80096be:	469a      	mov	sl, r3
 80096c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096c4:	b10a      	cbz	r2, 80096ca <_vfiprintf_r+0xa2>
 80096c6:	2a25      	cmp	r2, #37	; 0x25
 80096c8:	d1f9      	bne.n	80096be <_vfiprintf_r+0x96>
 80096ca:	ebba 0b04 	subs.w	fp, sl, r4
 80096ce:	d00b      	beq.n	80096e8 <_vfiprintf_r+0xc0>
 80096d0:	465b      	mov	r3, fp
 80096d2:	4622      	mov	r2, r4
 80096d4:	4629      	mov	r1, r5
 80096d6:	4630      	mov	r0, r6
 80096d8:	f7ff ff94 	bl	8009604 <__sfputs_r>
 80096dc:	3001      	adds	r0, #1
 80096de:	f000 80aa 	beq.w	8009836 <_vfiprintf_r+0x20e>
 80096e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096e4:	445a      	add	r2, fp
 80096e6:	9209      	str	r2, [sp, #36]	; 0x24
 80096e8:	f89a 3000 	ldrb.w	r3, [sl]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	f000 80a2 	beq.w	8009836 <_vfiprintf_r+0x20e>
 80096f2:	2300      	movs	r3, #0
 80096f4:	f04f 32ff 	mov.w	r2, #4294967295
 80096f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096fc:	f10a 0a01 	add.w	sl, sl, #1
 8009700:	9304      	str	r3, [sp, #16]
 8009702:	9307      	str	r3, [sp, #28]
 8009704:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009708:	931a      	str	r3, [sp, #104]	; 0x68
 800970a:	4654      	mov	r4, sl
 800970c:	2205      	movs	r2, #5
 800970e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009712:	4858      	ldr	r0, [pc, #352]	; (8009874 <_vfiprintf_r+0x24c>)
 8009714:	f7ff f9d6 	bl	8008ac4 <memchr>
 8009718:	9a04      	ldr	r2, [sp, #16]
 800971a:	b9d8      	cbnz	r0, 8009754 <_vfiprintf_r+0x12c>
 800971c:	06d1      	lsls	r1, r2, #27
 800971e:	bf44      	itt	mi
 8009720:	2320      	movmi	r3, #32
 8009722:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009726:	0713      	lsls	r3, r2, #28
 8009728:	bf44      	itt	mi
 800972a:	232b      	movmi	r3, #43	; 0x2b
 800972c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009730:	f89a 3000 	ldrb.w	r3, [sl]
 8009734:	2b2a      	cmp	r3, #42	; 0x2a
 8009736:	d015      	beq.n	8009764 <_vfiprintf_r+0x13c>
 8009738:	4654      	mov	r4, sl
 800973a:	2000      	movs	r0, #0
 800973c:	f04f 0c0a 	mov.w	ip, #10
 8009740:	9a07      	ldr	r2, [sp, #28]
 8009742:	4621      	mov	r1, r4
 8009744:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009748:	3b30      	subs	r3, #48	; 0x30
 800974a:	2b09      	cmp	r3, #9
 800974c:	d94e      	bls.n	80097ec <_vfiprintf_r+0x1c4>
 800974e:	b1b0      	cbz	r0, 800977e <_vfiprintf_r+0x156>
 8009750:	9207      	str	r2, [sp, #28]
 8009752:	e014      	b.n	800977e <_vfiprintf_r+0x156>
 8009754:	eba0 0308 	sub.w	r3, r0, r8
 8009758:	fa09 f303 	lsl.w	r3, r9, r3
 800975c:	4313      	orrs	r3, r2
 800975e:	46a2      	mov	sl, r4
 8009760:	9304      	str	r3, [sp, #16]
 8009762:	e7d2      	b.n	800970a <_vfiprintf_r+0xe2>
 8009764:	9b03      	ldr	r3, [sp, #12]
 8009766:	1d19      	adds	r1, r3, #4
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	9103      	str	r1, [sp, #12]
 800976c:	2b00      	cmp	r3, #0
 800976e:	bfbb      	ittet	lt
 8009770:	425b      	neglt	r3, r3
 8009772:	f042 0202 	orrlt.w	r2, r2, #2
 8009776:	9307      	strge	r3, [sp, #28]
 8009778:	9307      	strlt	r3, [sp, #28]
 800977a:	bfb8      	it	lt
 800977c:	9204      	strlt	r2, [sp, #16]
 800977e:	7823      	ldrb	r3, [r4, #0]
 8009780:	2b2e      	cmp	r3, #46	; 0x2e
 8009782:	d10c      	bne.n	800979e <_vfiprintf_r+0x176>
 8009784:	7863      	ldrb	r3, [r4, #1]
 8009786:	2b2a      	cmp	r3, #42	; 0x2a
 8009788:	d135      	bne.n	80097f6 <_vfiprintf_r+0x1ce>
 800978a:	9b03      	ldr	r3, [sp, #12]
 800978c:	3402      	adds	r4, #2
 800978e:	1d1a      	adds	r2, r3, #4
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	9203      	str	r2, [sp, #12]
 8009794:	2b00      	cmp	r3, #0
 8009796:	bfb8      	it	lt
 8009798:	f04f 33ff 	movlt.w	r3, #4294967295
 800979c:	9305      	str	r3, [sp, #20]
 800979e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009884 <_vfiprintf_r+0x25c>
 80097a2:	2203      	movs	r2, #3
 80097a4:	4650      	mov	r0, sl
 80097a6:	7821      	ldrb	r1, [r4, #0]
 80097a8:	f7ff f98c 	bl	8008ac4 <memchr>
 80097ac:	b140      	cbz	r0, 80097c0 <_vfiprintf_r+0x198>
 80097ae:	2340      	movs	r3, #64	; 0x40
 80097b0:	eba0 000a 	sub.w	r0, r0, sl
 80097b4:	fa03 f000 	lsl.w	r0, r3, r0
 80097b8:	9b04      	ldr	r3, [sp, #16]
 80097ba:	3401      	adds	r4, #1
 80097bc:	4303      	orrs	r3, r0
 80097be:	9304      	str	r3, [sp, #16]
 80097c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097c4:	2206      	movs	r2, #6
 80097c6:	482c      	ldr	r0, [pc, #176]	; (8009878 <_vfiprintf_r+0x250>)
 80097c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097cc:	f7ff f97a 	bl	8008ac4 <memchr>
 80097d0:	2800      	cmp	r0, #0
 80097d2:	d03f      	beq.n	8009854 <_vfiprintf_r+0x22c>
 80097d4:	4b29      	ldr	r3, [pc, #164]	; (800987c <_vfiprintf_r+0x254>)
 80097d6:	bb1b      	cbnz	r3, 8009820 <_vfiprintf_r+0x1f8>
 80097d8:	9b03      	ldr	r3, [sp, #12]
 80097da:	3307      	adds	r3, #7
 80097dc:	f023 0307 	bic.w	r3, r3, #7
 80097e0:	3308      	adds	r3, #8
 80097e2:	9303      	str	r3, [sp, #12]
 80097e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097e6:	443b      	add	r3, r7
 80097e8:	9309      	str	r3, [sp, #36]	; 0x24
 80097ea:	e767      	b.n	80096bc <_vfiprintf_r+0x94>
 80097ec:	460c      	mov	r4, r1
 80097ee:	2001      	movs	r0, #1
 80097f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80097f4:	e7a5      	b.n	8009742 <_vfiprintf_r+0x11a>
 80097f6:	2300      	movs	r3, #0
 80097f8:	f04f 0c0a 	mov.w	ip, #10
 80097fc:	4619      	mov	r1, r3
 80097fe:	3401      	adds	r4, #1
 8009800:	9305      	str	r3, [sp, #20]
 8009802:	4620      	mov	r0, r4
 8009804:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009808:	3a30      	subs	r2, #48	; 0x30
 800980a:	2a09      	cmp	r2, #9
 800980c:	d903      	bls.n	8009816 <_vfiprintf_r+0x1ee>
 800980e:	2b00      	cmp	r3, #0
 8009810:	d0c5      	beq.n	800979e <_vfiprintf_r+0x176>
 8009812:	9105      	str	r1, [sp, #20]
 8009814:	e7c3      	b.n	800979e <_vfiprintf_r+0x176>
 8009816:	4604      	mov	r4, r0
 8009818:	2301      	movs	r3, #1
 800981a:	fb0c 2101 	mla	r1, ip, r1, r2
 800981e:	e7f0      	b.n	8009802 <_vfiprintf_r+0x1da>
 8009820:	ab03      	add	r3, sp, #12
 8009822:	9300      	str	r3, [sp, #0]
 8009824:	462a      	mov	r2, r5
 8009826:	4630      	mov	r0, r6
 8009828:	4b15      	ldr	r3, [pc, #84]	; (8009880 <_vfiprintf_r+0x258>)
 800982a:	a904      	add	r1, sp, #16
 800982c:	f7fd fed8 	bl	80075e0 <_printf_float>
 8009830:	4607      	mov	r7, r0
 8009832:	1c78      	adds	r0, r7, #1
 8009834:	d1d6      	bne.n	80097e4 <_vfiprintf_r+0x1bc>
 8009836:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009838:	07d9      	lsls	r1, r3, #31
 800983a:	d405      	bmi.n	8009848 <_vfiprintf_r+0x220>
 800983c:	89ab      	ldrh	r3, [r5, #12]
 800983e:	059a      	lsls	r2, r3, #22
 8009840:	d402      	bmi.n	8009848 <_vfiprintf_r+0x220>
 8009842:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009844:	f7ff fe76 	bl	8009534 <__retarget_lock_release_recursive>
 8009848:	89ab      	ldrh	r3, [r5, #12]
 800984a:	065b      	lsls	r3, r3, #25
 800984c:	f53f af12 	bmi.w	8009674 <_vfiprintf_r+0x4c>
 8009850:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009852:	e711      	b.n	8009678 <_vfiprintf_r+0x50>
 8009854:	ab03      	add	r3, sp, #12
 8009856:	9300      	str	r3, [sp, #0]
 8009858:	462a      	mov	r2, r5
 800985a:	4630      	mov	r0, r6
 800985c:	4b08      	ldr	r3, [pc, #32]	; (8009880 <_vfiprintf_r+0x258>)
 800985e:	a904      	add	r1, sp, #16
 8009860:	f7fe f95a 	bl	8007b18 <_printf_i>
 8009864:	e7e4      	b.n	8009830 <_vfiprintf_r+0x208>
 8009866:	bf00      	nop
 8009868:	0800b28c 	.word	0x0800b28c
 800986c:	0800b2ac 	.word	0x0800b2ac
 8009870:	0800b26c 	.word	0x0800b26c
 8009874:	0800b114 	.word	0x0800b114
 8009878:	0800b11e 	.word	0x0800b11e
 800987c:	080075e1 	.word	0x080075e1
 8009880:	08009605 	.word	0x08009605
 8009884:	0800b11a 	.word	0x0800b11a

08009888 <__swbuf_r>:
 8009888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800988a:	460e      	mov	r6, r1
 800988c:	4614      	mov	r4, r2
 800988e:	4605      	mov	r5, r0
 8009890:	b118      	cbz	r0, 800989a <__swbuf_r+0x12>
 8009892:	6983      	ldr	r3, [r0, #24]
 8009894:	b90b      	cbnz	r3, 800989a <__swbuf_r+0x12>
 8009896:	f000 f9e7 	bl	8009c68 <__sinit>
 800989a:	4b21      	ldr	r3, [pc, #132]	; (8009920 <__swbuf_r+0x98>)
 800989c:	429c      	cmp	r4, r3
 800989e:	d12b      	bne.n	80098f8 <__swbuf_r+0x70>
 80098a0:	686c      	ldr	r4, [r5, #4]
 80098a2:	69a3      	ldr	r3, [r4, #24]
 80098a4:	60a3      	str	r3, [r4, #8]
 80098a6:	89a3      	ldrh	r3, [r4, #12]
 80098a8:	071a      	lsls	r2, r3, #28
 80098aa:	d52f      	bpl.n	800990c <__swbuf_r+0x84>
 80098ac:	6923      	ldr	r3, [r4, #16]
 80098ae:	b36b      	cbz	r3, 800990c <__swbuf_r+0x84>
 80098b0:	6923      	ldr	r3, [r4, #16]
 80098b2:	6820      	ldr	r0, [r4, #0]
 80098b4:	b2f6      	uxtb	r6, r6
 80098b6:	1ac0      	subs	r0, r0, r3
 80098b8:	6963      	ldr	r3, [r4, #20]
 80098ba:	4637      	mov	r7, r6
 80098bc:	4283      	cmp	r3, r0
 80098be:	dc04      	bgt.n	80098ca <__swbuf_r+0x42>
 80098c0:	4621      	mov	r1, r4
 80098c2:	4628      	mov	r0, r5
 80098c4:	f000 f93c 	bl	8009b40 <_fflush_r>
 80098c8:	bb30      	cbnz	r0, 8009918 <__swbuf_r+0x90>
 80098ca:	68a3      	ldr	r3, [r4, #8]
 80098cc:	3001      	adds	r0, #1
 80098ce:	3b01      	subs	r3, #1
 80098d0:	60a3      	str	r3, [r4, #8]
 80098d2:	6823      	ldr	r3, [r4, #0]
 80098d4:	1c5a      	adds	r2, r3, #1
 80098d6:	6022      	str	r2, [r4, #0]
 80098d8:	701e      	strb	r6, [r3, #0]
 80098da:	6963      	ldr	r3, [r4, #20]
 80098dc:	4283      	cmp	r3, r0
 80098de:	d004      	beq.n	80098ea <__swbuf_r+0x62>
 80098e0:	89a3      	ldrh	r3, [r4, #12]
 80098e2:	07db      	lsls	r3, r3, #31
 80098e4:	d506      	bpl.n	80098f4 <__swbuf_r+0x6c>
 80098e6:	2e0a      	cmp	r6, #10
 80098e8:	d104      	bne.n	80098f4 <__swbuf_r+0x6c>
 80098ea:	4621      	mov	r1, r4
 80098ec:	4628      	mov	r0, r5
 80098ee:	f000 f927 	bl	8009b40 <_fflush_r>
 80098f2:	b988      	cbnz	r0, 8009918 <__swbuf_r+0x90>
 80098f4:	4638      	mov	r0, r7
 80098f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098f8:	4b0a      	ldr	r3, [pc, #40]	; (8009924 <__swbuf_r+0x9c>)
 80098fa:	429c      	cmp	r4, r3
 80098fc:	d101      	bne.n	8009902 <__swbuf_r+0x7a>
 80098fe:	68ac      	ldr	r4, [r5, #8]
 8009900:	e7cf      	b.n	80098a2 <__swbuf_r+0x1a>
 8009902:	4b09      	ldr	r3, [pc, #36]	; (8009928 <__swbuf_r+0xa0>)
 8009904:	429c      	cmp	r4, r3
 8009906:	bf08      	it	eq
 8009908:	68ec      	ldreq	r4, [r5, #12]
 800990a:	e7ca      	b.n	80098a2 <__swbuf_r+0x1a>
 800990c:	4621      	mov	r1, r4
 800990e:	4628      	mov	r0, r5
 8009910:	f000 f81a 	bl	8009948 <__swsetup_r>
 8009914:	2800      	cmp	r0, #0
 8009916:	d0cb      	beq.n	80098b0 <__swbuf_r+0x28>
 8009918:	f04f 37ff 	mov.w	r7, #4294967295
 800991c:	e7ea      	b.n	80098f4 <__swbuf_r+0x6c>
 800991e:	bf00      	nop
 8009920:	0800b28c 	.word	0x0800b28c
 8009924:	0800b2ac 	.word	0x0800b2ac
 8009928:	0800b26c 	.word	0x0800b26c

0800992c <__ascii_wctomb>:
 800992c:	4603      	mov	r3, r0
 800992e:	4608      	mov	r0, r1
 8009930:	b141      	cbz	r1, 8009944 <__ascii_wctomb+0x18>
 8009932:	2aff      	cmp	r2, #255	; 0xff
 8009934:	d904      	bls.n	8009940 <__ascii_wctomb+0x14>
 8009936:	228a      	movs	r2, #138	; 0x8a
 8009938:	f04f 30ff 	mov.w	r0, #4294967295
 800993c:	601a      	str	r2, [r3, #0]
 800993e:	4770      	bx	lr
 8009940:	2001      	movs	r0, #1
 8009942:	700a      	strb	r2, [r1, #0]
 8009944:	4770      	bx	lr
	...

08009948 <__swsetup_r>:
 8009948:	4b32      	ldr	r3, [pc, #200]	; (8009a14 <__swsetup_r+0xcc>)
 800994a:	b570      	push	{r4, r5, r6, lr}
 800994c:	681d      	ldr	r5, [r3, #0]
 800994e:	4606      	mov	r6, r0
 8009950:	460c      	mov	r4, r1
 8009952:	b125      	cbz	r5, 800995e <__swsetup_r+0x16>
 8009954:	69ab      	ldr	r3, [r5, #24]
 8009956:	b913      	cbnz	r3, 800995e <__swsetup_r+0x16>
 8009958:	4628      	mov	r0, r5
 800995a:	f000 f985 	bl	8009c68 <__sinit>
 800995e:	4b2e      	ldr	r3, [pc, #184]	; (8009a18 <__swsetup_r+0xd0>)
 8009960:	429c      	cmp	r4, r3
 8009962:	d10f      	bne.n	8009984 <__swsetup_r+0x3c>
 8009964:	686c      	ldr	r4, [r5, #4]
 8009966:	89a3      	ldrh	r3, [r4, #12]
 8009968:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800996c:	0719      	lsls	r1, r3, #28
 800996e:	d42c      	bmi.n	80099ca <__swsetup_r+0x82>
 8009970:	06dd      	lsls	r5, r3, #27
 8009972:	d411      	bmi.n	8009998 <__swsetup_r+0x50>
 8009974:	2309      	movs	r3, #9
 8009976:	6033      	str	r3, [r6, #0]
 8009978:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800997c:	f04f 30ff 	mov.w	r0, #4294967295
 8009980:	81a3      	strh	r3, [r4, #12]
 8009982:	e03e      	b.n	8009a02 <__swsetup_r+0xba>
 8009984:	4b25      	ldr	r3, [pc, #148]	; (8009a1c <__swsetup_r+0xd4>)
 8009986:	429c      	cmp	r4, r3
 8009988:	d101      	bne.n	800998e <__swsetup_r+0x46>
 800998a:	68ac      	ldr	r4, [r5, #8]
 800998c:	e7eb      	b.n	8009966 <__swsetup_r+0x1e>
 800998e:	4b24      	ldr	r3, [pc, #144]	; (8009a20 <__swsetup_r+0xd8>)
 8009990:	429c      	cmp	r4, r3
 8009992:	bf08      	it	eq
 8009994:	68ec      	ldreq	r4, [r5, #12]
 8009996:	e7e6      	b.n	8009966 <__swsetup_r+0x1e>
 8009998:	0758      	lsls	r0, r3, #29
 800999a:	d512      	bpl.n	80099c2 <__swsetup_r+0x7a>
 800999c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800999e:	b141      	cbz	r1, 80099b2 <__swsetup_r+0x6a>
 80099a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099a4:	4299      	cmp	r1, r3
 80099a6:	d002      	beq.n	80099ae <__swsetup_r+0x66>
 80099a8:	4630      	mov	r0, r6
 80099aa:	f7fd fcd5 	bl	8007358 <_free_r>
 80099ae:	2300      	movs	r3, #0
 80099b0:	6363      	str	r3, [r4, #52]	; 0x34
 80099b2:	89a3      	ldrh	r3, [r4, #12]
 80099b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80099b8:	81a3      	strh	r3, [r4, #12]
 80099ba:	2300      	movs	r3, #0
 80099bc:	6063      	str	r3, [r4, #4]
 80099be:	6923      	ldr	r3, [r4, #16]
 80099c0:	6023      	str	r3, [r4, #0]
 80099c2:	89a3      	ldrh	r3, [r4, #12]
 80099c4:	f043 0308 	orr.w	r3, r3, #8
 80099c8:	81a3      	strh	r3, [r4, #12]
 80099ca:	6923      	ldr	r3, [r4, #16]
 80099cc:	b94b      	cbnz	r3, 80099e2 <__swsetup_r+0x9a>
 80099ce:	89a3      	ldrh	r3, [r4, #12]
 80099d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80099d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099d8:	d003      	beq.n	80099e2 <__swsetup_r+0x9a>
 80099da:	4621      	mov	r1, r4
 80099dc:	4630      	mov	r0, r6
 80099de:	f000 fa05 	bl	8009dec <__smakebuf_r>
 80099e2:	89a0      	ldrh	r0, [r4, #12]
 80099e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099e8:	f010 0301 	ands.w	r3, r0, #1
 80099ec:	d00a      	beq.n	8009a04 <__swsetup_r+0xbc>
 80099ee:	2300      	movs	r3, #0
 80099f0:	60a3      	str	r3, [r4, #8]
 80099f2:	6963      	ldr	r3, [r4, #20]
 80099f4:	425b      	negs	r3, r3
 80099f6:	61a3      	str	r3, [r4, #24]
 80099f8:	6923      	ldr	r3, [r4, #16]
 80099fa:	b943      	cbnz	r3, 8009a0e <__swsetup_r+0xc6>
 80099fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009a00:	d1ba      	bne.n	8009978 <__swsetup_r+0x30>
 8009a02:	bd70      	pop	{r4, r5, r6, pc}
 8009a04:	0781      	lsls	r1, r0, #30
 8009a06:	bf58      	it	pl
 8009a08:	6963      	ldrpl	r3, [r4, #20]
 8009a0a:	60a3      	str	r3, [r4, #8]
 8009a0c:	e7f4      	b.n	80099f8 <__swsetup_r+0xb0>
 8009a0e:	2000      	movs	r0, #0
 8009a10:	e7f7      	b.n	8009a02 <__swsetup_r+0xba>
 8009a12:	bf00      	nop
 8009a14:	20000014 	.word	0x20000014
 8009a18:	0800b28c 	.word	0x0800b28c
 8009a1c:	0800b2ac 	.word	0x0800b2ac
 8009a20:	0800b26c 	.word	0x0800b26c

08009a24 <abort>:
 8009a24:	2006      	movs	r0, #6
 8009a26:	b508      	push	{r3, lr}
 8009a28:	f000 fa50 	bl	8009ecc <raise>
 8009a2c:	2001      	movs	r0, #1
 8009a2e:	f7f8 f8fe 	bl	8001c2e <_exit>
	...

08009a34 <__sflush_r>:
 8009a34:	898a      	ldrh	r2, [r1, #12]
 8009a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a3a:	4605      	mov	r5, r0
 8009a3c:	0710      	lsls	r0, r2, #28
 8009a3e:	460c      	mov	r4, r1
 8009a40:	d458      	bmi.n	8009af4 <__sflush_r+0xc0>
 8009a42:	684b      	ldr	r3, [r1, #4]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	dc05      	bgt.n	8009a54 <__sflush_r+0x20>
 8009a48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	dc02      	bgt.n	8009a54 <__sflush_r+0x20>
 8009a4e:	2000      	movs	r0, #0
 8009a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a56:	2e00      	cmp	r6, #0
 8009a58:	d0f9      	beq.n	8009a4e <__sflush_r+0x1a>
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009a60:	682f      	ldr	r7, [r5, #0]
 8009a62:	602b      	str	r3, [r5, #0]
 8009a64:	d032      	beq.n	8009acc <__sflush_r+0x98>
 8009a66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a68:	89a3      	ldrh	r3, [r4, #12]
 8009a6a:	075a      	lsls	r2, r3, #29
 8009a6c:	d505      	bpl.n	8009a7a <__sflush_r+0x46>
 8009a6e:	6863      	ldr	r3, [r4, #4]
 8009a70:	1ac0      	subs	r0, r0, r3
 8009a72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a74:	b10b      	cbz	r3, 8009a7a <__sflush_r+0x46>
 8009a76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a78:	1ac0      	subs	r0, r0, r3
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a80:	4628      	mov	r0, r5
 8009a82:	6a21      	ldr	r1, [r4, #32]
 8009a84:	47b0      	blx	r6
 8009a86:	1c43      	adds	r3, r0, #1
 8009a88:	89a3      	ldrh	r3, [r4, #12]
 8009a8a:	d106      	bne.n	8009a9a <__sflush_r+0x66>
 8009a8c:	6829      	ldr	r1, [r5, #0]
 8009a8e:	291d      	cmp	r1, #29
 8009a90:	d82c      	bhi.n	8009aec <__sflush_r+0xb8>
 8009a92:	4a2a      	ldr	r2, [pc, #168]	; (8009b3c <__sflush_r+0x108>)
 8009a94:	40ca      	lsrs	r2, r1
 8009a96:	07d6      	lsls	r6, r2, #31
 8009a98:	d528      	bpl.n	8009aec <__sflush_r+0xb8>
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	6062      	str	r2, [r4, #4]
 8009a9e:	6922      	ldr	r2, [r4, #16]
 8009aa0:	04d9      	lsls	r1, r3, #19
 8009aa2:	6022      	str	r2, [r4, #0]
 8009aa4:	d504      	bpl.n	8009ab0 <__sflush_r+0x7c>
 8009aa6:	1c42      	adds	r2, r0, #1
 8009aa8:	d101      	bne.n	8009aae <__sflush_r+0x7a>
 8009aaa:	682b      	ldr	r3, [r5, #0]
 8009aac:	b903      	cbnz	r3, 8009ab0 <__sflush_r+0x7c>
 8009aae:	6560      	str	r0, [r4, #84]	; 0x54
 8009ab0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ab2:	602f      	str	r7, [r5, #0]
 8009ab4:	2900      	cmp	r1, #0
 8009ab6:	d0ca      	beq.n	8009a4e <__sflush_r+0x1a>
 8009ab8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009abc:	4299      	cmp	r1, r3
 8009abe:	d002      	beq.n	8009ac6 <__sflush_r+0x92>
 8009ac0:	4628      	mov	r0, r5
 8009ac2:	f7fd fc49 	bl	8007358 <_free_r>
 8009ac6:	2000      	movs	r0, #0
 8009ac8:	6360      	str	r0, [r4, #52]	; 0x34
 8009aca:	e7c1      	b.n	8009a50 <__sflush_r+0x1c>
 8009acc:	6a21      	ldr	r1, [r4, #32]
 8009ace:	2301      	movs	r3, #1
 8009ad0:	4628      	mov	r0, r5
 8009ad2:	47b0      	blx	r6
 8009ad4:	1c41      	adds	r1, r0, #1
 8009ad6:	d1c7      	bne.n	8009a68 <__sflush_r+0x34>
 8009ad8:	682b      	ldr	r3, [r5, #0]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d0c4      	beq.n	8009a68 <__sflush_r+0x34>
 8009ade:	2b1d      	cmp	r3, #29
 8009ae0:	d001      	beq.n	8009ae6 <__sflush_r+0xb2>
 8009ae2:	2b16      	cmp	r3, #22
 8009ae4:	d101      	bne.n	8009aea <__sflush_r+0xb6>
 8009ae6:	602f      	str	r7, [r5, #0]
 8009ae8:	e7b1      	b.n	8009a4e <__sflush_r+0x1a>
 8009aea:	89a3      	ldrh	r3, [r4, #12]
 8009aec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009af0:	81a3      	strh	r3, [r4, #12]
 8009af2:	e7ad      	b.n	8009a50 <__sflush_r+0x1c>
 8009af4:	690f      	ldr	r7, [r1, #16]
 8009af6:	2f00      	cmp	r7, #0
 8009af8:	d0a9      	beq.n	8009a4e <__sflush_r+0x1a>
 8009afa:	0793      	lsls	r3, r2, #30
 8009afc:	bf18      	it	ne
 8009afe:	2300      	movne	r3, #0
 8009b00:	680e      	ldr	r6, [r1, #0]
 8009b02:	bf08      	it	eq
 8009b04:	694b      	ldreq	r3, [r1, #20]
 8009b06:	eba6 0807 	sub.w	r8, r6, r7
 8009b0a:	600f      	str	r7, [r1, #0]
 8009b0c:	608b      	str	r3, [r1, #8]
 8009b0e:	f1b8 0f00 	cmp.w	r8, #0
 8009b12:	dd9c      	ble.n	8009a4e <__sflush_r+0x1a>
 8009b14:	4643      	mov	r3, r8
 8009b16:	463a      	mov	r2, r7
 8009b18:	4628      	mov	r0, r5
 8009b1a:	6a21      	ldr	r1, [r4, #32]
 8009b1c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009b1e:	47b0      	blx	r6
 8009b20:	2800      	cmp	r0, #0
 8009b22:	dc06      	bgt.n	8009b32 <__sflush_r+0xfe>
 8009b24:	89a3      	ldrh	r3, [r4, #12]
 8009b26:	f04f 30ff 	mov.w	r0, #4294967295
 8009b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b2e:	81a3      	strh	r3, [r4, #12]
 8009b30:	e78e      	b.n	8009a50 <__sflush_r+0x1c>
 8009b32:	4407      	add	r7, r0
 8009b34:	eba8 0800 	sub.w	r8, r8, r0
 8009b38:	e7e9      	b.n	8009b0e <__sflush_r+0xda>
 8009b3a:	bf00      	nop
 8009b3c:	20400001 	.word	0x20400001

08009b40 <_fflush_r>:
 8009b40:	b538      	push	{r3, r4, r5, lr}
 8009b42:	690b      	ldr	r3, [r1, #16]
 8009b44:	4605      	mov	r5, r0
 8009b46:	460c      	mov	r4, r1
 8009b48:	b913      	cbnz	r3, 8009b50 <_fflush_r+0x10>
 8009b4a:	2500      	movs	r5, #0
 8009b4c:	4628      	mov	r0, r5
 8009b4e:	bd38      	pop	{r3, r4, r5, pc}
 8009b50:	b118      	cbz	r0, 8009b5a <_fflush_r+0x1a>
 8009b52:	6983      	ldr	r3, [r0, #24]
 8009b54:	b90b      	cbnz	r3, 8009b5a <_fflush_r+0x1a>
 8009b56:	f000 f887 	bl	8009c68 <__sinit>
 8009b5a:	4b14      	ldr	r3, [pc, #80]	; (8009bac <_fflush_r+0x6c>)
 8009b5c:	429c      	cmp	r4, r3
 8009b5e:	d11b      	bne.n	8009b98 <_fflush_r+0x58>
 8009b60:	686c      	ldr	r4, [r5, #4]
 8009b62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d0ef      	beq.n	8009b4a <_fflush_r+0xa>
 8009b6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b6c:	07d0      	lsls	r0, r2, #31
 8009b6e:	d404      	bmi.n	8009b7a <_fflush_r+0x3a>
 8009b70:	0599      	lsls	r1, r3, #22
 8009b72:	d402      	bmi.n	8009b7a <_fflush_r+0x3a>
 8009b74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b76:	f7ff fcdc 	bl	8009532 <__retarget_lock_acquire_recursive>
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	4621      	mov	r1, r4
 8009b7e:	f7ff ff59 	bl	8009a34 <__sflush_r>
 8009b82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b84:	4605      	mov	r5, r0
 8009b86:	07da      	lsls	r2, r3, #31
 8009b88:	d4e0      	bmi.n	8009b4c <_fflush_r+0xc>
 8009b8a:	89a3      	ldrh	r3, [r4, #12]
 8009b8c:	059b      	lsls	r3, r3, #22
 8009b8e:	d4dd      	bmi.n	8009b4c <_fflush_r+0xc>
 8009b90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b92:	f7ff fccf 	bl	8009534 <__retarget_lock_release_recursive>
 8009b96:	e7d9      	b.n	8009b4c <_fflush_r+0xc>
 8009b98:	4b05      	ldr	r3, [pc, #20]	; (8009bb0 <_fflush_r+0x70>)
 8009b9a:	429c      	cmp	r4, r3
 8009b9c:	d101      	bne.n	8009ba2 <_fflush_r+0x62>
 8009b9e:	68ac      	ldr	r4, [r5, #8]
 8009ba0:	e7df      	b.n	8009b62 <_fflush_r+0x22>
 8009ba2:	4b04      	ldr	r3, [pc, #16]	; (8009bb4 <_fflush_r+0x74>)
 8009ba4:	429c      	cmp	r4, r3
 8009ba6:	bf08      	it	eq
 8009ba8:	68ec      	ldreq	r4, [r5, #12]
 8009baa:	e7da      	b.n	8009b62 <_fflush_r+0x22>
 8009bac:	0800b28c 	.word	0x0800b28c
 8009bb0:	0800b2ac 	.word	0x0800b2ac
 8009bb4:	0800b26c 	.word	0x0800b26c

08009bb8 <std>:
 8009bb8:	2300      	movs	r3, #0
 8009bba:	b510      	push	{r4, lr}
 8009bbc:	4604      	mov	r4, r0
 8009bbe:	e9c0 3300 	strd	r3, r3, [r0]
 8009bc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009bc6:	6083      	str	r3, [r0, #8]
 8009bc8:	8181      	strh	r1, [r0, #12]
 8009bca:	6643      	str	r3, [r0, #100]	; 0x64
 8009bcc:	81c2      	strh	r2, [r0, #14]
 8009bce:	6183      	str	r3, [r0, #24]
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	2208      	movs	r2, #8
 8009bd4:	305c      	adds	r0, #92	; 0x5c
 8009bd6:	f7fd fbb7 	bl	8007348 <memset>
 8009bda:	4b05      	ldr	r3, [pc, #20]	; (8009bf0 <std+0x38>)
 8009bdc:	6224      	str	r4, [r4, #32]
 8009bde:	6263      	str	r3, [r4, #36]	; 0x24
 8009be0:	4b04      	ldr	r3, [pc, #16]	; (8009bf4 <std+0x3c>)
 8009be2:	62a3      	str	r3, [r4, #40]	; 0x28
 8009be4:	4b04      	ldr	r3, [pc, #16]	; (8009bf8 <std+0x40>)
 8009be6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009be8:	4b04      	ldr	r3, [pc, #16]	; (8009bfc <std+0x44>)
 8009bea:	6323      	str	r3, [r4, #48]	; 0x30
 8009bec:	bd10      	pop	{r4, pc}
 8009bee:	bf00      	nop
 8009bf0:	08009f05 	.word	0x08009f05
 8009bf4:	08009f27 	.word	0x08009f27
 8009bf8:	08009f5f 	.word	0x08009f5f
 8009bfc:	08009f83 	.word	0x08009f83

08009c00 <_cleanup_r>:
 8009c00:	4901      	ldr	r1, [pc, #4]	; (8009c08 <_cleanup_r+0x8>)
 8009c02:	f000 b8af 	b.w	8009d64 <_fwalk_reent>
 8009c06:	bf00      	nop
 8009c08:	08009b41 	.word	0x08009b41

08009c0c <__sfmoreglue>:
 8009c0c:	b570      	push	{r4, r5, r6, lr}
 8009c0e:	2568      	movs	r5, #104	; 0x68
 8009c10:	1e4a      	subs	r2, r1, #1
 8009c12:	4355      	muls	r5, r2
 8009c14:	460e      	mov	r6, r1
 8009c16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009c1a:	f7fd fbe9 	bl	80073f0 <_malloc_r>
 8009c1e:	4604      	mov	r4, r0
 8009c20:	b140      	cbz	r0, 8009c34 <__sfmoreglue+0x28>
 8009c22:	2100      	movs	r1, #0
 8009c24:	e9c0 1600 	strd	r1, r6, [r0]
 8009c28:	300c      	adds	r0, #12
 8009c2a:	60a0      	str	r0, [r4, #8]
 8009c2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009c30:	f7fd fb8a 	bl	8007348 <memset>
 8009c34:	4620      	mov	r0, r4
 8009c36:	bd70      	pop	{r4, r5, r6, pc}

08009c38 <__sfp_lock_acquire>:
 8009c38:	4801      	ldr	r0, [pc, #4]	; (8009c40 <__sfp_lock_acquire+0x8>)
 8009c3a:	f7ff bc7a 	b.w	8009532 <__retarget_lock_acquire_recursive>
 8009c3e:	bf00      	nop
 8009c40:	2000057c 	.word	0x2000057c

08009c44 <__sfp_lock_release>:
 8009c44:	4801      	ldr	r0, [pc, #4]	; (8009c4c <__sfp_lock_release+0x8>)
 8009c46:	f7ff bc75 	b.w	8009534 <__retarget_lock_release_recursive>
 8009c4a:	bf00      	nop
 8009c4c:	2000057c 	.word	0x2000057c

08009c50 <__sinit_lock_acquire>:
 8009c50:	4801      	ldr	r0, [pc, #4]	; (8009c58 <__sinit_lock_acquire+0x8>)
 8009c52:	f7ff bc6e 	b.w	8009532 <__retarget_lock_acquire_recursive>
 8009c56:	bf00      	nop
 8009c58:	20000577 	.word	0x20000577

08009c5c <__sinit_lock_release>:
 8009c5c:	4801      	ldr	r0, [pc, #4]	; (8009c64 <__sinit_lock_release+0x8>)
 8009c5e:	f7ff bc69 	b.w	8009534 <__retarget_lock_release_recursive>
 8009c62:	bf00      	nop
 8009c64:	20000577 	.word	0x20000577

08009c68 <__sinit>:
 8009c68:	b510      	push	{r4, lr}
 8009c6a:	4604      	mov	r4, r0
 8009c6c:	f7ff fff0 	bl	8009c50 <__sinit_lock_acquire>
 8009c70:	69a3      	ldr	r3, [r4, #24]
 8009c72:	b11b      	cbz	r3, 8009c7c <__sinit+0x14>
 8009c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c78:	f7ff bff0 	b.w	8009c5c <__sinit_lock_release>
 8009c7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009c80:	6523      	str	r3, [r4, #80]	; 0x50
 8009c82:	4b13      	ldr	r3, [pc, #76]	; (8009cd0 <__sinit+0x68>)
 8009c84:	4a13      	ldr	r2, [pc, #76]	; (8009cd4 <__sinit+0x6c>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c8a:	42a3      	cmp	r3, r4
 8009c8c:	bf08      	it	eq
 8009c8e:	2301      	moveq	r3, #1
 8009c90:	4620      	mov	r0, r4
 8009c92:	bf08      	it	eq
 8009c94:	61a3      	streq	r3, [r4, #24]
 8009c96:	f000 f81f 	bl	8009cd8 <__sfp>
 8009c9a:	6060      	str	r0, [r4, #4]
 8009c9c:	4620      	mov	r0, r4
 8009c9e:	f000 f81b 	bl	8009cd8 <__sfp>
 8009ca2:	60a0      	str	r0, [r4, #8]
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	f000 f817 	bl	8009cd8 <__sfp>
 8009caa:	2200      	movs	r2, #0
 8009cac:	2104      	movs	r1, #4
 8009cae:	60e0      	str	r0, [r4, #12]
 8009cb0:	6860      	ldr	r0, [r4, #4]
 8009cb2:	f7ff ff81 	bl	8009bb8 <std>
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	2109      	movs	r1, #9
 8009cba:	68a0      	ldr	r0, [r4, #8]
 8009cbc:	f7ff ff7c 	bl	8009bb8 <std>
 8009cc0:	2202      	movs	r2, #2
 8009cc2:	2112      	movs	r1, #18
 8009cc4:	68e0      	ldr	r0, [r4, #12]
 8009cc6:	f7ff ff77 	bl	8009bb8 <std>
 8009cca:	2301      	movs	r3, #1
 8009ccc:	61a3      	str	r3, [r4, #24]
 8009cce:	e7d1      	b.n	8009c74 <__sinit+0xc>
 8009cd0:	0800aeec 	.word	0x0800aeec
 8009cd4:	08009c01 	.word	0x08009c01

08009cd8 <__sfp>:
 8009cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cda:	4607      	mov	r7, r0
 8009cdc:	f7ff ffac 	bl	8009c38 <__sfp_lock_acquire>
 8009ce0:	4b1e      	ldr	r3, [pc, #120]	; (8009d5c <__sfp+0x84>)
 8009ce2:	681e      	ldr	r6, [r3, #0]
 8009ce4:	69b3      	ldr	r3, [r6, #24]
 8009ce6:	b913      	cbnz	r3, 8009cee <__sfp+0x16>
 8009ce8:	4630      	mov	r0, r6
 8009cea:	f7ff ffbd 	bl	8009c68 <__sinit>
 8009cee:	3648      	adds	r6, #72	; 0x48
 8009cf0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009cf4:	3b01      	subs	r3, #1
 8009cf6:	d503      	bpl.n	8009d00 <__sfp+0x28>
 8009cf8:	6833      	ldr	r3, [r6, #0]
 8009cfa:	b30b      	cbz	r3, 8009d40 <__sfp+0x68>
 8009cfc:	6836      	ldr	r6, [r6, #0]
 8009cfe:	e7f7      	b.n	8009cf0 <__sfp+0x18>
 8009d00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009d04:	b9d5      	cbnz	r5, 8009d3c <__sfp+0x64>
 8009d06:	4b16      	ldr	r3, [pc, #88]	; (8009d60 <__sfp+0x88>)
 8009d08:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009d0c:	60e3      	str	r3, [r4, #12]
 8009d0e:	6665      	str	r5, [r4, #100]	; 0x64
 8009d10:	f7ff fc0e 	bl	8009530 <__retarget_lock_init_recursive>
 8009d14:	f7ff ff96 	bl	8009c44 <__sfp_lock_release>
 8009d18:	2208      	movs	r2, #8
 8009d1a:	4629      	mov	r1, r5
 8009d1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009d20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009d24:	6025      	str	r5, [r4, #0]
 8009d26:	61a5      	str	r5, [r4, #24]
 8009d28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009d2c:	f7fd fb0c 	bl	8007348 <memset>
 8009d30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009d34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009d38:	4620      	mov	r0, r4
 8009d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d3c:	3468      	adds	r4, #104	; 0x68
 8009d3e:	e7d9      	b.n	8009cf4 <__sfp+0x1c>
 8009d40:	2104      	movs	r1, #4
 8009d42:	4638      	mov	r0, r7
 8009d44:	f7ff ff62 	bl	8009c0c <__sfmoreglue>
 8009d48:	4604      	mov	r4, r0
 8009d4a:	6030      	str	r0, [r6, #0]
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	d1d5      	bne.n	8009cfc <__sfp+0x24>
 8009d50:	f7ff ff78 	bl	8009c44 <__sfp_lock_release>
 8009d54:	230c      	movs	r3, #12
 8009d56:	603b      	str	r3, [r7, #0]
 8009d58:	e7ee      	b.n	8009d38 <__sfp+0x60>
 8009d5a:	bf00      	nop
 8009d5c:	0800aeec 	.word	0x0800aeec
 8009d60:	ffff0001 	.word	0xffff0001

08009d64 <_fwalk_reent>:
 8009d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d68:	4606      	mov	r6, r0
 8009d6a:	4688      	mov	r8, r1
 8009d6c:	2700      	movs	r7, #0
 8009d6e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d76:	f1b9 0901 	subs.w	r9, r9, #1
 8009d7a:	d505      	bpl.n	8009d88 <_fwalk_reent+0x24>
 8009d7c:	6824      	ldr	r4, [r4, #0]
 8009d7e:	2c00      	cmp	r4, #0
 8009d80:	d1f7      	bne.n	8009d72 <_fwalk_reent+0xe>
 8009d82:	4638      	mov	r0, r7
 8009d84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d88:	89ab      	ldrh	r3, [r5, #12]
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	d907      	bls.n	8009d9e <_fwalk_reent+0x3a>
 8009d8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d92:	3301      	adds	r3, #1
 8009d94:	d003      	beq.n	8009d9e <_fwalk_reent+0x3a>
 8009d96:	4629      	mov	r1, r5
 8009d98:	4630      	mov	r0, r6
 8009d9a:	47c0      	blx	r8
 8009d9c:	4307      	orrs	r7, r0
 8009d9e:	3568      	adds	r5, #104	; 0x68
 8009da0:	e7e9      	b.n	8009d76 <_fwalk_reent+0x12>

08009da2 <__swhatbuf_r>:
 8009da2:	b570      	push	{r4, r5, r6, lr}
 8009da4:	460e      	mov	r6, r1
 8009da6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009daa:	4614      	mov	r4, r2
 8009dac:	2900      	cmp	r1, #0
 8009dae:	461d      	mov	r5, r3
 8009db0:	b096      	sub	sp, #88	; 0x58
 8009db2:	da07      	bge.n	8009dc4 <__swhatbuf_r+0x22>
 8009db4:	2300      	movs	r3, #0
 8009db6:	602b      	str	r3, [r5, #0]
 8009db8:	89b3      	ldrh	r3, [r6, #12]
 8009dba:	061a      	lsls	r2, r3, #24
 8009dbc:	d410      	bmi.n	8009de0 <__swhatbuf_r+0x3e>
 8009dbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dc2:	e00e      	b.n	8009de2 <__swhatbuf_r+0x40>
 8009dc4:	466a      	mov	r2, sp
 8009dc6:	f000 f903 	bl	8009fd0 <_fstat_r>
 8009dca:	2800      	cmp	r0, #0
 8009dcc:	dbf2      	blt.n	8009db4 <__swhatbuf_r+0x12>
 8009dce:	9a01      	ldr	r2, [sp, #4]
 8009dd0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009dd4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009dd8:	425a      	negs	r2, r3
 8009dda:	415a      	adcs	r2, r3
 8009ddc:	602a      	str	r2, [r5, #0]
 8009dde:	e7ee      	b.n	8009dbe <__swhatbuf_r+0x1c>
 8009de0:	2340      	movs	r3, #64	; 0x40
 8009de2:	2000      	movs	r0, #0
 8009de4:	6023      	str	r3, [r4, #0]
 8009de6:	b016      	add	sp, #88	; 0x58
 8009de8:	bd70      	pop	{r4, r5, r6, pc}
	...

08009dec <__smakebuf_r>:
 8009dec:	898b      	ldrh	r3, [r1, #12]
 8009dee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009df0:	079d      	lsls	r5, r3, #30
 8009df2:	4606      	mov	r6, r0
 8009df4:	460c      	mov	r4, r1
 8009df6:	d507      	bpl.n	8009e08 <__smakebuf_r+0x1c>
 8009df8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009dfc:	6023      	str	r3, [r4, #0]
 8009dfe:	6123      	str	r3, [r4, #16]
 8009e00:	2301      	movs	r3, #1
 8009e02:	6163      	str	r3, [r4, #20]
 8009e04:	b002      	add	sp, #8
 8009e06:	bd70      	pop	{r4, r5, r6, pc}
 8009e08:	466a      	mov	r2, sp
 8009e0a:	ab01      	add	r3, sp, #4
 8009e0c:	f7ff ffc9 	bl	8009da2 <__swhatbuf_r>
 8009e10:	9900      	ldr	r1, [sp, #0]
 8009e12:	4605      	mov	r5, r0
 8009e14:	4630      	mov	r0, r6
 8009e16:	f7fd faeb 	bl	80073f0 <_malloc_r>
 8009e1a:	b948      	cbnz	r0, 8009e30 <__smakebuf_r+0x44>
 8009e1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e20:	059a      	lsls	r2, r3, #22
 8009e22:	d4ef      	bmi.n	8009e04 <__smakebuf_r+0x18>
 8009e24:	f023 0303 	bic.w	r3, r3, #3
 8009e28:	f043 0302 	orr.w	r3, r3, #2
 8009e2c:	81a3      	strh	r3, [r4, #12]
 8009e2e:	e7e3      	b.n	8009df8 <__smakebuf_r+0xc>
 8009e30:	4b0d      	ldr	r3, [pc, #52]	; (8009e68 <__smakebuf_r+0x7c>)
 8009e32:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e34:	89a3      	ldrh	r3, [r4, #12]
 8009e36:	6020      	str	r0, [r4, #0]
 8009e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e3c:	81a3      	strh	r3, [r4, #12]
 8009e3e:	9b00      	ldr	r3, [sp, #0]
 8009e40:	6120      	str	r0, [r4, #16]
 8009e42:	6163      	str	r3, [r4, #20]
 8009e44:	9b01      	ldr	r3, [sp, #4]
 8009e46:	b15b      	cbz	r3, 8009e60 <__smakebuf_r+0x74>
 8009e48:	4630      	mov	r0, r6
 8009e4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e4e:	f000 f8d1 	bl	8009ff4 <_isatty_r>
 8009e52:	b128      	cbz	r0, 8009e60 <__smakebuf_r+0x74>
 8009e54:	89a3      	ldrh	r3, [r4, #12]
 8009e56:	f023 0303 	bic.w	r3, r3, #3
 8009e5a:	f043 0301 	orr.w	r3, r3, #1
 8009e5e:	81a3      	strh	r3, [r4, #12]
 8009e60:	89a0      	ldrh	r0, [r4, #12]
 8009e62:	4305      	orrs	r5, r0
 8009e64:	81a5      	strh	r5, [r4, #12]
 8009e66:	e7cd      	b.n	8009e04 <__smakebuf_r+0x18>
 8009e68:	08009c01 	.word	0x08009c01

08009e6c <_malloc_usable_size_r>:
 8009e6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e70:	1f18      	subs	r0, r3, #4
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	bfbc      	itt	lt
 8009e76:	580b      	ldrlt	r3, [r1, r0]
 8009e78:	18c0      	addlt	r0, r0, r3
 8009e7a:	4770      	bx	lr

08009e7c <_raise_r>:
 8009e7c:	291f      	cmp	r1, #31
 8009e7e:	b538      	push	{r3, r4, r5, lr}
 8009e80:	4604      	mov	r4, r0
 8009e82:	460d      	mov	r5, r1
 8009e84:	d904      	bls.n	8009e90 <_raise_r+0x14>
 8009e86:	2316      	movs	r3, #22
 8009e88:	6003      	str	r3, [r0, #0]
 8009e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e8e:	bd38      	pop	{r3, r4, r5, pc}
 8009e90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009e92:	b112      	cbz	r2, 8009e9a <_raise_r+0x1e>
 8009e94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e98:	b94b      	cbnz	r3, 8009eae <_raise_r+0x32>
 8009e9a:	4620      	mov	r0, r4
 8009e9c:	f000 f830 	bl	8009f00 <_getpid_r>
 8009ea0:	462a      	mov	r2, r5
 8009ea2:	4601      	mov	r1, r0
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009eaa:	f000 b817 	b.w	8009edc <_kill_r>
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d00a      	beq.n	8009ec8 <_raise_r+0x4c>
 8009eb2:	1c59      	adds	r1, r3, #1
 8009eb4:	d103      	bne.n	8009ebe <_raise_r+0x42>
 8009eb6:	2316      	movs	r3, #22
 8009eb8:	6003      	str	r3, [r0, #0]
 8009eba:	2001      	movs	r0, #1
 8009ebc:	e7e7      	b.n	8009e8e <_raise_r+0x12>
 8009ebe:	2400      	movs	r4, #0
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009ec6:	4798      	blx	r3
 8009ec8:	2000      	movs	r0, #0
 8009eca:	e7e0      	b.n	8009e8e <_raise_r+0x12>

08009ecc <raise>:
 8009ecc:	4b02      	ldr	r3, [pc, #8]	; (8009ed8 <raise+0xc>)
 8009ece:	4601      	mov	r1, r0
 8009ed0:	6818      	ldr	r0, [r3, #0]
 8009ed2:	f7ff bfd3 	b.w	8009e7c <_raise_r>
 8009ed6:	bf00      	nop
 8009ed8:	20000014 	.word	0x20000014

08009edc <_kill_r>:
 8009edc:	b538      	push	{r3, r4, r5, lr}
 8009ede:	2300      	movs	r3, #0
 8009ee0:	4d06      	ldr	r5, [pc, #24]	; (8009efc <_kill_r+0x20>)
 8009ee2:	4604      	mov	r4, r0
 8009ee4:	4608      	mov	r0, r1
 8009ee6:	4611      	mov	r1, r2
 8009ee8:	602b      	str	r3, [r5, #0]
 8009eea:	f7f7 fe90 	bl	8001c0e <_kill>
 8009eee:	1c43      	adds	r3, r0, #1
 8009ef0:	d102      	bne.n	8009ef8 <_kill_r+0x1c>
 8009ef2:	682b      	ldr	r3, [r5, #0]
 8009ef4:	b103      	cbz	r3, 8009ef8 <_kill_r+0x1c>
 8009ef6:	6023      	str	r3, [r4, #0]
 8009ef8:	bd38      	pop	{r3, r4, r5, pc}
 8009efa:	bf00      	nop
 8009efc:	20000570 	.word	0x20000570

08009f00 <_getpid_r>:
 8009f00:	f7f7 be7e 	b.w	8001c00 <_getpid>

08009f04 <__sread>:
 8009f04:	b510      	push	{r4, lr}
 8009f06:	460c      	mov	r4, r1
 8009f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f0c:	f000 f894 	bl	800a038 <_read_r>
 8009f10:	2800      	cmp	r0, #0
 8009f12:	bfab      	itete	ge
 8009f14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009f16:	89a3      	ldrhlt	r3, [r4, #12]
 8009f18:	181b      	addge	r3, r3, r0
 8009f1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f1e:	bfac      	ite	ge
 8009f20:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f22:	81a3      	strhlt	r3, [r4, #12]
 8009f24:	bd10      	pop	{r4, pc}

08009f26 <__swrite>:
 8009f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f2a:	461f      	mov	r7, r3
 8009f2c:	898b      	ldrh	r3, [r1, #12]
 8009f2e:	4605      	mov	r5, r0
 8009f30:	05db      	lsls	r3, r3, #23
 8009f32:	460c      	mov	r4, r1
 8009f34:	4616      	mov	r6, r2
 8009f36:	d505      	bpl.n	8009f44 <__swrite+0x1e>
 8009f38:	2302      	movs	r3, #2
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f40:	f000 f868 	bl	800a014 <_lseek_r>
 8009f44:	89a3      	ldrh	r3, [r4, #12]
 8009f46:	4632      	mov	r2, r6
 8009f48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f4c:	81a3      	strh	r3, [r4, #12]
 8009f4e:	4628      	mov	r0, r5
 8009f50:	463b      	mov	r3, r7
 8009f52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f5a:	f000 b817 	b.w	8009f8c <_write_r>

08009f5e <__sseek>:
 8009f5e:	b510      	push	{r4, lr}
 8009f60:	460c      	mov	r4, r1
 8009f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f66:	f000 f855 	bl	800a014 <_lseek_r>
 8009f6a:	1c43      	adds	r3, r0, #1
 8009f6c:	89a3      	ldrh	r3, [r4, #12]
 8009f6e:	bf15      	itete	ne
 8009f70:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f7a:	81a3      	strheq	r3, [r4, #12]
 8009f7c:	bf18      	it	ne
 8009f7e:	81a3      	strhne	r3, [r4, #12]
 8009f80:	bd10      	pop	{r4, pc}

08009f82 <__sclose>:
 8009f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f86:	f000 b813 	b.w	8009fb0 <_close_r>
	...

08009f8c <_write_r>:
 8009f8c:	b538      	push	{r3, r4, r5, lr}
 8009f8e:	4604      	mov	r4, r0
 8009f90:	4608      	mov	r0, r1
 8009f92:	4611      	mov	r1, r2
 8009f94:	2200      	movs	r2, #0
 8009f96:	4d05      	ldr	r5, [pc, #20]	; (8009fac <_write_r+0x20>)
 8009f98:	602a      	str	r2, [r5, #0]
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	f7f7 fe6e 	bl	8001c7c <_write>
 8009fa0:	1c43      	adds	r3, r0, #1
 8009fa2:	d102      	bne.n	8009faa <_write_r+0x1e>
 8009fa4:	682b      	ldr	r3, [r5, #0]
 8009fa6:	b103      	cbz	r3, 8009faa <_write_r+0x1e>
 8009fa8:	6023      	str	r3, [r4, #0]
 8009faa:	bd38      	pop	{r3, r4, r5, pc}
 8009fac:	20000570 	.word	0x20000570

08009fb0 <_close_r>:
 8009fb0:	b538      	push	{r3, r4, r5, lr}
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	4d05      	ldr	r5, [pc, #20]	; (8009fcc <_close_r+0x1c>)
 8009fb6:	4604      	mov	r4, r0
 8009fb8:	4608      	mov	r0, r1
 8009fba:	602b      	str	r3, [r5, #0]
 8009fbc:	f7f7 fe7a 	bl	8001cb4 <_close>
 8009fc0:	1c43      	adds	r3, r0, #1
 8009fc2:	d102      	bne.n	8009fca <_close_r+0x1a>
 8009fc4:	682b      	ldr	r3, [r5, #0]
 8009fc6:	b103      	cbz	r3, 8009fca <_close_r+0x1a>
 8009fc8:	6023      	str	r3, [r4, #0]
 8009fca:	bd38      	pop	{r3, r4, r5, pc}
 8009fcc:	20000570 	.word	0x20000570

08009fd0 <_fstat_r>:
 8009fd0:	b538      	push	{r3, r4, r5, lr}
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	4d06      	ldr	r5, [pc, #24]	; (8009ff0 <_fstat_r+0x20>)
 8009fd6:	4604      	mov	r4, r0
 8009fd8:	4608      	mov	r0, r1
 8009fda:	4611      	mov	r1, r2
 8009fdc:	602b      	str	r3, [r5, #0]
 8009fde:	f7f7 fe74 	bl	8001cca <_fstat>
 8009fe2:	1c43      	adds	r3, r0, #1
 8009fe4:	d102      	bne.n	8009fec <_fstat_r+0x1c>
 8009fe6:	682b      	ldr	r3, [r5, #0]
 8009fe8:	b103      	cbz	r3, 8009fec <_fstat_r+0x1c>
 8009fea:	6023      	str	r3, [r4, #0]
 8009fec:	bd38      	pop	{r3, r4, r5, pc}
 8009fee:	bf00      	nop
 8009ff0:	20000570 	.word	0x20000570

08009ff4 <_isatty_r>:
 8009ff4:	b538      	push	{r3, r4, r5, lr}
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	4d05      	ldr	r5, [pc, #20]	; (800a010 <_isatty_r+0x1c>)
 8009ffa:	4604      	mov	r4, r0
 8009ffc:	4608      	mov	r0, r1
 8009ffe:	602b      	str	r3, [r5, #0]
 800a000:	f7f7 fe72 	bl	8001ce8 <_isatty>
 800a004:	1c43      	adds	r3, r0, #1
 800a006:	d102      	bne.n	800a00e <_isatty_r+0x1a>
 800a008:	682b      	ldr	r3, [r5, #0]
 800a00a:	b103      	cbz	r3, 800a00e <_isatty_r+0x1a>
 800a00c:	6023      	str	r3, [r4, #0]
 800a00e:	bd38      	pop	{r3, r4, r5, pc}
 800a010:	20000570 	.word	0x20000570

0800a014 <_lseek_r>:
 800a014:	b538      	push	{r3, r4, r5, lr}
 800a016:	4604      	mov	r4, r0
 800a018:	4608      	mov	r0, r1
 800a01a:	4611      	mov	r1, r2
 800a01c:	2200      	movs	r2, #0
 800a01e:	4d05      	ldr	r5, [pc, #20]	; (800a034 <_lseek_r+0x20>)
 800a020:	602a      	str	r2, [r5, #0]
 800a022:	461a      	mov	r2, r3
 800a024:	f7f7 fe6a 	bl	8001cfc <_lseek>
 800a028:	1c43      	adds	r3, r0, #1
 800a02a:	d102      	bne.n	800a032 <_lseek_r+0x1e>
 800a02c:	682b      	ldr	r3, [r5, #0]
 800a02e:	b103      	cbz	r3, 800a032 <_lseek_r+0x1e>
 800a030:	6023      	str	r3, [r4, #0]
 800a032:	bd38      	pop	{r3, r4, r5, pc}
 800a034:	20000570 	.word	0x20000570

0800a038 <_read_r>:
 800a038:	b538      	push	{r3, r4, r5, lr}
 800a03a:	4604      	mov	r4, r0
 800a03c:	4608      	mov	r0, r1
 800a03e:	4611      	mov	r1, r2
 800a040:	2200      	movs	r2, #0
 800a042:	4d05      	ldr	r5, [pc, #20]	; (800a058 <_read_r+0x20>)
 800a044:	602a      	str	r2, [r5, #0]
 800a046:	461a      	mov	r2, r3
 800a048:	f7f7 fdfb 	bl	8001c42 <_read>
 800a04c:	1c43      	adds	r3, r0, #1
 800a04e:	d102      	bne.n	800a056 <_read_r+0x1e>
 800a050:	682b      	ldr	r3, [r5, #0]
 800a052:	b103      	cbz	r3, 800a056 <_read_r+0x1e>
 800a054:	6023      	str	r3, [r4, #0]
 800a056:	bd38      	pop	{r3, r4, r5, pc}
 800a058:	20000570 	.word	0x20000570

0800a05c <_init>:
 800a05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a05e:	bf00      	nop
 800a060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a062:	bc08      	pop	{r3}
 800a064:	469e      	mov	lr, r3
 800a066:	4770      	bx	lr

0800a068 <_fini>:
 800a068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a06a:	bf00      	nop
 800a06c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a06e:	bc08      	pop	{r3}
 800a070:	469e      	mov	lr, r3
 800a072:	4770      	bx	lr
