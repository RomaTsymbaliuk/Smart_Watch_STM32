
Watch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a964  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019a4  0800aa78  0800aa78  0001aa78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c41c  0800c41c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800c41c  0800c41c  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c41c  0800c41c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c41c  0800c41c  0001c41c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c420  0800c420  0001c420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800c424  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  200001ec  0800c610  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  0800c610  00020480  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f14  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003104  00000000  00000000  00039129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001548  00000000  00000000  0003c230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001420  00000000  00000000  0003d778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a468  00000000  00000000  0003eb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000183ec  00000000  00000000  00059000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099d25  00000000  00000000  000713ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010b111  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cb8  00000000  00000000  0010b164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	0800aa5c 	.word	0x0800aa5c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	0800aa5c 	.word	0x0800aa5c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__aeabi_f2iz>:
 8000f84:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f88:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f8c:	d30f      	bcc.n	8000fae <__aeabi_f2iz+0x2a>
 8000f8e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f96:	d90d      	bls.n	8000fb4 <__aeabi_f2iz+0x30>
 8000f98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fa0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fa4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa8:	bf18      	it	ne
 8000faa:	4240      	negne	r0, r0
 8000fac:	4770      	bx	lr
 8000fae:	f04f 0000 	mov.w	r0, #0
 8000fb2:	4770      	bx	lr
 8000fb4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fb8:	d101      	bne.n	8000fbe <__aeabi_f2iz+0x3a>
 8000fba:	0242      	lsls	r2, r0, #9
 8000fbc:	d105      	bne.n	8000fca <__aeabi_f2iz+0x46>
 8000fbe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fc2:	bf08      	it	eq
 8000fc4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fc8:	4770      	bx	lr
 8000fca:	f04f 0000 	mov.w	r0, #0
 8000fce:	4770      	bx	lr

08000fd0 <get_week_day>:
/* USER CODE BEGIN PTD */
int iteration = 0;
int last_beat = 0;
int delays[20];

char *get_week_day(int day) {
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	2b06      	cmp	r3, #6
 8000fde:	d81f      	bhi.n	8001020 <get_week_day+0x50>
 8000fe0:	a201      	add	r2, pc, #4	; (adr r2, 8000fe8 <get_week_day+0x18>)
 8000fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe6:	bf00      	nop
 8000fe8:	08001005 	.word	0x08001005
 8000fec:	08001009 	.word	0x08001009
 8000ff0:	0800100d 	.word	0x0800100d
 8000ff4:	08001011 	.word	0x08001011
 8000ff8:	08001015 	.word	0x08001015
 8000ffc:	08001019 	.word	0x08001019
 8001000:	0800101d 	.word	0x0800101d
	enum WEEKDAY {MONDAY = 1, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY};

	switch(day) {
		case MONDAY:
			return "Mon";
 8001004:	4b09      	ldr	r3, [pc, #36]	; (800102c <get_week_day+0x5c>)
 8001006:	e00c      	b.n	8001022 <get_week_day+0x52>
			break;
		case TUESDAY:
			return "Tue";
 8001008:	4b09      	ldr	r3, [pc, #36]	; (8001030 <get_week_day+0x60>)
 800100a:	e00a      	b.n	8001022 <get_week_day+0x52>
			break;
		case WEDNESDAY:
			return "Wed";
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <get_week_day+0x64>)
 800100e:	e008      	b.n	8001022 <get_week_day+0x52>
			break;
		case THURSDAY:
			return "Thu";
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <get_week_day+0x68>)
 8001012:	e006      	b.n	8001022 <get_week_day+0x52>
			break;
		case FRIDAY:
			return "Fri";
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <get_week_day+0x6c>)
 8001016:	e004      	b.n	8001022 <get_week_day+0x52>
			break;
		case SATURDAY:
			return "Sat";
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <get_week_day+0x70>)
 800101a:	e002      	b.n	8001022 <get_week_day+0x52>
			break;
		case SUNDAY:
			return "Sun";
 800101c:	4b09      	ldr	r3, [pc, #36]	; (8001044 <get_week_day+0x74>)
 800101e:	e000      	b.n	8001022 <get_week_day+0x52>
			break;
		default:
			return "Non";
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <get_week_day+0x78>)
			break;
	}
}
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr
 800102c:	0800aa78 	.word	0x0800aa78
 8001030:	0800aa7c 	.word	0x0800aa7c
 8001034:	0800aa80 	.word	0x0800aa80
 8001038:	0800aa84 	.word	0x0800aa84
 800103c:	0800aa88 	.word	0x0800aa88
 8001040:	0800aa8c 	.word	0x0800aa8c
 8001044:	0800aa90 	.word	0x0800aa90
 8001048:	0800aa94 	.word	0x0800aa94

0800104c <display_date_and_time>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char time[30] = {0};
char date[30] = {0};

void display_date_and_time() {
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af04      	add	r7, sp, #16
	ILI9341_WriteString(40, 10, date, Font_7x10, ILI9341_GREEN, ILI9341_BLACK);
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <display_date_and_time+0x44>)
 8001054:	2200      	movs	r2, #0
 8001056:	9202      	str	r2, [sp, #8]
 8001058:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800105c:	9201      	str	r2, [sp, #4]
 800105e:	685a      	ldr	r2, [r3, #4]
 8001060:	9200      	str	r2, [sp, #0]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0b      	ldr	r2, [pc, #44]	; (8001094 <display_date_and_time+0x48>)
 8001066:	210a      	movs	r1, #10
 8001068:	2028      	movs	r0, #40	; 0x28
 800106a:	f001 fa68 	bl	800253e <ILI9341_WriteString>
	ILI9341_WriteString(40, 104, time, Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 800106e:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <display_date_and_time+0x4c>)
 8001070:	2200      	movs	r2, #0
 8001072:	9202      	str	r2, [sp, #8]
 8001074:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001078:	9201      	str	r2, [sp, #4]
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	9200      	str	r2, [sp, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a06      	ldr	r2, [pc, #24]	; (800109c <display_date_and_time+0x50>)
 8001082:	2168      	movs	r1, #104	; 0x68
 8001084:	2028      	movs	r0, #40	; 0x28
 8001086:	f001 fa5a 	bl	800253e <ILI9341_WriteString>
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000004 	.word	0x20000004
 8001094:	20000228 	.word	0x20000228
 8001098:	2000000c 	.word	0x2000000c
 800109c:	20000208 	.word	0x20000208

080010a0 <display_battery_status>:

void display_battery_status() {
 80010a0:	b590      	push	{r4, r7, lr}
 80010a2:	b095      	sub	sp, #84	; 0x54
 80010a4:	af04      	add	r7, sp, #16
  char  adc_char[20];
  float adc_value = 0;
 80010a6:	f04f 0300 	mov.w	r3, #0
 80010aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  float bat_percent = 0;
 80010ac:	f04f 0300 	mov.w	r3, #0
 80010b0:	63bb      	str	r3, [r7, #56]	; 0x38
  int   display_bat = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	637b      	str	r3, [r7, #52]	; 0x34
  int   supply_voltage = 3.3;
 80010b6:	2303      	movs	r3, #3
 80010b8:	633b      	str	r3, [r7, #48]	; 0x30
  int   battery_voltage = 4.2;
 80010ba:	2304      	movs	r3, #4
 80010bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  int   width = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	62bb      	str	r3, [r7, #40]	; 0x28
  struct point point_a = {128, 7};
 80010c2:	4b34      	ldr	r3, [pc, #208]	; (8001194 <display_battery_status+0xf4>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	823b      	strh	r3, [r7, #16]
  struct point point_b = {152, 7};
 80010c8:	4b33      	ldr	r3, [pc, #204]	; (8001198 <display_battery_status+0xf8>)
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	81bb      	strh	r3, [r7, #12]
  struct point point_c = {152, 20};
 80010ce:	4b33      	ldr	r3, [pc, #204]	; (800119c <display_battery_status+0xfc>)
 80010d0:	881b      	ldrh	r3, [r3, #0]
 80010d2:	813b      	strh	r3, [r7, #8]
  struct point point_d = {128, 20};
 80010d4:	4b32      	ldr	r3, [pc, #200]	; (80011a0 <display_battery_status+0x100>)
 80010d6:	881b      	ldrh	r3, [r3, #0]
 80010d8:	80bb      	strh	r3, [r7, #4]

  HAL_ADC_Start(&hadc2);
 80010da:	4832      	ldr	r0, [pc, #200]	; (80011a4 <display_battery_status+0x104>)
 80010dc:	f001 fe2c 	bl	8002d38 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc2, 1);
 80010e0:	2101      	movs	r1, #1
 80010e2:	4830      	ldr	r0, [pc, #192]	; (80011a4 <display_battery_status+0x104>)
 80010e4:	f001 ff02 	bl	8002eec <HAL_ADC_PollForConversion>
  adc_value = HAL_ADC_GetValue(&hadc2);
 80010e8:	482e      	ldr	r0, [pc, #184]	; (80011a4 <display_battery_status+0x104>)
 80010ea:	f002 f805 	bl	80030f8 <HAL_ADC_GetValue>
 80010ee:	4603      	mov	r3, r0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fd9f 	bl	8000c34 <__aeabi_ui2f>
 80010f6:	4603      	mov	r3, r0
 80010f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  bat_percent = adc_value / 4095;
 80010fa:	492b      	ldr	r1, [pc, #172]	; (80011a8 <display_battery_status+0x108>)
 80010fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80010fe:	f7ff fea5 	bl	8000e4c <__aeabi_fdiv>
 8001102:	4603      	mov	r3, r0
 8001104:	63bb      	str	r3, [r7, #56]	; 0x38
  display_bat = bat_percent * supply_voltage / battery_voltage * 100;
 8001106:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001108:	f7ff fd98 	bl	8000c3c <__aeabi_i2f>
 800110c:	4603      	mov	r3, r0
 800110e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fde7 	bl	8000ce4 <__aeabi_fmul>
 8001116:	4603      	mov	r3, r0
 8001118:	461c      	mov	r4, r3
 800111a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800111c:	f7ff fd8e 	bl	8000c3c <__aeabi_i2f>
 8001120:	4603      	mov	r3, r0
 8001122:	4619      	mov	r1, r3
 8001124:	4620      	mov	r0, r4
 8001126:	f7ff fe91 	bl	8000e4c <__aeabi_fdiv>
 800112a:	4603      	mov	r3, r0
 800112c:	491f      	ldr	r1, [pc, #124]	; (80011ac <display_battery_status+0x10c>)
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fdd8 	bl	8000ce4 <__aeabi_fmul>
 8001134:	4603      	mov	r3, r0
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff ff24 	bl	8000f84 <__aeabi_f2iz>
 800113c:	4603      	mov	r3, r0
 800113e:	637b      	str	r3, [r7, #52]	; 0x34

  sprintf(adc_char, "%d", display_bat);
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001146:	491a      	ldr	r1, [pc, #104]	; (80011b0 <display_battery_status+0x110>)
 8001148:	4618      	mov	r0, r3
 800114a:	f007 fad1 	bl	80086f0 <siprintf>
  ILI9341_WriteString(133, 10, adc_char, Font_7x10, ILI9341_RED, ILI9341_BLACK);
 800114e:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <display_battery_status+0x114>)
 8001150:	f107 0114 	add.w	r1, r7, #20
 8001154:	2200      	movs	r2, #0
 8001156:	9202      	str	r2, [sp, #8]
 8001158:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800115c:	9201      	str	r2, [sp, #4]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	9200      	str	r2, [sp, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	460a      	mov	r2, r1
 8001166:	210a      	movs	r1, #10
 8001168:	2085      	movs	r0, #133	; 0x85
 800116a:	f001 f9e8 	bl	800253e <ILI9341_WriteString>
  ILI9341_DrawRectangle(point_a, point_b, point_c, point_d, ILI9341_RED, width);
 800116e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001170:	9301      	str	r3, [sp, #4]
 8001172:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	68f9      	ldr	r1, [r7, #12]
 800117e:	6938      	ldr	r0, [r7, #16]
 8001180:	f001 fc59 	bl	8002a36 <ILI9341_DrawRectangle>
  HAL_ADC_Stop(&hadc2);
 8001184:	4807      	ldr	r0, [pc, #28]	; (80011a4 <display_battery_status+0x104>)
 8001186:	f001 fe85 	bl	8002e94 <HAL_ADC_Stop>
}
 800118a:	bf00      	nop
 800118c:	3744      	adds	r7, #68	; 0x44
 800118e:	46bd      	mov	sp, r7
 8001190:	bd90      	pop	{r4, r7, pc}
 8001192:	bf00      	nop
 8001194:	0800aa9c 	.word	0x0800aa9c
 8001198:	0800aaa0 	.word	0x0800aaa0
 800119c:	0800aaa4 	.word	0x0800aaa4
 80011a0:	0800aaa8 	.word	0x0800aaa8
 80011a4:	200002ac 	.word	0x200002ac
 80011a8:	457ff000 	.word	0x457ff000
 80011ac:	42c80000 	.word	0x42c80000
 80011b0:	0800aa98 	.word	0x0800aa98
 80011b4:	20000004 	.word	0x20000004

080011b8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af02      	add	r7, sp, #8
 80011be:	6078      	str	r0, [r7, #4]
	char *dat;
	RTC_TimeTypeDef sTime = {0};
 80011c0:	f107 0310 	add.w	r3, r7, #16
 80011c4:	2100      	movs	r1, #0
 80011c6:	460a      	mov	r2, r1
 80011c8:	801a      	strh	r2, [r3, #0]
 80011ca:	460a      	mov	r2, r1
 80011cc:	709a      	strb	r2, [r3, #2]
	RTC_DateTypeDef sDate = {0};
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
	enum WEEKDAY {MONDAY = 1, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY};

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80011d2:	f107 0310 	add.w	r3, r7, #16
 80011d6:	2200      	movs	r2, #0
 80011d8:	4619      	mov	r1, r3
 80011da:	4817      	ldr	r0, [pc, #92]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80011dc:	f005 f95c 	bl	8006498 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	2200      	movs	r2, #0
 80011e6:	4619      	mov	r1, r3
 80011e8:	4813      	ldr	r0, [pc, #76]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80011ea:	f005 fae3 	bl	80067b4 <HAL_RTC_GetDate>
	dat = get_week_day(sDate.WeekDay);
 80011ee:	7b3b      	ldrb	r3, [r7, #12]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff feed 	bl	8000fd0 <get_week_day>
 80011f6:	6178      	str	r0, [r7, #20]
	sprintf(date, "%s %02d/%02d/%02d", dat, sDate.Date, sDate.Month, sDate.Year);
 80011f8:	7bbb      	ldrb	r3, [r7, #14]
 80011fa:	4619      	mov	r1, r3
 80011fc:	7b7b      	ldrb	r3, [r7, #13]
 80011fe:	7bfa      	ldrb	r2, [r7, #15]
 8001200:	9201      	str	r2, [sp, #4]
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	460b      	mov	r3, r1
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	490c      	ldr	r1, [pc, #48]	; (800123c <HAL_TIM_PeriodElapsedCallback+0x84>)
 800120a:	480d      	ldr	r0, [pc, #52]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800120c:	f007 fa70 	bl	80086f0 <siprintf>
	sprintf(time, "%02d:%02d:%02d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001210:	7c3b      	ldrb	r3, [r7, #16]
 8001212:	461a      	mov	r2, r3
 8001214:	7c7b      	ldrb	r3, [r7, #17]
 8001216:	4619      	mov	r1, r3
 8001218:	7cbb      	ldrb	r3, [r7, #18]
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	460b      	mov	r3, r1
 800121e:	4909      	ldr	r1, [pc, #36]	; (8001244 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001220:	4809      	ldr	r0, [pc, #36]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001222:	f007 fa65 	bl	80086f0 <siprintf>
	display_date_and_time();
 8001226:	f7ff ff11 	bl	800104c <display_date_and_time>
	display_battery_status();
 800122a:	f7ff ff39 	bl	80010a0 <display_battery_status>
}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200003c8 	.word	0x200003c8
 800123c:	0800aaac 	.word	0x0800aaac
 8001240:	20000228 	.word	0x20000228
 8001244:	0800aac0 	.word	0x0800aac0
 8001248:	20000208 	.word	0x20000208

0800124c <init>:

void init() {
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
    ILI9341_Unselect();
 8001250:	f000 fef0 	bl	8002034 <ILI9341_Unselect>
    ILI9341_Init();
 8001254:	f000 ffa0 	bl	8002198 <ILI9341_Init>
}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}

0800125c <read_menu>:



void read_menu(uint8_t key) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af04      	add	r7, sp, #16
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
	enum KEY { LEFT, RIGHT, BOTTOM };
	switch(key) {
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	2b02      	cmp	r3, #2
 800126a:	d032      	beq.n	80012d2 <read_menu+0x76>
 800126c:	2b02      	cmp	r3, #2
 800126e:	dc46      	bgt.n	80012fe <read_menu+0xa2>
 8001270:	2b00      	cmp	r3, #0
 8001272:	d002      	beq.n	800127a <read_menu+0x1e>
 8001274:	2b01      	cmp	r3, #1
 8001276:	d016      	beq.n	80012a6 <read_menu+0x4a>
			ILI9341_WriteString(10, 10, "Pressed BOTTOM", Font_11x18, ILI9341_RED, ILI9341_BLACK);
			HAL_Delay(500);
			ILI9341_FillScreen(ILI9341_BLACK);
			break;
	}
}
 8001278:	e041      	b.n	80012fe <read_menu+0xa2>
			ILI9341_WriteString(10, 10, "Pressed LEFT", Font_11x18, ILI9341_RED, ILI9341_BLACK);
 800127a:	4b23      	ldr	r3, [pc, #140]	; (8001308 <read_menu+0xac>)
 800127c:	2200      	movs	r2, #0
 800127e:	9202      	str	r2, [sp, #8]
 8001280:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001284:	9201      	str	r2, [sp, #4]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	9200      	str	r2, [sp, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a1f      	ldr	r2, [pc, #124]	; (800130c <read_menu+0xb0>)
 800128e:	210a      	movs	r1, #10
 8001290:	200a      	movs	r0, #10
 8001292:	f001 f954 	bl	800253e <ILI9341_WriteString>
			HAL_Delay(500);
 8001296:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800129a:	f001 fc51 	bl	8002b40 <HAL_Delay>
			ILI9341_FillScreen(ILI9341_BLACK);
 800129e:	2000      	movs	r0, #0
 80012a0:	f001 fa06 	bl	80026b0 <ILI9341_FillScreen>
			break;
 80012a4:	e02b      	b.n	80012fe <read_menu+0xa2>
			ILI9341_WriteString(10, 10, "Pressed RIGHT", Font_11x18, ILI9341_RED, ILI9341_BLACK);
 80012a6:	4b18      	ldr	r3, [pc, #96]	; (8001308 <read_menu+0xac>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	9202      	str	r2, [sp, #8]
 80012ac:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80012b0:	9201      	str	r2, [sp, #4]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	9200      	str	r2, [sp, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a15      	ldr	r2, [pc, #84]	; (8001310 <read_menu+0xb4>)
 80012ba:	210a      	movs	r1, #10
 80012bc:	200a      	movs	r0, #10
 80012be:	f001 f93e 	bl	800253e <ILI9341_WriteString>
			HAL_Delay(500);
 80012c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012c6:	f001 fc3b 	bl	8002b40 <HAL_Delay>
			ILI9341_FillScreen(ILI9341_BLACK);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f001 f9f0 	bl	80026b0 <ILI9341_FillScreen>
			break;
 80012d0:	e015      	b.n	80012fe <read_menu+0xa2>
			ILI9341_WriteString(10, 10, "Pressed BOTTOM", Font_11x18, ILI9341_RED, ILI9341_BLACK);
 80012d2:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <read_menu+0xac>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	9202      	str	r2, [sp, #8]
 80012d8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80012dc:	9201      	str	r2, [sp, #4]
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	9200      	str	r2, [sp, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <read_menu+0xb8>)
 80012e6:	210a      	movs	r1, #10
 80012e8:	200a      	movs	r0, #10
 80012ea:	f001 f928 	bl	800253e <ILI9341_WriteString>
			HAL_Delay(500);
 80012ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012f2:	f001 fc25 	bl	8002b40 <HAL_Delay>
			ILI9341_FillScreen(ILI9341_BLACK);
 80012f6:	2000      	movs	r0, #0
 80012f8:	f001 f9da 	bl	80026b0 <ILI9341_FillScreen>
			break;
 80012fc:	bf00      	nop
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	2000000c 	.word	0x2000000c
 800130c:	0800aad0 	.word	0x0800aad0
 8001310:	0800aae0 	.word	0x0800aae0
 8001314:	0800aaf0 	.word	0x0800aaf0

08001318 <check_menu>:

void check_menu(){
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  enum KEY {LEFT, RIGHT, BOTTOM};
  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET) {
 800131c:	2104      	movs	r1, #4
 800131e:	4810      	ldr	r0, [pc, #64]	; (8001360 <check_menu+0x48>)
 8001320:	f002 fba2 	bl	8003a68 <HAL_GPIO_ReadPin>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d102      	bne.n	8001330 <check_menu+0x18>
	  read_menu(RIGHT);
 800132a:	2001      	movs	r0, #1
 800132c:	f7ff ff96 	bl	800125c <read_menu>
  }
  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET) {
 8001330:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001334:	480a      	ldr	r0, [pc, #40]	; (8001360 <check_menu+0x48>)
 8001336:	f002 fb97 	bl	8003a68 <HAL_GPIO_ReadPin>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d102      	bne.n	8001346 <check_menu+0x2e>
	  read_menu(LEFT);
 8001340:	2000      	movs	r0, #0
 8001342:	f7ff ff8b 	bl	800125c <read_menu>
  }
  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == GPIO_PIN_RESET) {
 8001346:	f44f 7100 	mov.w	r1, #512	; 0x200
 800134a:	4806      	ldr	r0, [pc, #24]	; (8001364 <check_menu+0x4c>)
 800134c:	f002 fb8c 	bl	8003a68 <HAL_GPIO_ReadPin>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d102      	bne.n	800135c <check_menu+0x44>
	  read_menu(BOTTOM);
 8001356:	2002      	movs	r0, #2
 8001358:	f7ff ff80 	bl	800125c <read_menu>
  }
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40010800 	.word	0x40010800
 8001364:	40010c00 	.word	0x40010c00

08001368 <display_david_star>:

void display_david_star(uint16_t color) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b090      	sub	sp, #64	; 0x40
 800136c:	af02      	add	r7, sp, #8
 800136e:	4603      	mov	r3, r0
 8001370:	80fb      	strh	r3, [r7, #6]
	int star_width = 30;
 8001372:	231e      	movs	r3, #30
 8001374:	637b      	str	r3, [r7, #52]	; 0x34
	int star_height = 50;
 8001376:	2332      	movs	r3, #50	; 0x32
 8001378:	633b      	str	r3, [r7, #48]	; 0x30
	int star_distance = 60;
 800137a:	233c      	movs	r3, #60	; 0x3c
 800137c:	62fb      	str	r3, [r7, #44]	; 0x2c
	int start_y = 33;
 800137e:	2321      	movs	r3, #33	; 0x21
 8001380:	62bb      	str	r3, [r7, #40]	; 0x28
	int width = 1;
 8001382:	2301      	movs	r3, #1
 8001384:	627b      	str	r3, [r7, #36]	; 0x24

	struct point point_a = {ILI9341_WIDTH / 2, start_y};
 8001386:	2350      	movs	r3, #80	; 0x50
 8001388:	f887 3020 	strb.w	r3, [r7, #32]
 800138c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800138e:	b2db      	uxtb	r3, r3
 8001390:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	struct point point_b = {ILI9341_WIDTH / 2 - star_width, start_y + star_height};
 8001394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001396:	b2db      	uxtb	r3, r3
 8001398:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 800139c:	b2db      	uxtb	r3, r3
 800139e:	773b      	strb	r3, [r7, #28]
 80013a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	4413      	add	r3, r2
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	777b      	strb	r3, [r7, #29]
	struct point point_c = {ILI9341_WIDTH / 2 + star_width, start_y + star_height};
 80013ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	3350      	adds	r3, #80	; 0x50
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	763b      	strb	r3, [r7, #24]
 80013b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	4413      	add	r3, r2
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	767b      	strb	r3, [r7, #25]

	struct point point_a1 = {ILI9341_WIDTH / 2, start_y + star_distance};
 80013c6:	2350      	movs	r3, #80	; 0x50
 80013c8:	753b      	strb	r3, [r7, #20]
 80013ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	4413      	add	r3, r2
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	757b      	strb	r3, [r7, #21]
	struct point point_b1 = {ILI9341_WIDTH / 2 - star_width, start_y + star_distance - star_height};
 80013d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	743b      	strb	r3, [r7, #16]
 80013e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	4413      	add	r3, r2
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	747b      	strb	r3, [r7, #17]
	struct point point_c1 = {ILI9341_WIDTH / 2 + star_width, start_y + star_distance - star_height};
 80013fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	3350      	adds	r3, #80	; 0x50
 8001400:	b2db      	uxtb	r3, r3
 8001402:	733b      	strb	r3, [r7, #12]
 8001404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001406:	b2da      	uxtb	r2, r3
 8001408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800140a:	b2db      	uxtb	r3, r3
 800140c:	4413      	add	r3, r2
 800140e:	b2da      	uxtb	r2, r3
 8001410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001412:	b2db      	uxtb	r3, r3
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	737b      	strb	r3, [r7, #13]

	ILI9341_DrawTriangle(point_a, point_b, point_c, color, width);
 800141a:	88fa      	ldrh	r2, [r7, #6]
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	4613      	mov	r3, r2
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	69f9      	ldr	r1, [r7, #28]
 8001426:	6a38      	ldr	r0, [r7, #32]
 8001428:	f001 fae8 	bl	80029fc <ILI9341_DrawTriangle>
	ILI9341_DrawTriangle(point_a1, point_b1, point_c1, color, width);
 800142c:	88fa      	ldrh	r2, [r7, #6]
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	4613      	mov	r3, r2
 8001434:	68fa      	ldr	r2, [r7, #12]
 8001436:	6939      	ldr	r1, [r7, #16]
 8001438:	6978      	ldr	r0, [r7, #20]
 800143a:	f001 fadf 	bl	80029fc <ILI9341_DrawTriangle>
}
 800143e:	bf00      	nop
 8001440:	3738      	adds	r7, #56	; 0x38
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800144c:	f001 fb16 	bl	8002a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001450:	f000 f820 	bl	8001494 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001454:	f000 fa26 	bl	80018a4 <MX_GPIO_Init>
  MX_RTC_Init();
 8001458:	f000 f8de 	bl	8001618 <MX_RTC_Init>
  MX_TIM2_Init();
 800145c:	f000 f9ac 	bl	80017b8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001460:	f000 f95a 	bl	8001718 <MX_TIM1_Init>
  MX_SPI2_Init();
 8001464:	f000 f922 	bl	80016ac <MX_SPI2_Init>
  MX_I2C2_Init();
 8001468:	f000 f8a8 	bl	80015bc <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800146c:	f000 f9f0 	bl	8001850 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 8001470:	f000 f866 	bl	8001540 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  init();
 8001474:	f7ff feea 	bl	800124c <init>
  ILI9341_FillScreen(ILI9341_BLACK);
 8001478:	2000      	movs	r0, #0
 800147a:	f001 f919 	bl	80026b0 <ILI9341_FillScreen>

  // Read The ADC Conversion Result & Map It To PWM DutyCycle
  display_david_star(ILI9341_BLUE);
 800147e:	201f      	movs	r0, #31
 8001480:	f7ff ff72 	bl	8001368 <display_david_star>
  HAL_TIM_Base_Start_IT(&htim2);
 8001484:	4802      	ldr	r0, [pc, #8]	; (8001490 <main+0x48>)
 8001486:	f005 ff49 	bl	800731c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	check_menu();
 800148a:	f7ff ff45 	bl	8001318 <check_menu>
 800148e:	e7fc      	b.n	800148a <main+0x42>
 8001490:	20000424 	.word	0x20000424

08001494 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b094      	sub	sp, #80	; 0x50
 8001498:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800149a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800149e:	2228      	movs	r2, #40	; 0x28
 80014a0:	2100      	movs	r1, #0
 80014a2:	4618      	mov	r0, r3
 80014a4:	f006 fc06 	bl	8007cb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80014c4:	2306      	movs	r3, #6
 80014c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014c8:	2301      	movs	r3, #1
 80014ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014cc:	2301      	movs	r3, #1
 80014ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014d0:	2310      	movs	r3, #16
 80014d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014dc:	4618      	mov	r0, r3
 80014de:	f004 f93d 	bl	800575c <HAL_RCC_OscConfig>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <SystemClock_Config+0x58>
  {
    Error_Handler();
 80014e8:	f000 faae 	bl	8001a48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ec:	230f      	movs	r3, #15
 80014ee:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014f8:	2300      	movs	r3, #0
 80014fa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	2100      	movs	r1, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f004 fba8 	bl	8005c5c <HAL_RCC_ClockConfig>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001512:	f000 fa99 	bl	8001a48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8001516:	2303      	movs	r3, #3
 8001518:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800151a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800151e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	4618      	mov	r0, r3
 8001528:	f004 fd26 	bl	8005f78 <HAL_RCCEx_PeriphCLKConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001532:	f000 fa89 	bl	8001a48 <Error_Handler>
  }
}
 8001536:	bf00      	nop
 8001538:	3750      	adds	r7, #80	; 0x50
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001550:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <MX_ADC2_Init+0x74>)
 8001552:	4a19      	ldr	r2, [pc, #100]	; (80015b8 <MX_ADC2_Init+0x78>)
 8001554:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001556:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <MX_ADC2_Init+0x74>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800155c:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <MX_ADC2_Init+0x74>)
 800155e:	2200      	movs	r2, #0
 8001560:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001562:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <MX_ADC2_Init+0x74>)
 8001564:	2200      	movs	r2, #0
 8001566:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <MX_ADC2_Init+0x74>)
 800156a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800156e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001570:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <MX_ADC2_Init+0x74>)
 8001572:	2200      	movs	r2, #0
 8001574:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001576:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <MX_ADC2_Init+0x74>)
 8001578:	2201      	movs	r2, #1
 800157a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800157c:	480d      	ldr	r0, [pc, #52]	; (80015b4 <MX_ADC2_Init+0x74>)
 800157e:	f001 fb03 	bl	8002b88 <HAL_ADC_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001588:	f000 fa5e 	bl	8001a48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800158c:	2306      	movs	r3, #6
 800158e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001590:	2301      	movs	r3, #1
 8001592:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	4619      	mov	r1, r3
 800159c:	4805      	ldr	r0, [pc, #20]	; (80015b4 <MX_ADC2_Init+0x74>)
 800159e:	f001 fdb7 	bl	8003110 <HAL_ADC_ConfigChannel>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80015a8:	f000 fa4e 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	200002ac 	.word	0x200002ac
 80015b8:	40012800 	.word	0x40012800

080015bc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015c0:	4b12      	ldr	r3, [pc, #72]	; (800160c <MX_I2C2_Init+0x50>)
 80015c2:	4a13      	ldr	r2, [pc, #76]	; (8001610 <MX_I2C2_Init+0x54>)
 80015c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <MX_I2C2_Init+0x50>)
 80015c8:	4a12      	ldr	r2, [pc, #72]	; (8001614 <MX_I2C2_Init+0x58>)
 80015ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015cc:	4b0f      	ldr	r3, [pc, #60]	; (800160c <MX_I2C2_Init+0x50>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <MX_I2C2_Init+0x50>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <MX_I2C2_Init+0x50>)
 80015da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015de:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015e0:	4b0a      	ldr	r3, [pc, #40]	; (800160c <MX_I2C2_Init+0x50>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <MX_I2C2_Init+0x50>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015ec:	4b07      	ldr	r3, [pc, #28]	; (800160c <MX_I2C2_Init+0x50>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <MX_I2C2_Init+0x50>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015f8:	4804      	ldr	r0, [pc, #16]	; (800160c <MX_I2C2_Init+0x50>)
 80015fa:	f002 fa65 	bl	8003ac8 <HAL_I2C_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001604:	f000 fa20 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}
 800160c:	200002dc 	.word	0x200002dc
 8001610:	40005800 	.word	0x40005800
 8001614:	000186a0 	.word	0x000186a0

08001618 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	2100      	movs	r1, #0
 8001622:	460a      	mov	r2, r1
 8001624:	801a      	strh	r2, [r3, #0]
 8001626:	460a      	mov	r2, r1
 8001628:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800162a:	2300      	movs	r3, #0
 800162c:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800162e:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <MX_RTC_Init+0x8c>)
 8001630:	4a1d      	ldr	r2, [pc, #116]	; (80016a8 <MX_RTC_Init+0x90>)
 8001632:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001634:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <MX_RTC_Init+0x8c>)
 8001636:	f04f 32ff 	mov.w	r2, #4294967295
 800163a:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800163c:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <MX_RTC_Init+0x8c>)
 800163e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001642:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001644:	4817      	ldr	r0, [pc, #92]	; (80016a4 <MX_RTC_Init+0x8c>)
 8001646:	f004 fe03 	bl	8006250 <HAL_RTC_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8001650:	f000 f9fa 	bl	8001a48 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x13;
 8001654:	2313      	movs	r3, #19
 8001656:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x45;
 8001658:	2345      	movs	r3, #69	; 0x45
 800165a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800165c:	2300      	movs	r3, #0
 800165e:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	2201      	movs	r2, #1
 8001664:	4619      	mov	r1, r3
 8001666:	480f      	ldr	r0, [pc, #60]	; (80016a4 <MX_RTC_Init+0x8c>)
 8001668:	f004 fe7e 	bl	8006368 <HAL_RTC_SetTime>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8001672:	f000 f9e9 	bl	8001a48 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8001676:	2300      	movs	r3, #0
 8001678:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_SEPTEMBER;
 800167a:	2309      	movs	r3, #9
 800167c:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x24;
 800167e:	2324      	movs	r3, #36	; 0x24
 8001680:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x23;
 8001682:	2323      	movs	r3, #35	; 0x23
 8001684:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001686:	463b      	mov	r3, r7
 8001688:	2201      	movs	r2, #1
 800168a:	4619      	mov	r1, r3
 800168c:	4805      	ldr	r0, [pc, #20]	; (80016a4 <MX_RTC_Init+0x8c>)
 800168e:	f004 ffdb 	bl	8006648 <HAL_RTC_SetDate>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001698:	f000 f9d6 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	200003c8 	.word	0x200003c8
 80016a8:	40002800 	.word	0x40002800

080016ac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80016b0:	4b17      	ldr	r3, [pc, #92]	; (8001710 <MX_SPI2_Init+0x64>)
 80016b2:	4a18      	ldr	r2, [pc, #96]	; (8001714 <MX_SPI2_Init+0x68>)
 80016b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016b6:	4b16      	ldr	r3, [pc, #88]	; (8001710 <MX_SPI2_Init+0x64>)
 80016b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80016be:	4b14      	ldr	r3, [pc, #80]	; (8001710 <MX_SPI2_Init+0x64>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <MX_SPI2_Init+0x64>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <MX_SPI2_Init+0x64>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016d0:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <MX_SPI2_Init+0x64>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <MX_SPI2_Init+0x64>)
 80016d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016de:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <MX_SPI2_Init+0x64>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016e4:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <MX_SPI2_Init+0x64>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <MX_SPI2_Init+0x64>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016f0:	4b07      	ldr	r3, [pc, #28]	; (8001710 <MX_SPI2_Init+0x64>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <MX_SPI2_Init+0x64>)
 80016f8:	220a      	movs	r2, #10
 80016fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016fc:	4804      	ldr	r0, [pc, #16]	; (8001710 <MX_SPI2_Init+0x64>)
 80016fe:	f005 fb4f 	bl	8006da0 <HAL_SPI_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001708:	f000 f99e 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000254 	.word	0x20000254
 8001714:	40003800 	.word	0x40003800

08001718 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800171e:	f107 0308 	add.w	r3, r7, #8
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800172c:	463b      	mov	r3, r7
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001734:	4b1e      	ldr	r3, [pc, #120]	; (80017b0 <MX_TIM1_Init+0x98>)
 8001736:	4a1f      	ldr	r2, [pc, #124]	; (80017b4 <MX_TIM1_Init+0x9c>)
 8001738:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 800173a:	4b1d      	ldr	r3, [pc, #116]	; (80017b0 <MX_TIM1_Init+0x98>)
 800173c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001740:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001742:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <MX_TIM1_Init+0x98>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8001748:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <MX_TIM1_Init+0x98>)
 800174a:	2264      	movs	r2, #100	; 0x64
 800174c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800174e:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <MX_TIM1_Init+0x98>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001754:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <MX_TIM1_Init+0x98>)
 8001756:	2200      	movs	r2, #0
 8001758:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <MX_TIM1_Init+0x98>)
 800175c:	2200      	movs	r2, #0
 800175e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001760:	4813      	ldr	r0, [pc, #76]	; (80017b0 <MX_TIM1_Init+0x98>)
 8001762:	f005 fd8b 	bl	800727c <HAL_TIM_Base_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800176c:	f000 f96c 	bl	8001a48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001774:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001776:	f107 0308 	add.w	r3, r7, #8
 800177a:	4619      	mov	r1, r3
 800177c:	480c      	ldr	r0, [pc, #48]	; (80017b0 <MX_TIM1_Init+0x98>)
 800177e:	f005 ff27 	bl	80075d0 <HAL_TIM_ConfigClockSource>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001788:	f000 f95e 	bl	8001a48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800178c:	2300      	movs	r3, #0
 800178e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001790:	2300      	movs	r3, #0
 8001792:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001794:	463b      	mov	r3, r7
 8001796:	4619      	mov	r1, r3
 8001798:	4805      	ldr	r0, [pc, #20]	; (80017b0 <MX_TIM1_Init+0x98>)
 800179a:	f006 f8fd 	bl	8007998 <HAL_TIMEx_MasterConfigSynchronization>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80017a4:	f000 f950 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80017a8:	bf00      	nop
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	200003dc 	.word	0x200003dc
 80017b4:	40012c00 	.word	0x40012c00

080017b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017be:	f107 0308 	add.w	r3, r7, #8
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017cc:	463b      	mov	r3, r7
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017d4:	4b1d      	ldr	r3, [pc, #116]	; (800184c <MX_TIM2_Init+0x94>)
 80017d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80017dc:	4b1b      	ldr	r3, [pc, #108]	; (800184c <MX_TIM2_Init+0x94>)
 80017de:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80017e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e4:	4b19      	ldr	r3, [pc, #100]	; (800184c <MX_TIM2_Init+0x94>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80017ea:	4b18      	ldr	r3, [pc, #96]	; (800184c <MX_TIM2_Init+0x94>)
 80017ec:	2264      	movs	r2, #100	; 0x64
 80017ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f0:	4b16      	ldr	r3, [pc, #88]	; (800184c <MX_TIM2_Init+0x94>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <MX_TIM2_Init+0x94>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017fc:	4813      	ldr	r0, [pc, #76]	; (800184c <MX_TIM2_Init+0x94>)
 80017fe:	f005 fd3d 	bl	800727c <HAL_TIM_Base_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001808:	f000 f91e 	bl	8001a48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800180c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001810:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001812:	f107 0308 	add.w	r3, r7, #8
 8001816:	4619      	mov	r1, r3
 8001818:	480c      	ldr	r0, [pc, #48]	; (800184c <MX_TIM2_Init+0x94>)
 800181a:	f005 fed9 	bl	80075d0 <HAL_TIM_ConfigClockSource>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001824:	f000 f910 	bl	8001a48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001828:	2300      	movs	r3, #0
 800182a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800182c:	2300      	movs	r3, #0
 800182e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001830:	463b      	mov	r3, r7
 8001832:	4619      	mov	r1, r3
 8001834:	4805      	ldr	r0, [pc, #20]	; (800184c <MX_TIM2_Init+0x94>)
 8001836:	f006 f8af 	bl	8007998 <HAL_TIMEx_MasterConfigSynchronization>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001840:	f000 f902 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001844:	bf00      	nop
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000424 	.word	0x20000424

08001850 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <MX_USART1_UART_Init+0x4c>)
 8001856:	4a12      	ldr	r2, [pc, #72]	; (80018a0 <MX_USART1_UART_Init+0x50>)
 8001858:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800185a:	4b10      	ldr	r3, [pc, #64]	; (800189c <MX_USART1_UART_Init+0x4c>)
 800185c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001860:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <MX_USART1_UART_Init+0x4c>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <MX_USART1_UART_Init+0x4c>)
 800186a:	2200      	movs	r2, #0
 800186c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800186e:	4b0b      	ldr	r3, [pc, #44]	; (800189c <MX_USART1_UART_Init+0x4c>)
 8001870:	2200      	movs	r2, #0
 8001872:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001874:	4b09      	ldr	r3, [pc, #36]	; (800189c <MX_USART1_UART_Init+0x4c>)
 8001876:	220c      	movs	r2, #12
 8001878:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800187a:	4b08      	ldr	r3, [pc, #32]	; (800189c <MX_USART1_UART_Init+0x4c>)
 800187c:	2200      	movs	r2, #0
 800187e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <MX_USART1_UART_Init+0x4c>)
 8001882:	2200      	movs	r2, #0
 8001884:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001886:	4805      	ldr	r0, [pc, #20]	; (800189c <MX_USART1_UART_Init+0x4c>)
 8001888:	f006 f8f6 	bl	8007a78 <HAL_UART_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001892:	f000 f8d9 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000380 	.word	0x20000380
 80018a0:	40013800 	.word	0x40013800

080018a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08a      	sub	sp, #40	; 0x28
 80018a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018aa:	f107 0314 	add.w	r3, r7, #20
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]
 80018b4:	609a      	str	r2, [r3, #8]
 80018b6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018b8:	4b5e      	ldr	r3, [pc, #376]	; (8001a34 <MX_GPIO_Init+0x190>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	4a5d      	ldr	r2, [pc, #372]	; (8001a34 <MX_GPIO_Init+0x190>)
 80018be:	f043 0310 	orr.w	r3, r3, #16
 80018c2:	6193      	str	r3, [r2, #24]
 80018c4:	4b5b      	ldr	r3, [pc, #364]	; (8001a34 <MX_GPIO_Init+0x190>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	f003 0310 	and.w	r3, r3, #16
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d0:	4b58      	ldr	r3, [pc, #352]	; (8001a34 <MX_GPIO_Init+0x190>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	4a57      	ldr	r2, [pc, #348]	; (8001a34 <MX_GPIO_Init+0x190>)
 80018d6:	f043 0320 	orr.w	r3, r3, #32
 80018da:	6193      	str	r3, [r2, #24]
 80018dc:	4b55      	ldr	r3, [pc, #340]	; (8001a34 <MX_GPIO_Init+0x190>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	f003 0320 	and.w	r3, r3, #32
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e8:	4b52      	ldr	r3, [pc, #328]	; (8001a34 <MX_GPIO_Init+0x190>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	4a51      	ldr	r2, [pc, #324]	; (8001a34 <MX_GPIO_Init+0x190>)
 80018ee:	f043 0304 	orr.w	r3, r3, #4
 80018f2:	6193      	str	r3, [r2, #24]
 80018f4:	4b4f      	ldr	r3, [pc, #316]	; (8001a34 <MX_GPIO_Init+0x190>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001900:	4b4c      	ldr	r3, [pc, #304]	; (8001a34 <MX_GPIO_Init+0x190>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	4a4b      	ldr	r2, [pc, #300]	; (8001a34 <MX_GPIO_Init+0x190>)
 8001906:	f043 0308 	orr.w	r3, r3, #8
 800190a:	6193      	str	r3, [r2, #24]
 800190c:	4b49      	ldr	r3, [pc, #292]	; (8001a34 <MX_GPIO_Init+0x190>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	f003 0308 	and.w	r3, r3, #8
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001918:	2200      	movs	r2, #0
 800191a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800191e:	4846      	ldr	r0, [pc, #280]	; (8001a38 <MX_GPIO_Init+0x194>)
 8001920:	f002 f8b9 	bl	8003a96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8
 8001924:	2200      	movs	r2, #0
 8001926:	f640 1198 	movw	r1, #2456	; 0x998
 800192a:	4844      	ldr	r0, [pc, #272]	; (8001a3c <MX_GPIO_Init+0x198>)
 800192c:	f002 f8b3 	bl	8003a96 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001930:	2200      	movs	r2, #0
 8001932:	2180      	movs	r1, #128	; 0x80
 8001934:	4842      	ldr	r0, [pc, #264]	; (8001a40 <MX_GPIO_Init+0x19c>)
 8001936:	f002 f8ae 	bl	8003a96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800193a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800193e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001940:	2301      	movs	r3, #1
 8001942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001948:	2302      	movs	r3, #2
 800194a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	4619      	mov	r1, r3
 8001952:	4839      	ldr	r0, [pc, #228]	; (8001a38 <MX_GPIO_Init+0x194>)
 8001954:	f001 ff04 	bl	8003760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8001958:	2322      	movs	r3, #34	; 0x22
 800195a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800195c:	2300      	movs	r3, #0
 800195e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	4619      	mov	r1, r3
 800196a:	4834      	ldr	r0, [pc, #208]	; (8001a3c <MX_GPIO_Init+0x198>)
 800196c:	f001 fef8 	bl	8003760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_15;
 8001970:	f249 0304 	movw	r3, #36868	; 0x9004
 8001974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001976:	2300      	movs	r3, #0
 8001978:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800197a:	2301      	movs	r3, #1
 800197c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197e:	f107 0314 	add.w	r3, r7, #20
 8001982:	4619      	mov	r1, r3
 8001984:	482d      	ldr	r0, [pc, #180]	; (8001a3c <MX_GPIO_Init+0x198>)
 8001986:	f001 feeb 	bl	8003760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA7 PA8
                           PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8
 800198a:	f640 1398 	movw	r3, #2456	; 0x998
 800198e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001990:	2301      	movs	r3, #1
 8001992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001998:	2302      	movs	r3, #2
 800199a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	4619      	mov	r1, r3
 80019a2:	4826      	ldr	r0, [pc, #152]	; (8001a3c <MX_GPIO_Init+0x198>)
 80019a4:	f001 fedc 	bl	8003760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 80019a8:	2342      	movs	r3, #66	; 0x42
 80019aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	4619      	mov	r1, r3
 80019ba:	4821      	ldr	r0, [pc, #132]	; (8001a40 <MX_GPIO_Init+0x19c>)
 80019bc:	f001 fed0 	bl	8003760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_9;
 80019c0:	f44f 7301 	mov.w	r3, #516	; 0x204
 80019c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ca:	2301      	movs	r3, #1
 80019cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ce:	f107 0314 	add.w	r3, r7, #20
 80019d2:	4619      	mov	r1, r3
 80019d4:	481a      	ldr	r0, [pc, #104]	; (8001a40 <MX_GPIO_Init+0x19c>)
 80019d6:	f001 fec3 	bl	8003760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80019da:	2338      	movs	r3, #56	; 0x38
 80019dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019e2:	2303      	movs	r3, #3
 80019e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e6:	f107 0314 	add.w	r3, r7, #20
 80019ea:	4619      	mov	r1, r3
 80019ec:	4814      	ldr	r0, [pc, #80]	; (8001a40 <MX_GPIO_Init+0x19c>)
 80019ee:	f001 feb7 	bl	8003760 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80019f2:	2380      	movs	r3, #128	; 0x80
 80019f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f6:	2301      	movs	r3, #1
 80019f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fe:	2302      	movs	r3, #2
 8001a00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	4619      	mov	r1, r3
 8001a08:	480d      	ldr	r0, [pc, #52]	; (8001a40 <MX_GPIO_Init+0x19c>)
 8001a0a:	f001 fea9 	bl	8003760 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001a0e:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <MX_GPIO_Init+0x1a0>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
 8001a24:	4a07      	ldr	r2, [pc, #28]	; (8001a44 <MX_GPIO_Init+0x1a0>)
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	6053      	str	r3, [r2, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a2a:	bf00      	nop
 8001a2c:	3728      	adds	r7, #40	; 0x28
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40011000 	.word	0x40011000
 8001a3c:	40010800 	.word	0x40010800
 8001a40:	40010c00 	.word	0x40010c00
 8001a44:	40010000 	.word	0x40010000

08001a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a4c:	b672      	cpsid	i
}
 8001a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <Error_Handler+0x8>
	...

08001a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a5a:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <HAL_MspInit+0x5c>)
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	4a14      	ldr	r2, [pc, #80]	; (8001ab0 <HAL_MspInit+0x5c>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6193      	str	r3, [r2, #24]
 8001a66:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <HAL_MspInit+0x5c>)
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a72:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <HAL_MspInit+0x5c>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	4a0e      	ldr	r2, [pc, #56]	; (8001ab0 <HAL_MspInit+0x5c>)
 8001a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a7c:	61d3      	str	r3, [r2, #28]
 8001a7e:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <HAL_MspInit+0x5c>)
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <HAL_MspInit+0x60>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	4a04      	ldr	r2, [pc, #16]	; (8001ab4 <HAL_MspInit+0x60>)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40010000 	.word	0x40010000

08001ab8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 0310 	add.w	r3, r7, #16
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC2)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a14      	ldr	r2, [pc, #80]	; (8001b24 <HAL_ADC_MspInit+0x6c>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d121      	bne.n	8001b1c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001ad8:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <HAL_ADC_MspInit+0x70>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	4a12      	ldr	r2, [pc, #72]	; (8001b28 <HAL_ADC_MspInit+0x70>)
 8001ade:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ae2:	6193      	str	r3, [r2, #24]
 8001ae4:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <HAL_ADC_MspInit+0x70>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af0:	4b0d      	ldr	r3, [pc, #52]	; (8001b28 <HAL_ADC_MspInit+0x70>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	4a0c      	ldr	r2, [pc, #48]	; (8001b28 <HAL_ADC_MspInit+0x70>)
 8001af6:	f043 0304 	orr.w	r3, r3, #4
 8001afa:	6193      	str	r3, [r2, #24]
 8001afc:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <HAL_ADC_MspInit+0x70>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA6     ------> ADC2_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b08:	2340      	movs	r3, #64	; 0x40
 8001b0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b10:	f107 0310 	add.w	r3, r7, #16
 8001b14:	4619      	mov	r1, r3
 8001b16:	4805      	ldr	r0, [pc, #20]	; (8001b2c <HAL_ADC_MspInit+0x74>)
 8001b18:	f001 fe22 	bl	8003760 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001b1c:	bf00      	nop
 8001b1e:	3720      	adds	r7, #32
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40012800 	.word	0x40012800
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40010800 	.word	0x40010800

08001b30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b088      	sub	sp, #32
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 0310 	add.w	r3, r7, #16
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a1e      	ldr	r2, [pc, #120]	; (8001bc4 <HAL_I2C_MspInit+0x94>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d134      	bne.n	8001bba <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b50:	4b1d      	ldr	r3, [pc, #116]	; (8001bc8 <HAL_I2C_MspInit+0x98>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	4a1c      	ldr	r2, [pc, #112]	; (8001bc8 <HAL_I2C_MspInit+0x98>)
 8001b56:	f043 0308 	orr.w	r3, r3, #8
 8001b5a:	6193      	str	r3, [r2, #24]
 8001b5c:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <HAL_I2C_MspInit+0x98>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	f003 0308 	and.w	r3, r3, #8
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b68:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b6e:	2312      	movs	r3, #18
 8001b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b72:	2303      	movs	r3, #3
 8001b74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b76:	f107 0310 	add.w	r3, r7, #16
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4813      	ldr	r0, [pc, #76]	; (8001bcc <HAL_I2C_MspInit+0x9c>)
 8001b7e:	f001 fdef 	bl	8003760 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b82:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <HAL_I2C_MspInit+0x98>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	4a10      	ldr	r2, [pc, #64]	; (8001bc8 <HAL_I2C_MspInit+0x98>)
 8001b88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b8c:	61d3      	str	r3, [r2, #28]
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	; (8001bc8 <HAL_I2C_MspInit+0x98>)
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	2021      	movs	r0, #33	; 0x21
 8001ba0:	f001 fd21 	bl	80035e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001ba4:	2021      	movs	r0, #33	; 0x21
 8001ba6:	f001 fd3a 	bl	800361e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001baa:	2200      	movs	r2, #0
 8001bac:	2100      	movs	r1, #0
 8001bae:	2022      	movs	r0, #34	; 0x22
 8001bb0:	f001 fd19 	bl	80035e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001bb4:	2022      	movs	r0, #34	; 0x22
 8001bb6:	f001 fd32 	bl	800361e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001bba:	bf00      	nop
 8001bbc:	3720      	adds	r7, #32
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40005800 	.word	0x40005800
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40010c00 	.word	0x40010c00

08001bd0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a0b      	ldr	r2, [pc, #44]	; (8001c0c <HAL_RTC_MspInit+0x3c>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d110      	bne.n	8001c04 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001be2:	f003 fdaf 	bl	8005744 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001be6:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <HAL_RTC_MspInit+0x40>)
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	4a09      	ldr	r2, [pc, #36]	; (8001c10 <HAL_RTC_MspInit+0x40>)
 8001bec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001bf0:	61d3      	str	r3, [r2, #28]
 8001bf2:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <HAL_RTC_MspInit+0x40>)
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001bfe:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <HAL_RTC_MspInit+0x44>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001c04:	bf00      	nop
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40002800 	.word	0x40002800
 8001c10:	40021000 	.word	0x40021000
 8001c14:	4242043c 	.word	0x4242043c

08001c18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b088      	sub	sp, #32
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 0310 	add.w	r3, r7, #16
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a1c      	ldr	r2, [pc, #112]	; (8001ca4 <HAL_SPI_MspInit+0x8c>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d131      	bne.n	8001c9c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c38:	4b1b      	ldr	r3, [pc, #108]	; (8001ca8 <HAL_SPI_MspInit+0x90>)
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	4a1a      	ldr	r2, [pc, #104]	; (8001ca8 <HAL_SPI_MspInit+0x90>)
 8001c3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c42:	61d3      	str	r3, [r2, #28]
 8001c44:	4b18      	ldr	r3, [pc, #96]	; (8001ca8 <HAL_SPI_MspInit+0x90>)
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c50:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <HAL_SPI_MspInit+0x90>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	4a14      	ldr	r2, [pc, #80]	; (8001ca8 <HAL_SPI_MspInit+0x90>)
 8001c56:	f043 0308 	orr.w	r3, r3, #8
 8001c5a:	6193      	str	r3, [r2, #24]
 8001c5c:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <HAL_SPI_MspInit+0x90>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001c68:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001c6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c72:	2303      	movs	r3, #3
 8001c74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c76:	f107 0310 	add.w	r3, r7, #16
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	480b      	ldr	r0, [pc, #44]	; (8001cac <HAL_SPI_MspInit+0x94>)
 8001c7e:	f001 fd6f 	bl	8003760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001c82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c90:	f107 0310 	add.w	r3, r7, #16
 8001c94:	4619      	mov	r1, r3
 8001c96:	4805      	ldr	r0, [pc, #20]	; (8001cac <HAL_SPI_MspInit+0x94>)
 8001c98:	f001 fd62 	bl	8003760 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001c9c:	bf00      	nop
 8001c9e:	3720      	adds	r7, #32
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40003800 	.word	0x40003800
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40010c00 	.word	0x40010c00

08001cb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a16      	ldr	r2, [pc, #88]	; (8001d18 <HAL_TIM_Base_MspInit+0x68>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d10c      	bne.n	8001cdc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cc2:	4b16      	ldr	r3, [pc, #88]	; (8001d1c <HAL_TIM_Base_MspInit+0x6c>)
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	4a15      	ldr	r2, [pc, #84]	; (8001d1c <HAL_TIM_Base_MspInit+0x6c>)
 8001cc8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ccc:	6193      	str	r3, [r2, #24]
 8001cce:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <HAL_TIM_Base_MspInit+0x6c>)
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001cda:	e018      	b.n	8001d0e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce4:	d113      	bne.n	8001d0e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <HAL_TIM_Base_MspInit+0x6c>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	4a0c      	ldr	r2, [pc, #48]	; (8001d1c <HAL_TIM_Base_MspInit+0x6c>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	61d3      	str	r3, [r2, #28]
 8001cf2:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <HAL_TIM_Base_MspInit+0x6c>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2100      	movs	r1, #0
 8001d02:	201c      	movs	r0, #28
 8001d04:	f001 fc6f 	bl	80035e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d08:	201c      	movs	r0, #28
 8001d0a:	f001 fc88 	bl	800361e <HAL_NVIC_EnableIRQ>
}
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40012c00 	.word	0x40012c00
 8001d1c:	40021000 	.word	0x40021000

08001d20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b088      	sub	sp, #32
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	f107 0310 	add.w	r3, r7, #16
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a1c      	ldr	r2, [pc, #112]	; (8001dac <HAL_UART_MspInit+0x8c>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d131      	bne.n	8001da4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d40:	4b1b      	ldr	r3, [pc, #108]	; (8001db0 <HAL_UART_MspInit+0x90>)
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	4a1a      	ldr	r2, [pc, #104]	; (8001db0 <HAL_UART_MspInit+0x90>)
 8001d46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d4a:	6193      	str	r3, [r2, #24]
 8001d4c:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <HAL_UART_MspInit+0x90>)
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d58:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <HAL_UART_MspInit+0x90>)
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	4a14      	ldr	r2, [pc, #80]	; (8001db0 <HAL_UART_MspInit+0x90>)
 8001d5e:	f043 0304 	orr.w	r3, r3, #4
 8001d62:	6193      	str	r3, [r2, #24]
 8001d64:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <HAL_UART_MspInit+0x90>)
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d76:	2302      	movs	r3, #2
 8001d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7e:	f107 0310 	add.w	r3, r7, #16
 8001d82:	4619      	mov	r1, r3
 8001d84:	480b      	ldr	r0, [pc, #44]	; (8001db4 <HAL_UART_MspInit+0x94>)
 8001d86:	f001 fceb 	bl	8003760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d98:	f107 0310 	add.w	r3, r7, #16
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4805      	ldr	r0, [pc, #20]	; (8001db4 <HAL_UART_MspInit+0x94>)
 8001da0:	f001 fcde 	bl	8003760 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001da4:	bf00      	nop
 8001da6:	3720      	adds	r7, #32
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40013800 	.word	0x40013800
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40010800 	.word	0x40010800

08001db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dbc:	e7fe      	b.n	8001dbc <NMI_Handler+0x4>

08001dbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dc2:	e7fe      	b.n	8001dc2 <HardFault_Handler+0x4>

08001dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dc8:	e7fe      	b.n	8001dc8 <MemManage_Handler+0x4>

08001dca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dce:	e7fe      	b.n	8001dce <BusFault_Handler+0x4>

08001dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd4:	e7fe      	b.n	8001dd4 <UsageFault_Handler+0x4>

08001dd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bc80      	pop	{r7}
 8001de0:	4770      	bx	lr

08001de2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr

08001dee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr

08001dfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dfe:	f000 fe83 	bl	8002b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e0c:	4802      	ldr	r0, [pc, #8]	; (8001e18 <TIM2_IRQHandler+0x10>)
 8001e0e:	f005 fad7 	bl	80073c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000424 	.word	0x20000424

08001e1c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001e20:	4802      	ldr	r0, [pc, #8]	; (8001e2c <I2C2_EV_IRQHandler+0x10>)
 8001e22:	f001 ffa9 	bl	8003d78 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	200002dc 	.word	0x200002dc

08001e30 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001e34:	4802      	ldr	r0, [pc, #8]	; (8001e40 <I2C2_ER_IRQHandler+0x10>)
 8001e36:	f002 f910 	bl	800405a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	200002dc 	.word	0x200002dc

08001e44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
	return 1;
 8001e48:	2301      	movs	r3, #1
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr

08001e52 <_kill>:

int _kill(int pid, int sig)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e5c:	f005 feea 	bl	8007c34 <__errno>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2216      	movs	r2, #22
 8001e64:	601a      	str	r2, [r3, #0]
	return -1;
 8001e66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <_exit>:

void _exit (int status)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e7a:	f04f 31ff 	mov.w	r1, #4294967295
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff ffe7 	bl	8001e52 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e84:	e7fe      	b.n	8001e84 <_exit+0x12>

08001e86 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b086      	sub	sp, #24
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	60f8      	str	r0, [r7, #12]
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	e00a      	b.n	8001eae <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e98:	f3af 8000 	nop.w
 8001e9c:	4601      	mov	r1, r0
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	1c5a      	adds	r2, r3, #1
 8001ea2:	60ba      	str	r2, [r7, #8]
 8001ea4:	b2ca      	uxtb	r2, r1
 8001ea6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	dbf0      	blt.n	8001e98 <_read+0x12>
	}

return len;
 8001eb6:	687b      	ldr	r3, [r7, #4]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	e009      	b.n	8001ee6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	1c5a      	adds	r2, r3, #1
 8001ed6:	60ba      	str	r2, [r7, #8]
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	dbf1      	blt.n	8001ed2 <_write+0x12>
	}
	return len;
 8001eee:	687b      	ldr	r3, [r7, #4]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <_close>:

int _close(int file)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	return -1;
 8001f00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr

08001f0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f1e:	605a      	str	r2, [r3, #4]
	return 0;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr

08001f2c <_isatty>:

int _isatty(int file)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
	return 1;
 8001f34:	2301      	movs	r3, #1
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr

08001f40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
	return 0;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3714      	adds	r7, #20
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr

08001f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f60:	4a14      	ldr	r2, [pc, #80]	; (8001fb4 <_sbrk+0x5c>)
 8001f62:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <_sbrk+0x60>)
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f6c:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <_sbrk+0x64>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d102      	bne.n	8001f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <_sbrk+0x64>)
 8001f76:	4a12      	ldr	r2, [pc, #72]	; (8001fc0 <_sbrk+0x68>)
 8001f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <_sbrk+0x64>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d207      	bcs.n	8001f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f88:	f005 fe54 	bl	8007c34 <__errno>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	220c      	movs	r2, #12
 8001f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f92:	f04f 33ff 	mov.w	r3, #4294967295
 8001f96:	e009      	b.n	8001fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f98:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <_sbrk+0x64>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f9e:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <_sbrk+0x64>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	4a05      	ldr	r2, [pc, #20]	; (8001fbc <_sbrk+0x64>)
 8001fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001faa:	68fb      	ldr	r3, [r7, #12]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20005000 	.word	0x20005000
 8001fb8:	00000400 	.word	0x00000400
 8001fbc:	20000248 	.word	0x20000248
 8001fc0:	20000480 	.word	0x20000480

08001fc4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr

08001fd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fd0:	f7ff fff8 	bl	8001fc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fd4:	480b      	ldr	r0, [pc, #44]	; (8002004 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001fd6:	490c      	ldr	r1, [pc, #48]	; (8002008 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001fd8:	4a0c      	ldr	r2, [pc, #48]	; (800200c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fdc:	e002      	b.n	8001fe4 <LoopCopyDataInit>

08001fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fe2:	3304      	adds	r3, #4

08001fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe8:	d3f9      	bcc.n	8001fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fea:	4a09      	ldr	r2, [pc, #36]	; (8002010 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001fec:	4c09      	ldr	r4, [pc, #36]	; (8002014 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ff0:	e001      	b.n	8001ff6 <LoopFillZerobss>

08001ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff4:	3204      	adds	r2, #4

08001ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff8:	d3fb      	bcc.n	8001ff2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ffa:	f005 fe21 	bl	8007c40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ffe:	f7ff fa23 	bl	8001448 <main>
  bx lr
 8002002:	4770      	bx	lr
  ldr r0, =_sdata
 8002004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002008:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 800200c:	0800c424 	.word	0x0800c424
  ldr r2, =_sbss
 8002010:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002014:	20000480 	.word	0x20000480

08002018 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002018:	e7fe      	b.n	8002018 <ADC1_2_IRQHandler>
	...

0800201c <ILI9341_Select>:
/* vim: set ai et ts=4 sw=4: */
#include "stm32f1xx_hal.h"
#include "st7735.h"
#include <math.h>

static void ILI9341_Select() {
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8002020:	2200      	movs	r2, #0
 8002022:	2110      	movs	r1, #16
 8002024:	4802      	ldr	r0, [pc, #8]	; (8002030 <ILI9341_Select+0x14>)
 8002026:	f001 fd36 	bl	8003a96 <HAL_GPIO_WritePin>
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40010800 	.word	0x40010800

08002034 <ILI9341_Unselect>:

void ILI9341_Unselect() {
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8002038:	2201      	movs	r2, #1
 800203a:	2110      	movs	r1, #16
 800203c:	4802      	ldr	r0, [pc, #8]	; (8002048 <ILI9341_Unselect+0x14>)
 800203e:	f001 fd2a 	bl	8003a96 <HAL_GPIO_WritePin>
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40010800 	.word	0x40010800

0800204c <ILI9341_Reset>:

static void ILI9341_Reset() {
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8002050:	2200      	movs	r2, #0
 8002052:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002056:	4807      	ldr	r0, [pc, #28]	; (8002074 <ILI9341_Reset+0x28>)
 8002058:	f001 fd1d 	bl	8003a96 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800205c:	2005      	movs	r0, #5
 800205e:	f000 fd6f 	bl	8002b40 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8002062:	2201      	movs	r2, #1
 8002064:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002068:	4802      	ldr	r0, [pc, #8]	; (8002074 <ILI9341_Reset+0x28>)
 800206a:	f001 fd14 	bl	8003a96 <HAL_GPIO_WritePin>
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40010800 	.word	0x40010800

08002078 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8002082:	2200      	movs	r2, #0
 8002084:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002088:	4806      	ldr	r0, [pc, #24]	; (80020a4 <ILI9341_WriteCommand+0x2c>)
 800208a:	f001 fd04 	bl	8003a96 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800208e:	1df9      	adds	r1, r7, #7
 8002090:	f04f 33ff 	mov.w	r3, #4294967295
 8002094:	2201      	movs	r2, #1
 8002096:	4804      	ldr	r0, [pc, #16]	; (80020a8 <ILI9341_WriteCommand+0x30>)
 8002098:	f004 ff06 	bl	8006ea8 <HAL_SPI_Transmit>
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40010800 	.word	0x40010800
 80020a8:	20000254 	.word	0x20000254

080020ac <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80020b6:	2201      	movs	r2, #1
 80020b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020bc:	4810      	ldr	r0, [pc, #64]	; (8002100 <ILI9341_WriteData+0x54>)
 80020be:	f001 fcea 	bl	8003a96 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 80020c2:	e015      	b.n	80020f0 <ILI9341_WriteData+0x44>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020ca:	bf28      	it	cs
 80020cc:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80020d0:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80020d2:	89fa      	ldrh	r2, [r7, #14]
 80020d4:	f04f 33ff 	mov.w	r3, #4294967295
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	480a      	ldr	r0, [pc, #40]	; (8002104 <ILI9341_WriteData+0x58>)
 80020dc:	f004 fee4 	bl	8006ea8 <HAL_SPI_Transmit>
        buff += chunk_size;
 80020e0:	89fb      	ldrh	r3, [r7, #14]
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 80020e8:	89fb      	ldrh	r3, [r7, #14]
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1e6      	bne.n	80020c4 <ILI9341_WriteData+0x18>
    }
}
 80020f6:	bf00      	nop
 80020f8:	bf00      	nop
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40010800 	.word	0x40010800
 8002104:	20000254 	.word	0x20000254

08002108 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8002108:	b590      	push	{r4, r7, lr}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	4604      	mov	r4, r0
 8002110:	4608      	mov	r0, r1
 8002112:	4611      	mov	r1, r2
 8002114:	461a      	mov	r2, r3
 8002116:	4623      	mov	r3, r4
 8002118:	80fb      	strh	r3, [r7, #6]
 800211a:	4603      	mov	r3, r0
 800211c:	80bb      	strh	r3, [r7, #4]
 800211e:	460b      	mov	r3, r1
 8002120:	807b      	strh	r3, [r7, #2]
 8002122:	4613      	mov	r3, r2
 8002124:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 8002126:	202a      	movs	r0, #42	; 0x2a
 8002128:	f7ff ffa6 	bl	8002078 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 800212c:	88fb      	ldrh	r3, [r7, #6]
 800212e:	0a1b      	lsrs	r3, r3, #8
 8002130:	b29b      	uxth	r3, r3
 8002132:	b2db      	uxtb	r3, r3
 8002134:	733b      	strb	r3, [r7, #12]
 8002136:	88fb      	ldrh	r3, [r7, #6]
 8002138:	b2db      	uxtb	r3, r3
 800213a:	737b      	strb	r3, [r7, #13]
 800213c:	887b      	ldrh	r3, [r7, #2]
 800213e:	0a1b      	lsrs	r3, r3, #8
 8002140:	b29b      	uxth	r3, r3
 8002142:	b2db      	uxtb	r3, r3
 8002144:	73bb      	strb	r3, [r7, #14]
 8002146:	887b      	ldrh	r3, [r7, #2]
 8002148:	b2db      	uxtb	r3, r3
 800214a:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 800214c:	f107 030c 	add.w	r3, r7, #12
 8002150:	2104      	movs	r1, #4
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff ffaa 	bl	80020ac <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 8002158:	202b      	movs	r0, #43	; 0x2b
 800215a:	f7ff ff8d 	bl	8002078 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 800215e:	88bb      	ldrh	r3, [r7, #4]
 8002160:	0a1b      	lsrs	r3, r3, #8
 8002162:	b29b      	uxth	r3, r3
 8002164:	b2db      	uxtb	r3, r3
 8002166:	723b      	strb	r3, [r7, #8]
 8002168:	88bb      	ldrh	r3, [r7, #4]
 800216a:	b2db      	uxtb	r3, r3
 800216c:	727b      	strb	r3, [r7, #9]
 800216e:	883b      	ldrh	r3, [r7, #0]
 8002170:	0a1b      	lsrs	r3, r3, #8
 8002172:	b29b      	uxth	r3, r3
 8002174:	b2db      	uxtb	r3, r3
 8002176:	72bb      	strb	r3, [r7, #10]
 8002178:	883b      	ldrh	r3, [r7, #0]
 800217a:	b2db      	uxtb	r3, r3
 800217c:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 800217e:	f107 0308 	add.w	r3, r7, #8
 8002182:	2104      	movs	r1, #4
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff ff91 	bl	80020ac <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 800218a:	202c      	movs	r0, #44	; 0x2c
 800218c:	f7ff ff74 	bl	8002078 <ILI9341_WriteCommand>
}
 8002190:	bf00      	nop
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	bd90      	pop	{r4, r7, pc}

08002198 <ILI9341_Init>:

void ILI9341_Init() {
 8002198:	b590      	push	{r4, r7, lr}
 800219a:	b09b      	sub	sp, #108	; 0x6c
 800219c:	af00      	add	r7, sp, #0
    ILI9341_Select();
 800219e:	f7ff ff3d 	bl	800201c <ILI9341_Select>
    ILI9341_Reset();
 80021a2:	f7ff ff53 	bl	800204c <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 80021a6:	2001      	movs	r0, #1
 80021a8:	f7ff ff66 	bl	8002078 <ILI9341_WriteCommand>
    HAL_Delay(1000);
 80021ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021b0:	f000 fcc6 	bl	8002b40 <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 80021b4:	20cb      	movs	r0, #203	; 0xcb
 80021b6:	f7ff ff5f 	bl	8002078 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 80021ba:	4a87      	ldr	r2, [pc, #540]	; (80023d8 <ILI9341_Init+0x240>)
 80021bc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80021c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021c4:	6018      	str	r0, [r3, #0]
 80021c6:	3304      	adds	r3, #4
 80021c8:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80021ca:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80021ce:	2105      	movs	r1, #5
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff6b 	bl	80020ac <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 80021d6:	20cf      	movs	r0, #207	; 0xcf
 80021d8:	f7ff ff4e 	bl	8002078 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 80021dc:	4a7f      	ldr	r2, [pc, #508]	; (80023dc <ILI9341_Init+0x244>)
 80021de:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80021e2:	6812      	ldr	r2, [r2, #0]
 80021e4:	4611      	mov	r1, r2
 80021e6:	8019      	strh	r1, [r3, #0]
 80021e8:	3302      	adds	r3, #2
 80021ea:	0c12      	lsrs	r2, r2, #16
 80021ec:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80021ee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80021f2:	2103      	movs	r1, #3
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ff59 	bl	80020ac <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 80021fa:	20e8      	movs	r0, #232	; 0xe8
 80021fc:	f7ff ff3c 	bl	8002078 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8002200:	4a77      	ldr	r2, [pc, #476]	; (80023e0 <ILI9341_Init+0x248>)
 8002202:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002206:	6812      	ldr	r2, [r2, #0]
 8002208:	4611      	mov	r1, r2
 800220a:	8019      	strh	r1, [r3, #0]
 800220c:	3302      	adds	r3, #2
 800220e:	0c12      	lsrs	r2, r2, #16
 8002210:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8002212:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002216:	2103      	movs	r1, #3
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff ff47 	bl	80020ac <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 800221e:	20ea      	movs	r0, #234	; 0xea
 8002220:	f7ff ff2a 	bl	8002078 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 8002224:	2300      	movs	r3, #0
 8002226:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        ILI9341_WriteData(data, sizeof(data));
 800222a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800222e:	2102      	movs	r1, #2
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff ff3b 	bl	80020ac <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 8002236:	20ed      	movs	r0, #237	; 0xed
 8002238:	f7ff ff1e 	bl	8002078 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 800223c:	4b69      	ldr	r3, [pc, #420]	; (80023e4 <ILI9341_Init+0x24c>)
 800223e:	653b      	str	r3, [r7, #80]	; 0x50
        ILI9341_WriteData(data, sizeof(data));
 8002240:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002244:	2104      	movs	r1, #4
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff ff30 	bl	80020ac <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 800224c:	20f7      	movs	r0, #247	; 0xf7
 800224e:	f7ff ff13 	bl	8002078 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 8002252:	2320      	movs	r3, #32
 8002254:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        ILI9341_WriteData(data, sizeof(data));
 8002258:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800225c:	2101      	movs	r1, #1
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff ff24 	bl	80020ac <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 8002264:	20c0      	movs	r0, #192	; 0xc0
 8002266:	f7ff ff07 	bl	8002078 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 800226a:	2323      	movs	r3, #35	; 0x23
 800226c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        ILI9341_WriteData(data, sizeof(data));
 8002270:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002274:	2101      	movs	r1, #1
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff ff18 	bl	80020ac <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 800227c:	20c1      	movs	r0, #193	; 0xc1
 800227e:	f7ff fefb 	bl	8002078 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 8002282:	2310      	movs	r3, #16
 8002284:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        ILI9341_WriteData(data, sizeof(data));
 8002288:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800228c:	2101      	movs	r1, #1
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff ff0c 	bl	80020ac <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 8002294:	20c5      	movs	r0, #197	; 0xc5
 8002296:	f7ff feef 	bl	8002078 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 800229a:	f642 033e 	movw	r3, #10302	; 0x283e
 800229e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        ILI9341_WriteData(data, sizeof(data));
 80022a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022a6:	2102      	movs	r1, #2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff feff 	bl	80020ac <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 80022ae:	20c7      	movs	r0, #199	; 0xc7
 80022b0:	f7ff fee2 	bl	8002078 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 80022b4:	2386      	movs	r3, #134	; 0x86
 80022b6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        ILI9341_WriteData(data, sizeof(data));
 80022ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022be:	2101      	movs	r1, #1
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff fef3 	bl	80020ac <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 80022c6:	2036      	movs	r0, #54	; 0x36
 80022c8:	f7ff fed6 	bl	8002078 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 80022cc:	2348      	movs	r3, #72	; 0x48
 80022ce:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        ILI9341_WriteData(data, sizeof(data));
 80022d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022d6:	2101      	movs	r1, #1
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff fee7 	bl	80020ac <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 80022de:	203a      	movs	r0, #58	; 0x3a
 80022e0:	f7ff feca 	bl	8002078 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 80022e4:	2355      	movs	r3, #85	; 0x55
 80022e6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        ILI9341_WriteData(data, sizeof(data));
 80022ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022ee:	2101      	movs	r1, #1
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fedb 	bl	80020ac <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 80022f6:	20b1      	movs	r0, #177	; 0xb1
 80022f8:	f7ff febe 	bl	8002078 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 80022fc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002300:	863b      	strh	r3, [r7, #48]	; 0x30
        ILI9341_WriteData(data, sizeof(data));
 8002302:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002306:	2102      	movs	r1, #2
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff fecf 	bl	80020ac <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 800230e:	20b6      	movs	r0, #182	; 0xb6
 8002310:	f7ff feb2 	bl	8002078 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 8002314:	4a34      	ldr	r2, [pc, #208]	; (80023e8 <ILI9341_Init+0x250>)
 8002316:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800231a:	6812      	ldr	r2, [r2, #0]
 800231c:	4611      	mov	r1, r2
 800231e:	8019      	strh	r1, [r3, #0]
 8002320:	3302      	adds	r3, #2
 8002322:	0c12      	lsrs	r2, r2, #16
 8002324:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8002326:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800232a:	2103      	movs	r1, #3
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff febd 	bl	80020ac <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 8002332:	20f2      	movs	r0, #242	; 0xf2
 8002334:	f7ff fea0 	bl	8002078 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 8002338:	2300      	movs	r3, #0
 800233a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        ILI9341_WriteData(data, sizeof(data));
 800233e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002342:	2101      	movs	r1, #1
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff feb1 	bl	80020ac <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 800234a:	2026      	movs	r0, #38	; 0x26
 800234c:	f7ff fe94 	bl	8002078 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 8002350:	2301      	movs	r3, #1
 8002352:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        ILI9341_WriteData(data, sizeof(data));
 8002356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800235a:	2101      	movs	r1, #1
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff fea5 	bl	80020ac <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 8002362:	20e0      	movs	r0, #224	; 0xe0
 8002364:	f7ff fe88 	bl	8002078 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8002368:	4b20      	ldr	r3, [pc, #128]	; (80023ec <ILI9341_Init+0x254>)
 800236a:	f107 0414 	add.w	r4, r7, #20
 800236e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002370:	c407      	stmia	r4!, {r0, r1, r2}
 8002372:	8023      	strh	r3, [r4, #0]
 8002374:	3402      	adds	r4, #2
 8002376:	0c1b      	lsrs	r3, r3, #16
 8002378:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 800237a:	f107 0314 	add.w	r3, r7, #20
 800237e:	210f      	movs	r1, #15
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff fe93 	bl	80020ac <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 8002386:	20e1      	movs	r0, #225	; 0xe1
 8002388:	f7ff fe76 	bl	8002078 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 800238c:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <ILI9341_Init+0x258>)
 800238e:	1d3c      	adds	r4, r7, #4
 8002390:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002392:	c407      	stmia	r4!, {r0, r1, r2}
 8002394:	8023      	strh	r3, [r4, #0]
 8002396:	3402      	adds	r4, #2
 8002398:	0c1b      	lsrs	r3, r3, #16
 800239a:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 800239c:	1d3b      	adds	r3, r7, #4
 800239e:	210f      	movs	r1, #15
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff fe83 	bl	80020ac <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 80023a6:	2011      	movs	r0, #17
 80023a8:	f7ff fe66 	bl	8002078 <ILI9341_WriteCommand>
    HAL_Delay(120);
 80023ac:	2078      	movs	r0, #120	; 0x78
 80023ae:	f000 fbc7 	bl	8002b40 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 80023b2:	2029      	movs	r0, #41	; 0x29
 80023b4:	f7ff fe60 	bl	8002078 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 80023b8:	2036      	movs	r0, #54	; 0x36
 80023ba:	f7ff fe5d 	bl	8002078 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 80023be:	23a0      	movs	r3, #160	; 0xa0
 80023c0:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 80023c2:	463b      	mov	r3, r7
 80023c4:	2101      	movs	r1, #1
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff fe70 	bl	80020ac <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 80023cc:	f7ff fe32 	bl	8002034 <ILI9341_Unselect>
}
 80023d0:	bf00      	nop
 80023d2:	376c      	adds	r7, #108	; 0x6c
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd90      	pop	{r4, r7, pc}
 80023d8:	0800ab00 	.word	0x0800ab00
 80023dc:	0800ab08 	.word	0x0800ab08
 80023e0:	0800ab0c 	.word	0x0800ab0c
 80023e4:	81120364 	.word	0x81120364
 80023e8:	0800ab10 	.word	0x0800ab10
 80023ec:	0800ab14 	.word	0x0800ab14
 80023f0:	0800ab24 	.word	0x0800ab24

080023f4 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	80fb      	strh	r3, [r7, #6]
 80023fe:	460b      	mov	r3, r1
 8002400:	80bb      	strh	r3, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	807b      	strh	r3, [r7, #2]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 8002406:	88fb      	ldrh	r3, [r7, #6]
 8002408:	2b9f      	cmp	r3, #159	; 0x9f
 800240a:	d81f      	bhi.n	800244c <ILI9341_DrawPixel+0x58>
 800240c:	88bb      	ldrh	r3, [r7, #4]
 800240e:	2b7f      	cmp	r3, #127	; 0x7f
 8002410:	d81c      	bhi.n	800244c <ILI9341_DrawPixel+0x58>
        return;

    ILI9341_Select();
 8002412:	f7ff fe03 	bl	800201c <ILI9341_Select>

    ILI9341_SetAddressWindow(x, y, x+1, y+1);
 8002416:	88fb      	ldrh	r3, [r7, #6]
 8002418:	3301      	adds	r3, #1
 800241a:	b29a      	uxth	r2, r3
 800241c:	88bb      	ldrh	r3, [r7, #4]
 800241e:	3301      	adds	r3, #1
 8002420:	b29b      	uxth	r3, r3
 8002422:	88b9      	ldrh	r1, [r7, #4]
 8002424:	88f8      	ldrh	r0, [r7, #6]
 8002426:	f7ff fe6f 	bl	8002108 <ILI9341_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 800242a:	887b      	ldrh	r3, [r7, #2]
 800242c:	0a1b      	lsrs	r3, r3, #8
 800242e:	b29b      	uxth	r3, r3
 8002430:	b2db      	uxtb	r3, r3
 8002432:	733b      	strb	r3, [r7, #12]
 8002434:	887b      	ldrh	r3, [r7, #2]
 8002436:	b2db      	uxtb	r3, r3
 8002438:	737b      	strb	r3, [r7, #13]
    ILI9341_WriteData(data, sizeof(data));
 800243a:	f107 030c 	add.w	r3, r7, #12
 800243e:	2102      	movs	r1, #2
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff fe33 	bl	80020ac <ILI9341_WriteData>

    ILI9341_Unselect();
 8002446:	f7ff fdf5 	bl	8002034 <ILI9341_Unselect>
 800244a:	e000      	b.n	800244e <ILI9341_DrawPixel+0x5a>
        return;
 800244c:	bf00      	nop
}
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <ILI9341_WriteChar>:

void ILI9341_DrawPoint(struct point point_a, uint16_t color) {
	ILI9341_DrawPixel(point_a.x, point_a.y, color);
}

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002454:	b082      	sub	sp, #8
 8002456:	b590      	push	{r4, r7, lr}
 8002458:	b089      	sub	sp, #36	; 0x24
 800245a:	af00      	add	r7, sp, #0
 800245c:	637b      	str	r3, [r7, #52]	; 0x34
 800245e:	4603      	mov	r3, r0
 8002460:	80fb      	strh	r3, [r7, #6]
 8002462:	460b      	mov	r3, r1
 8002464:	80bb      	strh	r3, [r7, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800246a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800246e:	b29a      	uxth	r2, r3
 8002470:	88fb      	ldrh	r3, [r7, #6]
 8002472:	4413      	add	r3, r2
 8002474:	b29b      	uxth	r3, r3
 8002476:	3b01      	subs	r3, #1
 8002478:	b29c      	uxth	r4, r3
 800247a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800247e:	b29a      	uxth	r2, r3
 8002480:	88bb      	ldrh	r3, [r7, #4]
 8002482:	4413      	add	r3, r2
 8002484:	b29b      	uxth	r3, r3
 8002486:	3b01      	subs	r3, #1
 8002488:	b29b      	uxth	r3, r3
 800248a:	88b9      	ldrh	r1, [r7, #4]
 800248c:	88f8      	ldrh	r0, [r7, #6]
 800248e:	4622      	mov	r2, r4
 8002490:	f7ff fe3a 	bl	8002108 <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8002494:	2300      	movs	r3, #0
 8002496:	61fb      	str	r3, [r7, #28]
 8002498:	e043      	b.n	8002522 <ILI9341_WriteChar+0xce>
        b = font.data[(ch - 32) * font.height + i];
 800249a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800249c:	78fb      	ldrb	r3, [r7, #3]
 800249e:	3b20      	subs	r3, #32
 80024a0:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80024a4:	fb01 f303 	mul.w	r3, r1, r3
 80024a8:	4619      	mov	r1, r3
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	440b      	add	r3, r1
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	4413      	add	r3, r2
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80024b6:	2300      	movs	r3, #0
 80024b8:	61bb      	str	r3, [r7, #24]
 80024ba:	e029      	b.n	8002510 <ILI9341_WriteChar+0xbc>
            if((b << j) & 0x8000)  {
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00e      	beq.n	80024ea <ILI9341_WriteChar+0x96>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80024cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80024ce:	0a1b      	lsrs	r3, r3, #8
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	743b      	strb	r3, [r7, #16]
 80024d6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 80024dc:	f107 0310 	add.w	r3, r7, #16
 80024e0:	2102      	movs	r1, #2
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff fde2 	bl	80020ac <ILI9341_WriteData>
 80024e8:	e00f      	b.n	800250a <ILI9341_WriteChar+0xb6>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80024ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80024ee:	0a1b      	lsrs	r3, r3, #8
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	733b      	strb	r3, [r7, #12]
 80024f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 80024fe:	f107 030c 	add.w	r3, r7, #12
 8002502:	2102      	movs	r1, #2
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff fdd1 	bl	80020ac <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	3301      	adds	r3, #1
 800250e:	61bb      	str	r3, [r7, #24]
 8002510:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002514:	461a      	mov	r2, r3
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	4293      	cmp	r3, r2
 800251a:	d3cf      	bcc.n	80024bc <ILI9341_WriteChar+0x68>
    for(i = 0; i < font.height; i++) {
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	3301      	adds	r3, #1
 8002520:	61fb      	str	r3, [r7, #28]
 8002522:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002526:	461a      	mov	r2, r3
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	4293      	cmp	r3, r2
 800252c:	d3b5      	bcc.n	800249a <ILI9341_WriteChar+0x46>
            }
        }
    }
}
 800252e:	bf00      	nop
 8002530:	bf00      	nop
 8002532:	3724      	adds	r7, #36	; 0x24
 8002534:	46bd      	mov	sp, r7
 8002536:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800253a:	b002      	add	sp, #8
 800253c:	4770      	bx	lr

0800253e <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800253e:	b082      	sub	sp, #8
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af04      	add	r7, sp, #16
 8002546:	603a      	str	r2, [r7, #0]
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	4603      	mov	r3, r0
 800254c:	80fb      	strh	r3, [r7, #6]
 800254e:	460b      	mov	r3, r1
 8002550:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 8002552:	f7ff fd63 	bl	800201c <ILI9341_Select>

    while(*str) {
 8002556:	e02d      	b.n	80025b4 <ILI9341_WriteString+0x76>
        if(x + font.width >= ILI9341_WIDTH) {
 8002558:	88fb      	ldrh	r3, [r7, #6]
 800255a:	7d3a      	ldrb	r2, [r7, #20]
 800255c:	4413      	add	r3, r2
 800255e:	2b9f      	cmp	r3, #159	; 0x9f
 8002560:	dd13      	ble.n	800258a <ILI9341_WriteString+0x4c>
            x = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8002566:	7d7b      	ldrb	r3, [r7, #21]
 8002568:	b29a      	uxth	r2, r3
 800256a:	88bb      	ldrh	r3, [r7, #4]
 800256c:	4413      	add	r3, r2
 800256e:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 8002570:	88bb      	ldrh	r3, [r7, #4]
 8002572:	7d7a      	ldrb	r2, [r7, #21]
 8002574:	4413      	add	r3, r2
 8002576:	2b7f      	cmp	r3, #127	; 0x7f
 8002578:	dc21      	bgt.n	80025be <ILI9341_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b20      	cmp	r3, #32
 8002580:	d103      	bne.n	800258a <ILI9341_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	3301      	adds	r3, #1
 8002586:	603b      	str	r3, [r7, #0]
                continue;
 8002588:	e014      	b.n	80025b4 <ILI9341_WriteString+0x76>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	781a      	ldrb	r2, [r3, #0]
 800258e:	88b9      	ldrh	r1, [r7, #4]
 8002590:	88f8      	ldrh	r0, [r7, #6]
 8002592:	8c3b      	ldrh	r3, [r7, #32]
 8002594:	9302      	str	r3, [sp, #8]
 8002596:	8bbb      	ldrh	r3, [r7, #28]
 8002598:	9301      	str	r3, [sp, #4]
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f7ff ff58 	bl	8002454 <ILI9341_WriteChar>
        x += font.width;
 80025a4:	7d3b      	ldrb	r3, [r7, #20]
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	88fb      	ldrh	r3, [r7, #6]
 80025aa:	4413      	add	r3, r2
 80025ac:	80fb      	strh	r3, [r7, #6]
        str++;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	3301      	adds	r3, #1
 80025b2:	603b      	str	r3, [r7, #0]
    while(*str) {
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1cd      	bne.n	8002558 <ILI9341_WriteString+0x1a>
 80025bc:	e000      	b.n	80025c0 <ILI9341_WriteString+0x82>
                break;
 80025be:	bf00      	nop
    }

    ILI9341_Unselect();
 80025c0:	f7ff fd38 	bl	8002034 <ILI9341_Unselect>
}
 80025c4:	bf00      	nop
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80025ce:	b002      	add	sp, #8
 80025d0:	4770      	bx	lr
	...

080025d4 <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80025d4:	b590      	push	{r4, r7, lr}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4604      	mov	r4, r0
 80025dc:	4608      	mov	r0, r1
 80025de:	4611      	mov	r1, r2
 80025e0:	461a      	mov	r2, r3
 80025e2:	4623      	mov	r3, r4
 80025e4:	80fb      	strh	r3, [r7, #6]
 80025e6:	4603      	mov	r3, r0
 80025e8:	80bb      	strh	r3, [r7, #4]
 80025ea:	460b      	mov	r3, r1
 80025ec:	807b      	strh	r3, [r7, #2]
 80025ee:	4613      	mov	r3, r2
 80025f0:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 80025f2:	88fb      	ldrh	r3, [r7, #6]
 80025f4:	2b9f      	cmp	r3, #159	; 0x9f
 80025f6:	d852      	bhi.n	800269e <ILI9341_FillRectangle+0xca>
 80025f8:	88bb      	ldrh	r3, [r7, #4]
 80025fa:	2b7f      	cmp	r3, #127	; 0x7f
 80025fc:	d84f      	bhi.n	800269e <ILI9341_FillRectangle+0xca>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 80025fe:	88fa      	ldrh	r2, [r7, #6]
 8002600:	887b      	ldrh	r3, [r7, #2]
 8002602:	4413      	add	r3, r2
 8002604:	2ba0      	cmp	r3, #160	; 0xa0
 8002606:	dd03      	ble.n	8002610 <ILI9341_FillRectangle+0x3c>
 8002608:	88fb      	ldrh	r3, [r7, #6]
 800260a:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 800260e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8002610:	88ba      	ldrh	r2, [r7, #4]
 8002612:	883b      	ldrh	r3, [r7, #0]
 8002614:	4413      	add	r3, r2
 8002616:	2b80      	cmp	r3, #128	; 0x80
 8002618:	dd03      	ble.n	8002622 <ILI9341_FillRectangle+0x4e>
 800261a:	88bb      	ldrh	r3, [r7, #4]
 800261c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002620:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 8002622:	f7ff fcfb 	bl	800201c <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002626:	88fa      	ldrh	r2, [r7, #6]
 8002628:	887b      	ldrh	r3, [r7, #2]
 800262a:	4413      	add	r3, r2
 800262c:	b29b      	uxth	r3, r3
 800262e:	3b01      	subs	r3, #1
 8002630:	b29c      	uxth	r4, r3
 8002632:	88ba      	ldrh	r2, [r7, #4]
 8002634:	883b      	ldrh	r3, [r7, #0]
 8002636:	4413      	add	r3, r2
 8002638:	b29b      	uxth	r3, r3
 800263a:	3b01      	subs	r3, #1
 800263c:	b29b      	uxth	r3, r3
 800263e:	88b9      	ldrh	r1, [r7, #4]
 8002640:	88f8      	ldrh	r0, [r7, #6]
 8002642:	4622      	mov	r2, r4
 8002644:	f7ff fd60 	bl	8002108 <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8002648:	8c3b      	ldrh	r3, [r7, #32]
 800264a:	0a1b      	lsrs	r3, r3, #8
 800264c:	b29b      	uxth	r3, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	733b      	strb	r3, [r7, #12]
 8002652:	8c3b      	ldrh	r3, [r7, #32]
 8002654:	b2db      	uxtb	r3, r3
 8002656:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8002658:	2201      	movs	r2, #1
 800265a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800265e:	4812      	ldr	r0, [pc, #72]	; (80026a8 <ILI9341_FillRectangle+0xd4>)
 8002660:	f001 fa19 	bl	8003a96 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8002664:	883b      	ldrh	r3, [r7, #0]
 8002666:	80bb      	strh	r3, [r7, #4]
 8002668:	e013      	b.n	8002692 <ILI9341_FillRectangle+0xbe>
        for(x = w; x > 0; x--) {
 800266a:	887b      	ldrh	r3, [r7, #2]
 800266c:	80fb      	strh	r3, [r7, #6]
 800266e:	e00a      	b.n	8002686 <ILI9341_FillRectangle+0xb2>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8002670:	f107 010c 	add.w	r1, r7, #12
 8002674:	f04f 33ff 	mov.w	r3, #4294967295
 8002678:	2202      	movs	r2, #2
 800267a:	480c      	ldr	r0, [pc, #48]	; (80026ac <ILI9341_FillRectangle+0xd8>)
 800267c:	f004 fc14 	bl	8006ea8 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8002680:	88fb      	ldrh	r3, [r7, #6]
 8002682:	3b01      	subs	r3, #1
 8002684:	80fb      	strh	r3, [r7, #6]
 8002686:	88fb      	ldrh	r3, [r7, #6]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1f1      	bne.n	8002670 <ILI9341_FillRectangle+0x9c>
    for(y = h; y > 0; y--) {
 800268c:	88bb      	ldrh	r3, [r7, #4]
 800268e:	3b01      	subs	r3, #1
 8002690:	80bb      	strh	r3, [r7, #4]
 8002692:	88bb      	ldrh	r3, [r7, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1e8      	bne.n	800266a <ILI9341_FillRectangle+0x96>
        }
    }

    ILI9341_Unselect();
 8002698:	f7ff fccc 	bl	8002034 <ILI9341_Unselect>
 800269c:	e000      	b.n	80026a0 <ILI9341_FillRectangle+0xcc>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 800269e:	bf00      	nop
}
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd90      	pop	{r4, r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40010800 	.word	0x40010800
 80026ac:	20000254 	.word	0x20000254

080026b0 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af02      	add	r7, sp, #8
 80026b6:	4603      	mov	r3, r0
 80026b8:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 80026ba:	88fb      	ldrh	r3, [r7, #6]
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	2380      	movs	r3, #128	; 0x80
 80026c0:	22a0      	movs	r2, #160	; 0xa0
 80026c2:	2100      	movs	r1, #0
 80026c4:	2000      	movs	r0, #0
 80026c6:	f7ff ff85 	bl	80025d4 <ILI9341_FillRectangle>
}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <ILI9341_DrawLine>:
    ILI9341_WriteCommand(invert ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
    ILI9341_Unselect();
}


void ILI9341_DrawLine(struct point point_a, struct point point_b, uint16_t color, int width) {
 80026d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026d4:	b08d      	sub	sp, #52	; 0x34
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	81b8      	strh	r0, [r7, #12]
 80026da:	8139      	strh	r1, [r7, #8]
 80026dc:	603b      	str	r3, [r7, #0]
 80026de:	4613      	mov	r3, r2
 80026e0:	80fb      	strh	r3, [r7, #6]
	float x = point_a.x;
 80026e2:	7b3b      	ldrb	r3, [r7, #12]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fe faa5 	bl	8000c34 <__aeabi_ui2f>
 80026ea:	4603      	mov	r3, r0
 80026ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	float y = point_a.y;
 80026ee:	7b7b      	ldrb	r3, [r7, #13]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7fe fa9f 	bl	8000c34 <__aeabi_ui2f>
 80026f6:	4603      	mov	r3, r0
 80026f8:	62bb      	str	r3, [r7, #40]	; 0x28
	int16_t dx = point_b.x - point_a.x;
 80026fa:	7a3b      	ldrb	r3, [r7, #8]
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	7b3b      	ldrb	r3, [r7, #12]
 8002700:	b29b      	uxth	r3, r3
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	b29b      	uxth	r3, r3
 8002706:	83fb      	strh	r3, [r7, #30]
	int16_t dy = point_b.y - point_a.y;
 8002708:	7a7b      	ldrb	r3, [r7, #9]
 800270a:	b29a      	uxth	r2, r3
 800270c:	7b7b      	ldrb	r3, [r7, #13]
 800270e:	b29b      	uxth	r3, r3
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	b29b      	uxth	r3, r3
 8002714:	83bb      	strh	r3, [r7, #28]
	int steps = abs(dx) > abs(dy) ? abs(dx) : abs(dy);
 8002716:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800271a:	2b00      	cmp	r3, #0
 800271c:	bfb8      	it	lt
 800271e:	425b      	neglt	r3, r3
 8002720:	b29a      	uxth	r2, r3
 8002722:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002726:	2b00      	cmp	r3, #0
 8002728:	bfb8      	it	lt
 800272a:	425b      	neglt	r3, r3
 800272c:	b29b      	uxth	r3, r3
 800272e:	4293      	cmp	r3, r2
 8002730:	bf38      	it	cc
 8002732:	4613      	movcc	r3, r2
 8002734:	b29b      	uxth	r3, r3
 8002736:	61bb      	str	r3, [r7, #24]
	float x_increment = dx / (float) steps;
 8002738:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800273c:	4618      	mov	r0, r3
 800273e:	f7fe fa7d 	bl	8000c3c <__aeabi_i2f>
 8002742:	4604      	mov	r4, r0
 8002744:	69b8      	ldr	r0, [r7, #24]
 8002746:	f7fe fa79 	bl	8000c3c <__aeabi_i2f>
 800274a:	4603      	mov	r3, r0
 800274c:	4619      	mov	r1, r3
 800274e:	4620      	mov	r0, r4
 8002750:	f7fe fb7c 	bl	8000e4c <__aeabi_fdiv>
 8002754:	4603      	mov	r3, r0
 8002756:	617b      	str	r3, [r7, #20]
	float y_increment = dy / (float) steps;
 8002758:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800275c:	4618      	mov	r0, r3
 800275e:	f7fe fa6d 	bl	8000c3c <__aeabi_i2f>
 8002762:	4604      	mov	r4, r0
 8002764:	69b8      	ldr	r0, [r7, #24]
 8002766:	f7fe fa69 	bl	8000c3c <__aeabi_i2f>
 800276a:	4603      	mov	r3, r0
 800276c:	4619      	mov	r1, r3
 800276e:	4620      	mov	r0, r4
 8002770:	f7fe fb6c 	bl	8000e4c <__aeabi_fdiv>
 8002774:	4603      	mov	r3, r0
 8002776:	613b      	str	r3, [r7, #16]

	for (int v = 0; v < steps; v++) {
 8002778:	2300      	movs	r3, #0
 800277a:	627b      	str	r3, [r7, #36]	; 0x24
 800277c:	e134      	b.n	80029e8 <ILI9341_DrawLine+0x316>
		x = x + x_increment;
 800277e:	6979      	ldr	r1, [r7, #20]
 8002780:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002782:	f7fe f9a7 	bl	8000ad4 <__addsf3>
 8002786:	4603      	mov	r3, r0
 8002788:	62fb      	str	r3, [r7, #44]	; 0x2c
		y = y + y_increment;
 800278a:	6939      	ldr	r1, [r7, #16]
 800278c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800278e:	f7fe f9a1 	bl	8000ad4 <__addsf3>
 8002792:	4603      	mov	r3, r0
 8002794:	62bb      	str	r3, [r7, #40]	; 0x28
		if (width != 0 )
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 80fb 	beq.w	8002994 <ILI9341_DrawLine+0x2c2>
			for (int j = 0; j < width; j++) {
 800279e:	2300      	movs	r3, #0
 80027a0:	623b      	str	r3, [r7, #32]
 80027a2:	e0f1      	b.n	8002988 <ILI9341_DrawLine+0x2b6>
				ILI9341_DrawPixel(round(x), round(y), color);
 80027a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027a6:	f7fd fe3f 	bl	8000428 <__aeabi_f2d>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	4610      	mov	r0, r2
 80027b0:	4619      	mov	r1, r3
 80027b2:	f008 f90b 	bl	800a9cc <round>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	4610      	mov	r0, r2
 80027bc:	4619      	mov	r1, r3
 80027be:	f7fe f963 	bl	8000a88 <__aeabi_d2uiz>
 80027c2:	4603      	mov	r3, r0
 80027c4:	b29c      	uxth	r4, r3
 80027c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027c8:	f7fd fe2e 	bl	8000428 <__aeabi_f2d>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	4610      	mov	r0, r2
 80027d2:	4619      	mov	r1, r3
 80027d4:	f008 f8fa 	bl	800a9cc <round>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4610      	mov	r0, r2
 80027de:	4619      	mov	r1, r3
 80027e0:	f7fe f952 	bl	8000a88 <__aeabi_d2uiz>
 80027e4:	4603      	mov	r3, r0
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	88fa      	ldrh	r2, [r7, #6]
 80027ea:	4619      	mov	r1, r3
 80027ec:	4620      	mov	r0, r4
 80027ee:	f7ff fe01 	bl	80023f4 <ILI9341_DrawPixel>
				ILI9341_DrawPixel(round(x) - width, round(y), color);
 80027f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027f4:	f7fd fe18 	bl	8000428 <__aeabi_f2d>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4610      	mov	r0, r2
 80027fe:	4619      	mov	r1, r3
 8002800:	f008 f8e4 	bl	800a9cc <round>
 8002804:	4604      	mov	r4, r0
 8002806:	460d      	mov	r5, r1
 8002808:	6838      	ldr	r0, [r7, #0]
 800280a:	f7fd fdfb 	bl	8000404 <__aeabi_i2d>
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	4620      	mov	r0, r4
 8002814:	4629      	mov	r1, r5
 8002816:	f7fd fca7 	bl	8000168 <__aeabi_dsub>
 800281a:	4602      	mov	r2, r0
 800281c:	460b      	mov	r3, r1
 800281e:	4610      	mov	r0, r2
 8002820:	4619      	mov	r1, r3
 8002822:	f7fe f931 	bl	8000a88 <__aeabi_d2uiz>
 8002826:	4603      	mov	r3, r0
 8002828:	b29c      	uxth	r4, r3
 800282a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800282c:	f7fd fdfc 	bl	8000428 <__aeabi_f2d>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4610      	mov	r0, r2
 8002836:	4619      	mov	r1, r3
 8002838:	f008 f8c8 	bl	800a9cc <round>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4610      	mov	r0, r2
 8002842:	4619      	mov	r1, r3
 8002844:	f7fe f920 	bl	8000a88 <__aeabi_d2uiz>
 8002848:	4603      	mov	r3, r0
 800284a:	b29b      	uxth	r3, r3
 800284c:	88fa      	ldrh	r2, [r7, #6]
 800284e:	4619      	mov	r1, r3
 8002850:	4620      	mov	r0, r4
 8002852:	f7ff fdcf 	bl	80023f4 <ILI9341_DrawPixel>
				ILI9341_DrawPixel(round(x) + width, round(y), color);
 8002856:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002858:	f7fd fde6 	bl	8000428 <__aeabi_f2d>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	4610      	mov	r0, r2
 8002862:	4619      	mov	r1, r3
 8002864:	f008 f8b2 	bl	800a9cc <round>
 8002868:	4604      	mov	r4, r0
 800286a:	460d      	mov	r5, r1
 800286c:	6838      	ldr	r0, [r7, #0]
 800286e:	f7fd fdc9 	bl	8000404 <__aeabi_i2d>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4620      	mov	r0, r4
 8002878:	4629      	mov	r1, r5
 800287a:	f7fd fc77 	bl	800016c <__adddf3>
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	4610      	mov	r0, r2
 8002884:	4619      	mov	r1, r3
 8002886:	f7fe f8ff 	bl	8000a88 <__aeabi_d2uiz>
 800288a:	4603      	mov	r3, r0
 800288c:	b29c      	uxth	r4, r3
 800288e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002890:	f7fd fdca 	bl	8000428 <__aeabi_f2d>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	4610      	mov	r0, r2
 800289a:	4619      	mov	r1, r3
 800289c:	f008 f896 	bl	800a9cc <round>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	4610      	mov	r0, r2
 80028a6:	4619      	mov	r1, r3
 80028a8:	f7fe f8ee 	bl	8000a88 <__aeabi_d2uiz>
 80028ac:	4603      	mov	r3, r0
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	88fa      	ldrh	r2, [r7, #6]
 80028b2:	4619      	mov	r1, r3
 80028b4:	4620      	mov	r0, r4
 80028b6:	f7ff fd9d 	bl	80023f4 <ILI9341_DrawPixel>
				ILI9341_DrawPixel(round(x), round(y) - width, color);
 80028ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80028bc:	f7fd fdb4 	bl	8000428 <__aeabi_f2d>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4610      	mov	r0, r2
 80028c6:	4619      	mov	r1, r3
 80028c8:	f008 f880 	bl	800a9cc <round>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4610      	mov	r0, r2
 80028d2:	4619      	mov	r1, r3
 80028d4:	f7fe f8d8 	bl	8000a88 <__aeabi_d2uiz>
 80028d8:	4603      	mov	r3, r0
 80028da:	b29e      	uxth	r6, r3
 80028dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028de:	f7fd fda3 	bl	8000428 <__aeabi_f2d>
 80028e2:	4602      	mov	r2, r0
 80028e4:	460b      	mov	r3, r1
 80028e6:	4610      	mov	r0, r2
 80028e8:	4619      	mov	r1, r3
 80028ea:	f008 f86f 	bl	800a9cc <round>
 80028ee:	4604      	mov	r4, r0
 80028f0:	460d      	mov	r5, r1
 80028f2:	6838      	ldr	r0, [r7, #0]
 80028f4:	f7fd fd86 	bl	8000404 <__aeabi_i2d>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	4620      	mov	r0, r4
 80028fe:	4629      	mov	r1, r5
 8002900:	f7fd fc32 	bl	8000168 <__aeabi_dsub>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4610      	mov	r0, r2
 800290a:	4619      	mov	r1, r3
 800290c:	f7fe f8bc 	bl	8000a88 <__aeabi_d2uiz>
 8002910:	4603      	mov	r3, r0
 8002912:	b29b      	uxth	r3, r3
 8002914:	88fa      	ldrh	r2, [r7, #6]
 8002916:	4619      	mov	r1, r3
 8002918:	4630      	mov	r0, r6
 800291a:	f7ff fd6b 	bl	80023f4 <ILI9341_DrawPixel>
				ILI9341_DrawPixel(round(x), round(y) + width, color);
 800291e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002920:	f7fd fd82 	bl	8000428 <__aeabi_f2d>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	4610      	mov	r0, r2
 800292a:	4619      	mov	r1, r3
 800292c:	f008 f84e 	bl	800a9cc <round>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4610      	mov	r0, r2
 8002936:	4619      	mov	r1, r3
 8002938:	f7fe f8a6 	bl	8000a88 <__aeabi_d2uiz>
 800293c:	4603      	mov	r3, r0
 800293e:	b29e      	uxth	r6, r3
 8002940:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002942:	f7fd fd71 	bl	8000428 <__aeabi_f2d>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	4610      	mov	r0, r2
 800294c:	4619      	mov	r1, r3
 800294e:	f008 f83d 	bl	800a9cc <round>
 8002952:	4604      	mov	r4, r0
 8002954:	460d      	mov	r5, r1
 8002956:	6838      	ldr	r0, [r7, #0]
 8002958:	f7fd fd54 	bl	8000404 <__aeabi_i2d>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	4620      	mov	r0, r4
 8002962:	4629      	mov	r1, r5
 8002964:	f7fd fc02 	bl	800016c <__adddf3>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4610      	mov	r0, r2
 800296e:	4619      	mov	r1, r3
 8002970:	f7fe f88a 	bl	8000a88 <__aeabi_d2uiz>
 8002974:	4603      	mov	r3, r0
 8002976:	b29b      	uxth	r3, r3
 8002978:	88fa      	ldrh	r2, [r7, #6]
 800297a:	4619      	mov	r1, r3
 800297c:	4630      	mov	r0, r6
 800297e:	f7ff fd39 	bl	80023f4 <ILI9341_DrawPixel>
			for (int j = 0; j < width; j++) {
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	3301      	adds	r3, #1
 8002986:	623b      	str	r3, [r7, #32]
 8002988:	6a3a      	ldr	r2, [r7, #32]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	f6ff af09 	blt.w	80027a4 <ILI9341_DrawLine+0xd2>
 8002992:	e026      	b.n	80029e2 <ILI9341_DrawLine+0x310>
			}
		else
			ILI9341_DrawPixel(round(x), round(y), color);
 8002994:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002996:	f7fd fd47 	bl	8000428 <__aeabi_f2d>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4610      	mov	r0, r2
 80029a0:	4619      	mov	r1, r3
 80029a2:	f008 f813 	bl	800a9cc <round>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4610      	mov	r0, r2
 80029ac:	4619      	mov	r1, r3
 80029ae:	f7fe f86b 	bl	8000a88 <__aeabi_d2uiz>
 80029b2:	4603      	mov	r3, r0
 80029b4:	b29c      	uxth	r4, r3
 80029b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029b8:	f7fd fd36 	bl	8000428 <__aeabi_f2d>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4610      	mov	r0, r2
 80029c2:	4619      	mov	r1, r3
 80029c4:	f008 f802 	bl	800a9cc <round>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	4610      	mov	r0, r2
 80029ce:	4619      	mov	r1, r3
 80029d0:	f7fe f85a 	bl	8000a88 <__aeabi_d2uiz>
 80029d4:	4603      	mov	r3, r0
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	88fa      	ldrh	r2, [r7, #6]
 80029da:	4619      	mov	r1, r3
 80029dc:	4620      	mov	r0, r4
 80029de:	f7ff fd09 	bl	80023f4 <ILI9341_DrawPixel>
	for (int v = 0; v < steps; v++) {
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	3301      	adds	r3, #1
 80029e6:	627b      	str	r3, [r7, #36]	; 0x24
 80029e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	f6ff aec6 	blt.w	800277e <ILI9341_DrawLine+0xac>
	}
}
 80029f2:	bf00      	nop
 80029f4:	bf00      	nop
 80029f6:	3734      	adds	r7, #52	; 0x34
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029fc <ILI9341_DrawTriangle>:

void ILI9341_DrawTriangle(struct point point_a, struct point point_b, struct point point_c, uint16_t color, int width) {
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	81b8      	strh	r0, [r7, #12]
 8002a04:	8139      	strh	r1, [r7, #8]
 8002a06:	80ba      	strh	r2, [r7, #4]
 8002a08:	807b      	strh	r3, [r7, #2]
	ILI9341_DrawLine(point_a, point_b, color, width);
 8002a0a:	887a      	ldrh	r2, [r7, #2]
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	68b9      	ldr	r1, [r7, #8]
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f7ff fe5e 	bl	80026d2 <ILI9341_DrawLine>
	ILI9341_DrawLine(point_a, point_c, color, width);
 8002a16:	887a      	ldrh	r2, [r7, #2]
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f7ff fe58 	bl	80026d2 <ILI9341_DrawLine>
	ILI9341_DrawLine(point_b, point_c, color, width);
 8002a22:	887a      	ldrh	r2, [r7, #2]
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	68b8      	ldr	r0, [r7, #8]
 8002a2a:	f7ff fe52 	bl	80026d2 <ILI9341_DrawLine>
}
 8002a2e:	bf00      	nop
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(struct point point_a, struct point point_b, struct point point_c, struct point point_d, uint16_t color, int width) {
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b084      	sub	sp, #16
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	81b8      	strh	r0, [r7, #12]
 8002a3e:	8139      	strh	r1, [r7, #8]
 8002a40:	80ba      	strh	r2, [r7, #4]
 8002a42:	803b      	strh	r3, [r7, #0]
	ILI9341_DrawLine(point_a, point_b, color, width);
 8002a44:	8b3a      	ldrh	r2, [r7, #24]
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	68b9      	ldr	r1, [r7, #8]
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f7ff fe41 	bl	80026d2 <ILI9341_DrawLine>
	ILI9341_DrawLine(point_b, point_c, color, width);
 8002a50:	8b3a      	ldrh	r2, [r7, #24]
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	68b8      	ldr	r0, [r7, #8]
 8002a58:	f7ff fe3b 	bl	80026d2 <ILI9341_DrawLine>
	ILI9341_DrawLine(point_c, point_d, color, width);
 8002a5c:	8b3a      	ldrh	r2, [r7, #24]
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	6839      	ldr	r1, [r7, #0]
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7ff fe35 	bl	80026d2 <ILI9341_DrawLine>
	ILI9341_DrawLine(point_d, point_a, color, width);
 8002a68:	8b3a      	ldrh	r2, [r7, #24]
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	68f9      	ldr	r1, [r7, #12]
 8002a6e:	6838      	ldr	r0, [r7, #0]
 8002a70:	f7ff fe2f 	bl	80026d2 <ILI9341_DrawLine>
}
 8002a74:	bf00      	nop
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a80:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <HAL_Init+0x28>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a07      	ldr	r2, [pc, #28]	; (8002aa4 <HAL_Init+0x28>)
 8002a86:	f043 0310 	orr.w	r3, r3, #16
 8002a8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a8c:	2003      	movs	r0, #3
 8002a8e:	f000 fd9f 	bl	80035d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a92:	200f      	movs	r0, #15
 8002a94:	f000 f808 	bl	8002aa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a98:	f7fe ffdc 	bl	8001a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40022000 	.word	0x40022000

08002aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ab0:	4b12      	ldr	r3, [pc, #72]	; (8002afc <HAL_InitTick+0x54>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <HAL_InitTick+0x58>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	4619      	mov	r1, r3
 8002aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 fdb7 	bl	800363a <HAL_SYSTICK_Config>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e00e      	b.n	8002af4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b0f      	cmp	r3, #15
 8002ada:	d80a      	bhi.n	8002af2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002adc:	2200      	movs	r2, #0
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae4:	f000 fd7f 	bl	80035e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ae8:	4a06      	ldr	r2, [pc, #24]	; (8002b04 <HAL_InitTick+0x5c>)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
 8002af0:	e000      	b.n	8002af4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	20000000 	.word	0x20000000
 8002b00:	20000018 	.word	0x20000018
 8002b04:	20000014 	.word	0x20000014

08002b08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <HAL_IncTick+0x1c>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <HAL_IncTick+0x20>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4413      	add	r3, r2
 8002b18:	4a03      	ldr	r2, [pc, #12]	; (8002b28 <HAL_IncTick+0x20>)
 8002b1a:	6013      	str	r3, [r2, #0]
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr
 8002b24:	20000018 	.word	0x20000018
 8002b28:	2000046c 	.word	0x2000046c

08002b2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b30:	4b02      	ldr	r3, [pc, #8]	; (8002b3c <HAL_GetTick+0x10>)
 8002b32:	681b      	ldr	r3, [r3, #0]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr
 8002b3c:	2000046c 	.word	0x2000046c

08002b40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b48:	f7ff fff0 	bl	8002b2c <HAL_GetTick>
 8002b4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b58:	d005      	beq.n	8002b66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b5a:	4b0a      	ldr	r3, [pc, #40]	; (8002b84 <HAL_Delay+0x44>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4413      	add	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b66:	bf00      	nop
 8002b68:	f7ff ffe0 	bl	8002b2c <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d8f7      	bhi.n	8002b68 <HAL_Delay+0x28>
  {
  }
}
 8002b78:	bf00      	nop
 8002b7a:	bf00      	nop
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000018 	.word	0x20000018

08002b88 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b90:	2300      	movs	r3, #0
 8002b92:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e0be      	b.n	8002d28 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d109      	bne.n	8002bcc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7fe ff76 	bl	8001ab8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 fbf1 	bl	80033b4 <ADC_ConversionStop_Disable>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bda:	f003 0310 	and.w	r3, r3, #16
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f040 8099 	bne.w	8002d16 <HAL_ADC_Init+0x18e>
 8002be4:	7dfb      	ldrb	r3, [r7, #23]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f040 8095 	bne.w	8002d16 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bf4:	f023 0302 	bic.w	r3, r3, #2
 8002bf8:	f043 0202 	orr.w	r2, r3, #2
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c08:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	7b1b      	ldrb	r3, [r3, #12]
 8002c0e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c10:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c20:	d003      	beq.n	8002c2a <HAL_ADC_Init+0xa2>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d102      	bne.n	8002c30 <HAL_ADC_Init+0xa8>
 8002c2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c2e:	e000      	b.n	8002c32 <HAL_ADC_Init+0xaa>
 8002c30:	2300      	movs	r3, #0
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	7d1b      	ldrb	r3, [r3, #20]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d119      	bne.n	8002c74 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	7b1b      	ldrb	r3, [r3, #12]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d109      	bne.n	8002c5c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	035a      	lsls	r2, r3, #13
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c58:	613b      	str	r3, [r7, #16]
 8002c5a:	e00b      	b.n	8002c74 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c60:	f043 0220 	orr.w	r2, r3, #32
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6c:	f043 0201 	orr.w	r2, r3, #1
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689a      	ldr	r2, [r3, #8]
 8002c8e:	4b28      	ldr	r3, [pc, #160]	; (8002d30 <HAL_ADC_Init+0x1a8>)
 8002c90:	4013      	ands	r3, r2
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6812      	ldr	r2, [r2, #0]
 8002c96:	68b9      	ldr	r1, [r7, #8]
 8002c98:	430b      	orrs	r3, r1
 8002c9a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ca4:	d003      	beq.n	8002cae <HAL_ADC_Init+0x126>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d104      	bne.n	8002cb8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	051b      	lsls	r3, r3, #20
 8002cb6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbe:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689a      	ldr	r2, [r3, #8]
 8002cd2:	4b18      	ldr	r3, [pc, #96]	; (8002d34 <HAL_ADC_Init+0x1ac>)
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d10b      	bne.n	8002cf4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce6:	f023 0303 	bic.w	r3, r3, #3
 8002cea:	f043 0201 	orr.w	r2, r3, #1
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002cf2:	e018      	b.n	8002d26 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf8:	f023 0312 	bic.w	r3, r3, #18
 8002cfc:	f043 0210 	orr.w	r2, r3, #16
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d08:	f043 0201 	orr.w	r2, r3, #1
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d14:	e007      	b.n	8002d26 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1a:	f043 0210 	orr.w	r2, r3, #16
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	ffe1f7fd 	.word	0xffe1f7fd
 8002d34:	ff1f0efe 	.word	0xff1f0efe

08002d38 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d40:	2300      	movs	r3, #0
 8002d42:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <HAL_ADC_Start+0x1a>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e098      	b.n	8002e84 <HAL_ADC_Start+0x14c>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 fad0 	bl	8003300 <ADC_Enable>
 8002d60:	4603      	mov	r3, r0
 8002d62:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f040 8087 	bne.w	8002e7a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d74:	f023 0301 	bic.w	r3, r3, #1
 8002d78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a41      	ldr	r2, [pc, #260]	; (8002e8c <HAL_ADC_Start+0x154>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d105      	bne.n	8002d96 <HAL_ADC_Start+0x5e>
 8002d8a:	4b41      	ldr	r3, [pc, #260]	; (8002e90 <HAL_ADC_Start+0x158>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d115      	bne.n	8002dc2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d026      	beq.n	8002dfe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002db8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002dc0:	e01d      	b.n	8002dfe <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a2f      	ldr	r2, [pc, #188]	; (8002e90 <HAL_ADC_Start+0x158>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d004      	beq.n	8002de2 <HAL_ADC_Start+0xaa>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a2b      	ldr	r2, [pc, #172]	; (8002e8c <HAL_ADC_Start+0x154>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d10d      	bne.n	8002dfe <HAL_ADC_Start+0xc6>
 8002de2:	4b2b      	ldr	r3, [pc, #172]	; (8002e90 <HAL_ADC_Start+0x158>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d007      	beq.n	8002dfe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002df6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d006      	beq.n	8002e18 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0e:	f023 0206 	bic.w	r2, r3, #6
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e16:	e002      	b.n	8002e1e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f06f 0202 	mvn.w	r2, #2
 8002e2e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002e3a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002e3e:	d113      	bne.n	8002e68 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002e44:	4a11      	ldr	r2, [pc, #68]	; (8002e8c <HAL_ADC_Start+0x154>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d105      	bne.n	8002e56 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002e4a:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <HAL_ADC_Start+0x158>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d108      	bne.n	8002e68 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002e64:	609a      	str	r2, [r3, #8]
 8002e66:	e00c      	b.n	8002e82 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689a      	ldr	r2, [r3, #8]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002e76:	609a      	str	r2, [r3, #8]
 8002e78:	e003      	b.n	8002e82 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40012800 	.word	0x40012800
 8002e90:	40012400 	.word	0x40012400

08002e94 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_ADC_Stop+0x1a>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e01a      	b.n	8002ee4 <HAL_ADC_Stop+0x50>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 fa7c 	bl	80033b4 <ADC_ConversionStop_Disable>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d109      	bne.n	8002eda <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ece:	f023 0301 	bic.w	r3, r3, #1
 8002ed2:	f043 0201 	orr.w	r2, r3, #1
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002eec:	b590      	push	{r4, r7, lr}
 8002eee:	b087      	sub	sp, #28
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002f02:	f7ff fe13 	bl	8002b2c <HAL_GetTick>
 8002f06:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00b      	beq.n	8002f2e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1a:	f043 0220 	orr.w	r2, r3, #32
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e0d3      	b.n	80030d6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d131      	bne.n	8002fa0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f42:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d12a      	bne.n	8002fa0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002f4a:	e021      	b.n	8002f90 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f52:	d01d      	beq.n	8002f90 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d007      	beq.n	8002f6a <HAL_ADC_PollForConversion+0x7e>
 8002f5a:	f7ff fde7 	bl	8002b2c <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d212      	bcs.n	8002f90 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10b      	bne.n	8002f90 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7c:	f043 0204 	orr.w	r2, r3, #4
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e0a2      	b.n	80030d6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0d6      	beq.n	8002f4c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002f9e:	e070      	b.n	8003082 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002fa0:	4b4f      	ldr	r3, [pc, #316]	; (80030e0 <HAL_ADC_PollForConversion+0x1f4>)
 8002fa2:	681c      	ldr	r4, [r3, #0]
 8002fa4:	2002      	movs	r0, #2
 8002fa6:	f003 f89d 	bl	80060e4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002faa:	4603      	mov	r3, r0
 8002fac:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6919      	ldr	r1, [r3, #16]
 8002fb6:	4b4b      	ldr	r3, [pc, #300]	; (80030e4 <HAL_ADC_PollForConversion+0x1f8>)
 8002fb8:	400b      	ands	r3, r1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d118      	bne.n	8002ff0 <HAL_ADC_PollForConversion+0x104>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68d9      	ldr	r1, [r3, #12]
 8002fc4:	4b48      	ldr	r3, [pc, #288]	; (80030e8 <HAL_ADC_PollForConversion+0x1fc>)
 8002fc6:	400b      	ands	r3, r1
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d111      	bne.n	8002ff0 <HAL_ADC_PollForConversion+0x104>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6919      	ldr	r1, [r3, #16]
 8002fd2:	4b46      	ldr	r3, [pc, #280]	; (80030ec <HAL_ADC_PollForConversion+0x200>)
 8002fd4:	400b      	ands	r3, r1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d108      	bne.n	8002fec <HAL_ADC_PollForConversion+0x100>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68d9      	ldr	r1, [r3, #12]
 8002fe0:	4b43      	ldr	r3, [pc, #268]	; (80030f0 <HAL_ADC_PollForConversion+0x204>)
 8002fe2:	400b      	ands	r3, r1
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <HAL_ADC_PollForConversion+0x100>
 8002fe8:	2314      	movs	r3, #20
 8002fea:	e020      	b.n	800302e <HAL_ADC_PollForConversion+0x142>
 8002fec:	2329      	movs	r3, #41	; 0x29
 8002fee:	e01e      	b.n	800302e <HAL_ADC_PollForConversion+0x142>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6919      	ldr	r1, [r3, #16]
 8002ff6:	4b3d      	ldr	r3, [pc, #244]	; (80030ec <HAL_ADC_PollForConversion+0x200>)
 8002ff8:	400b      	ands	r3, r1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d106      	bne.n	800300c <HAL_ADC_PollForConversion+0x120>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68d9      	ldr	r1, [r3, #12]
 8003004:	4b3a      	ldr	r3, [pc, #232]	; (80030f0 <HAL_ADC_PollForConversion+0x204>)
 8003006:	400b      	ands	r3, r1
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00d      	beq.n	8003028 <HAL_ADC_PollForConversion+0x13c>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6919      	ldr	r1, [r3, #16]
 8003012:	4b38      	ldr	r3, [pc, #224]	; (80030f4 <HAL_ADC_PollForConversion+0x208>)
 8003014:	400b      	ands	r3, r1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d108      	bne.n	800302c <HAL_ADC_PollForConversion+0x140>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68d9      	ldr	r1, [r3, #12]
 8003020:	4b34      	ldr	r3, [pc, #208]	; (80030f4 <HAL_ADC_PollForConversion+0x208>)
 8003022:	400b      	ands	r3, r1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_ADC_PollForConversion+0x140>
 8003028:	2354      	movs	r3, #84	; 0x54
 800302a:	e000      	b.n	800302e <HAL_ADC_PollForConversion+0x142>
 800302c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800302e:	fb02 f303 	mul.w	r3, r2, r3
 8003032:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003034:	e021      	b.n	800307a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303c:	d01a      	beq.n	8003074 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d007      	beq.n	8003054 <HAL_ADC_PollForConversion+0x168>
 8003044:	f7ff fd72 	bl	8002b2c <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	429a      	cmp	r2, r3
 8003052:	d20f      	bcs.n	8003074 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	429a      	cmp	r2, r3
 800305a:	d90b      	bls.n	8003074 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003060:	f043 0204 	orr.w	r2, r3, #4
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e030      	b.n	80030d6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	3301      	adds	r3, #1
 8003078:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	429a      	cmp	r2, r3
 8003080:	d8d9      	bhi.n	8003036 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f06f 0212 	mvn.w	r2, #18
 800308a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003090:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80030a2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80030a6:	d115      	bne.n	80030d4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d111      	bne.n	80030d4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d105      	bne.n	80030d4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030cc:	f043 0201 	orr.w	r2, r3, #1
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	371c      	adds	r7, #28
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd90      	pop	{r4, r7, pc}
 80030de:	bf00      	nop
 80030e0:	20000000 	.word	0x20000000
 80030e4:	24924924 	.word	0x24924924
 80030e8:	00924924 	.word	0x00924924
 80030ec:	12492492 	.word	0x12492492
 80030f0:	00492492 	.word	0x00492492
 80030f4:	00249249 	.word	0x00249249

080030f8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003106:	4618      	mov	r0, r3
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr

08003110 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800311a:	2300      	movs	r3, #0
 800311c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003128:	2b01      	cmp	r3, #1
 800312a:	d101      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x20>
 800312c:	2302      	movs	r3, #2
 800312e:	e0dc      	b.n	80032ea <HAL_ADC_ConfigChannel+0x1da>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b06      	cmp	r3, #6
 800313e:	d81c      	bhi.n	800317a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	3b05      	subs	r3, #5
 8003152:	221f      	movs	r2, #31
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	43db      	mvns	r3, r3
 800315a:	4019      	ands	r1, r3
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	6818      	ldr	r0, [r3, #0]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	3b05      	subs	r3, #5
 800316c:	fa00 f203 	lsl.w	r2, r0, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	635a      	str	r2, [r3, #52]	; 0x34
 8003178:	e03c      	b.n	80031f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	2b0c      	cmp	r3, #12
 8003180:	d81c      	bhi.n	80031bc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	4613      	mov	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	3b23      	subs	r3, #35	; 0x23
 8003194:	221f      	movs	r2, #31
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	43db      	mvns	r3, r3
 800319c:	4019      	ands	r1, r3
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	6818      	ldr	r0, [r3, #0]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	3b23      	subs	r3, #35	; 0x23
 80031ae:	fa00 f203 	lsl.w	r2, r0, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	631a      	str	r2, [r3, #48]	; 0x30
 80031ba:	e01b      	b.n	80031f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	3b41      	subs	r3, #65	; 0x41
 80031ce:	221f      	movs	r2, #31
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	43db      	mvns	r3, r3
 80031d6:	4019      	ands	r1, r3
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	6818      	ldr	r0, [r3, #0]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	3b41      	subs	r3, #65	; 0x41
 80031e8:	fa00 f203 	lsl.w	r2, r0, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2b09      	cmp	r3, #9
 80031fa:	d91c      	bls.n	8003236 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68d9      	ldr	r1, [r3, #12]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	4613      	mov	r3, r2
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	4413      	add	r3, r2
 800320c:	3b1e      	subs	r3, #30
 800320e:	2207      	movs	r2, #7
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	43db      	mvns	r3, r3
 8003216:	4019      	ands	r1, r3
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	6898      	ldr	r0, [r3, #8]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	4613      	mov	r3, r2
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	4413      	add	r3, r2
 8003226:	3b1e      	subs	r3, #30
 8003228:	fa00 f203 	lsl.w	r2, r0, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	430a      	orrs	r2, r1
 8003232:	60da      	str	r2, [r3, #12]
 8003234:	e019      	b.n	800326a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6919      	ldr	r1, [r3, #16]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	4613      	mov	r3, r2
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	4413      	add	r3, r2
 8003246:	2207      	movs	r2, #7
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	43db      	mvns	r3, r3
 800324e:	4019      	ands	r1, r3
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	6898      	ldr	r0, [r3, #8]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	4613      	mov	r3, r2
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	4413      	add	r3, r2
 800325e:	fa00 f203 	lsl.w	r2, r0, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2b10      	cmp	r3, #16
 8003270:	d003      	beq.n	800327a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003276:	2b11      	cmp	r3, #17
 8003278:	d132      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a1d      	ldr	r2, [pc, #116]	; (80032f4 <HAL_ADC_ConfigChannel+0x1e4>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d125      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d126      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80032a0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2b10      	cmp	r3, #16
 80032a8:	d11a      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032aa:	4b13      	ldr	r3, [pc, #76]	; (80032f8 <HAL_ADC_ConfigChannel+0x1e8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a13      	ldr	r2, [pc, #76]	; (80032fc <HAL_ADC_ConfigChannel+0x1ec>)
 80032b0:	fba2 2303 	umull	r2, r3, r2, r3
 80032b4:	0c9a      	lsrs	r2, r3, #18
 80032b6:	4613      	mov	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032c0:	e002      	b.n	80032c8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	3b01      	subs	r3, #1
 80032c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f9      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0x1b2>
 80032ce:	e007      	b.n	80032e0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d4:	f043 0220 	orr.w	r2, r3, #32
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc80      	pop	{r7}
 80032f2:	4770      	bx	lr
 80032f4:	40012400 	.word	0x40012400
 80032f8:	20000000 	.word	0x20000000
 80032fc:	431bde83 	.word	0x431bde83

08003300 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b01      	cmp	r3, #1
 800331c:	d040      	beq.n	80033a0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f042 0201 	orr.w	r2, r2, #1
 800332c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800332e:	4b1f      	ldr	r3, [pc, #124]	; (80033ac <ADC_Enable+0xac>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a1f      	ldr	r2, [pc, #124]	; (80033b0 <ADC_Enable+0xb0>)
 8003334:	fba2 2303 	umull	r2, r3, r2, r3
 8003338:	0c9b      	lsrs	r3, r3, #18
 800333a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800333c:	e002      	b.n	8003344 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	3b01      	subs	r3, #1
 8003342:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f9      	bne.n	800333e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800334a:	f7ff fbef 	bl	8002b2c <HAL_GetTick>
 800334e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003350:	e01f      	b.n	8003392 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003352:	f7ff fbeb 	bl	8002b2c <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d918      	bls.n	8003392 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b01      	cmp	r3, #1
 800336c:	d011      	beq.n	8003392 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003372:	f043 0210 	orr.w	r2, r3, #16
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337e:	f043 0201 	orr.w	r2, r3, #1
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e007      	b.n	80033a2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b01      	cmp	r3, #1
 800339e:	d1d8      	bne.n	8003352 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	20000000 	.word	0x20000000
 80033b0:	431bde83 	.word	0x431bde83

080033b4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033bc:	2300      	movs	r3, #0
 80033be:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d12e      	bne.n	800342c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0201 	bic.w	r2, r2, #1
 80033dc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033de:	f7ff fba5 	bl	8002b2c <HAL_GetTick>
 80033e2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80033e4:	e01b      	b.n	800341e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033e6:	f7ff fba1 	bl	8002b2c <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d914      	bls.n	800341e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d10d      	bne.n	800341e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003406:	f043 0210 	orr.w	r2, r3, #16
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003412:	f043 0201 	orr.w	r2, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e007      	b.n	800342e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b01      	cmp	r3, #1
 800342a:	d0dc      	beq.n	80033e6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
	...

08003438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003448:	4b0c      	ldr	r3, [pc, #48]	; (800347c <__NVIC_SetPriorityGrouping+0x44>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003454:	4013      	ands	r3, r2
 8003456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003460:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800346a:	4a04      	ldr	r2, [pc, #16]	; (800347c <__NVIC_SetPriorityGrouping+0x44>)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	60d3      	str	r3, [r2, #12]
}
 8003470:	bf00      	nop
 8003472:	3714      	adds	r7, #20
 8003474:	46bd      	mov	sp, r7
 8003476:	bc80      	pop	{r7}
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	e000ed00 	.word	0xe000ed00

08003480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003484:	4b04      	ldr	r3, [pc, #16]	; (8003498 <__NVIC_GetPriorityGrouping+0x18>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	0a1b      	lsrs	r3, r3, #8
 800348a:	f003 0307 	and.w	r3, r3, #7
}
 800348e:	4618      	mov	r0, r3
 8003490:	46bd      	mov	sp, r7
 8003492:	bc80      	pop	{r7}
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	e000ed00 	.word	0xe000ed00

0800349c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	4603      	mov	r3, r0
 80034a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	db0b      	blt.n	80034c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ae:	79fb      	ldrb	r3, [r7, #7]
 80034b0:	f003 021f 	and.w	r2, r3, #31
 80034b4:	4906      	ldr	r1, [pc, #24]	; (80034d0 <__NVIC_EnableIRQ+0x34>)
 80034b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ba:	095b      	lsrs	r3, r3, #5
 80034bc:	2001      	movs	r0, #1
 80034be:	fa00 f202 	lsl.w	r2, r0, r2
 80034c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bc80      	pop	{r7}
 80034ce:	4770      	bx	lr
 80034d0:	e000e100 	.word	0xe000e100

080034d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	4603      	mov	r3, r0
 80034dc:	6039      	str	r1, [r7, #0]
 80034de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	db0a      	blt.n	80034fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	490c      	ldr	r1, [pc, #48]	; (8003520 <__NVIC_SetPriority+0x4c>)
 80034ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f2:	0112      	lsls	r2, r2, #4
 80034f4:	b2d2      	uxtb	r2, r2
 80034f6:	440b      	add	r3, r1
 80034f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034fc:	e00a      	b.n	8003514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	b2da      	uxtb	r2, r3
 8003502:	4908      	ldr	r1, [pc, #32]	; (8003524 <__NVIC_SetPriority+0x50>)
 8003504:	79fb      	ldrb	r3, [r7, #7]
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	3b04      	subs	r3, #4
 800350c:	0112      	lsls	r2, r2, #4
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	440b      	add	r3, r1
 8003512:	761a      	strb	r2, [r3, #24]
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	bc80      	pop	{r7}
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	e000e100 	.word	0xe000e100
 8003524:	e000ed00 	.word	0xe000ed00

08003528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003528:	b480      	push	{r7}
 800352a:	b089      	sub	sp, #36	; 0x24
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	f1c3 0307 	rsb	r3, r3, #7
 8003542:	2b04      	cmp	r3, #4
 8003544:	bf28      	it	cs
 8003546:	2304      	movcs	r3, #4
 8003548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	3304      	adds	r3, #4
 800354e:	2b06      	cmp	r3, #6
 8003550:	d902      	bls.n	8003558 <NVIC_EncodePriority+0x30>
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	3b03      	subs	r3, #3
 8003556:	e000      	b.n	800355a <NVIC_EncodePriority+0x32>
 8003558:	2300      	movs	r3, #0
 800355a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800355c:	f04f 32ff 	mov.w	r2, #4294967295
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	43da      	mvns	r2, r3
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	401a      	ands	r2, r3
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003570:	f04f 31ff 	mov.w	r1, #4294967295
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	fa01 f303 	lsl.w	r3, r1, r3
 800357a:	43d9      	mvns	r1, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003580:	4313      	orrs	r3, r2
         );
}
 8003582:	4618      	mov	r0, r3
 8003584:	3724      	adds	r7, #36	; 0x24
 8003586:	46bd      	mov	sp, r7
 8003588:	bc80      	pop	{r7}
 800358a:	4770      	bx	lr

0800358c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3b01      	subs	r3, #1
 8003598:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800359c:	d301      	bcc.n	80035a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800359e:	2301      	movs	r3, #1
 80035a0:	e00f      	b.n	80035c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035a2:	4a0a      	ldr	r2, [pc, #40]	; (80035cc <SysTick_Config+0x40>)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3b01      	subs	r3, #1
 80035a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035aa:	210f      	movs	r1, #15
 80035ac:	f04f 30ff 	mov.w	r0, #4294967295
 80035b0:	f7ff ff90 	bl	80034d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035b4:	4b05      	ldr	r3, [pc, #20]	; (80035cc <SysTick_Config+0x40>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035ba:	4b04      	ldr	r3, [pc, #16]	; (80035cc <SysTick_Config+0x40>)
 80035bc:	2207      	movs	r2, #7
 80035be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	e000e010 	.word	0xe000e010

080035d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f7ff ff2d 	bl	8003438 <__NVIC_SetPriorityGrouping>
}
 80035de:	bf00      	nop
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b086      	sub	sp, #24
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	4603      	mov	r3, r0
 80035ee:	60b9      	str	r1, [r7, #8]
 80035f0:	607a      	str	r2, [r7, #4]
 80035f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035f8:	f7ff ff42 	bl	8003480 <__NVIC_GetPriorityGrouping>
 80035fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	68b9      	ldr	r1, [r7, #8]
 8003602:	6978      	ldr	r0, [r7, #20]
 8003604:	f7ff ff90 	bl	8003528 <NVIC_EncodePriority>
 8003608:	4602      	mov	r2, r0
 800360a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800360e:	4611      	mov	r1, r2
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff ff5f 	bl	80034d4 <__NVIC_SetPriority>
}
 8003616:	bf00      	nop
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b082      	sub	sp, #8
 8003622:	af00      	add	r7, sp, #0
 8003624:	4603      	mov	r3, r0
 8003626:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362c:	4618      	mov	r0, r3
 800362e:	f7ff ff35 	bl	800349c <__NVIC_EnableIRQ>
}
 8003632:	bf00      	nop
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b082      	sub	sp, #8
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7ff ffa2 	bl	800358c <SysTick_Config>
 8003648:	4603      	mov	r3, r0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
	...

08003654 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800365c:	2300      	movs	r3, #0
 800365e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d005      	beq.n	8003678 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2204      	movs	r2, #4
 8003670:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	73fb      	strb	r3, [r7, #15]
 8003676:	e051      	b.n	800371c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 020e 	bic.w	r2, r2, #14
 8003686:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0201 	bic.w	r2, r2, #1
 8003696:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a22      	ldr	r2, [pc, #136]	; (8003728 <HAL_DMA_Abort_IT+0xd4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d029      	beq.n	80036f6 <HAL_DMA_Abort_IT+0xa2>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a21      	ldr	r2, [pc, #132]	; (800372c <HAL_DMA_Abort_IT+0xd8>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d022      	beq.n	80036f2 <HAL_DMA_Abort_IT+0x9e>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a1f      	ldr	r2, [pc, #124]	; (8003730 <HAL_DMA_Abort_IT+0xdc>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d01a      	beq.n	80036ec <HAL_DMA_Abort_IT+0x98>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a1e      	ldr	r2, [pc, #120]	; (8003734 <HAL_DMA_Abort_IT+0xe0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d012      	beq.n	80036e6 <HAL_DMA_Abort_IT+0x92>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a1c      	ldr	r2, [pc, #112]	; (8003738 <HAL_DMA_Abort_IT+0xe4>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00a      	beq.n	80036e0 <HAL_DMA_Abort_IT+0x8c>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a1b      	ldr	r2, [pc, #108]	; (800373c <HAL_DMA_Abort_IT+0xe8>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d102      	bne.n	80036da <HAL_DMA_Abort_IT+0x86>
 80036d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80036d8:	e00e      	b.n	80036f8 <HAL_DMA_Abort_IT+0xa4>
 80036da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036de:	e00b      	b.n	80036f8 <HAL_DMA_Abort_IT+0xa4>
 80036e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036e4:	e008      	b.n	80036f8 <HAL_DMA_Abort_IT+0xa4>
 80036e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036ea:	e005      	b.n	80036f8 <HAL_DMA_Abort_IT+0xa4>
 80036ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036f0:	e002      	b.n	80036f8 <HAL_DMA_Abort_IT+0xa4>
 80036f2:	2310      	movs	r3, #16
 80036f4:	e000      	b.n	80036f8 <HAL_DMA_Abort_IT+0xa4>
 80036f6:	2301      	movs	r3, #1
 80036f8:	4a11      	ldr	r2, [pc, #68]	; (8003740 <HAL_DMA_Abort_IT+0xec>)
 80036fa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003710:	2b00      	cmp	r3, #0
 8003712:	d003      	beq.n	800371c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	4798      	blx	r3
    } 
  }
  return status;
 800371c:	7bfb      	ldrb	r3, [r7, #15]
}
 800371e:	4618      	mov	r0, r3
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	40020008 	.word	0x40020008
 800372c:	4002001c 	.word	0x4002001c
 8003730:	40020030 	.word	0x40020030
 8003734:	40020044 	.word	0x40020044
 8003738:	40020058 	.word	0x40020058
 800373c:	4002006c 	.word	0x4002006c
 8003740:	40020000 	.word	0x40020000

08003744 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003752:	b2db      	uxtb	r3, r3
}
 8003754:	4618      	mov	r0, r3
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	bc80      	pop	{r7}
 800375c:	4770      	bx	lr
	...

08003760 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003760:	b480      	push	{r7}
 8003762:	b08b      	sub	sp, #44	; 0x2c
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800376a:	2300      	movs	r3, #0
 800376c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800376e:	2300      	movs	r3, #0
 8003770:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003772:	e169      	b.n	8003a48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003774:	2201      	movs	r2, #1
 8003776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	69fa      	ldr	r2, [r7, #28]
 8003784:	4013      	ands	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	429a      	cmp	r2, r3
 800378e:	f040 8158 	bne.w	8003a42 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	4a9a      	ldr	r2, [pc, #616]	; (8003a00 <HAL_GPIO_Init+0x2a0>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d05e      	beq.n	800385a <HAL_GPIO_Init+0xfa>
 800379c:	4a98      	ldr	r2, [pc, #608]	; (8003a00 <HAL_GPIO_Init+0x2a0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d875      	bhi.n	800388e <HAL_GPIO_Init+0x12e>
 80037a2:	4a98      	ldr	r2, [pc, #608]	; (8003a04 <HAL_GPIO_Init+0x2a4>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d058      	beq.n	800385a <HAL_GPIO_Init+0xfa>
 80037a8:	4a96      	ldr	r2, [pc, #600]	; (8003a04 <HAL_GPIO_Init+0x2a4>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d86f      	bhi.n	800388e <HAL_GPIO_Init+0x12e>
 80037ae:	4a96      	ldr	r2, [pc, #600]	; (8003a08 <HAL_GPIO_Init+0x2a8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d052      	beq.n	800385a <HAL_GPIO_Init+0xfa>
 80037b4:	4a94      	ldr	r2, [pc, #592]	; (8003a08 <HAL_GPIO_Init+0x2a8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d869      	bhi.n	800388e <HAL_GPIO_Init+0x12e>
 80037ba:	4a94      	ldr	r2, [pc, #592]	; (8003a0c <HAL_GPIO_Init+0x2ac>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d04c      	beq.n	800385a <HAL_GPIO_Init+0xfa>
 80037c0:	4a92      	ldr	r2, [pc, #584]	; (8003a0c <HAL_GPIO_Init+0x2ac>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d863      	bhi.n	800388e <HAL_GPIO_Init+0x12e>
 80037c6:	4a92      	ldr	r2, [pc, #584]	; (8003a10 <HAL_GPIO_Init+0x2b0>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d046      	beq.n	800385a <HAL_GPIO_Init+0xfa>
 80037cc:	4a90      	ldr	r2, [pc, #576]	; (8003a10 <HAL_GPIO_Init+0x2b0>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d85d      	bhi.n	800388e <HAL_GPIO_Init+0x12e>
 80037d2:	2b12      	cmp	r3, #18
 80037d4:	d82a      	bhi.n	800382c <HAL_GPIO_Init+0xcc>
 80037d6:	2b12      	cmp	r3, #18
 80037d8:	d859      	bhi.n	800388e <HAL_GPIO_Init+0x12e>
 80037da:	a201      	add	r2, pc, #4	; (adr r2, 80037e0 <HAL_GPIO_Init+0x80>)
 80037dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e0:	0800385b 	.word	0x0800385b
 80037e4:	08003835 	.word	0x08003835
 80037e8:	08003847 	.word	0x08003847
 80037ec:	08003889 	.word	0x08003889
 80037f0:	0800388f 	.word	0x0800388f
 80037f4:	0800388f 	.word	0x0800388f
 80037f8:	0800388f 	.word	0x0800388f
 80037fc:	0800388f 	.word	0x0800388f
 8003800:	0800388f 	.word	0x0800388f
 8003804:	0800388f 	.word	0x0800388f
 8003808:	0800388f 	.word	0x0800388f
 800380c:	0800388f 	.word	0x0800388f
 8003810:	0800388f 	.word	0x0800388f
 8003814:	0800388f 	.word	0x0800388f
 8003818:	0800388f 	.word	0x0800388f
 800381c:	0800388f 	.word	0x0800388f
 8003820:	0800388f 	.word	0x0800388f
 8003824:	0800383d 	.word	0x0800383d
 8003828:	08003851 	.word	0x08003851
 800382c:	4a79      	ldr	r2, [pc, #484]	; (8003a14 <HAL_GPIO_Init+0x2b4>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d013      	beq.n	800385a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003832:	e02c      	b.n	800388e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	623b      	str	r3, [r7, #32]
          break;
 800383a:	e029      	b.n	8003890 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	3304      	adds	r3, #4
 8003842:	623b      	str	r3, [r7, #32]
          break;
 8003844:	e024      	b.n	8003890 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	3308      	adds	r3, #8
 800384c:	623b      	str	r3, [r7, #32]
          break;
 800384e:	e01f      	b.n	8003890 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	330c      	adds	r3, #12
 8003856:	623b      	str	r3, [r7, #32]
          break;
 8003858:	e01a      	b.n	8003890 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d102      	bne.n	8003868 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003862:	2304      	movs	r3, #4
 8003864:	623b      	str	r3, [r7, #32]
          break;
 8003866:	e013      	b.n	8003890 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d105      	bne.n	800387c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003870:	2308      	movs	r3, #8
 8003872:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	69fa      	ldr	r2, [r7, #28]
 8003878:	611a      	str	r2, [r3, #16]
          break;
 800387a:	e009      	b.n	8003890 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800387c:	2308      	movs	r3, #8
 800387e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	69fa      	ldr	r2, [r7, #28]
 8003884:	615a      	str	r2, [r3, #20]
          break;
 8003886:	e003      	b.n	8003890 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003888:	2300      	movs	r3, #0
 800388a:	623b      	str	r3, [r7, #32]
          break;
 800388c:	e000      	b.n	8003890 <HAL_GPIO_Init+0x130>
          break;
 800388e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	2bff      	cmp	r3, #255	; 0xff
 8003894:	d801      	bhi.n	800389a <HAL_GPIO_Init+0x13a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	e001      	b.n	800389e <HAL_GPIO_Init+0x13e>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	3304      	adds	r3, #4
 800389e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	2bff      	cmp	r3, #255	; 0xff
 80038a4:	d802      	bhi.n	80038ac <HAL_GPIO_Init+0x14c>
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	e002      	b.n	80038b2 <HAL_GPIO_Init+0x152>
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	3b08      	subs	r3, #8
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	210f      	movs	r1, #15
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	fa01 f303 	lsl.w	r3, r1, r3
 80038c0:	43db      	mvns	r3, r3
 80038c2:	401a      	ands	r2, r3
 80038c4:	6a39      	ldr	r1, [r7, #32]
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	fa01 f303 	lsl.w	r3, r1, r3
 80038cc:	431a      	orrs	r2, r3
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 80b1 	beq.w	8003a42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80038e0:	4b4d      	ldr	r3, [pc, #308]	; (8003a18 <HAL_GPIO_Init+0x2b8>)
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	4a4c      	ldr	r2, [pc, #304]	; (8003a18 <HAL_GPIO_Init+0x2b8>)
 80038e6:	f043 0301 	orr.w	r3, r3, #1
 80038ea:	6193      	str	r3, [r2, #24]
 80038ec:	4b4a      	ldr	r3, [pc, #296]	; (8003a18 <HAL_GPIO_Init+0x2b8>)
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	60bb      	str	r3, [r7, #8]
 80038f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80038f8:	4a48      	ldr	r2, [pc, #288]	; (8003a1c <HAL_GPIO_Init+0x2bc>)
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	089b      	lsrs	r3, r3, #2
 80038fe:	3302      	adds	r3, #2
 8003900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003904:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	f003 0303 	and.w	r3, r3, #3
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	220f      	movs	r2, #15
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	43db      	mvns	r3, r3
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	4013      	ands	r3, r2
 800391a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a40      	ldr	r2, [pc, #256]	; (8003a20 <HAL_GPIO_Init+0x2c0>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d013      	beq.n	800394c <HAL_GPIO_Init+0x1ec>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a3f      	ldr	r2, [pc, #252]	; (8003a24 <HAL_GPIO_Init+0x2c4>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d00d      	beq.n	8003948 <HAL_GPIO_Init+0x1e8>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a3e      	ldr	r2, [pc, #248]	; (8003a28 <HAL_GPIO_Init+0x2c8>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d007      	beq.n	8003944 <HAL_GPIO_Init+0x1e4>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a3d      	ldr	r2, [pc, #244]	; (8003a2c <HAL_GPIO_Init+0x2cc>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d101      	bne.n	8003940 <HAL_GPIO_Init+0x1e0>
 800393c:	2303      	movs	r3, #3
 800393e:	e006      	b.n	800394e <HAL_GPIO_Init+0x1ee>
 8003940:	2304      	movs	r3, #4
 8003942:	e004      	b.n	800394e <HAL_GPIO_Init+0x1ee>
 8003944:	2302      	movs	r3, #2
 8003946:	e002      	b.n	800394e <HAL_GPIO_Init+0x1ee>
 8003948:	2301      	movs	r3, #1
 800394a:	e000      	b.n	800394e <HAL_GPIO_Init+0x1ee>
 800394c:	2300      	movs	r3, #0
 800394e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003950:	f002 0203 	and.w	r2, r2, #3
 8003954:	0092      	lsls	r2, r2, #2
 8003956:	4093      	lsls	r3, r2
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	4313      	orrs	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800395e:	492f      	ldr	r1, [pc, #188]	; (8003a1c <HAL_GPIO_Init+0x2bc>)
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	089b      	lsrs	r3, r3, #2
 8003964:	3302      	adds	r3, #2
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d006      	beq.n	8003986 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003978:	4b2d      	ldr	r3, [pc, #180]	; (8003a30 <HAL_GPIO_Init+0x2d0>)
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	492c      	ldr	r1, [pc, #176]	; (8003a30 <HAL_GPIO_Init+0x2d0>)
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	4313      	orrs	r3, r2
 8003982:	608b      	str	r3, [r1, #8]
 8003984:	e006      	b.n	8003994 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003986:	4b2a      	ldr	r3, [pc, #168]	; (8003a30 <HAL_GPIO_Init+0x2d0>)
 8003988:	689a      	ldr	r2, [r3, #8]
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	43db      	mvns	r3, r3
 800398e:	4928      	ldr	r1, [pc, #160]	; (8003a30 <HAL_GPIO_Init+0x2d0>)
 8003990:	4013      	ands	r3, r2
 8003992:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d006      	beq.n	80039ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80039a0:	4b23      	ldr	r3, [pc, #140]	; (8003a30 <HAL_GPIO_Init+0x2d0>)
 80039a2:	68da      	ldr	r2, [r3, #12]
 80039a4:	4922      	ldr	r1, [pc, #136]	; (8003a30 <HAL_GPIO_Init+0x2d0>)
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	60cb      	str	r3, [r1, #12]
 80039ac:	e006      	b.n	80039bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80039ae:	4b20      	ldr	r3, [pc, #128]	; (8003a30 <HAL_GPIO_Init+0x2d0>)
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	43db      	mvns	r3, r3
 80039b6:	491e      	ldr	r1, [pc, #120]	; (8003a30 <HAL_GPIO_Init+0x2d0>)
 80039b8:	4013      	ands	r3, r2
 80039ba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d006      	beq.n	80039d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80039c8:	4b19      	ldr	r3, [pc, #100]	; (8003a30 <HAL_GPIO_Init+0x2d0>)
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	4918      	ldr	r1, [pc, #96]	; (8003a30 <HAL_GPIO_Init+0x2d0>)
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	604b      	str	r3, [r1, #4]
 80039d4:	e006      	b.n	80039e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80039d6:	4b16      	ldr	r3, [pc, #88]	; (8003a30 <HAL_GPIO_Init+0x2d0>)
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	43db      	mvns	r3, r3
 80039de:	4914      	ldr	r1, [pc, #80]	; (8003a30 <HAL_GPIO_Init+0x2d0>)
 80039e0:	4013      	ands	r3, r2
 80039e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d021      	beq.n	8003a34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80039f0:	4b0f      	ldr	r3, [pc, #60]	; (8003a30 <HAL_GPIO_Init+0x2d0>)
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	490e      	ldr	r1, [pc, #56]	; (8003a30 <HAL_GPIO_Init+0x2d0>)
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	600b      	str	r3, [r1, #0]
 80039fc:	e021      	b.n	8003a42 <HAL_GPIO_Init+0x2e2>
 80039fe:	bf00      	nop
 8003a00:	10320000 	.word	0x10320000
 8003a04:	10310000 	.word	0x10310000
 8003a08:	10220000 	.word	0x10220000
 8003a0c:	10210000 	.word	0x10210000
 8003a10:	10120000 	.word	0x10120000
 8003a14:	10110000 	.word	0x10110000
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	40010000 	.word	0x40010000
 8003a20:	40010800 	.word	0x40010800
 8003a24:	40010c00 	.word	0x40010c00
 8003a28:	40011000 	.word	0x40011000
 8003a2c:	40011400 	.word	0x40011400
 8003a30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003a34:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <HAL_GPIO_Init+0x304>)
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	43db      	mvns	r3, r3
 8003a3c:	4909      	ldr	r1, [pc, #36]	; (8003a64 <HAL_GPIO_Init+0x304>)
 8003a3e:	4013      	ands	r3, r2
 8003a40:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	3301      	adds	r3, #1
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f47f ae8e 	bne.w	8003774 <HAL_GPIO_Init+0x14>
  }
}
 8003a58:	bf00      	nop
 8003a5a:	bf00      	nop
 8003a5c:	372c      	adds	r7, #44	; 0x2c
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bc80      	pop	{r7}
 8003a62:	4770      	bx	lr
 8003a64:	40010400 	.word	0x40010400

08003a68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	460b      	mov	r3, r1
 8003a72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	887b      	ldrh	r3, [r7, #2]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d002      	beq.n	8003a86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a80:	2301      	movs	r3, #1
 8003a82:	73fb      	strb	r3, [r7, #15]
 8003a84:	e001      	b.n	8003a8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a86:	2300      	movs	r3, #0
 8003a88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bc80      	pop	{r7}
 8003a94:	4770      	bx	lr

08003a96 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	807b      	strh	r3, [r7, #2]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003aa6:	787b      	ldrb	r3, [r7, #1]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aac:	887a      	ldrh	r2, [r7, #2]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003ab2:	e003      	b.n	8003abc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ab4:	887b      	ldrh	r3, [r7, #2]
 8003ab6:	041a      	lsls	r2, r3, #16
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	611a      	str	r2, [r3, #16]
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bc80      	pop	{r7}
 8003ac4:	4770      	bx	lr
	...

08003ac8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e12b      	b.n	8003d32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d106      	bne.n	8003af4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7fe f81e 	bl	8001b30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2224      	movs	r2, #36	; 0x24
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0201 	bic.w	r2, r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b2c:	f002 f9de 	bl	8005eec <HAL_RCC_GetPCLK1Freq>
 8003b30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	4a81      	ldr	r2, [pc, #516]	; (8003d3c <HAL_I2C_Init+0x274>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d807      	bhi.n	8003b4c <HAL_I2C_Init+0x84>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4a80      	ldr	r2, [pc, #512]	; (8003d40 <HAL_I2C_Init+0x278>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	bf94      	ite	ls
 8003b44:	2301      	movls	r3, #1
 8003b46:	2300      	movhi	r3, #0
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	e006      	b.n	8003b5a <HAL_I2C_Init+0x92>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4a7d      	ldr	r2, [pc, #500]	; (8003d44 <HAL_I2C_Init+0x27c>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	bf94      	ite	ls
 8003b54:	2301      	movls	r3, #1
 8003b56:	2300      	movhi	r3, #0
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e0e7      	b.n	8003d32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	4a78      	ldr	r2, [pc, #480]	; (8003d48 <HAL_I2C_Init+0x280>)
 8003b66:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6a:	0c9b      	lsrs	r3, r3, #18
 8003b6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	4a6a      	ldr	r2, [pc, #424]	; (8003d3c <HAL_I2C_Init+0x274>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d802      	bhi.n	8003b9c <HAL_I2C_Init+0xd4>
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	e009      	b.n	8003bb0 <HAL_I2C_Init+0xe8>
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ba2:	fb02 f303 	mul.w	r3, r2, r3
 8003ba6:	4a69      	ldr	r2, [pc, #420]	; (8003d4c <HAL_I2C_Init+0x284>)
 8003ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bac:	099b      	lsrs	r3, r3, #6
 8003bae:	3301      	adds	r3, #1
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6812      	ldr	r2, [r2, #0]
 8003bb4:	430b      	orrs	r3, r1
 8003bb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003bc2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	495c      	ldr	r1, [pc, #368]	; (8003d3c <HAL_I2C_Init+0x274>)
 8003bcc:	428b      	cmp	r3, r1
 8003bce:	d819      	bhi.n	8003c04 <HAL_I2C_Init+0x13c>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	1e59      	subs	r1, r3, #1
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bde:	1c59      	adds	r1, r3, #1
 8003be0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003be4:	400b      	ands	r3, r1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00a      	beq.n	8003c00 <HAL_I2C_Init+0x138>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	1e59      	subs	r1, r3, #1
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bfe:	e051      	b.n	8003ca4 <HAL_I2C_Init+0x1dc>
 8003c00:	2304      	movs	r3, #4
 8003c02:	e04f      	b.n	8003ca4 <HAL_I2C_Init+0x1dc>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d111      	bne.n	8003c30 <HAL_I2C_Init+0x168>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	1e58      	subs	r0, r3, #1
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6859      	ldr	r1, [r3, #4]
 8003c14:	460b      	mov	r3, r1
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	440b      	add	r3, r1
 8003c1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c1e:	3301      	adds	r3, #1
 8003c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	bf0c      	ite	eq
 8003c28:	2301      	moveq	r3, #1
 8003c2a:	2300      	movne	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	e012      	b.n	8003c56 <HAL_I2C_Init+0x18e>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	1e58      	subs	r0, r3, #1
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6859      	ldr	r1, [r3, #4]
 8003c38:	460b      	mov	r3, r1
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	0099      	lsls	r1, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c46:	3301      	adds	r3, #1
 8003c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	bf0c      	ite	eq
 8003c50:	2301      	moveq	r3, #1
 8003c52:	2300      	movne	r3, #0
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <HAL_I2C_Init+0x196>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e022      	b.n	8003ca4 <HAL_I2C_Init+0x1dc>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10e      	bne.n	8003c84 <HAL_I2C_Init+0x1bc>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	1e58      	subs	r0, r3, #1
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6859      	ldr	r1, [r3, #4]
 8003c6e:	460b      	mov	r3, r1
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	440b      	add	r3, r1
 8003c74:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c78:	3301      	adds	r3, #1
 8003c7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c82:	e00f      	b.n	8003ca4 <HAL_I2C_Init+0x1dc>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	1e58      	subs	r0, r3, #1
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6859      	ldr	r1, [r3, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	440b      	add	r3, r1
 8003c92:	0099      	lsls	r1, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ca0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ca4:	6879      	ldr	r1, [r7, #4]
 8003ca6:	6809      	ldr	r1, [r1, #0]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69da      	ldr	r2, [r3, #28]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003cd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6911      	ldr	r1, [r2, #16]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	68d2      	ldr	r2, [r2, #12]
 8003cde:	4311      	orrs	r1, r2
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	6812      	ldr	r2, [r2, #0]
 8003ce4:	430b      	orrs	r3, r1
 8003ce6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	695a      	ldr	r2, [r3, #20]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0201 	orr.w	r2, r2, #1
 8003d12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	000186a0 	.word	0x000186a0
 8003d40:	001e847f 	.word	0x001e847f
 8003d44:	003d08ff 	.word	0x003d08ff
 8003d48:	431bde83 	.word	0x431bde83
 8003d4c:	10624dd3 	.word	0x10624dd3

08003d50 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d62:	2b80      	cmp	r3, #128	; 0x80
 8003d64:	d103      	bne.n	8003d6e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	611a      	str	r2, [r3, #16]
  }
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr

08003d78 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b088      	sub	sp, #32
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003d80:	2300      	movs	r3, #0
 8003d82:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d98:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003da2:	7bfb      	ldrb	r3, [r7, #15]
 8003da4:	2b10      	cmp	r3, #16
 8003da6:	d003      	beq.n	8003db0 <HAL_I2C_EV_IRQHandler+0x38>
 8003da8:	7bfb      	ldrb	r3, [r7, #15]
 8003daa:	2b40      	cmp	r3, #64	; 0x40
 8003dac:	f040 80c1 	bne.w	8003f32 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10d      	bne.n	8003de6 <HAL_I2C_EV_IRQHandler+0x6e>
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003dd0:	d003      	beq.n	8003dda <HAL_I2C_EV_IRQHandler+0x62>
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003dd8:	d101      	bne.n	8003dde <HAL_I2C_EV_IRQHandler+0x66>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e000      	b.n	8003de0 <HAL_I2C_EV_IRQHandler+0x68>
 8003dde:	2300      	movs	r3, #0
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	f000 8132 	beq.w	800404a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00c      	beq.n	8003e0a <HAL_I2C_EV_IRQHandler+0x92>
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	0a5b      	lsrs	r3, r3, #9
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d006      	beq.n	8003e0a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f001 fc87 	bl	8005710 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 fd85 	bl	8004912 <I2C_Master_SB>
 8003e08:	e092      	b.n	8003f30 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	08db      	lsrs	r3, r3, #3
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d009      	beq.n	8003e2a <HAL_I2C_EV_IRQHandler+0xb2>
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	0a5b      	lsrs	r3, r3, #9
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d003      	beq.n	8003e2a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 fdfa 	bl	8004a1c <I2C_Master_ADD10>
 8003e28:	e082      	b.n	8003f30 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	085b      	lsrs	r3, r3, #1
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d009      	beq.n	8003e4a <HAL_I2C_EV_IRQHandler+0xd2>
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	0a5b      	lsrs	r3, r3, #9
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 fe13 	bl	8004a6e <I2C_Master_ADDR>
 8003e48:	e072      	b.n	8003f30 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	089b      	lsrs	r3, r3, #2
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d03b      	beq.n	8003ece <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e64:	f000 80f3 	beq.w	800404e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	09db      	lsrs	r3, r3, #7
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00f      	beq.n	8003e94 <HAL_I2C_EV_IRQHandler+0x11c>
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	0a9b      	lsrs	r3, r3, #10
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d009      	beq.n	8003e94 <HAL_I2C_EV_IRQHandler+0x11c>
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	089b      	lsrs	r3, r3, #2
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d103      	bne.n	8003e94 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f9f1 	bl	8004274 <I2C_MasterTransmit_TXE>
 8003e92:	e04d      	b.n	8003f30 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	089b      	lsrs	r3, r3, #2
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 80d6 	beq.w	800404e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	0a5b      	lsrs	r3, r3, #9
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f000 80cf 	beq.w	800404e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003eb0:	7bbb      	ldrb	r3, [r7, #14]
 8003eb2:	2b21      	cmp	r3, #33	; 0x21
 8003eb4:	d103      	bne.n	8003ebe <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 fa78 	bl	80043ac <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ebc:	e0c7      	b.n	800404e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003ebe:	7bfb      	ldrb	r3, [r7, #15]
 8003ec0:	2b40      	cmp	r3, #64	; 0x40
 8003ec2:	f040 80c4 	bne.w	800404e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 fae6 	bl	8004498 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ecc:	e0bf      	b.n	800404e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ed8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003edc:	f000 80b7 	beq.w	800404e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	099b      	lsrs	r3, r3, #6
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00f      	beq.n	8003f0c <HAL_I2C_EV_IRQHandler+0x194>
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	0a9b      	lsrs	r3, r3, #10
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d009      	beq.n	8003f0c <HAL_I2C_EV_IRQHandler+0x194>
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	089b      	lsrs	r3, r3, #2
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d103      	bne.n	8003f0c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 fb5f 	bl	80045c8 <I2C_MasterReceive_RXNE>
 8003f0a:	e011      	b.n	8003f30 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	089b      	lsrs	r3, r3, #2
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 809a 	beq.w	800404e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	0a5b      	lsrs	r3, r3, #9
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 8093 	beq.w	800404e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 fc08 	bl	800473e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f2e:	e08e      	b.n	800404e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003f30:	e08d      	b.n	800404e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d004      	beq.n	8003f44 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	61fb      	str	r3, [r7, #28]
 8003f42:	e007      	b.n	8003f54 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	085b      	lsrs	r3, r3, #1
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d012      	beq.n	8003f86 <HAL_I2C_EV_IRQHandler+0x20e>
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	0a5b      	lsrs	r3, r3, #9
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00c      	beq.n	8003f86 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d003      	beq.n	8003f7c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003f7c:	69b9      	ldr	r1, [r7, #24]
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 ffcc 	bl	8004f1c <I2C_Slave_ADDR>
 8003f84:	e066      	b.n	8004054 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	091b      	lsrs	r3, r3, #4
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d009      	beq.n	8003fa6 <HAL_I2C_EV_IRQHandler+0x22e>
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	0a5b      	lsrs	r3, r3, #9
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f001 f806 	bl	8004fb0 <I2C_Slave_STOPF>
 8003fa4:	e056      	b.n	8004054 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003fa6:	7bbb      	ldrb	r3, [r7, #14]
 8003fa8:	2b21      	cmp	r3, #33	; 0x21
 8003faa:	d002      	beq.n	8003fb2 <HAL_I2C_EV_IRQHandler+0x23a>
 8003fac:	7bbb      	ldrb	r3, [r7, #14]
 8003fae:	2b29      	cmp	r3, #41	; 0x29
 8003fb0:	d125      	bne.n	8003ffe <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	09db      	lsrs	r3, r3, #7
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00f      	beq.n	8003fde <HAL_I2C_EV_IRQHandler+0x266>
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	0a9b      	lsrs	r3, r3, #10
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d009      	beq.n	8003fde <HAL_I2C_EV_IRQHandler+0x266>
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	089b      	lsrs	r3, r3, #2
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d103      	bne.n	8003fde <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 fee4 	bl	8004da4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003fdc:	e039      	b.n	8004052 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	089b      	lsrs	r3, r3, #2
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d033      	beq.n	8004052 <HAL_I2C_EV_IRQHandler+0x2da>
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	0a5b      	lsrs	r3, r3, #9
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d02d      	beq.n	8004052 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 ff11 	bl	8004e1e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ffc:	e029      	b.n	8004052 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	099b      	lsrs	r3, r3, #6
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00f      	beq.n	800402a <HAL_I2C_EV_IRQHandler+0x2b2>
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	0a9b      	lsrs	r3, r3, #10
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d009      	beq.n	800402a <HAL_I2C_EV_IRQHandler+0x2b2>
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	089b      	lsrs	r3, r3, #2
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d103      	bne.n	800402a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 ff1b 	bl	8004e5e <I2C_SlaveReceive_RXNE>
 8004028:	e014      	b.n	8004054 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	089b      	lsrs	r3, r3, #2
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00e      	beq.n	8004054 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	0a5b      	lsrs	r3, r3, #9
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d008      	beq.n	8004054 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 ff49 	bl	8004eda <I2C_SlaveReceive_BTF>
 8004048:	e004      	b.n	8004054 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800404a:	bf00      	nop
 800404c:	e002      	b.n	8004054 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800404e:	bf00      	nop
 8004050:	e000      	b.n	8004054 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004052:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004054:	3720      	adds	r7, #32
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b08a      	sub	sp, #40	; 0x28
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004072:	2300      	movs	r3, #0
 8004074:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800407c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800407e:	6a3b      	ldr	r3, [r7, #32]
 8004080:	0a1b      	lsrs	r3, r3, #8
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d016      	beq.n	80040b8 <HAL_I2C_ER_IRQHandler+0x5e>
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	0a1b      	lsrs	r3, r3, #8
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d010      	beq.n	80040b8 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	f043 0301 	orr.w	r3, r3, #1
 800409c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80040a6:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040b6:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	0a5b      	lsrs	r3, r3, #9
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00e      	beq.n	80040e2 <HAL_I2C_ER_IRQHandler+0x88>
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	0a1b      	lsrs	r3, r3, #8
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d008      	beq.n	80040e2 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	f043 0302 	orr.w	r3, r3, #2
 80040d6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80040e0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80040e2:	6a3b      	ldr	r3, [r7, #32]
 80040e4:	0a9b      	lsrs	r3, r3, #10
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d03f      	beq.n	800416e <HAL_I2C_ER_IRQHandler+0x114>
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	0a1b      	lsrs	r3, r3, #8
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d039      	beq.n	800416e <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80040fa:	7efb      	ldrb	r3, [r7, #27]
 80040fc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004102:	b29b      	uxth	r3, r3
 8004104:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800410c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004112:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004114:	7ebb      	ldrb	r3, [r7, #26]
 8004116:	2b20      	cmp	r3, #32
 8004118:	d112      	bne.n	8004140 <HAL_I2C_ER_IRQHandler+0xe6>
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10f      	bne.n	8004140 <HAL_I2C_ER_IRQHandler+0xe6>
 8004120:	7cfb      	ldrb	r3, [r7, #19]
 8004122:	2b21      	cmp	r3, #33	; 0x21
 8004124:	d008      	beq.n	8004138 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004126:	7cfb      	ldrb	r3, [r7, #19]
 8004128:	2b29      	cmp	r3, #41	; 0x29
 800412a:	d005      	beq.n	8004138 <HAL_I2C_ER_IRQHandler+0xde>
 800412c:	7cfb      	ldrb	r3, [r7, #19]
 800412e:	2b28      	cmp	r3, #40	; 0x28
 8004130:	d106      	bne.n	8004140 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2b21      	cmp	r3, #33	; 0x21
 8004136:	d103      	bne.n	8004140 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f001 f869 	bl	8005210 <I2C_Slave_AF>
 800413e:	e016      	b.n	800416e <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004148:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414c:	f043 0304 	orr.w	r3, r3, #4
 8004150:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004152:	7efb      	ldrb	r3, [r7, #27]
 8004154:	2b10      	cmp	r3, #16
 8004156:	d002      	beq.n	800415e <HAL_I2C_ER_IRQHandler+0x104>
 8004158:	7efb      	ldrb	r3, [r7, #27]
 800415a:	2b40      	cmp	r3, #64	; 0x40
 800415c:	d107      	bne.n	800416e <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800416c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	0adb      	lsrs	r3, r3, #11
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00e      	beq.n	8004198 <HAL_I2C_ER_IRQHandler+0x13e>
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	0a1b      	lsrs	r3, r3, #8
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d008      	beq.n	8004198 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	f043 0308 	orr.w	r3, r3, #8
 800418c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004196:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	2b00      	cmp	r3, #0
 800419c:	d008      	beq.n	80041b0 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	431a      	orrs	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f001 f8a4 	bl	80052f8 <I2C_ITError>
  }
}
 80041b0:	bf00      	nop
 80041b2:	3728      	adds	r7, #40	; 0x28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bc80      	pop	{r7}
 80041c8:	4770      	bx	lr

080041ca <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b083      	sub	sp, #12
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bc80      	pop	{r7}
 80041da:	4770      	bx	lr

080041dc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bc80      	pop	{r7}
 80041ec:	4770      	bx	lr

080041ee <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bc80      	pop	{r7}
 80041fe:	4770      	bx	lr

08004200 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	460b      	mov	r3, r1
 800420a:	70fb      	strb	r3, [r7, #3]
 800420c:	4613      	mov	r3, r2
 800420e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	bc80      	pop	{r7}
 8004218:	4770      	bx	lr

0800421a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800421a:	b480      	push	{r7}
 800421c:	b083      	sub	sp, #12
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004222:	bf00      	nop
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	bc80      	pop	{r7}
 800422a:	4770      	bx	lr

0800422c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	bc80      	pop	{r7}
 800423c:	4770      	bx	lr

0800423e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800423e:	b480      	push	{r7}
 8004240:	b083      	sub	sp, #12
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	bc80      	pop	{r7}
 800424e:	4770      	bx	lr

08004250 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	bc80      	pop	{r7}
 8004260:	4770      	bx	lr

08004262 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004262:	b480      	push	{r7}
 8004264:	b083      	sub	sp, #12
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	bc80      	pop	{r7}
 8004272:	4770      	bx	lr

08004274 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004282:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800428a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004290:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004296:	2b00      	cmp	r3, #0
 8004298:	d150      	bne.n	800433c <I2C_MasterTransmit_TXE+0xc8>
 800429a:	7bfb      	ldrb	r3, [r7, #15]
 800429c:	2b21      	cmp	r3, #33	; 0x21
 800429e:	d14d      	bne.n	800433c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2b08      	cmp	r3, #8
 80042a4:	d01d      	beq.n	80042e2 <I2C_MasterTransmit_TXE+0x6e>
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	2b20      	cmp	r3, #32
 80042aa:	d01a      	beq.n	80042e2 <I2C_MasterTransmit_TXE+0x6e>
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042b2:	d016      	beq.n	80042e2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042c2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2211      	movs	r2, #17
 80042c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7ff ff6c 	bl	80041b8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80042e0:	e060      	b.n	80043a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042f0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004300:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2220      	movs	r2, #32
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b40      	cmp	r3, #64	; 0x40
 800431a:	d107      	bne.n	800432c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f7ff ff81 	bl	800422c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800432a:	e03b      	b.n	80043a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f7ff ff3f 	bl	80041b8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800433a:	e033      	b.n	80043a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800433c:	7bfb      	ldrb	r3, [r7, #15]
 800433e:	2b21      	cmp	r3, #33	; 0x21
 8004340:	d005      	beq.n	800434e <I2C_MasterTransmit_TXE+0xda>
 8004342:	7bbb      	ldrb	r3, [r7, #14]
 8004344:	2b40      	cmp	r3, #64	; 0x40
 8004346:	d12d      	bne.n	80043a4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004348:	7bfb      	ldrb	r3, [r7, #15]
 800434a:	2b22      	cmp	r3, #34	; 0x22
 800434c:	d12a      	bne.n	80043a4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004352:	b29b      	uxth	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d108      	bne.n	800436a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004366:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004368:	e01c      	b.n	80043a4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b40      	cmp	r3, #64	; 0x40
 8004374:	d103      	bne.n	800437e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f88e 	bl	8004498 <I2C_MemoryTransmit_TXE_BTF>
}
 800437c:	e012      	b.n	80043a4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004382:	781a      	ldrb	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	1c5a      	adds	r2, r3, #1
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004398:	b29b      	uxth	r3, r3
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80043a2:	e7ff      	b.n	80043a4 <I2C_MasterTransmit_TXE+0x130>
 80043a4:	bf00      	nop
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b21      	cmp	r3, #33	; 0x21
 80043c4:	d164      	bne.n	8004490 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d012      	beq.n	80043f6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	781a      	ldrb	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80043f4:	e04c      	b.n	8004490 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	d01d      	beq.n	8004438 <I2C_MasterTransmit_BTF+0x8c>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2b20      	cmp	r3, #32
 8004400:	d01a      	beq.n	8004438 <I2C_MasterTransmit_BTF+0x8c>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004408:	d016      	beq.n	8004438 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004418:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2211      	movs	r2, #17
 800441e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2220      	movs	r2, #32
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f7ff fec1 	bl	80041b8 <HAL_I2C_MasterTxCpltCallback>
}
 8004436:	e02b      	b.n	8004490 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004446:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004456:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2220      	movs	r2, #32
 8004462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b40      	cmp	r3, #64	; 0x40
 8004470:	d107      	bne.n	8004482 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7ff fed6 	bl	800422c <HAL_I2C_MemTxCpltCallback>
}
 8004480:	e006      	b.n	8004490 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7ff fe94 	bl	80041b8 <HAL_I2C_MasterTxCpltCallback>
}
 8004490:	bf00      	nop
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d11d      	bne.n	80044ec <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d10b      	bne.n	80044d0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044bc:	b2da      	uxtb	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c8:	1c9a      	adds	r2, r3, #2
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80044ce:	e077      	b.n	80045c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	121b      	asrs	r3, r3, #8
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e4:	1c5a      	adds	r2, r3, #1
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80044ea:	e069      	b.n	80045c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d10b      	bne.n	800450c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	651a      	str	r2, [r3, #80]	; 0x50
}
 800450a:	e059      	b.n	80045c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004510:	2b02      	cmp	r3, #2
 8004512:	d152      	bne.n	80045ba <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004514:	7bfb      	ldrb	r3, [r7, #15]
 8004516:	2b22      	cmp	r3, #34	; 0x22
 8004518:	d10d      	bne.n	8004536 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004528:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800452e:	1c5a      	adds	r2, r3, #1
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004534:	e044      	b.n	80045c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453a:	b29b      	uxth	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	d015      	beq.n	800456c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004540:	7bfb      	ldrb	r3, [r7, #15]
 8004542:	2b21      	cmp	r3, #33	; 0x21
 8004544:	d112      	bne.n	800456c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	781a      	ldrb	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	1c5a      	adds	r2, r3, #1
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004560:	b29b      	uxth	r3, r3
 8004562:	3b01      	subs	r3, #1
 8004564:	b29a      	uxth	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800456a:	e029      	b.n	80045c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004570:	b29b      	uxth	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d124      	bne.n	80045c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004576:	7bfb      	ldrb	r3, [r7, #15]
 8004578:	2b21      	cmp	r3, #33	; 0x21
 800457a:	d121      	bne.n	80045c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800458a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800459a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2220      	movs	r2, #32
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7ff fe3a 	bl	800422c <HAL_I2C_MemTxCpltCallback>
}
 80045b8:	e002      	b.n	80045c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7ff fbc8 	bl	8003d50 <I2C_Flush_DR>
}
 80045c0:	bf00      	nop
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b22      	cmp	r3, #34	; 0x22
 80045da:	f040 80ac 	bne.w	8004736 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2b03      	cmp	r3, #3
 80045ea:	d921      	bls.n	8004630 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	691a      	ldr	r2, [r3, #16]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	b2d2      	uxtb	r2, r2
 80045f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	1c5a      	adds	r2, r3, #1
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004608:	b29b      	uxth	r3, r3
 800460a:	3b01      	subs	r3, #1
 800460c:	b29a      	uxth	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004616:	b29b      	uxth	r3, r3
 8004618:	2b03      	cmp	r3, #3
 800461a:	f040 808c 	bne.w	8004736 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800462c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800462e:	e082      	b.n	8004736 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004634:	2b02      	cmp	r3, #2
 8004636:	d075      	beq.n	8004724 <I2C_MasterReceive_RXNE+0x15c>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d002      	beq.n	8004644 <I2C_MasterReceive_RXNE+0x7c>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d16f      	bne.n	8004724 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f001 f831 	bl	80056ac <I2C_WaitOnSTOPRequestThroughIT>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d142      	bne.n	80046d6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800465e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800466e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	691a      	ldr	r2, [r3, #16]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	1c5a      	adds	r2, r3, #1
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800468c:	b29b      	uxth	r3, r3
 800468e:	3b01      	subs	r3, #1
 8004690:	b29a      	uxth	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2220      	movs	r2, #32
 800469a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b40      	cmp	r3, #64	; 0x40
 80046a8:	d10a      	bne.n	80046c0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f7ff fdc0 	bl	800423e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80046be:	e03a      	b.n	8004736 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2212      	movs	r2, #18
 80046cc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7ff fd7b 	bl	80041ca <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80046d4:	e02f      	b.n	8004736 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046e4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	691a      	ldr	r2, [r3, #16]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004702:	b29b      	uxth	r3, r3
 8004704:	3b01      	subs	r3, #1
 8004706:	b29a      	uxth	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2220      	movs	r2, #32
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f7ff fd97 	bl	8004250 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004722:	e008      	b.n	8004736 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004732:	605a      	str	r2, [r3, #4]
}
 8004734:	e7ff      	b.n	8004736 <I2C_MasterReceive_RXNE+0x16e>
 8004736:	bf00      	nop
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b084      	sub	sp, #16
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004750:	b29b      	uxth	r3, r3
 8004752:	2b04      	cmp	r3, #4
 8004754:	d11b      	bne.n	800478e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004764:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	691a      	ldr	r2, [r3, #16]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004770:	b2d2      	uxtb	r2, r2
 8004772:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004782:	b29b      	uxth	r3, r3
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800478c:	e0bd      	b.n	800490a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004792:	b29b      	uxth	r3, r3
 8004794:	2b03      	cmp	r3, #3
 8004796:	d129      	bne.n	80047ec <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047a6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2b04      	cmp	r3, #4
 80047ac:	d00a      	beq.n	80047c4 <I2C_MasterReceive_BTF+0x86>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d007      	beq.n	80047c4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047c2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	691a      	ldr	r2, [r3, #16]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ce:	b2d2      	uxtb	r2, r2
 80047d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d6:	1c5a      	adds	r2, r3, #1
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	3b01      	subs	r3, #1
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80047ea:	e08e      	b.n	800490a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d176      	bne.n	80048e4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d002      	beq.n	8004802 <I2C_MasterReceive_BTF+0xc4>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2b10      	cmp	r3, #16
 8004800:	d108      	bne.n	8004814 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	e019      	b.n	8004848 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2b04      	cmp	r3, #4
 8004818:	d002      	beq.n	8004820 <I2C_MasterReceive_BTF+0xe2>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2b02      	cmp	r3, #2
 800481e:	d108      	bne.n	8004832 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	e00a      	b.n	8004848 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2b10      	cmp	r3, #16
 8004836:	d007      	beq.n	8004848 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004846:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	691a      	ldr	r2, [r3, #16]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	b2d2      	uxtb	r2, r2
 8004854:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	1c5a      	adds	r2, r3, #1
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004864:	b29b      	uxth	r3, r3
 8004866:	3b01      	subs	r3, #1
 8004868:	b29a      	uxth	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	691a      	ldr	r2, [r3, #16]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	b2d2      	uxtb	r2, r2
 800487a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004880:	1c5a      	adds	r2, r3, #1
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800488a:	b29b      	uxth	r3, r3
 800488c:	3b01      	subs	r3, #1
 800488e:	b29a      	uxth	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80048a2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2220      	movs	r2, #32
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b40      	cmp	r3, #64	; 0x40
 80048b6:	d10a      	bne.n	80048ce <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7ff fcb9 	bl	800423e <HAL_I2C_MemRxCpltCallback>
}
 80048cc:	e01d      	b.n	800490a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2212      	movs	r2, #18
 80048da:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f7ff fc74 	bl	80041ca <HAL_I2C_MasterRxCpltCallback>
}
 80048e2:	e012      	b.n	800490a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	691a      	ldr	r2, [r3, #16]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	b2d2      	uxtb	r2, r2
 80048f0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	1c5a      	adds	r2, r3, #1
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004900:	b29b      	uxth	r3, r3
 8004902:	3b01      	subs	r3, #1
 8004904:	b29a      	uxth	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800490a:	bf00      	nop
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004912:	b480      	push	{r7}
 8004914:	b083      	sub	sp, #12
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b40      	cmp	r3, #64	; 0x40
 8004924:	d117      	bne.n	8004956 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800492a:	2b00      	cmp	r3, #0
 800492c:	d109      	bne.n	8004942 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004932:	b2db      	uxtb	r3, r3
 8004934:	461a      	mov	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800493e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004940:	e067      	b.n	8004a12 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004946:	b2db      	uxtb	r3, r3
 8004948:	f043 0301 	orr.w	r3, r3, #1
 800494c:	b2da      	uxtb	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	611a      	str	r2, [r3, #16]
}
 8004954:	e05d      	b.n	8004a12 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800495e:	d133      	bne.n	80049c8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b21      	cmp	r3, #33	; 0x21
 800496a:	d109      	bne.n	8004980 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004970:	b2db      	uxtb	r3, r3
 8004972:	461a      	mov	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800497c:	611a      	str	r2, [r3, #16]
 800497e:	e008      	b.n	8004992 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004984:	b2db      	uxtb	r3, r3
 8004986:	f043 0301 	orr.w	r3, r3, #1
 800498a:	b2da      	uxtb	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004996:	2b00      	cmp	r3, #0
 8004998:	d004      	beq.n	80049a4 <I2C_Master_SB+0x92>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800499e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d108      	bne.n	80049b6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d032      	beq.n	8004a12 <I2C_Master_SB+0x100>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d02d      	beq.n	8004a12 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049c4:	605a      	str	r2, [r3, #4]
}
 80049c6:	e024      	b.n	8004a12 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10e      	bne.n	80049ee <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	11db      	asrs	r3, r3, #7
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	f003 0306 	and.w	r3, r3, #6
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	f063 030f 	orn	r3, r3, #15
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	611a      	str	r2, [r3, #16]
}
 80049ec:	e011      	b.n	8004a12 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d10d      	bne.n	8004a12 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	11db      	asrs	r3, r3, #7
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	f003 0306 	and.w	r3, r3, #6
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	f063 030e 	orn	r3, r3, #14
 8004a0a:	b2da      	uxtb	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	611a      	str	r2, [r3, #16]
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bc80      	pop	{r7}
 8004a1a:	4770      	bx	lr

08004a1c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d004      	beq.n	8004a42 <I2C_Master_ADD10+0x26>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d108      	bne.n	8004a54 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00c      	beq.n	8004a64 <I2C_Master_ADD10+0x48>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d007      	beq.n	8004a64 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a62:	605a      	str	r2, [r3, #4]
  }
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bc80      	pop	{r7}
 8004a6c:	4770      	bx	lr

08004a6e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b091      	sub	sp, #68	; 0x44
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a84:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b22      	cmp	r3, #34	; 0x22
 8004a96:	f040 8174 	bne.w	8004d82 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10f      	bne.n	8004ac2 <I2C_Master_ADDR+0x54>
 8004aa2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004aa6:	2b40      	cmp	r3, #64	; 0x40
 8004aa8:	d10b      	bne.n	8004ac2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aaa:	2300      	movs	r3, #0
 8004aac:	633b      	str	r3, [r7, #48]	; 0x30
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	633b      	str	r3, [r7, #48]	; 0x30
 8004abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac0:	e16b      	b.n	8004d9a <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d11d      	bne.n	8004b06 <I2C_Master_ADDR+0x98>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ad2:	d118      	bne.n	8004b06 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004af8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004afe:	1c5a      	adds	r2, r3, #1
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	651a      	str	r2, [r3, #80]	; 0x50
 8004b04:	e149      	b.n	8004d9a <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d113      	bne.n	8004b38 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b10:	2300      	movs	r3, #0
 8004b12:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b24:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	e120      	b.n	8004d7a <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	f040 808a 	bne.w	8004c58 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b46:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b4a:	d137      	bne.n	8004bbc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b5a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b6a:	d113      	bne.n	8004b94 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b7a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	627b      	str	r3, [r7, #36]	; 0x24
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	e0f2      	b.n	8004d7a <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b94:	2300      	movs	r3, #0
 8004b96:	623b      	str	r3, [r7, #32]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	623b      	str	r3, [r7, #32]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	623b      	str	r3, [r7, #32]
 8004ba8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bb8:	601a      	str	r2, [r3, #0]
 8004bba:	e0de      	b.n	8004d7a <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bbe:	2b08      	cmp	r3, #8
 8004bc0:	d02e      	beq.n	8004c20 <I2C_Master_ADDR+0x1b2>
 8004bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc4:	2b20      	cmp	r3, #32
 8004bc6:	d02b      	beq.n	8004c20 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bca:	2b12      	cmp	r3, #18
 8004bcc:	d102      	bne.n	8004bd4 <I2C_Master_ADDR+0x166>
 8004bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d125      	bne.n	8004c20 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	d00e      	beq.n	8004bf8 <I2C_Master_ADDR+0x18a>
 8004bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d00b      	beq.n	8004bf8 <I2C_Master_ADDR+0x18a>
 8004be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be2:	2b10      	cmp	r3, #16
 8004be4:	d008      	beq.n	8004bf8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf4:	601a      	str	r2, [r3, #0]
 8004bf6:	e007      	b.n	8004c08 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c06:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c08:	2300      	movs	r3, #0
 8004c0a:	61fb      	str	r3, [r7, #28]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	61fb      	str	r3, [r7, #28]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	61fb      	str	r3, [r7, #28]
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	e0ac      	b.n	8004d7a <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c2e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c30:	2300      	movs	r3, #0
 8004c32:	61bb      	str	r3, [r7, #24]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	61bb      	str	r3, [r7, #24]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	61bb      	str	r3, [r7, #24]
 8004c44:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	e090      	b.n	8004d7a <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d158      	bne.n	8004d14 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c64:	2b04      	cmp	r3, #4
 8004c66:	d021      	beq.n	8004cac <I2C_Master_ADDR+0x23e>
 8004c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d01e      	beq.n	8004cac <I2C_Master_ADDR+0x23e>
 8004c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c70:	2b10      	cmp	r3, #16
 8004c72:	d01b      	beq.n	8004cac <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c82:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c84:	2300      	movs	r3, #0
 8004c86:	617b      	str	r3, [r7, #20]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	617b      	str	r3, [r7, #20]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	e012      	b.n	8004cd2 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cba:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	613b      	str	r3, [r7, #16]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	613b      	str	r3, [r7, #16]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	613b      	str	r3, [r7, #16]
 8004cd0:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ce0:	d14b      	bne.n	8004d7a <I2C_Master_ADDR+0x30c>
 8004ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ce8:	d00b      	beq.n	8004d02 <I2C_Master_ADDR+0x294>
 8004cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d008      	beq.n	8004d02 <I2C_Master_ADDR+0x294>
 8004cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf2:	2b08      	cmp	r3, #8
 8004cf4:	d005      	beq.n	8004d02 <I2C_Master_ADDR+0x294>
 8004cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf8:	2b10      	cmp	r3, #16
 8004cfa:	d002      	beq.n	8004d02 <I2C_Master_ADDR+0x294>
 8004cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfe:	2b20      	cmp	r3, #32
 8004d00:	d13b      	bne.n	8004d7a <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d10:	605a      	str	r2, [r3, #4]
 8004d12:	e032      	b.n	8004d7a <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d22:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d32:	d117      	bne.n	8004d64 <I2C_Master_ADDR+0x2f6>
 8004d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d36:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d3a:	d00b      	beq.n	8004d54 <I2C_Master_ADDR+0x2e6>
 8004d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d008      	beq.n	8004d54 <I2C_Master_ADDR+0x2e6>
 8004d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d44:	2b08      	cmp	r3, #8
 8004d46:	d005      	beq.n	8004d54 <I2C_Master_ADDR+0x2e6>
 8004d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4a:	2b10      	cmp	r3, #16
 8004d4c:	d002      	beq.n	8004d54 <I2C_Master_ADDR+0x2e6>
 8004d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d50:	2b20      	cmp	r3, #32
 8004d52:	d107      	bne.n	8004d64 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d62:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d64:	2300      	movs	r3, #0
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	60fb      	str	r3, [r7, #12]
 8004d78:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004d80:	e00b      	b.n	8004d9a <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d82:	2300      	movs	r3, #0
 8004d84:	60bb      	str	r3, [r7, #8]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	60bb      	str	r3, [r7, #8]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	60bb      	str	r3, [r7, #8]
 8004d96:	68bb      	ldr	r3, [r7, #8]
}
 8004d98:	e7ff      	b.n	8004d9a <I2C_Master_ADDR+0x32c>
 8004d9a:	bf00      	nop
 8004d9c:	3744      	adds	r7, #68	; 0x44
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bc80      	pop	{r7}
 8004da2:	4770      	bx	lr

08004da4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d02b      	beq.n	8004e16 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	781a      	ldrb	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	1c5a      	adds	r2, r3, #1
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d114      	bne.n	8004e16 <I2C_SlaveTransmit_TXE+0x72>
 8004dec:	7bfb      	ldrb	r3, [r7, #15]
 8004dee:	2b29      	cmp	r3, #41	; 0x29
 8004df0:	d111      	bne.n	8004e16 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e00:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2221      	movs	r2, #33	; 0x21
 8004e06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2228      	movs	r2, #40	; 0x28
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7ff f9e3 	bl	80041dc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004e16:	bf00      	nop
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d011      	beq.n	8004e54 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	781a      	ldrb	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e40:	1c5a      	adds	r2, r3, #1
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bc80      	pop	{r7}
 8004e5c:	4770      	bx	lr

08004e5e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b084      	sub	sp, #16
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e6c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d02c      	beq.n	8004ed2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	691a      	ldr	r2, [r3, #16]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e82:	b2d2      	uxtb	r2, r2
 8004e84:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8a:	1c5a      	adds	r2, r3, #1
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	3b01      	subs	r3, #1
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d114      	bne.n	8004ed2 <I2C_SlaveReceive_RXNE+0x74>
 8004ea8:	7bfb      	ldrb	r3, [r7, #15]
 8004eaa:	2b2a      	cmp	r3, #42	; 0x2a
 8004eac:	d111      	bne.n	8004ed2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ebc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2222      	movs	r2, #34	; 0x22
 8004ec2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2228      	movs	r2, #40	; 0x28
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7ff f98e 	bl	80041ee <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004ed2:	bf00      	nop
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b083      	sub	sp, #12
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d012      	beq.n	8004f12 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	691a      	ldr	r2, [r3, #16]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef6:	b2d2      	uxtb	r2, r2
 8004ef8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efe:	1c5a      	adds	r2, r3, #1
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004f12:	bf00      	nop
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bc80      	pop	{r7}
 8004f1a:	4770      	bx	lr

08004f1c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004f26:	2300      	movs	r3, #0
 8004f28:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f36:	2b28      	cmp	r3, #40	; 0x28
 8004f38:	d127      	bne.n	8004f8a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f48:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	089b      	lsrs	r3, r3, #2
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004f56:	2301      	movs	r3, #1
 8004f58:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	09db      	lsrs	r3, r3, #7
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d103      	bne.n	8004f6e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	81bb      	strh	r3, [r7, #12]
 8004f6c:	e002      	b.n	8004f74 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004f7c:	89ba      	ldrh	r2, [r7, #12]
 8004f7e:	7bfb      	ldrb	r3, [r7, #15]
 8004f80:	4619      	mov	r1, r3
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7ff f93c 	bl	8004200 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004f88:	e00e      	b.n	8004fa8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60bb      	str	r3, [r7, #8]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	60bb      	str	r3, [r7, #8]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	60bb      	str	r3, [r7, #8]
 8004f9e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004fa8:	bf00      	nop
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fbe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fce:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	60bb      	str	r3, [r7, #8]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	60bb      	str	r3, [r7, #8]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f042 0201 	orr.w	r2, r2, #1
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ffc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005008:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800500c:	d172      	bne.n	80050f4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800500e:	7bfb      	ldrb	r3, [r7, #15]
 8005010:	2b22      	cmp	r3, #34	; 0x22
 8005012:	d002      	beq.n	800501a <I2C_Slave_STOPF+0x6a>
 8005014:	7bfb      	ldrb	r3, [r7, #15]
 8005016:	2b2a      	cmp	r3, #42	; 0x2a
 8005018:	d135      	bne.n	8005086 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	b29a      	uxth	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800502c:	b29b      	uxth	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d005      	beq.n	800503e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005036:	f043 0204 	orr.w	r2, r3, #4
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800504c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005052:	4618      	mov	r0, r3
 8005054:	f7fe fb76 	bl	8003744 <HAL_DMA_GetState>
 8005058:	4603      	mov	r3, r0
 800505a:	2b01      	cmp	r3, #1
 800505c:	d049      	beq.n	80050f2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005062:	4a69      	ldr	r2, [pc, #420]	; (8005208 <I2C_Slave_STOPF+0x258>)
 8005064:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506a:	4618      	mov	r0, r3
 800506c:	f7fe faf2 	bl	8003654 <HAL_DMA_Abort_IT>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d03d      	beq.n	80050f2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005080:	4610      	mov	r0, r2
 8005082:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005084:	e035      	b.n	80050f2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	b29a      	uxth	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005098:	b29b      	uxth	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d005      	beq.n	80050aa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a2:	f043 0204 	orr.w	r2, r3, #4
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050b8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050be:	4618      	mov	r0, r3
 80050c0:	f7fe fb40 	bl	8003744 <HAL_DMA_GetState>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d014      	beq.n	80050f4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ce:	4a4e      	ldr	r2, [pc, #312]	; (8005208 <I2C_Slave_STOPF+0x258>)
 80050d0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fe fabc 	bl	8003654 <HAL_DMA_Abort_IT>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d008      	beq.n	80050f4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80050ec:	4610      	mov	r0, r2
 80050ee:	4798      	blx	r3
 80050f0:	e000      	b.n	80050f4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80050f2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d03e      	beq.n	800517c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b04      	cmp	r3, #4
 800510a:	d112      	bne.n	8005132 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	691a      	ldr	r2, [r3, #16]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	b2d2      	uxtb	r2, r2
 8005118:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511e:	1c5a      	adds	r2, r3, #1
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005128:	b29b      	uxth	r3, r3
 800512a:	3b01      	subs	r3, #1
 800512c:	b29a      	uxth	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513c:	2b40      	cmp	r3, #64	; 0x40
 800513e:	d112      	bne.n	8005166 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	691a      	ldr	r2, [r3, #16]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514a:	b2d2      	uxtb	r2, r2
 800514c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005152:	1c5a      	adds	r2, r3, #1
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515c:	b29b      	uxth	r3, r3
 800515e:	3b01      	subs	r3, #1
 8005160:	b29a      	uxth	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800516a:	b29b      	uxth	r3, r3
 800516c:	2b00      	cmp	r3, #0
 800516e:	d005      	beq.n	800517c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005174:	f043 0204 	orr.w	r2, r3, #4
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005180:	2b00      	cmp	r3, #0
 8005182:	d003      	beq.n	800518c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 f8b7 	bl	80052f8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800518a:	e039      	b.n	8005200 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800518c:	7bfb      	ldrb	r3, [r7, #15]
 800518e:	2b2a      	cmp	r3, #42	; 0x2a
 8005190:	d109      	bne.n	80051a6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2228      	movs	r2, #40	; 0x28
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f7ff f824 	bl	80041ee <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b28      	cmp	r3, #40	; 0x28
 80051b0:	d111      	bne.n	80051d6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a15      	ldr	r2, [pc, #84]	; (800520c <I2C_Slave_STOPF+0x25c>)
 80051b6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2220      	movs	r2, #32
 80051c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7ff f823 	bl	800421a <HAL_I2C_ListenCpltCallback>
}
 80051d4:	e014      	b.n	8005200 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051da:	2b22      	cmp	r3, #34	; 0x22
 80051dc:	d002      	beq.n	80051e4 <I2C_Slave_STOPF+0x234>
 80051de:	7bfb      	ldrb	r3, [r7, #15]
 80051e0:	2b22      	cmp	r3, #34	; 0x22
 80051e2:	d10d      	bne.n	8005200 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2220      	movs	r2, #32
 80051ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7fe fff7 	bl	80041ee <HAL_I2C_SlaveRxCpltCallback>
}
 8005200:	bf00      	nop
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	0800555d 	.word	0x0800555d
 800520c:	ffff0000 	.word	0xffff0000

08005210 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800521e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005224:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	2b08      	cmp	r3, #8
 800522a:	d002      	beq.n	8005232 <I2C_Slave_AF+0x22>
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	2b20      	cmp	r3, #32
 8005230:	d129      	bne.n	8005286 <I2C_Slave_AF+0x76>
 8005232:	7bfb      	ldrb	r3, [r7, #15]
 8005234:	2b28      	cmp	r3, #40	; 0x28
 8005236:	d126      	bne.n	8005286 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a2e      	ldr	r2, [pc, #184]	; (80052f4 <I2C_Slave_AF+0xe4>)
 800523c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800524c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005256:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005266:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2220      	movs	r2, #32
 8005272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7fe ffcb 	bl	800421a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005284:	e031      	b.n	80052ea <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005286:	7bfb      	ldrb	r3, [r7, #15]
 8005288:	2b21      	cmp	r3, #33	; 0x21
 800528a:	d129      	bne.n	80052e0 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a19      	ldr	r2, [pc, #100]	; (80052f4 <I2C_Slave_AF+0xe4>)
 8005290:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2221      	movs	r2, #33	; 0x21
 8005296:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2220      	movs	r2, #32
 800529c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052b6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052c0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052d0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7fe fd3c 	bl	8003d50 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f7fe ff7f 	bl	80041dc <HAL_I2C_SlaveTxCpltCallback>
}
 80052de:	e004      	b.n	80052ea <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052e8:	615a      	str	r2, [r3, #20]
}
 80052ea:	bf00      	nop
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	ffff0000 	.word	0xffff0000

080052f8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005306:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800530e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005310:	7bbb      	ldrb	r3, [r7, #14]
 8005312:	2b10      	cmp	r3, #16
 8005314:	d002      	beq.n	800531c <I2C_ITError+0x24>
 8005316:	7bbb      	ldrb	r3, [r7, #14]
 8005318:	2b40      	cmp	r3, #64	; 0x40
 800531a:	d10a      	bne.n	8005332 <I2C_ITError+0x3a>
 800531c:	7bfb      	ldrb	r3, [r7, #15]
 800531e:	2b22      	cmp	r3, #34	; 0x22
 8005320:	d107      	bne.n	8005332 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005330:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005332:	7bfb      	ldrb	r3, [r7, #15]
 8005334:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005338:	2b28      	cmp	r3, #40	; 0x28
 800533a:	d107      	bne.n	800534c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2228      	movs	r2, #40	; 0x28
 8005346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800534a:	e015      	b.n	8005378 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005356:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800535a:	d00a      	beq.n	8005372 <I2C_ITError+0x7a>
 800535c:	7bfb      	ldrb	r3, [r7, #15]
 800535e:	2b60      	cmp	r3, #96	; 0x60
 8005360:	d007      	beq.n	8005372 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2220      	movs	r2, #32
 8005366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005382:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005386:	d162      	bne.n	800544e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005396:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800539c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d020      	beq.n	80053e8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053aa:	4a6a      	ldr	r2, [pc, #424]	; (8005554 <I2C_ITError+0x25c>)
 80053ac:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7fe f94e 	bl	8003654 <HAL_DMA_Abort_IT>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 8089 	beq.w	80054d2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 0201 	bic.w	r2, r2, #1
 80053ce:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2220      	movs	r2, #32
 80053d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80053e2:	4610      	mov	r0, r2
 80053e4:	4798      	blx	r3
 80053e6:	e074      	b.n	80054d2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ec:	4a59      	ldr	r2, [pc, #356]	; (8005554 <I2C_ITError+0x25c>)
 80053ee:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7fe f92d 	bl	8003654 <HAL_DMA_Abort_IT>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d068      	beq.n	80054d2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540a:	2b40      	cmp	r3, #64	; 0x40
 800540c:	d10b      	bne.n	8005426 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	691a      	ldr	r2, [r3, #16]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005418:	b2d2      	uxtb	r2, r2
 800541a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005420:	1c5a      	adds	r2, r3, #1
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 0201 	bic.w	r2, r2, #1
 8005434:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2220      	movs	r2, #32
 800543a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005448:	4610      	mov	r0, r2
 800544a:	4798      	blx	r3
 800544c:	e041      	b.n	80054d2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b60      	cmp	r3, #96	; 0x60
 8005458:	d125      	bne.n	80054a6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2220      	movs	r2, #32
 800545e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005472:	2b40      	cmp	r3, #64	; 0x40
 8005474:	d10b      	bne.n	800548e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	691a      	ldr	r2, [r3, #16]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005480:	b2d2      	uxtb	r2, r2
 8005482:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	1c5a      	adds	r2, r3, #1
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f022 0201 	bic.w	r2, r2, #1
 800549c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f7fe fedf 	bl	8004262 <HAL_I2C_AbortCpltCallback>
 80054a4:	e015      	b.n	80054d2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b0:	2b40      	cmp	r3, #64	; 0x40
 80054b2:	d10b      	bne.n	80054cc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	691a      	ldr	r2, [r3, #16]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054be:	b2d2      	uxtb	r2, r2
 80054c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	1c5a      	adds	r2, r3, #1
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f7fe febf 	bl	8004250 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10e      	bne.n	8005500 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d109      	bne.n	8005500 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d104      	bne.n	8005500 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d007      	beq.n	8005510 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685a      	ldr	r2, [r3, #4]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800550e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005516:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551c:	f003 0304 	and.w	r3, r3, #4
 8005520:	2b04      	cmp	r3, #4
 8005522:	d113      	bne.n	800554c <I2C_ITError+0x254>
 8005524:	7bfb      	ldrb	r3, [r7, #15]
 8005526:	2b28      	cmp	r3, #40	; 0x28
 8005528:	d110      	bne.n	800554c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a0a      	ldr	r2, [pc, #40]	; (8005558 <I2C_ITError+0x260>)
 800552e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2220      	movs	r2, #32
 800553a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f7fe fe67 	bl	800421a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800554c:	bf00      	nop
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	0800555d 	.word	0x0800555d
 8005558:	ffff0000 	.word	0xffff0000

0800555c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b086      	sub	sp, #24
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005564:	2300      	movs	r3, #0
 8005566:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005574:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005576:	4b4b      	ldr	r3, [pc, #300]	; (80056a4 <I2C_DMAAbort+0x148>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	08db      	lsrs	r3, r3, #3
 800557c:	4a4a      	ldr	r2, [pc, #296]	; (80056a8 <I2C_DMAAbort+0x14c>)
 800557e:	fba2 2303 	umull	r2, r3, r2, r3
 8005582:	0a1a      	lsrs	r2, r3, #8
 8005584:	4613      	mov	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4413      	add	r3, r2
 800558a:	00da      	lsls	r2, r3, #3
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d106      	bne.n	80055a4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559a:	f043 0220 	orr.w	r2, r3, #32
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80055a2:	e00a      	b.n	80055ba <I2C_DMAAbort+0x5e>
    }
    count--;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	3b01      	subs	r3, #1
 80055a8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055b8:	d0ea      	beq.n	8005590 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d003      	beq.n	80055ca <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c6:	2200      	movs	r2, #0
 80055c8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d6:	2200      	movs	r2, #0
 80055d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055e8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	2200      	movs	r2, #0
 80055ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d003      	beq.n	8005600 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055fc:	2200      	movs	r2, #0
 80055fe:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005604:	2b00      	cmp	r3, #0
 8005606:	d003      	beq.n	8005610 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560c:	2200      	movs	r2, #0
 800560e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f022 0201 	bic.w	r2, r2, #1
 800561e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005626:	b2db      	uxtb	r3, r3
 8005628:	2b60      	cmp	r3, #96	; 0x60
 800562a:	d10e      	bne.n	800564a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	2220      	movs	r2, #32
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	2200      	movs	r2, #0
 8005640:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005642:	6978      	ldr	r0, [r7, #20]
 8005644:	f7fe fe0d 	bl	8004262 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005648:	e027      	b.n	800569a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800564a:	7cfb      	ldrb	r3, [r7, #19]
 800564c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005650:	2b28      	cmp	r3, #40	; 0x28
 8005652:	d117      	bne.n	8005684 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f042 0201 	orr.w	r2, r2, #1
 8005662:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005672:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	2200      	movs	r2, #0
 8005678:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	2228      	movs	r2, #40	; 0x28
 800567e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005682:	e007      	b.n	8005694 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	2220      	movs	r2, #32
 8005688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005694:	6978      	ldr	r0, [r7, #20]
 8005696:	f7fe fddb 	bl	8004250 <HAL_I2C_ErrorCallback>
}
 800569a:	bf00      	nop
 800569c:	3718      	adds	r7, #24
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	20000000 	.word	0x20000000
 80056a8:	14f8b589 	.word	0x14f8b589

080056ac <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056b4:	2300      	movs	r3, #0
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80056b8:	4b13      	ldr	r3, [pc, #76]	; (8005708 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	08db      	lsrs	r3, r3, #3
 80056be:	4a13      	ldr	r2, [pc, #76]	; (800570c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80056c0:	fba2 2303 	umull	r2, r3, r2, r3
 80056c4:	0a1a      	lsrs	r2, r3, #8
 80056c6:	4613      	mov	r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	3b01      	subs	r3, #1
 80056d2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d107      	bne.n	80056ea <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056de:	f043 0220 	orr.w	r2, r3, #32
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e008      	b.n	80056fc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056f8:	d0e9      	beq.n	80056ce <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3714      	adds	r7, #20
 8005700:	46bd      	mov	sp, r7
 8005702:	bc80      	pop	{r7}
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	20000000 	.word	0x20000000
 800570c:	14f8b589 	.word	0x14f8b589

08005710 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005720:	d103      	bne.n	800572a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005728:	e007      	b.n	800573a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005732:	d102      	bne.n	800573a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2208      	movs	r2, #8
 8005738:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800573a:	bf00      	nop
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	bc80      	pop	{r7}
 8005742:	4770      	bx	lr

08005744 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005748:	4b03      	ldr	r3, [pc, #12]	; (8005758 <HAL_PWR_EnableBkUpAccess+0x14>)
 800574a:	2201      	movs	r2, #1
 800574c:	601a      	str	r2, [r3, #0]
}
 800574e:	bf00      	nop
 8005750:	46bd      	mov	sp, r7
 8005752:	bc80      	pop	{r7}
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	420e0020 	.word	0x420e0020

0800575c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b086      	sub	sp, #24
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e26c      	b.n	8005c48 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b00      	cmp	r3, #0
 8005778:	f000 8087 	beq.w	800588a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800577c:	4b92      	ldr	r3, [pc, #584]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f003 030c 	and.w	r3, r3, #12
 8005784:	2b04      	cmp	r3, #4
 8005786:	d00c      	beq.n	80057a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005788:	4b8f      	ldr	r3, [pc, #572]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f003 030c 	and.w	r3, r3, #12
 8005790:	2b08      	cmp	r3, #8
 8005792:	d112      	bne.n	80057ba <HAL_RCC_OscConfig+0x5e>
 8005794:	4b8c      	ldr	r3, [pc, #560]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800579c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057a0:	d10b      	bne.n	80057ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057a2:	4b89      	ldr	r3, [pc, #548]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d06c      	beq.n	8005888 <HAL_RCC_OscConfig+0x12c>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d168      	bne.n	8005888 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e246      	b.n	8005c48 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057c2:	d106      	bne.n	80057d2 <HAL_RCC_OscConfig+0x76>
 80057c4:	4b80      	ldr	r3, [pc, #512]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a7f      	ldr	r2, [pc, #508]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 80057ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057ce:	6013      	str	r3, [r2, #0]
 80057d0:	e02e      	b.n	8005830 <HAL_RCC_OscConfig+0xd4>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10c      	bne.n	80057f4 <HAL_RCC_OscConfig+0x98>
 80057da:	4b7b      	ldr	r3, [pc, #492]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a7a      	ldr	r2, [pc, #488]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 80057e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057e4:	6013      	str	r3, [r2, #0]
 80057e6:	4b78      	ldr	r3, [pc, #480]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a77      	ldr	r2, [pc, #476]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 80057ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057f0:	6013      	str	r3, [r2, #0]
 80057f2:	e01d      	b.n	8005830 <HAL_RCC_OscConfig+0xd4>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057fc:	d10c      	bne.n	8005818 <HAL_RCC_OscConfig+0xbc>
 80057fe:	4b72      	ldr	r3, [pc, #456]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a71      	ldr	r2, [pc, #452]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 8005804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005808:	6013      	str	r3, [r2, #0]
 800580a:	4b6f      	ldr	r3, [pc, #444]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a6e      	ldr	r2, [pc, #440]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 8005810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005814:	6013      	str	r3, [r2, #0]
 8005816:	e00b      	b.n	8005830 <HAL_RCC_OscConfig+0xd4>
 8005818:	4b6b      	ldr	r3, [pc, #428]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a6a      	ldr	r2, [pc, #424]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 800581e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005822:	6013      	str	r3, [r2, #0]
 8005824:	4b68      	ldr	r3, [pc, #416]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a67      	ldr	r2, [pc, #412]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 800582a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800582e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d013      	beq.n	8005860 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005838:	f7fd f978 	bl	8002b2c <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005840:	f7fd f974 	bl	8002b2c <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b64      	cmp	r3, #100	; 0x64
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e1fa      	b.n	8005c48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005852:	4b5d      	ldr	r3, [pc, #372]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d0f0      	beq.n	8005840 <HAL_RCC_OscConfig+0xe4>
 800585e:	e014      	b.n	800588a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005860:	f7fd f964 	bl	8002b2c <HAL_GetTick>
 8005864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005866:	e008      	b.n	800587a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005868:	f7fd f960 	bl	8002b2c <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b64      	cmp	r3, #100	; 0x64
 8005874:	d901      	bls.n	800587a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e1e6      	b.n	8005c48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800587a:	4b53      	ldr	r3, [pc, #332]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1f0      	bne.n	8005868 <HAL_RCC_OscConfig+0x10c>
 8005886:	e000      	b.n	800588a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d063      	beq.n	800595e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005896:	4b4c      	ldr	r3, [pc, #304]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f003 030c 	and.w	r3, r3, #12
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00b      	beq.n	80058ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80058a2:	4b49      	ldr	r3, [pc, #292]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f003 030c 	and.w	r3, r3, #12
 80058aa:	2b08      	cmp	r3, #8
 80058ac:	d11c      	bne.n	80058e8 <HAL_RCC_OscConfig+0x18c>
 80058ae:	4b46      	ldr	r3, [pc, #280]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d116      	bne.n	80058e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058ba:	4b43      	ldr	r3, [pc, #268]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d005      	beq.n	80058d2 <HAL_RCC_OscConfig+0x176>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d001      	beq.n	80058d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e1ba      	b.n	8005c48 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058d2:	4b3d      	ldr	r3, [pc, #244]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	00db      	lsls	r3, r3, #3
 80058e0:	4939      	ldr	r1, [pc, #228]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058e6:	e03a      	b.n	800595e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d020      	beq.n	8005932 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058f0:	4b36      	ldr	r3, [pc, #216]	; (80059cc <HAL_RCC_OscConfig+0x270>)
 80058f2:	2201      	movs	r2, #1
 80058f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058f6:	f7fd f919 	bl	8002b2c <HAL_GetTick>
 80058fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058fc:	e008      	b.n	8005910 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058fe:	f7fd f915 	bl	8002b2c <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	2b02      	cmp	r3, #2
 800590a:	d901      	bls.n	8005910 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e19b      	b.n	8005c48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005910:	4b2d      	ldr	r3, [pc, #180]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0302 	and.w	r3, r3, #2
 8005918:	2b00      	cmp	r3, #0
 800591a:	d0f0      	beq.n	80058fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800591c:	4b2a      	ldr	r3, [pc, #168]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	695b      	ldr	r3, [r3, #20]
 8005928:	00db      	lsls	r3, r3, #3
 800592a:	4927      	ldr	r1, [pc, #156]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 800592c:	4313      	orrs	r3, r2
 800592e:	600b      	str	r3, [r1, #0]
 8005930:	e015      	b.n	800595e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005932:	4b26      	ldr	r3, [pc, #152]	; (80059cc <HAL_RCC_OscConfig+0x270>)
 8005934:	2200      	movs	r2, #0
 8005936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005938:	f7fd f8f8 	bl	8002b2c <HAL_GetTick>
 800593c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800593e:	e008      	b.n	8005952 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005940:	f7fd f8f4 	bl	8002b2c <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	2b02      	cmp	r3, #2
 800594c:	d901      	bls.n	8005952 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e17a      	b.n	8005c48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005952:	4b1d      	ldr	r3, [pc, #116]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0302 	and.w	r3, r3, #2
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1f0      	bne.n	8005940 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0308 	and.w	r3, r3, #8
 8005966:	2b00      	cmp	r3, #0
 8005968:	d03a      	beq.n	80059e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d019      	beq.n	80059a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005972:	4b17      	ldr	r3, [pc, #92]	; (80059d0 <HAL_RCC_OscConfig+0x274>)
 8005974:	2201      	movs	r2, #1
 8005976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005978:	f7fd f8d8 	bl	8002b2c <HAL_GetTick>
 800597c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800597e:	e008      	b.n	8005992 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005980:	f7fd f8d4 	bl	8002b2c <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b02      	cmp	r3, #2
 800598c:	d901      	bls.n	8005992 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e15a      	b.n	8005c48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005992:	4b0d      	ldr	r3, [pc, #52]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 8005994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005996:	f003 0302 	and.w	r3, r3, #2
 800599a:	2b00      	cmp	r3, #0
 800599c:	d0f0      	beq.n	8005980 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800599e:	2001      	movs	r0, #1
 80059a0:	f000 facc 	bl	8005f3c <RCC_Delay>
 80059a4:	e01c      	b.n	80059e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059a6:	4b0a      	ldr	r3, [pc, #40]	; (80059d0 <HAL_RCC_OscConfig+0x274>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059ac:	f7fd f8be 	bl	8002b2c <HAL_GetTick>
 80059b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059b2:	e00f      	b.n	80059d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059b4:	f7fd f8ba 	bl	8002b2c <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d908      	bls.n	80059d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e140      	b.n	8005c48 <HAL_RCC_OscConfig+0x4ec>
 80059c6:	bf00      	nop
 80059c8:	40021000 	.word	0x40021000
 80059cc:	42420000 	.word	0x42420000
 80059d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059d4:	4b9e      	ldr	r3, [pc, #632]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 80059d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d8:	f003 0302 	and.w	r3, r3, #2
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1e9      	bne.n	80059b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0304 	and.w	r3, r3, #4
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f000 80a6 	beq.w	8005b3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059ee:	2300      	movs	r3, #0
 80059f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059f2:	4b97      	ldr	r3, [pc, #604]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10d      	bne.n	8005a1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059fe:	4b94      	ldr	r3, [pc, #592]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	4a93      	ldr	r2, [pc, #588]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a08:	61d3      	str	r3, [r2, #28]
 8005a0a:	4b91      	ldr	r3, [pc, #580]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a12:	60bb      	str	r3, [r7, #8]
 8005a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a16:	2301      	movs	r3, #1
 8005a18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a1a:	4b8e      	ldr	r3, [pc, #568]	; (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d118      	bne.n	8005a58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a26:	4b8b      	ldr	r3, [pc, #556]	; (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a8a      	ldr	r2, [pc, #552]	; (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a32:	f7fd f87b 	bl	8002b2c <HAL_GetTick>
 8005a36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a38:	e008      	b.n	8005a4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a3a:	f7fd f877 	bl	8002b2c <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	2b64      	cmp	r3, #100	; 0x64
 8005a46:	d901      	bls.n	8005a4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e0fd      	b.n	8005c48 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a4c:	4b81      	ldr	r3, [pc, #516]	; (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d0f0      	beq.n	8005a3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d106      	bne.n	8005a6e <HAL_RCC_OscConfig+0x312>
 8005a60:	4b7b      	ldr	r3, [pc, #492]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005a62:	6a1b      	ldr	r3, [r3, #32]
 8005a64:	4a7a      	ldr	r2, [pc, #488]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005a66:	f043 0301 	orr.w	r3, r3, #1
 8005a6a:	6213      	str	r3, [r2, #32]
 8005a6c:	e02d      	b.n	8005aca <HAL_RCC_OscConfig+0x36e>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10c      	bne.n	8005a90 <HAL_RCC_OscConfig+0x334>
 8005a76:	4b76      	ldr	r3, [pc, #472]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	4a75      	ldr	r2, [pc, #468]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005a7c:	f023 0301 	bic.w	r3, r3, #1
 8005a80:	6213      	str	r3, [r2, #32]
 8005a82:	4b73      	ldr	r3, [pc, #460]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	4a72      	ldr	r2, [pc, #456]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005a88:	f023 0304 	bic.w	r3, r3, #4
 8005a8c:	6213      	str	r3, [r2, #32]
 8005a8e:	e01c      	b.n	8005aca <HAL_RCC_OscConfig+0x36e>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	2b05      	cmp	r3, #5
 8005a96:	d10c      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x356>
 8005a98:	4b6d      	ldr	r3, [pc, #436]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005a9a:	6a1b      	ldr	r3, [r3, #32]
 8005a9c:	4a6c      	ldr	r2, [pc, #432]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005a9e:	f043 0304 	orr.w	r3, r3, #4
 8005aa2:	6213      	str	r3, [r2, #32]
 8005aa4:	4b6a      	ldr	r3, [pc, #424]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005aa6:	6a1b      	ldr	r3, [r3, #32]
 8005aa8:	4a69      	ldr	r2, [pc, #420]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005aaa:	f043 0301 	orr.w	r3, r3, #1
 8005aae:	6213      	str	r3, [r2, #32]
 8005ab0:	e00b      	b.n	8005aca <HAL_RCC_OscConfig+0x36e>
 8005ab2:	4b67      	ldr	r3, [pc, #412]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	4a66      	ldr	r2, [pc, #408]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005ab8:	f023 0301 	bic.w	r3, r3, #1
 8005abc:	6213      	str	r3, [r2, #32]
 8005abe:	4b64      	ldr	r3, [pc, #400]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	4a63      	ldr	r2, [pc, #396]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005ac4:	f023 0304 	bic.w	r3, r3, #4
 8005ac8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d015      	beq.n	8005afe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ad2:	f7fd f82b 	bl	8002b2c <HAL_GetTick>
 8005ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ad8:	e00a      	b.n	8005af0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ada:	f7fd f827 	bl	8002b2c <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d901      	bls.n	8005af0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e0ab      	b.n	8005c48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005af0:	4b57      	ldr	r3, [pc, #348]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	f003 0302 	and.w	r3, r3, #2
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d0ee      	beq.n	8005ada <HAL_RCC_OscConfig+0x37e>
 8005afc:	e014      	b.n	8005b28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005afe:	f7fd f815 	bl	8002b2c <HAL_GetTick>
 8005b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b04:	e00a      	b.n	8005b1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b06:	f7fd f811 	bl	8002b2c <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d901      	bls.n	8005b1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e095      	b.n	8005c48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b1c:	4b4c      	ldr	r3, [pc, #304]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005b1e:	6a1b      	ldr	r3, [r3, #32]
 8005b20:	f003 0302 	and.w	r3, r3, #2
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1ee      	bne.n	8005b06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005b28:	7dfb      	ldrb	r3, [r7, #23]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d105      	bne.n	8005b3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b2e:	4b48      	ldr	r3, [pc, #288]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	4a47      	ldr	r2, [pc, #284]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005b34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f000 8081 	beq.w	8005c46 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b44:	4b42      	ldr	r3, [pc, #264]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	f003 030c 	and.w	r3, r3, #12
 8005b4c:	2b08      	cmp	r3, #8
 8005b4e:	d061      	beq.n	8005c14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	69db      	ldr	r3, [r3, #28]
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d146      	bne.n	8005be6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b58:	4b3f      	ldr	r3, [pc, #252]	; (8005c58 <HAL_RCC_OscConfig+0x4fc>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b5e:	f7fc ffe5 	bl	8002b2c <HAL_GetTick>
 8005b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b64:	e008      	b.n	8005b78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b66:	f7fc ffe1 	bl	8002b2c <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d901      	bls.n	8005b78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e067      	b.n	8005c48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b78:	4b35      	ldr	r3, [pc, #212]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1f0      	bne.n	8005b66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a1b      	ldr	r3, [r3, #32]
 8005b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b8c:	d108      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005b8e:	4b30      	ldr	r3, [pc, #192]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	492d      	ldr	r1, [pc, #180]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ba0:	4b2b      	ldr	r3, [pc, #172]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a19      	ldr	r1, [r3, #32]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb0:	430b      	orrs	r3, r1
 8005bb2:	4927      	ldr	r1, [pc, #156]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bb8:	4b27      	ldr	r3, [pc, #156]	; (8005c58 <HAL_RCC_OscConfig+0x4fc>)
 8005bba:	2201      	movs	r2, #1
 8005bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bbe:	f7fc ffb5 	bl	8002b2c <HAL_GetTick>
 8005bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005bc4:	e008      	b.n	8005bd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bc6:	f7fc ffb1 	bl	8002b2c <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d901      	bls.n	8005bd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e037      	b.n	8005c48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005bd8:	4b1d      	ldr	r3, [pc, #116]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d0f0      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x46a>
 8005be4:	e02f      	b.n	8005c46 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005be6:	4b1c      	ldr	r3, [pc, #112]	; (8005c58 <HAL_RCC_OscConfig+0x4fc>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bec:	f7fc ff9e 	bl	8002b2c <HAL_GetTick>
 8005bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bf2:	e008      	b.n	8005c06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bf4:	f7fc ff9a 	bl	8002b2c <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d901      	bls.n	8005c06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e020      	b.n	8005c48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c06:	4b12      	ldr	r3, [pc, #72]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1f0      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x498>
 8005c12:	e018      	b.n	8005c46 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	69db      	ldr	r3, [r3, #28]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d101      	bne.n	8005c20 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e013      	b.n	8005c48 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005c20:	4b0b      	ldr	r3, [pc, #44]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a1b      	ldr	r3, [r3, #32]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d106      	bne.n	8005c42 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d001      	beq.n	8005c46 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e000      	b.n	8005c48 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3718      	adds	r7, #24
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	40021000 	.word	0x40021000
 8005c54:	40007000 	.word	0x40007000
 8005c58:	42420060 	.word	0x42420060

08005c5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d101      	bne.n	8005c70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e0d0      	b.n	8005e12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c70:	4b6a      	ldr	r3, [pc, #424]	; (8005e1c <HAL_RCC_ClockConfig+0x1c0>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0307 	and.w	r3, r3, #7
 8005c78:	683a      	ldr	r2, [r7, #0]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d910      	bls.n	8005ca0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c7e:	4b67      	ldr	r3, [pc, #412]	; (8005e1c <HAL_RCC_ClockConfig+0x1c0>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f023 0207 	bic.w	r2, r3, #7
 8005c86:	4965      	ldr	r1, [pc, #404]	; (8005e1c <HAL_RCC_ClockConfig+0x1c0>)
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c8e:	4b63      	ldr	r3, [pc, #396]	; (8005e1c <HAL_RCC_ClockConfig+0x1c0>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 0307 	and.w	r3, r3, #7
 8005c96:	683a      	ldr	r2, [r7, #0]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d001      	beq.n	8005ca0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e0b8      	b.n	8005e12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d020      	beq.n	8005cee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0304 	and.w	r3, r3, #4
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d005      	beq.n	8005cc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cb8:	4b59      	ldr	r3, [pc, #356]	; (8005e20 <HAL_RCC_ClockConfig+0x1c4>)
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	4a58      	ldr	r2, [pc, #352]	; (8005e20 <HAL_RCC_ClockConfig+0x1c4>)
 8005cbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005cc2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0308 	and.w	r3, r3, #8
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d005      	beq.n	8005cdc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cd0:	4b53      	ldr	r3, [pc, #332]	; (8005e20 <HAL_RCC_ClockConfig+0x1c4>)
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	4a52      	ldr	r2, [pc, #328]	; (8005e20 <HAL_RCC_ClockConfig+0x1c4>)
 8005cd6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005cda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cdc:	4b50      	ldr	r3, [pc, #320]	; (8005e20 <HAL_RCC_ClockConfig+0x1c4>)
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	494d      	ldr	r1, [pc, #308]	; (8005e20 <HAL_RCC_ClockConfig+0x1c4>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d040      	beq.n	8005d7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d107      	bne.n	8005d12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d02:	4b47      	ldr	r3, [pc, #284]	; (8005e20 <HAL_RCC_ClockConfig+0x1c4>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d115      	bne.n	8005d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e07f      	b.n	8005e12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d107      	bne.n	8005d2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d1a:	4b41      	ldr	r3, [pc, #260]	; (8005e20 <HAL_RCC_ClockConfig+0x1c4>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d109      	bne.n	8005d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e073      	b.n	8005e12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d2a:	4b3d      	ldr	r3, [pc, #244]	; (8005e20 <HAL_RCC_ClockConfig+0x1c4>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0302 	and.w	r3, r3, #2
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d101      	bne.n	8005d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e06b      	b.n	8005e12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d3a:	4b39      	ldr	r3, [pc, #228]	; (8005e20 <HAL_RCC_ClockConfig+0x1c4>)
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f023 0203 	bic.w	r2, r3, #3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	4936      	ldr	r1, [pc, #216]	; (8005e20 <HAL_RCC_ClockConfig+0x1c4>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d4c:	f7fc feee 	bl	8002b2c <HAL_GetTick>
 8005d50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d52:	e00a      	b.n	8005d6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d54:	f7fc feea 	bl	8002b2c <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d901      	bls.n	8005d6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e053      	b.n	8005e12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d6a:	4b2d      	ldr	r3, [pc, #180]	; (8005e20 <HAL_RCC_ClockConfig+0x1c4>)
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f003 020c 	and.w	r2, r3, #12
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d1eb      	bne.n	8005d54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d7c:	4b27      	ldr	r3, [pc, #156]	; (8005e1c <HAL_RCC_ClockConfig+0x1c0>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	683a      	ldr	r2, [r7, #0]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d210      	bcs.n	8005dac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d8a:	4b24      	ldr	r3, [pc, #144]	; (8005e1c <HAL_RCC_ClockConfig+0x1c0>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f023 0207 	bic.w	r2, r3, #7
 8005d92:	4922      	ldr	r1, [pc, #136]	; (8005e1c <HAL_RCC_ClockConfig+0x1c0>)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d9a:	4b20      	ldr	r3, [pc, #128]	; (8005e1c <HAL_RCC_ClockConfig+0x1c0>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0307 	and.w	r3, r3, #7
 8005da2:	683a      	ldr	r2, [r7, #0]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d001      	beq.n	8005dac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e032      	b.n	8005e12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 0304 	and.w	r3, r3, #4
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d008      	beq.n	8005dca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005db8:	4b19      	ldr	r3, [pc, #100]	; (8005e20 <HAL_RCC_ClockConfig+0x1c4>)
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	4916      	ldr	r1, [pc, #88]	; (8005e20 <HAL_RCC_ClockConfig+0x1c4>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0308 	and.w	r3, r3, #8
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d009      	beq.n	8005dea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005dd6:	4b12      	ldr	r3, [pc, #72]	; (8005e20 <HAL_RCC_ClockConfig+0x1c4>)
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	00db      	lsls	r3, r3, #3
 8005de4:	490e      	ldr	r1, [pc, #56]	; (8005e20 <HAL_RCC_ClockConfig+0x1c4>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005dea:	f000 f821 	bl	8005e30 <HAL_RCC_GetSysClockFreq>
 8005dee:	4602      	mov	r2, r0
 8005df0:	4b0b      	ldr	r3, [pc, #44]	; (8005e20 <HAL_RCC_ClockConfig+0x1c4>)
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	091b      	lsrs	r3, r3, #4
 8005df6:	f003 030f 	and.w	r3, r3, #15
 8005dfa:	490a      	ldr	r1, [pc, #40]	; (8005e24 <HAL_RCC_ClockConfig+0x1c8>)
 8005dfc:	5ccb      	ldrb	r3, [r1, r3]
 8005dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8005e02:	4a09      	ldr	r2, [pc, #36]	; (8005e28 <HAL_RCC_ClockConfig+0x1cc>)
 8005e04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005e06:	4b09      	ldr	r3, [pc, #36]	; (8005e2c <HAL_RCC_ClockConfig+0x1d0>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7fc fe4c 	bl	8002aa8 <HAL_InitTick>

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	40022000 	.word	0x40022000
 8005e20:	40021000 	.word	0x40021000
 8005e24:	0800ab34 	.word	0x0800ab34
 8005e28:	20000000 	.word	0x20000000
 8005e2c:	20000014 	.word	0x20000014

08005e30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b087      	sub	sp, #28
 8005e34:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005e36:	2300      	movs	r3, #0
 8005e38:	60fb      	str	r3, [r7, #12]
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	60bb      	str	r3, [r7, #8]
 8005e3e:	2300      	movs	r3, #0
 8005e40:	617b      	str	r3, [r7, #20]
 8005e42:	2300      	movs	r3, #0
 8005e44:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005e46:	2300      	movs	r3, #0
 8005e48:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005e4a:	4b1e      	ldr	r3, [pc, #120]	; (8005ec4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f003 030c 	and.w	r3, r3, #12
 8005e56:	2b04      	cmp	r3, #4
 8005e58:	d002      	beq.n	8005e60 <HAL_RCC_GetSysClockFreq+0x30>
 8005e5a:	2b08      	cmp	r3, #8
 8005e5c:	d003      	beq.n	8005e66 <HAL_RCC_GetSysClockFreq+0x36>
 8005e5e:	e027      	b.n	8005eb0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005e60:	4b19      	ldr	r3, [pc, #100]	; (8005ec8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005e62:	613b      	str	r3, [r7, #16]
      break;
 8005e64:	e027      	b.n	8005eb6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	0c9b      	lsrs	r3, r3, #18
 8005e6a:	f003 030f 	and.w	r3, r3, #15
 8005e6e:	4a17      	ldr	r2, [pc, #92]	; (8005ecc <HAL_RCC_GetSysClockFreq+0x9c>)
 8005e70:	5cd3      	ldrb	r3, [r2, r3]
 8005e72:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d010      	beq.n	8005ea0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005e7e:	4b11      	ldr	r3, [pc, #68]	; (8005ec4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	0c5b      	lsrs	r3, r3, #17
 8005e84:	f003 0301 	and.w	r3, r3, #1
 8005e88:	4a11      	ldr	r2, [pc, #68]	; (8005ed0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005e8a:	5cd3      	ldrb	r3, [r2, r3]
 8005e8c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a0d      	ldr	r2, [pc, #52]	; (8005ec8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005e92:	fb02 f203 	mul.w	r2, r2, r3
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e9c:	617b      	str	r3, [r7, #20]
 8005e9e:	e004      	b.n	8005eaa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a0c      	ldr	r2, [pc, #48]	; (8005ed4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005ea4:	fb02 f303 	mul.w	r3, r2, r3
 8005ea8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	613b      	str	r3, [r7, #16]
      break;
 8005eae:	e002      	b.n	8005eb6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005eb0:	4b05      	ldr	r3, [pc, #20]	; (8005ec8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005eb2:	613b      	str	r3, [r7, #16]
      break;
 8005eb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005eb6:	693b      	ldr	r3, [r7, #16]
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	371c      	adds	r7, #28
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bc80      	pop	{r7}
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	40021000 	.word	0x40021000
 8005ec8:	007a1200 	.word	0x007a1200
 8005ecc:	0800c014 	.word	0x0800c014
 8005ed0:	0800c024 	.word	0x0800c024
 8005ed4:	003d0900 	.word	0x003d0900

08005ed8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005edc:	4b02      	ldr	r3, [pc, #8]	; (8005ee8 <HAL_RCC_GetHCLKFreq+0x10>)
 8005ede:	681b      	ldr	r3, [r3, #0]
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bc80      	pop	{r7}
 8005ee6:	4770      	bx	lr
 8005ee8:	20000000 	.word	0x20000000

08005eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ef0:	f7ff fff2 	bl	8005ed8 <HAL_RCC_GetHCLKFreq>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	4b05      	ldr	r3, [pc, #20]	; (8005f0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	0a1b      	lsrs	r3, r3, #8
 8005efc:	f003 0307 	and.w	r3, r3, #7
 8005f00:	4903      	ldr	r1, [pc, #12]	; (8005f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f02:	5ccb      	ldrb	r3, [r1, r3]
 8005f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	40021000 	.word	0x40021000
 8005f10:	0800ab44 	.word	0x0800ab44

08005f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f18:	f7ff ffde 	bl	8005ed8 <HAL_RCC_GetHCLKFreq>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	4b05      	ldr	r3, [pc, #20]	; (8005f34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	0adb      	lsrs	r3, r3, #11
 8005f24:	f003 0307 	and.w	r3, r3, #7
 8005f28:	4903      	ldr	r1, [pc, #12]	; (8005f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f2a:	5ccb      	ldrb	r3, [r1, r3]
 8005f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	40021000 	.word	0x40021000
 8005f38:	0800ab44 	.word	0x0800ab44

08005f3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005f44:	4b0a      	ldr	r3, [pc, #40]	; (8005f70 <RCC_Delay+0x34>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a0a      	ldr	r2, [pc, #40]	; (8005f74 <RCC_Delay+0x38>)
 8005f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4e:	0a5b      	lsrs	r3, r3, #9
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	fb02 f303 	mul.w	r3, r2, r3
 8005f56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005f58:	bf00      	nop
  }
  while (Delay --);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	1e5a      	subs	r2, r3, #1
 8005f5e:	60fa      	str	r2, [r7, #12]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1f9      	bne.n	8005f58 <RCC_Delay+0x1c>
}
 8005f64:	bf00      	nop
 8005f66:	bf00      	nop
 8005f68:	3714      	adds	r7, #20
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bc80      	pop	{r7}
 8005f6e:	4770      	bx	lr
 8005f70:	20000000 	.word	0x20000000
 8005f74:	10624dd3 	.word	0x10624dd3

08005f78 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005f80:	2300      	movs	r3, #0
 8005f82:	613b      	str	r3, [r7, #16]
 8005f84:	2300      	movs	r3, #0
 8005f86:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0301 	and.w	r3, r3, #1
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d07d      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005f94:	2300      	movs	r3, #0
 8005f96:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f98:	4b4f      	ldr	r3, [pc, #316]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f9a:	69db      	ldr	r3, [r3, #28]
 8005f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10d      	bne.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fa4:	4b4c      	ldr	r3, [pc, #304]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fa6:	69db      	ldr	r3, [r3, #28]
 8005fa8:	4a4b      	ldr	r2, [pc, #300]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fae:	61d3      	str	r3, [r2, #28]
 8005fb0:	4b49      	ldr	r3, [pc, #292]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fb2:	69db      	ldr	r3, [r3, #28]
 8005fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fb8:	60bb      	str	r3, [r7, #8]
 8005fba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fc0:	4b46      	ldr	r3, [pc, #280]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d118      	bne.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fcc:	4b43      	ldr	r3, [pc, #268]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a42      	ldr	r2, [pc, #264]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fd6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fd8:	f7fc fda8 	bl	8002b2c <HAL_GetTick>
 8005fdc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fde:	e008      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fe0:	f7fc fda4 	bl	8002b2c <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	2b64      	cmp	r3, #100	; 0x64
 8005fec:	d901      	bls.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e06d      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ff2:	4b3a      	ldr	r3, [pc, #232]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d0f0      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ffe:	4b36      	ldr	r3, [pc, #216]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006006:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d02e      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	429a      	cmp	r2, r3
 800601a:	d027      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800601c:	4b2e      	ldr	r3, [pc, #184]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800601e:	6a1b      	ldr	r3, [r3, #32]
 8006020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006024:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006026:	4b2e      	ldr	r3, [pc, #184]	; (80060e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006028:	2201      	movs	r2, #1
 800602a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800602c:	4b2c      	ldr	r3, [pc, #176]	; (80060e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800602e:	2200      	movs	r2, #0
 8006030:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006032:	4a29      	ldr	r2, [pc, #164]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f003 0301 	and.w	r3, r3, #1
 800603e:	2b00      	cmp	r3, #0
 8006040:	d014      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006042:	f7fc fd73 	bl	8002b2c <HAL_GetTick>
 8006046:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006048:	e00a      	b.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800604a:	f7fc fd6f 	bl	8002b2c <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	f241 3288 	movw	r2, #5000	; 0x1388
 8006058:	4293      	cmp	r3, r2
 800605a:	d901      	bls.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e036      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006060:	4b1d      	ldr	r3, [pc, #116]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006062:	6a1b      	ldr	r3, [r3, #32]
 8006064:	f003 0302 	and.w	r3, r3, #2
 8006068:	2b00      	cmp	r3, #0
 800606a:	d0ee      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800606c:	4b1a      	ldr	r3, [pc, #104]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800606e:	6a1b      	ldr	r3, [r3, #32]
 8006070:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	4917      	ldr	r1, [pc, #92]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800607a:	4313      	orrs	r3, r2
 800607c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800607e:	7dfb      	ldrb	r3, [r7, #23]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d105      	bne.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006084:	4b14      	ldr	r3, [pc, #80]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006086:	69db      	ldr	r3, [r3, #28]
 8006088:	4a13      	ldr	r2, [pc, #76]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800608a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800608e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0302 	and.w	r3, r3, #2
 8006098:	2b00      	cmp	r3, #0
 800609a:	d008      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800609c:	4b0e      	ldr	r3, [pc, #56]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	490b      	ldr	r1, [pc, #44]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0310 	and.w	r3, r3, #16
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d008      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060ba:	4b07      	ldr	r3, [pc, #28]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	4904      	ldr	r1, [pc, #16]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060c8:	4313      	orrs	r3, r2
 80060ca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3718      	adds	r7, #24
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	40021000 	.word	0x40021000
 80060dc:	40007000 	.word	0x40007000
 80060e0:	42420440 	.word	0x42420440

080060e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b088      	sub	sp, #32
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	617b      	str	r3, [r7, #20]
 80060f0:	2300      	movs	r3, #0
 80060f2:	61fb      	str	r3, [r7, #28]
 80060f4:	2300      	movs	r3, #0
 80060f6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80060f8:	2300      	movs	r3, #0
 80060fa:	60fb      	str	r3, [r7, #12]
 80060fc:	2300      	movs	r3, #0
 80060fe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b10      	cmp	r3, #16
 8006104:	d00a      	beq.n	800611c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2b10      	cmp	r3, #16
 800610a:	f200 808a 	bhi.w	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d045      	beq.n	80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2b02      	cmp	r3, #2
 8006118:	d075      	beq.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800611a:	e082      	b.n	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800611c:	4b46      	ldr	r3, [pc, #280]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006122:	4b45      	ldr	r3, [pc, #276]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d07b      	beq.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	0c9b      	lsrs	r3, r3, #18
 8006132:	f003 030f 	and.w	r3, r3, #15
 8006136:	4a41      	ldr	r2, [pc, #260]	; (800623c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8006138:	5cd3      	ldrb	r3, [r2, r3]
 800613a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d015      	beq.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006146:	4b3c      	ldr	r3, [pc, #240]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	0c5b      	lsrs	r3, r3, #17
 800614c:	f003 0301 	and.w	r3, r3, #1
 8006150:	4a3b      	ldr	r2, [pc, #236]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8006152:	5cd3      	ldrb	r3, [r2, r3]
 8006154:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00d      	beq.n	800617c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006160:	4a38      	ldr	r2, [pc, #224]	; (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	fbb2 f2f3 	udiv	r2, r2, r3
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	fb02 f303 	mul.w	r3, r2, r3
 800616e:	61fb      	str	r3, [r7, #28]
 8006170:	e004      	b.n	800617c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	4a34      	ldr	r2, [pc, #208]	; (8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8006176:	fb02 f303 	mul.w	r3, r2, r3
 800617a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800617c:	4b2e      	ldr	r3, [pc, #184]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006184:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006188:	d102      	bne.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	61bb      	str	r3, [r7, #24]
      break;
 800618e:	e04a      	b.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	005b      	lsls	r3, r3, #1
 8006194:	4a2d      	ldr	r2, [pc, #180]	; (800624c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006196:	fba2 2303 	umull	r2, r3, r2, r3
 800619a:	085b      	lsrs	r3, r3, #1
 800619c:	61bb      	str	r3, [r7, #24]
      break;
 800619e:	e042      	b.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80061a0:	4b25      	ldr	r3, [pc, #148]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80061a2:	6a1b      	ldr	r3, [r3, #32]
 80061a4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061b0:	d108      	bne.n	80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f003 0302 	and.w	r3, r3, #2
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d003      	beq.n	80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80061bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061c0:	61bb      	str	r3, [r7, #24]
 80061c2:	e01f      	b.n	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061ce:	d109      	bne.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80061d0:	4b19      	ldr	r3, [pc, #100]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80061d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d4:	f003 0302 	and.w	r3, r3, #2
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d003      	beq.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80061dc:	f649 4340 	movw	r3, #40000	; 0x9c40
 80061e0:	61bb      	str	r3, [r7, #24]
 80061e2:	e00f      	b.n	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061ee:	d11c      	bne.n	800622a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80061f0:	4b11      	ldr	r3, [pc, #68]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d016      	beq.n	800622a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80061fc:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006200:	61bb      	str	r3, [r7, #24]
      break;
 8006202:	e012      	b.n	800622a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006204:	e011      	b.n	800622a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006206:	f7ff fe85 	bl	8005f14 <HAL_RCC_GetPCLK2Freq>
 800620a:	4602      	mov	r2, r0
 800620c:	4b0a      	ldr	r3, [pc, #40]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	0b9b      	lsrs	r3, r3, #14
 8006212:	f003 0303 	and.w	r3, r3, #3
 8006216:	3301      	adds	r3, #1
 8006218:	005b      	lsls	r3, r3, #1
 800621a:	fbb2 f3f3 	udiv	r3, r2, r3
 800621e:	61bb      	str	r3, [r7, #24]
      break;
 8006220:	e004      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006222:	bf00      	nop
 8006224:	e002      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006226:	bf00      	nop
 8006228:	e000      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800622a:	bf00      	nop
    }
  }
  return (frequency);
 800622c:	69bb      	ldr	r3, [r7, #24]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3720      	adds	r7, #32
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	40021000 	.word	0x40021000
 800623c:	0800c028 	.word	0x0800c028
 8006240:	0800c038 	.word	0x0800c038
 8006244:	007a1200 	.word	0x007a1200
 8006248:	003d0900 	.word	0x003d0900
 800624c:	aaaaaaab 	.word	0xaaaaaaab

08006250 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8006258:	2300      	movs	r3, #0
 800625a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e07a      	b.n	800635c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	7c5b      	ldrb	r3, [r3, #17]
 800626a:	b2db      	uxtb	r3, r3
 800626c:	2b00      	cmp	r3, #0
 800626e:	d105      	bne.n	800627c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f7fb fcaa 	bl	8001bd0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2202      	movs	r2, #2
 8006280:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 faea 	bl	800685c <HAL_RTC_WaitForSynchro>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d004      	beq.n	8006298 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2204      	movs	r2, #4
 8006292:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e061      	b.n	800635c <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fba3 	bl	80069e4 <RTC_EnterInitMode>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d004      	beq.n	80062ae <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2204      	movs	r2, #4
 80062a8:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e056      	b.n	800635c <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	685a      	ldr	r2, [r3, #4]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f022 0207 	bic.w	r2, r2, #7
 80062bc:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d005      	beq.n	80062d2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80062c6:	4b27      	ldr	r3, [pc, #156]	; (8006364 <HAL_RTC_Init+0x114>)
 80062c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ca:	4a26      	ldr	r2, [pc, #152]	; (8006364 <HAL_RTC_Init+0x114>)
 80062cc:	f023 0301 	bic.w	r3, r3, #1
 80062d0:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80062d2:	4b24      	ldr	r3, [pc, #144]	; (8006364 <HAL_RTC_Init+0x114>)
 80062d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d6:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	4921      	ldr	r1, [pc, #132]	; (8006364 <HAL_RTC_Init+0x114>)
 80062e0:	4313      	orrs	r3, r2
 80062e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ec:	d003      	beq.n	80062f6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	e00e      	b.n	8006314 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80062f6:	2001      	movs	r0, #1
 80062f8:	f7ff fef4 	bl	80060e4 <HAL_RCCEx_GetPeriphCLKFreq>
 80062fc:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d104      	bne.n	800630e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2204      	movs	r2, #4
 8006308:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e026      	b.n	800635c <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	3b01      	subs	r3, #1
 8006312:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	0c1a      	lsrs	r2, r3, #16
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f002 020f 	and.w	r2, r2, #15
 8006320:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	b292      	uxth	r2, r2
 800632a:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 fb81 	bl	8006a34 <RTC_ExitInitMode>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d004      	beq.n	8006342 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2204      	movs	r2, #4
 800633c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e00c      	b.n	800635c <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2201      	movs	r2, #1
 8006352:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800635a:	2300      	movs	r3, #0
  }
}
 800635c:	4618      	mov	r0, r3
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	40006c00 	.word	0x40006c00

08006368 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006368:	b590      	push	{r4, r7, lr}
 800636a:	b087      	sub	sp, #28
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8006374:	2300      	movs	r3, #0
 8006376:	617b      	str	r3, [r7, #20]
 8006378:	2300      	movs	r3, #0
 800637a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d002      	beq.n	8006388 <HAL_RTC_SetTime+0x20>
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d101      	bne.n	800638c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e080      	b.n	800648e <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	7c1b      	ldrb	r3, [r3, #16]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d101      	bne.n	8006398 <HAL_RTC_SetTime+0x30>
 8006394:	2302      	movs	r3, #2
 8006396:	e07a      	b.n	800648e <HAL_RTC_SetTime+0x126>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2201      	movs	r2, #1
 800639c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2202      	movs	r2, #2
 80063a2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d113      	bne.n	80063d2 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	461a      	mov	r2, r3
 80063b0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80063b4:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	785b      	ldrb	r3, [r3, #1]
 80063bc:	4619      	mov	r1, r3
 80063be:	460b      	mov	r3, r1
 80063c0:	011b      	lsls	r3, r3, #4
 80063c2:	1a5b      	subs	r3, r3, r1
 80063c4:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80063c6:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80063cc:	4413      	add	r3, r2
 80063ce:	617b      	str	r3, [r7, #20]
 80063d0:	e01e      	b.n	8006410 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 fb71 	bl	8006abe <RTC_Bcd2ToByte>
 80063dc:	4603      	mov	r3, r0
 80063de:	461a      	mov	r2, r3
 80063e0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80063e4:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	785b      	ldrb	r3, [r3, #1]
 80063ec:	4618      	mov	r0, r3
 80063ee:	f000 fb66 	bl	8006abe <RTC_Bcd2ToByte>
 80063f2:	4603      	mov	r3, r0
 80063f4:	461a      	mov	r2, r3
 80063f6:	4613      	mov	r3, r2
 80063f8:	011b      	lsls	r3, r3, #4
 80063fa:	1a9b      	subs	r3, r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80063fe:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	789b      	ldrb	r3, [r3, #2]
 8006404:	4618      	mov	r0, r3
 8006406:	f000 fb5a 	bl	8006abe <RTC_Bcd2ToByte>
 800640a:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800640c:	4423      	add	r3, r4
 800640e:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006410:	6979      	ldr	r1, [r7, #20]
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f000 fa7f 	bl	8006916 <RTC_WriteTimeCounter>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d007      	beq.n	800642e <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2204      	movs	r2, #4
 8006422:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e02f      	b.n	800648e <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f022 0205 	bic.w	r2, r2, #5
 800643c:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f000 fa90 	bl	8006964 <RTC_ReadAlarmCounter>
 8006444:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644c:	d018      	beq.n	8006480 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	429a      	cmp	r2, r3
 8006454:	d214      	bcs.n	8006480 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800645c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006460:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006462:	6939      	ldr	r1, [r7, #16]
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f000 fa96 	bl	8006996 <RTC_WriteAlarmCounter>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d007      	beq.n	8006480 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2204      	movs	r2, #4
 8006474:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e006      	b.n	800648e <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2201      	movs	r2, #1
 8006484:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800648c:	2300      	movs	r3, #0
  }
}
 800648e:	4618      	mov	r0, r3
 8006490:	371c      	adds	r7, #28
 8006492:	46bd      	mov	sp, r7
 8006494:	bd90      	pop	{r4, r7, pc}
	...

08006498 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b088      	sub	sp, #32
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80064a4:	2300      	movs	r3, #0
 80064a6:	61bb      	str	r3, [r7, #24]
 80064a8:	2300      	movs	r3, #0
 80064aa:	61fb      	str	r3, [r7, #28]
 80064ac:	2300      	movs	r3, #0
 80064ae:	617b      	str	r3, [r7, #20]
 80064b0:	2300      	movs	r3, #0
 80064b2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d002      	beq.n	80064c0 <HAL_RTC_GetTime+0x28>
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d101      	bne.n	80064c4 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e0b5      	b.n	8006630 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	f003 0304 	and.w	r3, r3, #4
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e0ac      	b.n	8006630 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f000 f9ed 	bl	80068b6 <RTC_ReadTimeCounter>
 80064dc:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	4a55      	ldr	r2, [pc, #340]	; (8006638 <HAL_RTC_GetTime+0x1a0>)
 80064e2:	fba2 2303 	umull	r2, r3, r2, r3
 80064e6:	0adb      	lsrs	r3, r3, #11
 80064e8:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80064ea:	69ba      	ldr	r2, [r7, #24]
 80064ec:	4b52      	ldr	r3, [pc, #328]	; (8006638 <HAL_RTC_GetTime+0x1a0>)
 80064ee:	fba3 1302 	umull	r1, r3, r3, r2
 80064f2:	0adb      	lsrs	r3, r3, #11
 80064f4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80064f8:	fb01 f303 	mul.w	r3, r1, r3
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	4a4f      	ldr	r2, [pc, #316]	; (800663c <HAL_RTC_GetTime+0x1a4>)
 8006500:	fba2 2303 	umull	r2, r3, r2, r3
 8006504:	095b      	lsrs	r3, r3, #5
 8006506:	b2da      	uxtb	r2, r3
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	4a4a      	ldr	r2, [pc, #296]	; (8006638 <HAL_RTC_GetTime+0x1a0>)
 8006510:	fba2 1203 	umull	r1, r2, r2, r3
 8006514:	0ad2      	lsrs	r2, r2, #11
 8006516:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800651a:	fb01 f202 	mul.w	r2, r1, r2
 800651e:	1a9a      	subs	r2, r3, r2
 8006520:	4b46      	ldr	r3, [pc, #280]	; (800663c <HAL_RTC_GetTime+0x1a4>)
 8006522:	fba3 1302 	umull	r1, r3, r3, r2
 8006526:	0959      	lsrs	r1, r3, #5
 8006528:	460b      	mov	r3, r1
 800652a:	011b      	lsls	r3, r3, #4
 800652c:	1a5b      	subs	r3, r3, r1
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	1ad1      	subs	r1, r2, r3
 8006532:	b2ca      	uxtb	r2, r1
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	2b17      	cmp	r3, #23
 800653c:	d955      	bls.n	80065ea <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	4a3f      	ldr	r2, [pc, #252]	; (8006640 <HAL_RTC_GetTime+0x1a8>)
 8006542:	fba2 2303 	umull	r2, r3, r2, r3
 8006546:	091b      	lsrs	r3, r3, #4
 8006548:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800654a:	6939      	ldr	r1, [r7, #16]
 800654c:	4b3c      	ldr	r3, [pc, #240]	; (8006640 <HAL_RTC_GetTime+0x1a8>)
 800654e:	fba3 2301 	umull	r2, r3, r3, r1
 8006552:	091a      	lsrs	r2, r3, #4
 8006554:	4613      	mov	r3, r2
 8006556:	005b      	lsls	r3, r3, #1
 8006558:	4413      	add	r3, r2
 800655a:	00db      	lsls	r3, r3, #3
 800655c:	1aca      	subs	r2, r1, r3
 800655e:	b2d2      	uxtb	r2, r2
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f000 f9fd 	bl	8006964 <RTC_ReadAlarmCounter>
 800656a:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006572:	d008      	beq.n	8006586 <HAL_RTC_GetTime+0xee>
 8006574:	69fa      	ldr	r2, [r7, #28]
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	429a      	cmp	r2, r3
 800657a:	d904      	bls.n	8006586 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 800657c:	69fa      	ldr	r2, [r7, #28]
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	61fb      	str	r3, [r7, #28]
 8006584:	e002      	b.n	800658c <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8006586:	f04f 33ff 	mov.w	r3, #4294967295
 800658a:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	4a2d      	ldr	r2, [pc, #180]	; (8006644 <HAL_RTC_GetTime+0x1ac>)
 8006590:	fb02 f303 	mul.w	r3, r2, r3
 8006594:	69ba      	ldr	r2, [r7, #24]
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800659a:	69b9      	ldr	r1, [r7, #24]
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f000 f9ba 	bl	8006916 <RTC_WriteTimeCounter>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d001      	beq.n	80065ac <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e041      	b.n	8006630 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b2:	d00c      	beq.n	80065ce <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80065b4:	69fa      	ldr	r2, [r7, #28]
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	4413      	add	r3, r2
 80065ba:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80065bc:	69f9      	ldr	r1, [r7, #28]
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	f000 f9e9 	bl	8006996 <RTC_WriteAlarmCounter>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00a      	beq.n	80065e0 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e030      	b.n	8006630 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80065ce:	69f9      	ldr	r1, [r7, #28]
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f000 f9e0 	bl	8006996 <RTC_WriteAlarmCounter>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e027      	b.n	8006630 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80065e0:	6979      	ldr	r1, [r7, #20]
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f000 fa88 	bl	8006af8 <RTC_DateUpdate>
 80065e8:	e003      	b.n	80065f2 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	b2da      	uxtb	r2, r3
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d01a      	beq.n	800662e <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	4618      	mov	r0, r3
 80065fe:	f000 fa41 	bl	8006a84 <RTC_ByteToBcd2>
 8006602:	4603      	mov	r3, r0
 8006604:	461a      	mov	r2, r3
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	785b      	ldrb	r3, [r3, #1]
 800660e:	4618      	mov	r0, r3
 8006610:	f000 fa38 	bl	8006a84 <RTC_ByteToBcd2>
 8006614:	4603      	mov	r3, r0
 8006616:	461a      	mov	r2, r3
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	789b      	ldrb	r3, [r3, #2]
 8006620:	4618      	mov	r0, r3
 8006622:	f000 fa2f 	bl	8006a84 <RTC_ByteToBcd2>
 8006626:	4603      	mov	r3, r0
 8006628:	461a      	mov	r2, r3
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3720      	adds	r7, #32
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	91a2b3c5 	.word	0x91a2b3c5
 800663c:	88888889 	.word	0x88888889
 8006640:	aaaaaaab 	.word	0xaaaaaaab
 8006644:	00015180 	.word	0x00015180

08006648 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b088      	sub	sp, #32
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8006654:	2300      	movs	r3, #0
 8006656:	61fb      	str	r3, [r7, #28]
 8006658:	2300      	movs	r3, #0
 800665a:	61bb      	str	r3, [r7, #24]
 800665c:	2300      	movs	r3, #0
 800665e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d002      	beq.n	800666c <HAL_RTC_SetDate+0x24>
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d101      	bne.n	8006670 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e097      	b.n	80067a0 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	7c1b      	ldrb	r3, [r3, #16]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d101      	bne.n	800667c <HAL_RTC_SetDate+0x34>
 8006678:	2302      	movs	r3, #2
 800667a:	e091      	b.n	80067a0 <HAL_RTC_SetDate+0x158>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2201      	movs	r2, #1
 8006680:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2202      	movs	r2, #2
 8006686:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10c      	bne.n	80066a8 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	78da      	ldrb	r2, [r3, #3]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	785a      	ldrb	r2, [r3, #1]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	789a      	ldrb	r2, [r3, #2]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	739a      	strb	r2, [r3, #14]
 80066a6:	e01a      	b.n	80066de <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	78db      	ldrb	r3, [r3, #3]
 80066ac:	4618      	mov	r0, r3
 80066ae:	f000 fa06 	bl	8006abe <RTC_Bcd2ToByte>
 80066b2:	4603      	mov	r3, r0
 80066b4:	461a      	mov	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	785b      	ldrb	r3, [r3, #1]
 80066be:	4618      	mov	r0, r3
 80066c0:	f000 f9fd 	bl	8006abe <RTC_Bcd2ToByte>
 80066c4:	4603      	mov	r3, r0
 80066c6:	461a      	mov	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	789b      	ldrb	r3, [r3, #2]
 80066d0:	4618      	mov	r0, r3
 80066d2:	f000 f9f4 	bl	8006abe <RTC_Bcd2ToByte>
 80066d6:	4603      	mov	r3, r0
 80066d8:	461a      	mov	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	7bdb      	ldrb	r3, [r3, #15]
 80066e2:	4618      	mov	r0, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	7b59      	ldrb	r1, [r3, #13]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	7b9b      	ldrb	r3, [r3, #14]
 80066ec:	461a      	mov	r2, r3
 80066ee:	f000 fadf 	bl	8006cb0 <RTC_WeekDayNum>
 80066f2:	4603      	mov	r3, r0
 80066f4:	461a      	mov	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	7b1a      	ldrb	r2, [r3, #12]
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f000 f8d7 	bl	80068b6 <RTC_ReadTimeCounter>
 8006708:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	4a26      	ldr	r2, [pc, #152]	; (80067a8 <HAL_RTC_SetDate+0x160>)
 800670e:	fba2 2303 	umull	r2, r3, r2, r3
 8006712:	0adb      	lsrs	r3, r3, #11
 8006714:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	2b18      	cmp	r3, #24
 800671a:	d93a      	bls.n	8006792 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	4a23      	ldr	r2, [pc, #140]	; (80067ac <HAL_RTC_SetDate+0x164>)
 8006720:	fba2 2303 	umull	r2, r3, r2, r3
 8006724:	091b      	lsrs	r3, r3, #4
 8006726:	4a22      	ldr	r2, [pc, #136]	; (80067b0 <HAL_RTC_SetDate+0x168>)
 8006728:	fb02 f303 	mul.w	r3, r2, r3
 800672c:	69fa      	ldr	r2, [r7, #28]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006732:	69f9      	ldr	r1, [r7, #28]
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f000 f8ee 	bl	8006916 <RTC_WriteTimeCounter>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d007      	beq.n	8006750 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2204      	movs	r2, #4
 8006744:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e027      	b.n	80067a0 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f000 f907 	bl	8006964 <RTC_ReadAlarmCounter>
 8006756:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800675e:	d018      	beq.n	8006792 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8006760:	69ba      	ldr	r2, [r7, #24]
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	429a      	cmp	r2, r3
 8006766:	d214      	bcs.n	8006792 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800676e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006772:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006774:	69b9      	ldr	r1, [r7, #24]
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f000 f90d 	bl	8006996 <RTC_WriteAlarmCounter>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d007      	beq.n	8006792 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2204      	movs	r2, #4
 8006786:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e006      	b.n	80067a0 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2201      	movs	r2, #1
 8006796:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3720      	adds	r7, #32
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	91a2b3c5 	.word	0x91a2b3c5
 80067ac:	aaaaaaab 	.word	0xaaaaaaab
 80067b0:	00015180 	.word	0x00015180

080067b4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b086      	sub	sp, #24
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 80067c0:	f107 0314 	add.w	r3, r7, #20
 80067c4:	2100      	movs	r1, #0
 80067c6:	460a      	mov	r2, r1
 80067c8:	801a      	strh	r2, [r3, #0]
 80067ca:	460a      	mov	r2, r1
 80067cc:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d002      	beq.n	80067da <HAL_RTC_GetDate+0x26>
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d101      	bne.n	80067de <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e03a      	b.n	8006854 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80067de:	f107 0314 	add.w	r3, r7, #20
 80067e2:	2200      	movs	r2, #0
 80067e4:	4619      	mov	r1, r3
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f7ff fe56 	bl	8006498 <HAL_RTC_GetTime>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e02e      	b.n	8006854 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	7b1a      	ldrb	r2, [r3, #12]
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	7bda      	ldrb	r2, [r3, #15]
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	7b5a      	ldrb	r2, [r3, #13]
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	7b9a      	ldrb	r2, [r3, #14]
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d01a      	beq.n	8006852 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	78db      	ldrb	r3, [r3, #3]
 8006820:	4618      	mov	r0, r3
 8006822:	f000 f92f 	bl	8006a84 <RTC_ByteToBcd2>
 8006826:	4603      	mov	r3, r0
 8006828:	461a      	mov	r2, r3
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	785b      	ldrb	r3, [r3, #1]
 8006832:	4618      	mov	r0, r3
 8006834:	f000 f926 	bl	8006a84 <RTC_ByteToBcd2>
 8006838:	4603      	mov	r3, r0
 800683a:	461a      	mov	r2, r3
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	789b      	ldrb	r3, [r3, #2]
 8006844:	4618      	mov	r0, r3
 8006846:	f000 f91d 	bl	8006a84 <RTC_ByteToBcd2>
 800684a:	4603      	mov	r3, r0
 800684c:	461a      	mov	r2, r3
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3718      	adds	r7, #24
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006864:	2300      	movs	r3, #0
 8006866:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d101      	bne.n	8006872 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e01d      	b.n	80068ae <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	685a      	ldr	r2, [r3, #4]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f022 0208 	bic.w	r2, r2, #8
 8006880:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006882:	f7fc f953 	bl	8002b2c <HAL_GetTick>
 8006886:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006888:	e009      	b.n	800689e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800688a:	f7fc f94f 	bl	8002b2c <HAL_GetTick>
 800688e:	4602      	mov	r2, r0
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	1ad3      	subs	r3, r2, r3
 8006894:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006898:	d901      	bls.n	800689e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e007      	b.n	80068ae <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	f003 0308 	and.w	r3, r3, #8
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d0ee      	beq.n	800688a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b087      	sub	sp, #28
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80068be:	2300      	movs	r3, #0
 80068c0:	827b      	strh	r3, [r7, #18]
 80068c2:	2300      	movs	r3, #0
 80068c4:	823b      	strh	r3, [r7, #16]
 80068c6:	2300      	movs	r3, #0
 80068c8:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80068ca:	2300      	movs	r3, #0
 80068cc:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	69db      	ldr	r3, [r3, #28]
 80068dc:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80068e6:	8a7a      	ldrh	r2, [r7, #18]
 80068e8:	8a3b      	ldrh	r3, [r7, #16]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d008      	beq.n	8006900 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80068ee:	8a3b      	ldrh	r3, [r7, #16]
 80068f0:	041a      	lsls	r2, r3, #16
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	69db      	ldr	r3, [r3, #28]
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	4313      	orrs	r3, r2
 80068fc:	617b      	str	r3, [r7, #20]
 80068fe:	e004      	b.n	800690a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8006900:	8a7b      	ldrh	r3, [r7, #18]
 8006902:	041a      	lsls	r2, r3, #16
 8006904:	89fb      	ldrh	r3, [r7, #14]
 8006906:	4313      	orrs	r3, r2
 8006908:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800690a:	697b      	ldr	r3, [r7, #20]
}
 800690c:	4618      	mov	r0, r3
 800690e:	371c      	adds	r7, #28
 8006910:	46bd      	mov	sp, r7
 8006912:	bc80      	pop	{r7}
 8006914:	4770      	bx	lr

08006916 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b084      	sub	sp, #16
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
 800691e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006920:	2300      	movs	r3, #0
 8006922:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 f85d 	bl	80069e4 <RTC_EnterInitMode>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d002      	beq.n	8006936 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	73fb      	strb	r3, [r7, #15]
 8006934:	e011      	b.n	800695a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	683a      	ldr	r2, [r7, #0]
 800693c:	0c12      	lsrs	r2, r2, #16
 800693e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	683a      	ldr	r2, [r7, #0]
 8006946:	b292      	uxth	r2, r2
 8006948:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f872 	bl	8006a34 <RTC_ExitInitMode>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d001      	beq.n	800695a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800695a:	7bfb      	ldrb	r3, [r7, #15]
}
 800695c:	4618      	mov	r0, r3
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800696c:	2300      	movs	r3, #0
 800696e:	81fb      	strh	r3, [r7, #14]
 8006970:	2300      	movs	r3, #0
 8006972:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006982:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8006984:	89fb      	ldrh	r3, [r7, #14]
 8006986:	041a      	lsls	r2, r3, #16
 8006988:	89bb      	ldrh	r3, [r7, #12]
 800698a:	4313      	orrs	r3, r2
}
 800698c:	4618      	mov	r0, r3
 800698e:	3714      	adds	r7, #20
 8006990:	46bd      	mov	sp, r7
 8006992:	bc80      	pop	{r7}
 8006994:	4770      	bx	lr

08006996 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b084      	sub	sp, #16
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
 800699e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069a0:	2300      	movs	r3, #0
 80069a2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 f81d 	bl	80069e4 <RTC_EnterInitMode>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d002      	beq.n	80069b6 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	73fb      	strb	r3, [r7, #15]
 80069b4:	e011      	b.n	80069da <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	0c12      	lsrs	r2, r2, #16
 80069be:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	683a      	ldr	r2, [r7, #0]
 80069c6:	b292      	uxth	r2, r2
 80069c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f832 	bl	8006a34 <RTC_ExitInitMode>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d001      	beq.n	80069da <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80069da:	7bfb      	ldrb	r3, [r7, #15]
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3710      	adds	r7, #16
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80069ec:	2300      	movs	r3, #0
 80069ee:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80069f0:	f7fc f89c 	bl	8002b2c <HAL_GetTick>
 80069f4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80069f6:	e009      	b.n	8006a0c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80069f8:	f7fc f898 	bl	8002b2c <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a06:	d901      	bls.n	8006a0c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e00f      	b.n	8006a2c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	f003 0320 	and.w	r3, r3, #32
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d0ee      	beq.n	80069f8 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	685a      	ldr	r2, [r3, #4]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f042 0210 	orr.w	r2, r2, #16
 8006a28:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685a      	ldr	r2, [r3, #4]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f022 0210 	bic.w	r2, r2, #16
 8006a4e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006a50:	f7fc f86c 	bl	8002b2c <HAL_GetTick>
 8006a54:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006a56:	e009      	b.n	8006a6c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006a58:	f7fc f868 	bl	8002b2c <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a66:	d901      	bls.n	8006a6c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e007      	b.n	8006a7c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	f003 0320 	and.w	r3, r3, #32
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d0ee      	beq.n	8006a58 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8006a92:	e005      	b.n	8006aa0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	3301      	adds	r3, #1
 8006a98:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8006a9a:	79fb      	ldrb	r3, [r7, #7]
 8006a9c:	3b0a      	subs	r3, #10
 8006a9e:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8006aa0:	79fb      	ldrb	r3, [r7, #7]
 8006aa2:	2b09      	cmp	r3, #9
 8006aa4:	d8f6      	bhi.n	8006a94 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	011b      	lsls	r3, r3, #4
 8006aac:	b2da      	uxtb	r2, r3
 8006aae:	79fb      	ldrb	r3, [r7, #7]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	b2db      	uxtb	r3, r3
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3714      	adds	r7, #20
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bc80      	pop	{r7}
 8006abc:	4770      	bx	lr

08006abe <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006abe:	b480      	push	{r7}
 8006ac0:	b085      	sub	sp, #20
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8006acc:	79fb      	ldrb	r3, [r7, #7]
 8006ace:	091b      	lsrs	r3, r3, #4
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4413      	add	r3, r2
 8006ada:	005b      	lsls	r3, r3, #1
 8006adc:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8006ade:	79fb      	ldrb	r3, [r7, #7]
 8006ae0:	f003 030f 	and.w	r3, r3, #15
 8006ae4:	b2da      	uxtb	r2, r3
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	4413      	add	r3, r2
 8006aec:	b2db      	uxtb	r3, r3
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3714      	adds	r7, #20
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bc80      	pop	{r7}
 8006af6:	4770      	bx	lr

08006af8 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8006b02:	2300      	movs	r3, #0
 8006b04:	617b      	str	r3, [r7, #20]
 8006b06:	2300      	movs	r3, #0
 8006b08:	613b      	str	r3, [r7, #16]
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	7bdb      	ldrb	r3, [r3, #15]
 8006b16:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	7b5b      	ldrb	r3, [r3, #13]
 8006b1c:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	7b9b      	ldrb	r3, [r3, #14]
 8006b22:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8006b24:	2300      	movs	r3, #0
 8006b26:	60bb      	str	r3, [r7, #8]
 8006b28:	e06f      	b.n	8006c0a <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d011      	beq.n	8006b54 <RTC_DateUpdate+0x5c>
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	2b03      	cmp	r3, #3
 8006b34:	d00e      	beq.n	8006b54 <RTC_DateUpdate+0x5c>
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	2b05      	cmp	r3, #5
 8006b3a:	d00b      	beq.n	8006b54 <RTC_DateUpdate+0x5c>
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	2b07      	cmp	r3, #7
 8006b40:	d008      	beq.n	8006b54 <RTC_DateUpdate+0x5c>
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	2b08      	cmp	r3, #8
 8006b46:	d005      	beq.n	8006b54 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	2b0a      	cmp	r3, #10
 8006b4c:	d002      	beq.n	8006b54 <RTC_DateUpdate+0x5c>
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	2b0c      	cmp	r3, #12
 8006b52:	d117      	bne.n	8006b84 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2b1e      	cmp	r3, #30
 8006b58:	d803      	bhi.n	8006b62 <RTC_DateUpdate+0x6a>
      {
        day++;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8006b60:	e050      	b.n	8006c04 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	2b0c      	cmp	r3, #12
 8006b66:	d005      	beq.n	8006b74 <RTC_DateUpdate+0x7c>
        {
          month++;
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	613b      	str	r3, [r7, #16]
          day = 1U;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8006b72:	e047      	b.n	8006c04 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8006b74:	2301      	movs	r3, #1
 8006b76:	613b      	str	r3, [r7, #16]
          day = 1U;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	60fb      	str	r3, [r7, #12]
          year++;
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	3301      	adds	r3, #1
 8006b80:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8006b82:	e03f      	b.n	8006c04 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	2b04      	cmp	r3, #4
 8006b88:	d008      	beq.n	8006b9c <RTC_DateUpdate+0xa4>
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	2b06      	cmp	r3, #6
 8006b8e:	d005      	beq.n	8006b9c <RTC_DateUpdate+0xa4>
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	2b09      	cmp	r3, #9
 8006b94:	d002      	beq.n	8006b9c <RTC_DateUpdate+0xa4>
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	2b0b      	cmp	r3, #11
 8006b9a:	d10c      	bne.n	8006bb6 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2b1d      	cmp	r3, #29
 8006ba0:	d803      	bhi.n	8006baa <RTC_DateUpdate+0xb2>
      {
        day++;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8006ba8:	e02c      	b.n	8006c04 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	3301      	adds	r3, #1
 8006bae:	613b      	str	r3, [r7, #16]
        day = 1U;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8006bb4:	e026      	b.n	8006c04 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d123      	bne.n	8006c04 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2b1b      	cmp	r3, #27
 8006bc0:	d803      	bhi.n	8006bca <RTC_DateUpdate+0xd2>
      {
        day++;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	60fb      	str	r3, [r7, #12]
 8006bc8:	e01c      	b.n	8006c04 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2b1c      	cmp	r3, #28
 8006bce:	d111      	bne.n	8006bf4 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f000 f839 	bl	8006c4c <RTC_IsLeapYear>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d003      	beq.n	8006be8 <RTC_DateUpdate+0xf0>
        {
          day++;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	3301      	adds	r3, #1
 8006be4:	60fb      	str	r3, [r7, #12]
 8006be6:	e00d      	b.n	8006c04 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	3301      	adds	r3, #1
 8006bec:	613b      	str	r3, [r7, #16]
          day = 1U;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	60fb      	str	r3, [r7, #12]
 8006bf2:	e007      	b.n	8006c04 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2b1d      	cmp	r3, #29
 8006bf8:	d104      	bne.n	8006c04 <RTC_DateUpdate+0x10c>
      {
        month++;
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	613b      	str	r3, [r7, #16]
        day = 1U;
 8006c00:	2301      	movs	r3, #1
 8006c02:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	3301      	adds	r3, #1
 8006c08:	60bb      	str	r3, [r7, #8]
 8006c0a:	68ba      	ldr	r2, [r7, #8]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d38b      	bcc.n	8006b2a <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	b2da      	uxtb	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	b2da      	uxtb	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	b2d2      	uxtb	r2, r2
 8006c32:	4619      	mov	r1, r3
 8006c34:	6978      	ldr	r0, [r7, #20]
 8006c36:	f000 f83b 	bl	8006cb0 <RTC_WeekDayNum>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	731a      	strb	r2, [r3, #12]
}
 8006c42:	bf00      	nop
 8006c44:	3718      	adds	r7, #24
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
	...

08006c4c <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	4603      	mov	r3, r0
 8006c54:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8006c56:	88fb      	ldrh	r3, [r7, #6]
 8006c58:	f003 0303 	and.w	r3, r3, #3
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d001      	beq.n	8006c66 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8006c62:	2300      	movs	r3, #0
 8006c64:	e01d      	b.n	8006ca2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8006c66:	88fb      	ldrh	r3, [r7, #6]
 8006c68:	4a10      	ldr	r2, [pc, #64]	; (8006cac <RTC_IsLeapYear+0x60>)
 8006c6a:	fba2 1203 	umull	r1, r2, r2, r3
 8006c6e:	0952      	lsrs	r2, r2, #5
 8006c70:	2164      	movs	r1, #100	; 0x64
 8006c72:	fb01 f202 	mul.w	r2, r1, r2
 8006c76:	1a9b      	subs	r3, r3, r2
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d001      	beq.n	8006c82 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e00f      	b.n	8006ca2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8006c82:	88fb      	ldrh	r3, [r7, #6]
 8006c84:	4a09      	ldr	r2, [pc, #36]	; (8006cac <RTC_IsLeapYear+0x60>)
 8006c86:	fba2 1203 	umull	r1, r2, r2, r3
 8006c8a:	09d2      	lsrs	r2, r2, #7
 8006c8c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006c90:	fb01 f202 	mul.w	r2, r1, r2
 8006c94:	1a9b      	subs	r3, r3, r2
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d101      	bne.n	8006ca0 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e000      	b.n	8006ca2 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8006ca0:	2300      	movs	r3, #0
  }
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	370c      	adds	r7, #12
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bc80      	pop	{r7}
 8006caa:	4770      	bx	lr
 8006cac:	51eb851f 	.word	0x51eb851f

08006cb0 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	460b      	mov	r3, r1
 8006cba:	70fb      	strb	r3, [r7, #3]
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	60bb      	str	r3, [r7, #8]
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8006cce:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8006cd0:	78fb      	ldrb	r3, [r7, #3]
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d82d      	bhi.n	8006d32 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8006cd6:	78fa      	ldrb	r2, [r7, #3]
 8006cd8:	4613      	mov	r3, r2
 8006cda:	005b      	lsls	r3, r3, #1
 8006cdc:	4413      	add	r3, r2
 8006cde:	00db      	lsls	r3, r3, #3
 8006ce0:	1a9b      	subs	r3, r3, r2
 8006ce2:	4a2c      	ldr	r2, [pc, #176]	; (8006d94 <RTC_WeekDayNum+0xe4>)
 8006ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce8:	085a      	lsrs	r2, r3, #1
 8006cea:	78bb      	ldrb	r3, [r7, #2]
 8006cec:	441a      	add	r2, r3
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	441a      	add	r2, r3
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	089b      	lsrs	r3, r3, #2
 8006cf8:	441a      	add	r2, r3
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	4926      	ldr	r1, [pc, #152]	; (8006d98 <RTC_WeekDayNum+0xe8>)
 8006d00:	fba1 1303 	umull	r1, r3, r1, r3
 8006d04:	095b      	lsrs	r3, r3, #5
 8006d06:	1ad2      	subs	r2, r2, r3
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	4922      	ldr	r1, [pc, #136]	; (8006d98 <RTC_WeekDayNum+0xe8>)
 8006d0e:	fba1 1303 	umull	r1, r3, r1, r3
 8006d12:	09db      	lsrs	r3, r3, #7
 8006d14:	4413      	add	r3, r2
 8006d16:	1d1a      	adds	r2, r3, #4
 8006d18:	4b20      	ldr	r3, [pc, #128]	; (8006d9c <RTC_WeekDayNum+0xec>)
 8006d1a:	fba3 1302 	umull	r1, r3, r3, r2
 8006d1e:	1ad1      	subs	r1, r2, r3
 8006d20:	0849      	lsrs	r1, r1, #1
 8006d22:	440b      	add	r3, r1
 8006d24:	0899      	lsrs	r1, r3, #2
 8006d26:	460b      	mov	r3, r1
 8006d28:	00db      	lsls	r3, r3, #3
 8006d2a:	1a5b      	subs	r3, r3, r1
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	60fb      	str	r3, [r7, #12]
 8006d30:	e029      	b.n	8006d86 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8006d32:	78fa      	ldrb	r2, [r7, #3]
 8006d34:	4613      	mov	r3, r2
 8006d36:	005b      	lsls	r3, r3, #1
 8006d38:	4413      	add	r3, r2
 8006d3a:	00db      	lsls	r3, r3, #3
 8006d3c:	1a9b      	subs	r3, r3, r2
 8006d3e:	4a15      	ldr	r2, [pc, #84]	; (8006d94 <RTC_WeekDayNum+0xe4>)
 8006d40:	fba2 2303 	umull	r2, r3, r2, r3
 8006d44:	085a      	lsrs	r2, r3, #1
 8006d46:	78bb      	ldrb	r3, [r7, #2]
 8006d48:	441a      	add	r2, r3
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	441a      	add	r2, r3
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	089b      	lsrs	r3, r3, #2
 8006d52:	441a      	add	r2, r3
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	4910      	ldr	r1, [pc, #64]	; (8006d98 <RTC_WeekDayNum+0xe8>)
 8006d58:	fba1 1303 	umull	r1, r3, r1, r3
 8006d5c:	095b      	lsrs	r3, r3, #5
 8006d5e:	1ad2      	subs	r2, r2, r3
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	490d      	ldr	r1, [pc, #52]	; (8006d98 <RTC_WeekDayNum+0xe8>)
 8006d64:	fba1 1303 	umull	r1, r3, r1, r3
 8006d68:	09db      	lsrs	r3, r3, #7
 8006d6a:	4413      	add	r3, r2
 8006d6c:	1c9a      	adds	r2, r3, #2
 8006d6e:	4b0b      	ldr	r3, [pc, #44]	; (8006d9c <RTC_WeekDayNum+0xec>)
 8006d70:	fba3 1302 	umull	r1, r3, r3, r2
 8006d74:	1ad1      	subs	r1, r2, r3
 8006d76:	0849      	lsrs	r1, r1, #1
 8006d78:	440b      	add	r3, r1
 8006d7a:	0899      	lsrs	r1, r3, #2
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	00db      	lsls	r3, r3, #3
 8006d80:	1a5b      	subs	r3, r3, r1
 8006d82:	1ad3      	subs	r3, r2, r3
 8006d84:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	b2db      	uxtb	r3, r3
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3714      	adds	r7, #20
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bc80      	pop	{r7}
 8006d92:	4770      	bx	lr
 8006d94:	38e38e39 	.word	0x38e38e39
 8006d98:	51eb851f 	.word	0x51eb851f
 8006d9c:	24924925 	.word	0x24924925

08006da0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d101      	bne.n	8006db2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e076      	b.n	8006ea0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d108      	bne.n	8006dcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dc2:	d009      	beq.n	8006dd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	61da      	str	r2, [r3, #28]
 8006dca:	e005      	b.n	8006dd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d106      	bne.n	8006df8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f7fa ff10 	bl	8001c18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006e20:	431a      	orrs	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e2a:	431a      	orrs	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	f003 0302 	and.w	r3, r3, #2
 8006e34:	431a      	orrs	r2, r3
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	f003 0301 	and.w	r3, r3, #1
 8006e3e:	431a      	orrs	r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	699b      	ldr	r3, [r3, #24]
 8006e44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e48:	431a      	orrs	r2, r3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	69db      	ldr	r3, [r3, #28]
 8006e4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e52:	431a      	orrs	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a1b      	ldr	r3, [r3, #32]
 8006e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e5c:	ea42 0103 	orr.w	r1, r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e64:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	430a      	orrs	r2, r1
 8006e6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	699b      	ldr	r3, [r3, #24]
 8006e74:	0c1a      	lsrs	r2, r3, #16
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f002 0204 	and.w	r2, r2, #4
 8006e7e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	69da      	ldr	r2, [r3, #28]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e8e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3708      	adds	r7, #8
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b088      	sub	sp, #32
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	603b      	str	r3, [r7, #0]
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d101      	bne.n	8006eca <HAL_SPI_Transmit+0x22>
 8006ec6:	2302      	movs	r3, #2
 8006ec8:	e12d      	b.n	8007126 <HAL_SPI_Transmit+0x27e>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ed2:	f7fb fe2b 	bl	8002b2c <HAL_GetTick>
 8006ed6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006ed8:	88fb      	ldrh	r3, [r7, #6]
 8006eda:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d002      	beq.n	8006eee <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006ee8:	2302      	movs	r3, #2
 8006eea:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006eec:	e116      	b.n	800711c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d002      	beq.n	8006efa <HAL_SPI_Transmit+0x52>
 8006ef4:	88fb      	ldrh	r3, [r7, #6]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d102      	bne.n	8006f00 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006efe:	e10d      	b.n	800711c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2203      	movs	r2, #3
 8006f04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	68ba      	ldr	r2, [r7, #8]
 8006f12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	88fa      	ldrh	r2, [r7, #6]
 8006f18:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	88fa      	ldrh	r2, [r7, #6]
 8006f1e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2200      	movs	r2, #0
 8006f24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f46:	d10f      	bne.n	8006f68 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f56:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f66:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f72:	2b40      	cmp	r3, #64	; 0x40
 8006f74:	d007      	beq.n	8006f86 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f8e:	d14f      	bne.n	8007030 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d002      	beq.n	8006f9e <HAL_SPI_Transmit+0xf6>
 8006f98:	8afb      	ldrh	r3, [r7, #22]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d142      	bne.n	8007024 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa2:	881a      	ldrh	r2, [r3, #0]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fae:	1c9a      	adds	r2, r3, #2
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	b29a      	uxth	r2, r3
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006fc2:	e02f      	b.n	8007024 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f003 0302 	and.w	r3, r3, #2
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d112      	bne.n	8006ff8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd6:	881a      	ldrh	r2, [r3, #0]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe2:	1c9a      	adds	r2, r3, #2
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	86da      	strh	r2, [r3, #54]	; 0x36
 8006ff6:	e015      	b.n	8007024 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ff8:	f7fb fd98 	bl	8002b2c <HAL_GetTick>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	683a      	ldr	r2, [r7, #0]
 8007004:	429a      	cmp	r2, r3
 8007006:	d803      	bhi.n	8007010 <HAL_SPI_Transmit+0x168>
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700e:	d102      	bne.n	8007016 <HAL_SPI_Transmit+0x16e>
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d106      	bne.n	8007024 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8007016:	2303      	movs	r3, #3
 8007018:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2201      	movs	r2, #1
 800701e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8007022:	e07b      	b.n	800711c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007028:	b29b      	uxth	r3, r3
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1ca      	bne.n	8006fc4 <HAL_SPI_Transmit+0x11c>
 800702e:	e050      	b.n	80070d2 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d002      	beq.n	800703e <HAL_SPI_Transmit+0x196>
 8007038:	8afb      	ldrh	r3, [r7, #22]
 800703a:	2b01      	cmp	r3, #1
 800703c:	d144      	bne.n	80070c8 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	330c      	adds	r3, #12
 8007048:	7812      	ldrb	r2, [r2, #0]
 800704a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007050:	1c5a      	adds	r2, r3, #1
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800705a:	b29b      	uxth	r3, r3
 800705c:	3b01      	subs	r3, #1
 800705e:	b29a      	uxth	r2, r3
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007064:	e030      	b.n	80070c8 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	f003 0302 	and.w	r3, r3, #2
 8007070:	2b02      	cmp	r3, #2
 8007072:	d113      	bne.n	800709c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	330c      	adds	r3, #12
 800707e:	7812      	ldrb	r2, [r2, #0]
 8007080:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007086:	1c5a      	adds	r2, r3, #1
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007090:	b29b      	uxth	r3, r3
 8007092:	3b01      	subs	r3, #1
 8007094:	b29a      	uxth	r2, r3
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	86da      	strh	r2, [r3, #54]	; 0x36
 800709a:	e015      	b.n	80070c8 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800709c:	f7fb fd46 	bl	8002b2c <HAL_GetTick>
 80070a0:	4602      	mov	r2, r0
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	683a      	ldr	r2, [r7, #0]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d803      	bhi.n	80070b4 <HAL_SPI_Transmit+0x20c>
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b2:	d102      	bne.n	80070ba <HAL_SPI_Transmit+0x212>
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d106      	bne.n	80070c8 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80070ba:	2303      	movs	r3, #3
 80070bc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80070c6:	e029      	b.n	800711c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1c9      	bne.n	8007066 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070d2:	69ba      	ldr	r2, [r7, #24]
 80070d4:	6839      	ldr	r1, [r7, #0]
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f000 f8b2 	bl	8007240 <SPI_EndRxTxTransaction>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d002      	beq.n	80070e8 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2220      	movs	r2, #32
 80070e6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10a      	bne.n	8007106 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070f0:	2300      	movs	r3, #0
 80070f2:	613b      	str	r3, [r7, #16]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	613b      	str	r3, [r7, #16]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	613b      	str	r3, [r7, #16]
 8007104:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800710a:	2b00      	cmp	r3, #0
 800710c:	d002      	beq.n	8007114 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	77fb      	strb	r3, [r7, #31]
 8007112:	e003      	b.n	800711c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007124:	7ffb      	ldrb	r3, [r7, #31]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3720      	adds	r7, #32
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
	...

08007130 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b088      	sub	sp, #32
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	603b      	str	r3, [r7, #0]
 800713c:	4613      	mov	r3, r2
 800713e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007140:	f7fb fcf4 	bl	8002b2c <HAL_GetTick>
 8007144:	4602      	mov	r2, r0
 8007146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007148:	1a9b      	subs	r3, r3, r2
 800714a:	683a      	ldr	r2, [r7, #0]
 800714c:	4413      	add	r3, r2
 800714e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007150:	f7fb fcec 	bl	8002b2c <HAL_GetTick>
 8007154:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007156:	4b39      	ldr	r3, [pc, #228]	; (800723c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	015b      	lsls	r3, r3, #5
 800715c:	0d1b      	lsrs	r3, r3, #20
 800715e:	69fa      	ldr	r2, [r7, #28]
 8007160:	fb02 f303 	mul.w	r3, r2, r3
 8007164:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007166:	e054      	b.n	8007212 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800716e:	d050      	beq.n	8007212 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007170:	f7fb fcdc 	bl	8002b2c <HAL_GetTick>
 8007174:	4602      	mov	r2, r0
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	69fa      	ldr	r2, [r7, #28]
 800717c:	429a      	cmp	r2, r3
 800717e:	d902      	bls.n	8007186 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d13d      	bne.n	8007202 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007194:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800719e:	d111      	bne.n	80071c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071a8:	d004      	beq.n	80071b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071b2:	d107      	bne.n	80071c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071cc:	d10f      	bne.n	80071ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071dc:	601a      	str	r2, [r3, #0]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e017      	b.n	8007232 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d101      	bne.n	800720c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007208:	2300      	movs	r3, #0
 800720a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	3b01      	subs	r3, #1
 8007210:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	689a      	ldr	r2, [r3, #8]
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	4013      	ands	r3, r2
 800721c:	68ba      	ldr	r2, [r7, #8]
 800721e:	429a      	cmp	r2, r3
 8007220:	bf0c      	ite	eq
 8007222:	2301      	moveq	r3, #1
 8007224:	2300      	movne	r3, #0
 8007226:	b2db      	uxtb	r3, r3
 8007228:	461a      	mov	r2, r3
 800722a:	79fb      	ldrb	r3, [r7, #7]
 800722c:	429a      	cmp	r2, r3
 800722e:	d19b      	bne.n	8007168 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3720      	adds	r7, #32
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	20000000 	.word	0x20000000

08007240 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af02      	add	r7, sp, #8
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	9300      	str	r3, [sp, #0]
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	2200      	movs	r2, #0
 8007254:	2180      	movs	r1, #128	; 0x80
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f7ff ff6a 	bl	8007130 <SPI_WaitFlagStateUntilTimeout>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d007      	beq.n	8007272 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007266:	f043 0220 	orr.w	r2, r3, #32
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800726e:	2303      	movs	r3, #3
 8007270:	e000      	b.n	8007274 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e041      	b.n	8007312 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b00      	cmp	r3, #0
 8007298:	d106      	bne.n	80072a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7fa fd04 	bl	8001cb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2202      	movs	r2, #2
 80072ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	3304      	adds	r3, #4
 80072b8:	4619      	mov	r1, r3
 80072ba:	4610      	mov	r0, r2
 80072bc:	f000 fa74 	bl	80077a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3708      	adds	r7, #8
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
	...

0800731c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800732a:	b2db      	uxtb	r3, r3
 800732c:	2b01      	cmp	r3, #1
 800732e:	d001      	beq.n	8007334 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	e03a      	b.n	80073aa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2202      	movs	r2, #2
 8007338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68da      	ldr	r2, [r3, #12]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f042 0201 	orr.w	r2, r2, #1
 800734a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a18      	ldr	r2, [pc, #96]	; (80073b4 <HAL_TIM_Base_Start_IT+0x98>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d00e      	beq.n	8007374 <HAL_TIM_Base_Start_IT+0x58>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800735e:	d009      	beq.n	8007374 <HAL_TIM_Base_Start_IT+0x58>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a14      	ldr	r2, [pc, #80]	; (80073b8 <HAL_TIM_Base_Start_IT+0x9c>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d004      	beq.n	8007374 <HAL_TIM_Base_Start_IT+0x58>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a13      	ldr	r2, [pc, #76]	; (80073bc <HAL_TIM_Base_Start_IT+0xa0>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d111      	bne.n	8007398 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	f003 0307 	and.w	r3, r3, #7
 800737e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2b06      	cmp	r3, #6
 8007384:	d010      	beq.n	80073a8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f042 0201 	orr.w	r2, r2, #1
 8007394:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007396:	e007      	b.n	80073a8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f042 0201 	orr.w	r2, r2, #1
 80073a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3714      	adds	r7, #20
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bc80      	pop	{r7}
 80073b2:	4770      	bx	lr
 80073b4:	40012c00 	.word	0x40012c00
 80073b8:	40000400 	.word	0x40000400
 80073bc:	40000800 	.word	0x40000800

080073c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	f003 0302 	and.w	r3, r3, #2
 80073d2:	2b02      	cmp	r3, #2
 80073d4:	d122      	bne.n	800741c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	f003 0302 	and.w	r3, r3, #2
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d11b      	bne.n	800741c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f06f 0202 	mvn.w	r2, #2
 80073ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	f003 0303 	and.w	r3, r3, #3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d003      	beq.n	800740a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f9b4 	bl	8007770 <HAL_TIM_IC_CaptureCallback>
 8007408:	e005      	b.n	8007416 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f9a7 	bl	800775e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 f9b6 	bl	8007782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	f003 0304 	and.w	r3, r3, #4
 8007426:	2b04      	cmp	r3, #4
 8007428:	d122      	bne.n	8007470 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	f003 0304 	and.w	r3, r3, #4
 8007434:	2b04      	cmp	r3, #4
 8007436:	d11b      	bne.n	8007470 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f06f 0204 	mvn.w	r2, #4
 8007440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2202      	movs	r2, #2
 8007446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007452:	2b00      	cmp	r3, #0
 8007454:	d003      	beq.n	800745e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f98a 	bl	8007770 <HAL_TIM_IC_CaptureCallback>
 800745c:	e005      	b.n	800746a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f97d 	bl	800775e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 f98c 	bl	8007782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	f003 0308 	and.w	r3, r3, #8
 800747a:	2b08      	cmp	r3, #8
 800747c:	d122      	bne.n	80074c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	f003 0308 	and.w	r3, r3, #8
 8007488:	2b08      	cmp	r3, #8
 800748a:	d11b      	bne.n	80074c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f06f 0208 	mvn.w	r2, #8
 8007494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2204      	movs	r2, #4
 800749a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	69db      	ldr	r3, [r3, #28]
 80074a2:	f003 0303 	and.w	r3, r3, #3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d003      	beq.n	80074b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 f960 	bl	8007770 <HAL_TIM_IC_CaptureCallback>
 80074b0:	e005      	b.n	80074be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 f953 	bl	800775e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f962 	bl	8007782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	f003 0310 	and.w	r3, r3, #16
 80074ce:	2b10      	cmp	r3, #16
 80074d0:	d122      	bne.n	8007518 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	f003 0310 	and.w	r3, r3, #16
 80074dc:	2b10      	cmp	r3, #16
 80074de:	d11b      	bne.n	8007518 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f06f 0210 	mvn.w	r2, #16
 80074e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2208      	movs	r2, #8
 80074ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	69db      	ldr	r3, [r3, #28]
 80074f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d003      	beq.n	8007506 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 f936 	bl	8007770 <HAL_TIM_IC_CaptureCallback>
 8007504:	e005      	b.n	8007512 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 f929 	bl	800775e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f938 	bl	8007782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	f003 0301 	and.w	r3, r3, #1
 8007522:	2b01      	cmp	r3, #1
 8007524:	d10e      	bne.n	8007544 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	f003 0301 	and.w	r3, r3, #1
 8007530:	2b01      	cmp	r3, #1
 8007532:	d107      	bne.n	8007544 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f06f 0201 	mvn.w	r2, #1
 800753c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f7f9 fe3a 	bl	80011b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800754e:	2b80      	cmp	r3, #128	; 0x80
 8007550:	d10e      	bne.n	8007570 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800755c:	2b80      	cmp	r3, #128	; 0x80
 800755e:	d107      	bne.n	8007570 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fa7b 	bl	8007a66 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800757a:	2b40      	cmp	r3, #64	; 0x40
 800757c:	d10e      	bne.n	800759c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007588:	2b40      	cmp	r3, #64	; 0x40
 800758a:	d107      	bne.n	800759c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 f8fc 	bl	8007794 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	f003 0320 	and.w	r3, r3, #32
 80075a6:	2b20      	cmp	r3, #32
 80075a8:	d10e      	bne.n	80075c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	f003 0320 	and.w	r3, r3, #32
 80075b4:	2b20      	cmp	r3, #32
 80075b6:	d107      	bne.n	80075c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f06f 0220 	mvn.w	r2, #32
 80075c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fa46 	bl	8007a54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075c8:	bf00      	nop
 80075ca:	3708      	adds	r7, #8
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075da:	2300      	movs	r3, #0
 80075dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d101      	bne.n	80075ec <HAL_TIM_ConfigClockSource+0x1c>
 80075e8:	2302      	movs	r3, #2
 80075ea:	e0b4      	b.n	8007756 <HAL_TIM_ConfigClockSource+0x186>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2202      	movs	r2, #2
 80075f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800760a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007612:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007624:	d03e      	beq.n	80076a4 <HAL_TIM_ConfigClockSource+0xd4>
 8007626:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800762a:	f200 8087 	bhi.w	800773c <HAL_TIM_ConfigClockSource+0x16c>
 800762e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007632:	f000 8086 	beq.w	8007742 <HAL_TIM_ConfigClockSource+0x172>
 8007636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800763a:	d87f      	bhi.n	800773c <HAL_TIM_ConfigClockSource+0x16c>
 800763c:	2b70      	cmp	r3, #112	; 0x70
 800763e:	d01a      	beq.n	8007676 <HAL_TIM_ConfigClockSource+0xa6>
 8007640:	2b70      	cmp	r3, #112	; 0x70
 8007642:	d87b      	bhi.n	800773c <HAL_TIM_ConfigClockSource+0x16c>
 8007644:	2b60      	cmp	r3, #96	; 0x60
 8007646:	d050      	beq.n	80076ea <HAL_TIM_ConfigClockSource+0x11a>
 8007648:	2b60      	cmp	r3, #96	; 0x60
 800764a:	d877      	bhi.n	800773c <HAL_TIM_ConfigClockSource+0x16c>
 800764c:	2b50      	cmp	r3, #80	; 0x50
 800764e:	d03c      	beq.n	80076ca <HAL_TIM_ConfigClockSource+0xfa>
 8007650:	2b50      	cmp	r3, #80	; 0x50
 8007652:	d873      	bhi.n	800773c <HAL_TIM_ConfigClockSource+0x16c>
 8007654:	2b40      	cmp	r3, #64	; 0x40
 8007656:	d058      	beq.n	800770a <HAL_TIM_ConfigClockSource+0x13a>
 8007658:	2b40      	cmp	r3, #64	; 0x40
 800765a:	d86f      	bhi.n	800773c <HAL_TIM_ConfigClockSource+0x16c>
 800765c:	2b30      	cmp	r3, #48	; 0x30
 800765e:	d064      	beq.n	800772a <HAL_TIM_ConfigClockSource+0x15a>
 8007660:	2b30      	cmp	r3, #48	; 0x30
 8007662:	d86b      	bhi.n	800773c <HAL_TIM_ConfigClockSource+0x16c>
 8007664:	2b20      	cmp	r3, #32
 8007666:	d060      	beq.n	800772a <HAL_TIM_ConfigClockSource+0x15a>
 8007668:	2b20      	cmp	r3, #32
 800766a:	d867      	bhi.n	800773c <HAL_TIM_ConfigClockSource+0x16c>
 800766c:	2b00      	cmp	r3, #0
 800766e:	d05c      	beq.n	800772a <HAL_TIM_ConfigClockSource+0x15a>
 8007670:	2b10      	cmp	r3, #16
 8007672:	d05a      	beq.n	800772a <HAL_TIM_ConfigClockSource+0x15a>
 8007674:	e062      	b.n	800773c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6818      	ldr	r0, [r3, #0]
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	6899      	ldr	r1, [r3, #8]
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	685a      	ldr	r2, [r3, #4]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	f000 f968 	bl	800795a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007698:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	609a      	str	r2, [r3, #8]
      break;
 80076a2:	e04f      	b.n	8007744 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6818      	ldr	r0, [r3, #0]
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	6899      	ldr	r1, [r3, #8]
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	f000 f951 	bl	800795a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	689a      	ldr	r2, [r3, #8]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076c6:	609a      	str	r2, [r3, #8]
      break;
 80076c8:	e03c      	b.n	8007744 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6818      	ldr	r0, [r3, #0]
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	6859      	ldr	r1, [r3, #4]
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	461a      	mov	r2, r3
 80076d8:	f000 f8c8 	bl	800786c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2150      	movs	r1, #80	; 0x50
 80076e2:	4618      	mov	r0, r3
 80076e4:	f000 f91f 	bl	8007926 <TIM_ITRx_SetConfig>
      break;
 80076e8:	e02c      	b.n	8007744 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6818      	ldr	r0, [r3, #0]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	6859      	ldr	r1, [r3, #4]
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	461a      	mov	r2, r3
 80076f8:	f000 f8e6 	bl	80078c8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2160      	movs	r1, #96	; 0x60
 8007702:	4618      	mov	r0, r3
 8007704:	f000 f90f 	bl	8007926 <TIM_ITRx_SetConfig>
      break;
 8007708:	e01c      	b.n	8007744 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6818      	ldr	r0, [r3, #0]
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	6859      	ldr	r1, [r3, #4]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	461a      	mov	r2, r3
 8007718:	f000 f8a8 	bl	800786c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2140      	movs	r1, #64	; 0x40
 8007722:	4618      	mov	r0, r3
 8007724:	f000 f8ff 	bl	8007926 <TIM_ITRx_SetConfig>
      break;
 8007728:	e00c      	b.n	8007744 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4619      	mov	r1, r3
 8007734:	4610      	mov	r0, r2
 8007736:	f000 f8f6 	bl	8007926 <TIM_ITRx_SetConfig>
      break;
 800773a:	e003      	b.n	8007744 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	73fb      	strb	r3, [r7, #15]
      break;
 8007740:	e000      	b.n	8007744 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007742:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007754:	7bfb      	ldrb	r3, [r7, #15]
}
 8007756:	4618      	mov	r0, r3
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800775e:	b480      	push	{r7}
 8007760:	b083      	sub	sp, #12
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007766:	bf00      	nop
 8007768:	370c      	adds	r7, #12
 800776a:	46bd      	mov	sp, r7
 800776c:	bc80      	pop	{r7}
 800776e:	4770      	bx	lr

08007770 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007778:	bf00      	nop
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	bc80      	pop	{r7}
 8007780:	4770      	bx	lr

08007782 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007782:	b480      	push	{r7}
 8007784:	b083      	sub	sp, #12
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800778a:	bf00      	nop
 800778c:	370c      	adds	r7, #12
 800778e:	46bd      	mov	sp, r7
 8007790:	bc80      	pop	{r7}
 8007792:	4770      	bx	lr

08007794 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bc80      	pop	{r7}
 80077a4:	4770      	bx	lr
	...

080077a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a29      	ldr	r2, [pc, #164]	; (8007860 <TIM_Base_SetConfig+0xb8>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d00b      	beq.n	80077d8 <TIM_Base_SetConfig+0x30>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077c6:	d007      	beq.n	80077d8 <TIM_Base_SetConfig+0x30>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a26      	ldr	r2, [pc, #152]	; (8007864 <TIM_Base_SetConfig+0xbc>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d003      	beq.n	80077d8 <TIM_Base_SetConfig+0x30>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a25      	ldr	r2, [pc, #148]	; (8007868 <TIM_Base_SetConfig+0xc0>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d108      	bne.n	80077ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	68fa      	ldr	r2, [r7, #12]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a1c      	ldr	r2, [pc, #112]	; (8007860 <TIM_Base_SetConfig+0xb8>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d00b      	beq.n	800780a <TIM_Base_SetConfig+0x62>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077f8:	d007      	beq.n	800780a <TIM_Base_SetConfig+0x62>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a19      	ldr	r2, [pc, #100]	; (8007864 <TIM_Base_SetConfig+0xbc>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d003      	beq.n	800780a <TIM_Base_SetConfig+0x62>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a18      	ldr	r2, [pc, #96]	; (8007868 <TIM_Base_SetConfig+0xc0>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d108      	bne.n	800781c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	4313      	orrs	r3, r2
 800781a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	695b      	ldr	r3, [r3, #20]
 8007826:	4313      	orrs	r3, r2
 8007828:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	689a      	ldr	r2, [r3, #8]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4a07      	ldr	r2, [pc, #28]	; (8007860 <TIM_Base_SetConfig+0xb8>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d103      	bne.n	8007850 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	691a      	ldr	r2, [r3, #16]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	615a      	str	r2, [r3, #20]
}
 8007856:	bf00      	nop
 8007858:	3714      	adds	r7, #20
 800785a:	46bd      	mov	sp, r7
 800785c:	bc80      	pop	{r7}
 800785e:	4770      	bx	lr
 8007860:	40012c00 	.word	0x40012c00
 8007864:	40000400 	.word	0x40000400
 8007868:	40000800 	.word	0x40000800

0800786c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800786c:	b480      	push	{r7}
 800786e:	b087      	sub	sp, #28
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6a1b      	ldr	r3, [r3, #32]
 800787c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	6a1b      	ldr	r3, [r3, #32]
 8007882:	f023 0201 	bic.w	r2, r3, #1
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	699b      	ldr	r3, [r3, #24]
 800788e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	011b      	lsls	r3, r3, #4
 800789c:	693a      	ldr	r2, [r7, #16]
 800789e:	4313      	orrs	r3, r2
 80078a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	f023 030a 	bic.w	r3, r3, #10
 80078a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80078aa:	697a      	ldr	r2, [r7, #20]
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	693a      	ldr	r2, [r7, #16]
 80078b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	697a      	ldr	r2, [r7, #20]
 80078bc:	621a      	str	r2, [r3, #32]
}
 80078be:	bf00      	nop
 80078c0:	371c      	adds	r7, #28
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bc80      	pop	{r7}
 80078c6:	4770      	bx	lr

080078c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b087      	sub	sp, #28
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6a1b      	ldr	r3, [r3, #32]
 80078d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6a1b      	ldr	r3, [r3, #32]
 80078de:	f023 0210 	bic.w	r2, r3, #16
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	699b      	ldr	r3, [r3, #24]
 80078ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	031b      	lsls	r3, r3, #12
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007904:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	011b      	lsls	r3, r3, #4
 800790a:	697a      	ldr	r2, [r7, #20]
 800790c:	4313      	orrs	r3, r2
 800790e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	693a      	ldr	r2, [r7, #16]
 8007914:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	697a      	ldr	r2, [r7, #20]
 800791a:	621a      	str	r2, [r3, #32]
}
 800791c:	bf00      	nop
 800791e:	371c      	adds	r7, #28
 8007920:	46bd      	mov	sp, r7
 8007922:	bc80      	pop	{r7}
 8007924:	4770      	bx	lr

08007926 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007926:	b480      	push	{r7}
 8007928:	b085      	sub	sp, #20
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
 800792e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800793c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800793e:	683a      	ldr	r2, [r7, #0]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	4313      	orrs	r3, r2
 8007944:	f043 0307 	orr.w	r3, r3, #7
 8007948:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	609a      	str	r2, [r3, #8]
}
 8007950:	bf00      	nop
 8007952:	3714      	adds	r7, #20
 8007954:	46bd      	mov	sp, r7
 8007956:	bc80      	pop	{r7}
 8007958:	4770      	bx	lr

0800795a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800795a:	b480      	push	{r7}
 800795c:	b087      	sub	sp, #28
 800795e:	af00      	add	r7, sp, #0
 8007960:	60f8      	str	r0, [r7, #12]
 8007962:	60b9      	str	r1, [r7, #8]
 8007964:	607a      	str	r2, [r7, #4]
 8007966:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007974:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	021a      	lsls	r2, r3, #8
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	431a      	orrs	r2, r3
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	4313      	orrs	r3, r2
 8007982:	697a      	ldr	r2, [r7, #20]
 8007984:	4313      	orrs	r3, r2
 8007986:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	609a      	str	r2, [r3, #8]
}
 800798e:	bf00      	nop
 8007990:	371c      	adds	r7, #28
 8007992:	46bd      	mov	sp, r7
 8007994:	bc80      	pop	{r7}
 8007996:	4770      	bx	lr

08007998 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007998:	b480      	push	{r7}
 800799a:	b085      	sub	sp, #20
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d101      	bne.n	80079b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079ac:	2302      	movs	r3, #2
 80079ae:	e046      	b.n	8007a3e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2202      	movs	r2, #2
 80079bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	68fa      	ldr	r2, [r7, #12]
 80079de:	4313      	orrs	r3, r2
 80079e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a16      	ldr	r2, [pc, #88]	; (8007a48 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d00e      	beq.n	8007a12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079fc:	d009      	beq.n	8007a12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a12      	ldr	r2, [pc, #72]	; (8007a4c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d004      	beq.n	8007a12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a10      	ldr	r2, [pc, #64]	; (8007a50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d10c      	bne.n	8007a2c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	4313      	orrs	r3, r2
 8007a22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68ba      	ldr	r2, [r7, #8]
 8007a2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3714      	adds	r7, #20
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bc80      	pop	{r7}
 8007a46:	4770      	bx	lr
 8007a48:	40012c00 	.word	0x40012c00
 8007a4c:	40000400 	.word	0x40000400
 8007a50:	40000800 	.word	0x40000800

08007a54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a5c:	bf00      	nop
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bc80      	pop	{r7}
 8007a64:	4770      	bx	lr

08007a66 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a66:	b480      	push	{r7}
 8007a68:	b083      	sub	sp, #12
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a6e:	bf00      	nop
 8007a70:	370c      	adds	r7, #12
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bc80      	pop	{r7}
 8007a76:	4770      	bx	lr

08007a78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d101      	bne.n	8007a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e042      	b.n	8007b10 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d106      	bne.n	8007aa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f7fa f93e 	bl	8001d20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2224      	movs	r2, #36	; 0x24
 8007aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68da      	ldr	r2, [r3, #12]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007aba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f82b 	bl	8007b18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	691a      	ldr	r2, [r3, #16]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ad0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	695a      	ldr	r2, [r3, #20]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ae0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	68da      	ldr	r2, [r3, #12]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007af0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2220      	movs	r2, #32
 8007afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2220      	movs	r2, #32
 8007b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	68da      	ldr	r2, [r3, #12]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	430a      	orrs	r2, r1
 8007b34:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	689a      	ldr	r2, [r3, #8]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	431a      	orrs	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	695b      	ldr	r3, [r3, #20]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007b52:	f023 030c 	bic.w	r3, r3, #12
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	6812      	ldr	r2, [r2, #0]
 8007b5a:	68b9      	ldr	r1, [r7, #8]
 8007b5c:	430b      	orrs	r3, r1
 8007b5e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	695b      	ldr	r3, [r3, #20]
 8007b66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	699a      	ldr	r2, [r3, #24]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	430a      	orrs	r2, r1
 8007b74:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a2c      	ldr	r2, [pc, #176]	; (8007c2c <UART_SetConfig+0x114>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d103      	bne.n	8007b88 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007b80:	f7fe f9c8 	bl	8005f14 <HAL_RCC_GetPCLK2Freq>
 8007b84:	60f8      	str	r0, [r7, #12]
 8007b86:	e002      	b.n	8007b8e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007b88:	f7fe f9b0 	bl	8005eec <HAL_RCC_GetPCLK1Freq>
 8007b8c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	4613      	mov	r3, r2
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	4413      	add	r3, r2
 8007b96:	009a      	lsls	r2, r3, #2
 8007b98:	441a      	add	r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ba4:	4a22      	ldr	r2, [pc, #136]	; (8007c30 <UART_SetConfig+0x118>)
 8007ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8007baa:	095b      	lsrs	r3, r3, #5
 8007bac:	0119      	lsls	r1, r3, #4
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	4413      	add	r3, r2
 8007bb6:	009a      	lsls	r2, r3, #2
 8007bb8:	441a      	add	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8007bc4:	4b1a      	ldr	r3, [pc, #104]	; (8007c30 <UART_SetConfig+0x118>)
 8007bc6:	fba3 0302 	umull	r0, r3, r3, r2
 8007bca:	095b      	lsrs	r3, r3, #5
 8007bcc:	2064      	movs	r0, #100	; 0x64
 8007bce:	fb00 f303 	mul.w	r3, r0, r3
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	011b      	lsls	r3, r3, #4
 8007bd6:	3332      	adds	r3, #50	; 0x32
 8007bd8:	4a15      	ldr	r2, [pc, #84]	; (8007c30 <UART_SetConfig+0x118>)
 8007bda:	fba2 2303 	umull	r2, r3, r2, r3
 8007bde:	095b      	lsrs	r3, r3, #5
 8007be0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007be4:	4419      	add	r1, r3
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	4613      	mov	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	4413      	add	r3, r2
 8007bee:	009a      	lsls	r2, r3, #2
 8007bf0:	441a      	add	r2, r3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8007bfc:	4b0c      	ldr	r3, [pc, #48]	; (8007c30 <UART_SetConfig+0x118>)
 8007bfe:	fba3 0302 	umull	r0, r3, r3, r2
 8007c02:	095b      	lsrs	r3, r3, #5
 8007c04:	2064      	movs	r0, #100	; 0x64
 8007c06:	fb00 f303 	mul.w	r3, r0, r3
 8007c0a:	1ad3      	subs	r3, r2, r3
 8007c0c:	011b      	lsls	r3, r3, #4
 8007c0e:	3332      	adds	r3, #50	; 0x32
 8007c10:	4a07      	ldr	r2, [pc, #28]	; (8007c30 <UART_SetConfig+0x118>)
 8007c12:	fba2 2303 	umull	r2, r3, r2, r3
 8007c16:	095b      	lsrs	r3, r3, #5
 8007c18:	f003 020f 	and.w	r2, r3, #15
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	440a      	add	r2, r1
 8007c22:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007c24:	bf00      	nop
 8007c26:	3710      	adds	r7, #16
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	40013800 	.word	0x40013800
 8007c30:	51eb851f 	.word	0x51eb851f

08007c34 <__errno>:
 8007c34:	4b01      	ldr	r3, [pc, #4]	; (8007c3c <__errno+0x8>)
 8007c36:	6818      	ldr	r0, [r3, #0]
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop
 8007c3c:	2000001c 	.word	0x2000001c

08007c40 <__libc_init_array>:
 8007c40:	b570      	push	{r4, r5, r6, lr}
 8007c42:	2600      	movs	r6, #0
 8007c44:	4d0c      	ldr	r5, [pc, #48]	; (8007c78 <__libc_init_array+0x38>)
 8007c46:	4c0d      	ldr	r4, [pc, #52]	; (8007c7c <__libc_init_array+0x3c>)
 8007c48:	1b64      	subs	r4, r4, r5
 8007c4a:	10a4      	asrs	r4, r4, #2
 8007c4c:	42a6      	cmp	r6, r4
 8007c4e:	d109      	bne.n	8007c64 <__libc_init_array+0x24>
 8007c50:	f002 ff04 	bl	800aa5c <_init>
 8007c54:	2600      	movs	r6, #0
 8007c56:	4d0a      	ldr	r5, [pc, #40]	; (8007c80 <__libc_init_array+0x40>)
 8007c58:	4c0a      	ldr	r4, [pc, #40]	; (8007c84 <__libc_init_array+0x44>)
 8007c5a:	1b64      	subs	r4, r4, r5
 8007c5c:	10a4      	asrs	r4, r4, #2
 8007c5e:	42a6      	cmp	r6, r4
 8007c60:	d105      	bne.n	8007c6e <__libc_init_array+0x2e>
 8007c62:	bd70      	pop	{r4, r5, r6, pc}
 8007c64:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c68:	4798      	blx	r3
 8007c6a:	3601      	adds	r6, #1
 8007c6c:	e7ee      	b.n	8007c4c <__libc_init_array+0xc>
 8007c6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c72:	4798      	blx	r3
 8007c74:	3601      	adds	r6, #1
 8007c76:	e7f2      	b.n	8007c5e <__libc_init_array+0x1e>
 8007c78:	0800c41c 	.word	0x0800c41c
 8007c7c:	0800c41c 	.word	0x0800c41c
 8007c80:	0800c41c 	.word	0x0800c41c
 8007c84:	0800c420 	.word	0x0800c420

08007c88 <malloc>:
 8007c88:	4b02      	ldr	r3, [pc, #8]	; (8007c94 <malloc+0xc>)
 8007c8a:	4601      	mov	r1, r0
 8007c8c:	6818      	ldr	r0, [r3, #0]
 8007c8e:	f000 b865 	b.w	8007d5c <_malloc_r>
 8007c92:	bf00      	nop
 8007c94:	2000001c 	.word	0x2000001c

08007c98 <memcpy>:
 8007c98:	440a      	add	r2, r1
 8007c9a:	4291      	cmp	r1, r2
 8007c9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ca0:	d100      	bne.n	8007ca4 <memcpy+0xc>
 8007ca2:	4770      	bx	lr
 8007ca4:	b510      	push	{r4, lr}
 8007ca6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007caa:	4291      	cmp	r1, r2
 8007cac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cb0:	d1f9      	bne.n	8007ca6 <memcpy+0xe>
 8007cb2:	bd10      	pop	{r4, pc}

08007cb4 <memset>:
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	4402      	add	r2, r0
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d100      	bne.n	8007cbe <memset+0xa>
 8007cbc:	4770      	bx	lr
 8007cbe:	f803 1b01 	strb.w	r1, [r3], #1
 8007cc2:	e7f9      	b.n	8007cb8 <memset+0x4>

08007cc4 <_free_r>:
 8007cc4:	b538      	push	{r3, r4, r5, lr}
 8007cc6:	4605      	mov	r5, r0
 8007cc8:	2900      	cmp	r1, #0
 8007cca:	d043      	beq.n	8007d54 <_free_r+0x90>
 8007ccc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cd0:	1f0c      	subs	r4, r1, #4
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	bfb8      	it	lt
 8007cd6:	18e4      	addlt	r4, r4, r3
 8007cd8:	f001 fbba 	bl	8009450 <__malloc_lock>
 8007cdc:	4a1e      	ldr	r2, [pc, #120]	; (8007d58 <_free_r+0x94>)
 8007cde:	6813      	ldr	r3, [r2, #0]
 8007ce0:	4610      	mov	r0, r2
 8007ce2:	b933      	cbnz	r3, 8007cf2 <_free_r+0x2e>
 8007ce4:	6063      	str	r3, [r4, #4]
 8007ce6:	6014      	str	r4, [r2, #0]
 8007ce8:	4628      	mov	r0, r5
 8007cea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cee:	f001 bbb5 	b.w	800945c <__malloc_unlock>
 8007cf2:	42a3      	cmp	r3, r4
 8007cf4:	d90a      	bls.n	8007d0c <_free_r+0x48>
 8007cf6:	6821      	ldr	r1, [r4, #0]
 8007cf8:	1862      	adds	r2, r4, r1
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	bf01      	itttt	eq
 8007cfe:	681a      	ldreq	r2, [r3, #0]
 8007d00:	685b      	ldreq	r3, [r3, #4]
 8007d02:	1852      	addeq	r2, r2, r1
 8007d04:	6022      	streq	r2, [r4, #0]
 8007d06:	6063      	str	r3, [r4, #4]
 8007d08:	6004      	str	r4, [r0, #0]
 8007d0a:	e7ed      	b.n	8007ce8 <_free_r+0x24>
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	b10b      	cbz	r3, 8007d16 <_free_r+0x52>
 8007d12:	42a3      	cmp	r3, r4
 8007d14:	d9fa      	bls.n	8007d0c <_free_r+0x48>
 8007d16:	6811      	ldr	r1, [r2, #0]
 8007d18:	1850      	adds	r0, r2, r1
 8007d1a:	42a0      	cmp	r0, r4
 8007d1c:	d10b      	bne.n	8007d36 <_free_r+0x72>
 8007d1e:	6820      	ldr	r0, [r4, #0]
 8007d20:	4401      	add	r1, r0
 8007d22:	1850      	adds	r0, r2, r1
 8007d24:	4283      	cmp	r3, r0
 8007d26:	6011      	str	r1, [r2, #0]
 8007d28:	d1de      	bne.n	8007ce8 <_free_r+0x24>
 8007d2a:	6818      	ldr	r0, [r3, #0]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	4401      	add	r1, r0
 8007d30:	6011      	str	r1, [r2, #0]
 8007d32:	6053      	str	r3, [r2, #4]
 8007d34:	e7d8      	b.n	8007ce8 <_free_r+0x24>
 8007d36:	d902      	bls.n	8007d3e <_free_r+0x7a>
 8007d38:	230c      	movs	r3, #12
 8007d3a:	602b      	str	r3, [r5, #0]
 8007d3c:	e7d4      	b.n	8007ce8 <_free_r+0x24>
 8007d3e:	6820      	ldr	r0, [r4, #0]
 8007d40:	1821      	adds	r1, r4, r0
 8007d42:	428b      	cmp	r3, r1
 8007d44:	bf01      	itttt	eq
 8007d46:	6819      	ldreq	r1, [r3, #0]
 8007d48:	685b      	ldreq	r3, [r3, #4]
 8007d4a:	1809      	addeq	r1, r1, r0
 8007d4c:	6021      	streq	r1, [r4, #0]
 8007d4e:	6063      	str	r3, [r4, #4]
 8007d50:	6054      	str	r4, [r2, #4]
 8007d52:	e7c9      	b.n	8007ce8 <_free_r+0x24>
 8007d54:	bd38      	pop	{r3, r4, r5, pc}
 8007d56:	bf00      	nop
 8007d58:	2000024c 	.word	0x2000024c

08007d5c <_malloc_r>:
 8007d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d5e:	1ccd      	adds	r5, r1, #3
 8007d60:	f025 0503 	bic.w	r5, r5, #3
 8007d64:	3508      	adds	r5, #8
 8007d66:	2d0c      	cmp	r5, #12
 8007d68:	bf38      	it	cc
 8007d6a:	250c      	movcc	r5, #12
 8007d6c:	2d00      	cmp	r5, #0
 8007d6e:	4606      	mov	r6, r0
 8007d70:	db01      	blt.n	8007d76 <_malloc_r+0x1a>
 8007d72:	42a9      	cmp	r1, r5
 8007d74:	d903      	bls.n	8007d7e <_malloc_r+0x22>
 8007d76:	230c      	movs	r3, #12
 8007d78:	6033      	str	r3, [r6, #0]
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d7e:	f001 fb67 	bl	8009450 <__malloc_lock>
 8007d82:	4921      	ldr	r1, [pc, #132]	; (8007e08 <_malloc_r+0xac>)
 8007d84:	680a      	ldr	r2, [r1, #0]
 8007d86:	4614      	mov	r4, r2
 8007d88:	b99c      	cbnz	r4, 8007db2 <_malloc_r+0x56>
 8007d8a:	4f20      	ldr	r7, [pc, #128]	; (8007e0c <_malloc_r+0xb0>)
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	b923      	cbnz	r3, 8007d9a <_malloc_r+0x3e>
 8007d90:	4621      	mov	r1, r4
 8007d92:	4630      	mov	r0, r6
 8007d94:	f000 fc9c 	bl	80086d0 <_sbrk_r>
 8007d98:	6038      	str	r0, [r7, #0]
 8007d9a:	4629      	mov	r1, r5
 8007d9c:	4630      	mov	r0, r6
 8007d9e:	f000 fc97 	bl	80086d0 <_sbrk_r>
 8007da2:	1c43      	adds	r3, r0, #1
 8007da4:	d123      	bne.n	8007dee <_malloc_r+0x92>
 8007da6:	230c      	movs	r3, #12
 8007da8:	4630      	mov	r0, r6
 8007daa:	6033      	str	r3, [r6, #0]
 8007dac:	f001 fb56 	bl	800945c <__malloc_unlock>
 8007db0:	e7e3      	b.n	8007d7a <_malloc_r+0x1e>
 8007db2:	6823      	ldr	r3, [r4, #0]
 8007db4:	1b5b      	subs	r3, r3, r5
 8007db6:	d417      	bmi.n	8007de8 <_malloc_r+0x8c>
 8007db8:	2b0b      	cmp	r3, #11
 8007dba:	d903      	bls.n	8007dc4 <_malloc_r+0x68>
 8007dbc:	6023      	str	r3, [r4, #0]
 8007dbe:	441c      	add	r4, r3
 8007dc0:	6025      	str	r5, [r4, #0]
 8007dc2:	e004      	b.n	8007dce <_malloc_r+0x72>
 8007dc4:	6863      	ldr	r3, [r4, #4]
 8007dc6:	42a2      	cmp	r2, r4
 8007dc8:	bf0c      	ite	eq
 8007dca:	600b      	streq	r3, [r1, #0]
 8007dcc:	6053      	strne	r3, [r2, #4]
 8007dce:	4630      	mov	r0, r6
 8007dd0:	f001 fb44 	bl	800945c <__malloc_unlock>
 8007dd4:	f104 000b 	add.w	r0, r4, #11
 8007dd8:	1d23      	adds	r3, r4, #4
 8007dda:	f020 0007 	bic.w	r0, r0, #7
 8007dde:	1ac2      	subs	r2, r0, r3
 8007de0:	d0cc      	beq.n	8007d7c <_malloc_r+0x20>
 8007de2:	1a1b      	subs	r3, r3, r0
 8007de4:	50a3      	str	r3, [r4, r2]
 8007de6:	e7c9      	b.n	8007d7c <_malloc_r+0x20>
 8007de8:	4622      	mov	r2, r4
 8007dea:	6864      	ldr	r4, [r4, #4]
 8007dec:	e7cc      	b.n	8007d88 <_malloc_r+0x2c>
 8007dee:	1cc4      	adds	r4, r0, #3
 8007df0:	f024 0403 	bic.w	r4, r4, #3
 8007df4:	42a0      	cmp	r0, r4
 8007df6:	d0e3      	beq.n	8007dc0 <_malloc_r+0x64>
 8007df8:	1a21      	subs	r1, r4, r0
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	f000 fc68 	bl	80086d0 <_sbrk_r>
 8007e00:	3001      	adds	r0, #1
 8007e02:	d1dd      	bne.n	8007dc0 <_malloc_r+0x64>
 8007e04:	e7cf      	b.n	8007da6 <_malloc_r+0x4a>
 8007e06:	bf00      	nop
 8007e08:	2000024c 	.word	0x2000024c
 8007e0c:	20000250 	.word	0x20000250

08007e10 <__cvt>:
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e16:	461f      	mov	r7, r3
 8007e18:	bfbb      	ittet	lt
 8007e1a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007e1e:	461f      	movlt	r7, r3
 8007e20:	2300      	movge	r3, #0
 8007e22:	232d      	movlt	r3, #45	; 0x2d
 8007e24:	b088      	sub	sp, #32
 8007e26:	4614      	mov	r4, r2
 8007e28:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e2a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007e2c:	7013      	strb	r3, [r2, #0]
 8007e2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e30:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007e34:	f023 0820 	bic.w	r8, r3, #32
 8007e38:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007e3c:	d005      	beq.n	8007e4a <__cvt+0x3a>
 8007e3e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007e42:	d100      	bne.n	8007e46 <__cvt+0x36>
 8007e44:	3501      	adds	r5, #1
 8007e46:	2302      	movs	r3, #2
 8007e48:	e000      	b.n	8007e4c <__cvt+0x3c>
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	aa07      	add	r2, sp, #28
 8007e4e:	9204      	str	r2, [sp, #16]
 8007e50:	aa06      	add	r2, sp, #24
 8007e52:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007e56:	e9cd 3500 	strd	r3, r5, [sp]
 8007e5a:	4622      	mov	r2, r4
 8007e5c:	463b      	mov	r3, r7
 8007e5e:	f000 fcf7 	bl	8008850 <_dtoa_r>
 8007e62:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007e66:	4606      	mov	r6, r0
 8007e68:	d102      	bne.n	8007e70 <__cvt+0x60>
 8007e6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e6c:	07db      	lsls	r3, r3, #31
 8007e6e:	d522      	bpl.n	8007eb6 <__cvt+0xa6>
 8007e70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007e74:	eb06 0905 	add.w	r9, r6, r5
 8007e78:	d110      	bne.n	8007e9c <__cvt+0x8c>
 8007e7a:	7833      	ldrb	r3, [r6, #0]
 8007e7c:	2b30      	cmp	r3, #48	; 0x30
 8007e7e:	d10a      	bne.n	8007e96 <__cvt+0x86>
 8007e80:	2200      	movs	r2, #0
 8007e82:	2300      	movs	r3, #0
 8007e84:	4620      	mov	r0, r4
 8007e86:	4639      	mov	r1, r7
 8007e88:	f7f8 fd8e 	bl	80009a8 <__aeabi_dcmpeq>
 8007e8c:	b918      	cbnz	r0, 8007e96 <__cvt+0x86>
 8007e8e:	f1c5 0501 	rsb	r5, r5, #1
 8007e92:	f8ca 5000 	str.w	r5, [sl]
 8007e96:	f8da 3000 	ldr.w	r3, [sl]
 8007e9a:	4499      	add	r9, r3
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	4639      	mov	r1, r7
 8007ea4:	f7f8 fd80 	bl	80009a8 <__aeabi_dcmpeq>
 8007ea8:	b108      	cbz	r0, 8007eae <__cvt+0x9e>
 8007eaa:	f8cd 901c 	str.w	r9, [sp, #28]
 8007eae:	2230      	movs	r2, #48	; 0x30
 8007eb0:	9b07      	ldr	r3, [sp, #28]
 8007eb2:	454b      	cmp	r3, r9
 8007eb4:	d307      	bcc.n	8007ec6 <__cvt+0xb6>
 8007eb6:	4630      	mov	r0, r6
 8007eb8:	9b07      	ldr	r3, [sp, #28]
 8007eba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007ebc:	1b9b      	subs	r3, r3, r6
 8007ebe:	6013      	str	r3, [r2, #0]
 8007ec0:	b008      	add	sp, #32
 8007ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ec6:	1c59      	adds	r1, r3, #1
 8007ec8:	9107      	str	r1, [sp, #28]
 8007eca:	701a      	strb	r2, [r3, #0]
 8007ecc:	e7f0      	b.n	8007eb0 <__cvt+0xa0>

08007ece <__exponent>:
 8007ece:	4603      	mov	r3, r0
 8007ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ed2:	2900      	cmp	r1, #0
 8007ed4:	f803 2b02 	strb.w	r2, [r3], #2
 8007ed8:	bfb6      	itet	lt
 8007eda:	222d      	movlt	r2, #45	; 0x2d
 8007edc:	222b      	movge	r2, #43	; 0x2b
 8007ede:	4249      	neglt	r1, r1
 8007ee0:	2909      	cmp	r1, #9
 8007ee2:	7042      	strb	r2, [r0, #1]
 8007ee4:	dd2b      	ble.n	8007f3e <__exponent+0x70>
 8007ee6:	f10d 0407 	add.w	r4, sp, #7
 8007eea:	46a4      	mov	ip, r4
 8007eec:	270a      	movs	r7, #10
 8007eee:	fb91 f6f7 	sdiv	r6, r1, r7
 8007ef2:	460a      	mov	r2, r1
 8007ef4:	46a6      	mov	lr, r4
 8007ef6:	fb07 1516 	mls	r5, r7, r6, r1
 8007efa:	2a63      	cmp	r2, #99	; 0x63
 8007efc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007f00:	4631      	mov	r1, r6
 8007f02:	f104 34ff 	add.w	r4, r4, #4294967295
 8007f06:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007f0a:	dcf0      	bgt.n	8007eee <__exponent+0x20>
 8007f0c:	3130      	adds	r1, #48	; 0x30
 8007f0e:	f1ae 0502 	sub.w	r5, lr, #2
 8007f12:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007f16:	4629      	mov	r1, r5
 8007f18:	1c44      	adds	r4, r0, #1
 8007f1a:	4561      	cmp	r1, ip
 8007f1c:	d30a      	bcc.n	8007f34 <__exponent+0x66>
 8007f1e:	f10d 0209 	add.w	r2, sp, #9
 8007f22:	eba2 020e 	sub.w	r2, r2, lr
 8007f26:	4565      	cmp	r5, ip
 8007f28:	bf88      	it	hi
 8007f2a:	2200      	movhi	r2, #0
 8007f2c:	4413      	add	r3, r2
 8007f2e:	1a18      	subs	r0, r3, r0
 8007f30:	b003      	add	sp, #12
 8007f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f34:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f38:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007f3c:	e7ed      	b.n	8007f1a <__exponent+0x4c>
 8007f3e:	2330      	movs	r3, #48	; 0x30
 8007f40:	3130      	adds	r1, #48	; 0x30
 8007f42:	7083      	strb	r3, [r0, #2]
 8007f44:	70c1      	strb	r1, [r0, #3]
 8007f46:	1d03      	adds	r3, r0, #4
 8007f48:	e7f1      	b.n	8007f2e <__exponent+0x60>
	...

08007f4c <_printf_float>:
 8007f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f50:	b091      	sub	sp, #68	; 0x44
 8007f52:	460c      	mov	r4, r1
 8007f54:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007f58:	4616      	mov	r6, r2
 8007f5a:	461f      	mov	r7, r3
 8007f5c:	4605      	mov	r5, r0
 8007f5e:	f001 fa65 	bl	800942c <_localeconv_r>
 8007f62:	6803      	ldr	r3, [r0, #0]
 8007f64:	4618      	mov	r0, r3
 8007f66:	9309      	str	r3, [sp, #36]	; 0x24
 8007f68:	f7f8 f8f2 	bl	8000150 <strlen>
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	930e      	str	r3, [sp, #56]	; 0x38
 8007f70:	f8d8 3000 	ldr.w	r3, [r8]
 8007f74:	900a      	str	r0, [sp, #40]	; 0x28
 8007f76:	3307      	adds	r3, #7
 8007f78:	f023 0307 	bic.w	r3, r3, #7
 8007f7c:	f103 0208 	add.w	r2, r3, #8
 8007f80:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007f84:	f8d4 b000 	ldr.w	fp, [r4]
 8007f88:	f8c8 2000 	str.w	r2, [r8]
 8007f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f90:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007f94:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007f98:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007f9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8007fa2:	4640      	mov	r0, r8
 8007fa4:	4b9c      	ldr	r3, [pc, #624]	; (8008218 <_printf_float+0x2cc>)
 8007fa6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007fa8:	f7f8 fd30 	bl	8000a0c <__aeabi_dcmpun>
 8007fac:	bb70      	cbnz	r0, 800800c <_printf_float+0xc0>
 8007fae:	f04f 32ff 	mov.w	r2, #4294967295
 8007fb2:	4640      	mov	r0, r8
 8007fb4:	4b98      	ldr	r3, [pc, #608]	; (8008218 <_printf_float+0x2cc>)
 8007fb6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007fb8:	f7f8 fd0a 	bl	80009d0 <__aeabi_dcmple>
 8007fbc:	bb30      	cbnz	r0, 800800c <_printf_float+0xc0>
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	4640      	mov	r0, r8
 8007fc4:	4651      	mov	r1, sl
 8007fc6:	f7f8 fcf9 	bl	80009bc <__aeabi_dcmplt>
 8007fca:	b110      	cbz	r0, 8007fd2 <_printf_float+0x86>
 8007fcc:	232d      	movs	r3, #45	; 0x2d
 8007fce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fd2:	4b92      	ldr	r3, [pc, #584]	; (800821c <_printf_float+0x2d0>)
 8007fd4:	4892      	ldr	r0, [pc, #584]	; (8008220 <_printf_float+0x2d4>)
 8007fd6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007fda:	bf94      	ite	ls
 8007fdc:	4698      	movls	r8, r3
 8007fde:	4680      	movhi	r8, r0
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	f04f 0a00 	mov.w	sl, #0
 8007fe6:	6123      	str	r3, [r4, #16]
 8007fe8:	f02b 0304 	bic.w	r3, fp, #4
 8007fec:	6023      	str	r3, [r4, #0]
 8007fee:	4633      	mov	r3, r6
 8007ff0:	4621      	mov	r1, r4
 8007ff2:	4628      	mov	r0, r5
 8007ff4:	9700      	str	r7, [sp, #0]
 8007ff6:	aa0f      	add	r2, sp, #60	; 0x3c
 8007ff8:	f000 f9d4 	bl	80083a4 <_printf_common>
 8007ffc:	3001      	adds	r0, #1
 8007ffe:	f040 8090 	bne.w	8008122 <_printf_float+0x1d6>
 8008002:	f04f 30ff 	mov.w	r0, #4294967295
 8008006:	b011      	add	sp, #68	; 0x44
 8008008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800800c:	4642      	mov	r2, r8
 800800e:	4653      	mov	r3, sl
 8008010:	4640      	mov	r0, r8
 8008012:	4651      	mov	r1, sl
 8008014:	f7f8 fcfa 	bl	8000a0c <__aeabi_dcmpun>
 8008018:	b148      	cbz	r0, 800802e <_printf_float+0xe2>
 800801a:	f1ba 0f00 	cmp.w	sl, #0
 800801e:	bfb8      	it	lt
 8008020:	232d      	movlt	r3, #45	; 0x2d
 8008022:	4880      	ldr	r0, [pc, #512]	; (8008224 <_printf_float+0x2d8>)
 8008024:	bfb8      	it	lt
 8008026:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800802a:	4b7f      	ldr	r3, [pc, #508]	; (8008228 <_printf_float+0x2dc>)
 800802c:	e7d3      	b.n	8007fd6 <_printf_float+0x8a>
 800802e:	6863      	ldr	r3, [r4, #4]
 8008030:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008034:	1c5a      	adds	r2, r3, #1
 8008036:	d142      	bne.n	80080be <_printf_float+0x172>
 8008038:	2306      	movs	r3, #6
 800803a:	6063      	str	r3, [r4, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	9206      	str	r2, [sp, #24]
 8008040:	aa0e      	add	r2, sp, #56	; 0x38
 8008042:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008046:	aa0d      	add	r2, sp, #52	; 0x34
 8008048:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800804c:	9203      	str	r2, [sp, #12]
 800804e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008052:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008056:	6023      	str	r3, [r4, #0]
 8008058:	6863      	ldr	r3, [r4, #4]
 800805a:	4642      	mov	r2, r8
 800805c:	9300      	str	r3, [sp, #0]
 800805e:	4628      	mov	r0, r5
 8008060:	4653      	mov	r3, sl
 8008062:	910b      	str	r1, [sp, #44]	; 0x2c
 8008064:	f7ff fed4 	bl	8007e10 <__cvt>
 8008068:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800806a:	4680      	mov	r8, r0
 800806c:	2947      	cmp	r1, #71	; 0x47
 800806e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008070:	d108      	bne.n	8008084 <_printf_float+0x138>
 8008072:	1cc8      	adds	r0, r1, #3
 8008074:	db02      	blt.n	800807c <_printf_float+0x130>
 8008076:	6863      	ldr	r3, [r4, #4]
 8008078:	4299      	cmp	r1, r3
 800807a:	dd40      	ble.n	80080fe <_printf_float+0x1b2>
 800807c:	f1a9 0902 	sub.w	r9, r9, #2
 8008080:	fa5f f989 	uxtb.w	r9, r9
 8008084:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008088:	d81f      	bhi.n	80080ca <_printf_float+0x17e>
 800808a:	464a      	mov	r2, r9
 800808c:	3901      	subs	r1, #1
 800808e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008092:	910d      	str	r1, [sp, #52]	; 0x34
 8008094:	f7ff ff1b 	bl	8007ece <__exponent>
 8008098:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800809a:	4682      	mov	sl, r0
 800809c:	1813      	adds	r3, r2, r0
 800809e:	2a01      	cmp	r2, #1
 80080a0:	6123      	str	r3, [r4, #16]
 80080a2:	dc02      	bgt.n	80080aa <_printf_float+0x15e>
 80080a4:	6822      	ldr	r2, [r4, #0]
 80080a6:	07d2      	lsls	r2, r2, #31
 80080a8:	d501      	bpl.n	80080ae <_printf_float+0x162>
 80080aa:	3301      	adds	r3, #1
 80080ac:	6123      	str	r3, [r4, #16]
 80080ae:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d09b      	beq.n	8007fee <_printf_float+0xa2>
 80080b6:	232d      	movs	r3, #45	; 0x2d
 80080b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080bc:	e797      	b.n	8007fee <_printf_float+0xa2>
 80080be:	2947      	cmp	r1, #71	; 0x47
 80080c0:	d1bc      	bne.n	800803c <_printf_float+0xf0>
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d1ba      	bne.n	800803c <_printf_float+0xf0>
 80080c6:	2301      	movs	r3, #1
 80080c8:	e7b7      	b.n	800803a <_printf_float+0xee>
 80080ca:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80080ce:	d118      	bne.n	8008102 <_printf_float+0x1b6>
 80080d0:	2900      	cmp	r1, #0
 80080d2:	6863      	ldr	r3, [r4, #4]
 80080d4:	dd0b      	ble.n	80080ee <_printf_float+0x1a2>
 80080d6:	6121      	str	r1, [r4, #16]
 80080d8:	b913      	cbnz	r3, 80080e0 <_printf_float+0x194>
 80080da:	6822      	ldr	r2, [r4, #0]
 80080dc:	07d0      	lsls	r0, r2, #31
 80080de:	d502      	bpl.n	80080e6 <_printf_float+0x19a>
 80080e0:	3301      	adds	r3, #1
 80080e2:	440b      	add	r3, r1
 80080e4:	6123      	str	r3, [r4, #16]
 80080e6:	f04f 0a00 	mov.w	sl, #0
 80080ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80080ec:	e7df      	b.n	80080ae <_printf_float+0x162>
 80080ee:	b913      	cbnz	r3, 80080f6 <_printf_float+0x1aa>
 80080f0:	6822      	ldr	r2, [r4, #0]
 80080f2:	07d2      	lsls	r2, r2, #31
 80080f4:	d501      	bpl.n	80080fa <_printf_float+0x1ae>
 80080f6:	3302      	adds	r3, #2
 80080f8:	e7f4      	b.n	80080e4 <_printf_float+0x198>
 80080fa:	2301      	movs	r3, #1
 80080fc:	e7f2      	b.n	80080e4 <_printf_float+0x198>
 80080fe:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008102:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008104:	4299      	cmp	r1, r3
 8008106:	db05      	blt.n	8008114 <_printf_float+0x1c8>
 8008108:	6823      	ldr	r3, [r4, #0]
 800810a:	6121      	str	r1, [r4, #16]
 800810c:	07d8      	lsls	r0, r3, #31
 800810e:	d5ea      	bpl.n	80080e6 <_printf_float+0x19a>
 8008110:	1c4b      	adds	r3, r1, #1
 8008112:	e7e7      	b.n	80080e4 <_printf_float+0x198>
 8008114:	2900      	cmp	r1, #0
 8008116:	bfcc      	ite	gt
 8008118:	2201      	movgt	r2, #1
 800811a:	f1c1 0202 	rsble	r2, r1, #2
 800811e:	4413      	add	r3, r2
 8008120:	e7e0      	b.n	80080e4 <_printf_float+0x198>
 8008122:	6823      	ldr	r3, [r4, #0]
 8008124:	055a      	lsls	r2, r3, #21
 8008126:	d407      	bmi.n	8008138 <_printf_float+0x1ec>
 8008128:	6923      	ldr	r3, [r4, #16]
 800812a:	4642      	mov	r2, r8
 800812c:	4631      	mov	r1, r6
 800812e:	4628      	mov	r0, r5
 8008130:	47b8      	blx	r7
 8008132:	3001      	adds	r0, #1
 8008134:	d12b      	bne.n	800818e <_printf_float+0x242>
 8008136:	e764      	b.n	8008002 <_printf_float+0xb6>
 8008138:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800813c:	f240 80dd 	bls.w	80082fa <_printf_float+0x3ae>
 8008140:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008144:	2200      	movs	r2, #0
 8008146:	2300      	movs	r3, #0
 8008148:	f7f8 fc2e 	bl	80009a8 <__aeabi_dcmpeq>
 800814c:	2800      	cmp	r0, #0
 800814e:	d033      	beq.n	80081b8 <_printf_float+0x26c>
 8008150:	2301      	movs	r3, #1
 8008152:	4631      	mov	r1, r6
 8008154:	4628      	mov	r0, r5
 8008156:	4a35      	ldr	r2, [pc, #212]	; (800822c <_printf_float+0x2e0>)
 8008158:	47b8      	blx	r7
 800815a:	3001      	adds	r0, #1
 800815c:	f43f af51 	beq.w	8008002 <_printf_float+0xb6>
 8008160:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008164:	429a      	cmp	r2, r3
 8008166:	db02      	blt.n	800816e <_printf_float+0x222>
 8008168:	6823      	ldr	r3, [r4, #0]
 800816a:	07d8      	lsls	r0, r3, #31
 800816c:	d50f      	bpl.n	800818e <_printf_float+0x242>
 800816e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008172:	4631      	mov	r1, r6
 8008174:	4628      	mov	r0, r5
 8008176:	47b8      	blx	r7
 8008178:	3001      	adds	r0, #1
 800817a:	f43f af42 	beq.w	8008002 <_printf_float+0xb6>
 800817e:	f04f 0800 	mov.w	r8, #0
 8008182:	f104 091a 	add.w	r9, r4, #26
 8008186:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008188:	3b01      	subs	r3, #1
 800818a:	4543      	cmp	r3, r8
 800818c:	dc09      	bgt.n	80081a2 <_printf_float+0x256>
 800818e:	6823      	ldr	r3, [r4, #0]
 8008190:	079b      	lsls	r3, r3, #30
 8008192:	f100 8102 	bmi.w	800839a <_printf_float+0x44e>
 8008196:	68e0      	ldr	r0, [r4, #12]
 8008198:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800819a:	4298      	cmp	r0, r3
 800819c:	bfb8      	it	lt
 800819e:	4618      	movlt	r0, r3
 80081a0:	e731      	b.n	8008006 <_printf_float+0xba>
 80081a2:	2301      	movs	r3, #1
 80081a4:	464a      	mov	r2, r9
 80081a6:	4631      	mov	r1, r6
 80081a8:	4628      	mov	r0, r5
 80081aa:	47b8      	blx	r7
 80081ac:	3001      	adds	r0, #1
 80081ae:	f43f af28 	beq.w	8008002 <_printf_float+0xb6>
 80081b2:	f108 0801 	add.w	r8, r8, #1
 80081b6:	e7e6      	b.n	8008186 <_printf_float+0x23a>
 80081b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	dc38      	bgt.n	8008230 <_printf_float+0x2e4>
 80081be:	2301      	movs	r3, #1
 80081c0:	4631      	mov	r1, r6
 80081c2:	4628      	mov	r0, r5
 80081c4:	4a19      	ldr	r2, [pc, #100]	; (800822c <_printf_float+0x2e0>)
 80081c6:	47b8      	blx	r7
 80081c8:	3001      	adds	r0, #1
 80081ca:	f43f af1a 	beq.w	8008002 <_printf_float+0xb6>
 80081ce:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80081d2:	4313      	orrs	r3, r2
 80081d4:	d102      	bne.n	80081dc <_printf_float+0x290>
 80081d6:	6823      	ldr	r3, [r4, #0]
 80081d8:	07d9      	lsls	r1, r3, #31
 80081da:	d5d8      	bpl.n	800818e <_printf_float+0x242>
 80081dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081e0:	4631      	mov	r1, r6
 80081e2:	4628      	mov	r0, r5
 80081e4:	47b8      	blx	r7
 80081e6:	3001      	adds	r0, #1
 80081e8:	f43f af0b 	beq.w	8008002 <_printf_float+0xb6>
 80081ec:	f04f 0900 	mov.w	r9, #0
 80081f0:	f104 0a1a 	add.w	sl, r4, #26
 80081f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081f6:	425b      	negs	r3, r3
 80081f8:	454b      	cmp	r3, r9
 80081fa:	dc01      	bgt.n	8008200 <_printf_float+0x2b4>
 80081fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081fe:	e794      	b.n	800812a <_printf_float+0x1de>
 8008200:	2301      	movs	r3, #1
 8008202:	4652      	mov	r2, sl
 8008204:	4631      	mov	r1, r6
 8008206:	4628      	mov	r0, r5
 8008208:	47b8      	blx	r7
 800820a:	3001      	adds	r0, #1
 800820c:	f43f aef9 	beq.w	8008002 <_printf_float+0xb6>
 8008210:	f109 0901 	add.w	r9, r9, #1
 8008214:	e7ee      	b.n	80081f4 <_printf_float+0x2a8>
 8008216:	bf00      	nop
 8008218:	7fefffff 	.word	0x7fefffff
 800821c:	0800c040 	.word	0x0800c040
 8008220:	0800c044 	.word	0x0800c044
 8008224:	0800c04c 	.word	0x0800c04c
 8008228:	0800c048 	.word	0x0800c048
 800822c:	0800c050 	.word	0x0800c050
 8008230:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008232:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008234:	429a      	cmp	r2, r3
 8008236:	bfa8      	it	ge
 8008238:	461a      	movge	r2, r3
 800823a:	2a00      	cmp	r2, #0
 800823c:	4691      	mov	r9, r2
 800823e:	dc37      	bgt.n	80082b0 <_printf_float+0x364>
 8008240:	f04f 0b00 	mov.w	fp, #0
 8008244:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008248:	f104 021a 	add.w	r2, r4, #26
 800824c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008250:	ebaa 0309 	sub.w	r3, sl, r9
 8008254:	455b      	cmp	r3, fp
 8008256:	dc33      	bgt.n	80082c0 <_printf_float+0x374>
 8008258:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800825c:	429a      	cmp	r2, r3
 800825e:	db3b      	blt.n	80082d8 <_printf_float+0x38c>
 8008260:	6823      	ldr	r3, [r4, #0]
 8008262:	07da      	lsls	r2, r3, #31
 8008264:	d438      	bmi.n	80082d8 <_printf_float+0x38c>
 8008266:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008268:	990d      	ldr	r1, [sp, #52]	; 0x34
 800826a:	eba2 030a 	sub.w	r3, r2, sl
 800826e:	eba2 0901 	sub.w	r9, r2, r1
 8008272:	4599      	cmp	r9, r3
 8008274:	bfa8      	it	ge
 8008276:	4699      	movge	r9, r3
 8008278:	f1b9 0f00 	cmp.w	r9, #0
 800827c:	dc34      	bgt.n	80082e8 <_printf_float+0x39c>
 800827e:	f04f 0800 	mov.w	r8, #0
 8008282:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008286:	f104 0a1a 	add.w	sl, r4, #26
 800828a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800828e:	1a9b      	subs	r3, r3, r2
 8008290:	eba3 0309 	sub.w	r3, r3, r9
 8008294:	4543      	cmp	r3, r8
 8008296:	f77f af7a 	ble.w	800818e <_printf_float+0x242>
 800829a:	2301      	movs	r3, #1
 800829c:	4652      	mov	r2, sl
 800829e:	4631      	mov	r1, r6
 80082a0:	4628      	mov	r0, r5
 80082a2:	47b8      	blx	r7
 80082a4:	3001      	adds	r0, #1
 80082a6:	f43f aeac 	beq.w	8008002 <_printf_float+0xb6>
 80082aa:	f108 0801 	add.w	r8, r8, #1
 80082ae:	e7ec      	b.n	800828a <_printf_float+0x33e>
 80082b0:	4613      	mov	r3, r2
 80082b2:	4631      	mov	r1, r6
 80082b4:	4642      	mov	r2, r8
 80082b6:	4628      	mov	r0, r5
 80082b8:	47b8      	blx	r7
 80082ba:	3001      	adds	r0, #1
 80082bc:	d1c0      	bne.n	8008240 <_printf_float+0x2f4>
 80082be:	e6a0      	b.n	8008002 <_printf_float+0xb6>
 80082c0:	2301      	movs	r3, #1
 80082c2:	4631      	mov	r1, r6
 80082c4:	4628      	mov	r0, r5
 80082c6:	920b      	str	r2, [sp, #44]	; 0x2c
 80082c8:	47b8      	blx	r7
 80082ca:	3001      	adds	r0, #1
 80082cc:	f43f ae99 	beq.w	8008002 <_printf_float+0xb6>
 80082d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80082d2:	f10b 0b01 	add.w	fp, fp, #1
 80082d6:	e7b9      	b.n	800824c <_printf_float+0x300>
 80082d8:	4631      	mov	r1, r6
 80082da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082de:	4628      	mov	r0, r5
 80082e0:	47b8      	blx	r7
 80082e2:	3001      	adds	r0, #1
 80082e4:	d1bf      	bne.n	8008266 <_printf_float+0x31a>
 80082e6:	e68c      	b.n	8008002 <_printf_float+0xb6>
 80082e8:	464b      	mov	r3, r9
 80082ea:	4631      	mov	r1, r6
 80082ec:	4628      	mov	r0, r5
 80082ee:	eb08 020a 	add.w	r2, r8, sl
 80082f2:	47b8      	blx	r7
 80082f4:	3001      	adds	r0, #1
 80082f6:	d1c2      	bne.n	800827e <_printf_float+0x332>
 80082f8:	e683      	b.n	8008002 <_printf_float+0xb6>
 80082fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082fc:	2a01      	cmp	r2, #1
 80082fe:	dc01      	bgt.n	8008304 <_printf_float+0x3b8>
 8008300:	07db      	lsls	r3, r3, #31
 8008302:	d537      	bpl.n	8008374 <_printf_float+0x428>
 8008304:	2301      	movs	r3, #1
 8008306:	4642      	mov	r2, r8
 8008308:	4631      	mov	r1, r6
 800830a:	4628      	mov	r0, r5
 800830c:	47b8      	blx	r7
 800830e:	3001      	adds	r0, #1
 8008310:	f43f ae77 	beq.w	8008002 <_printf_float+0xb6>
 8008314:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008318:	4631      	mov	r1, r6
 800831a:	4628      	mov	r0, r5
 800831c:	47b8      	blx	r7
 800831e:	3001      	adds	r0, #1
 8008320:	f43f ae6f 	beq.w	8008002 <_printf_float+0xb6>
 8008324:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008328:	2200      	movs	r2, #0
 800832a:	2300      	movs	r3, #0
 800832c:	f7f8 fb3c 	bl	80009a8 <__aeabi_dcmpeq>
 8008330:	b9d8      	cbnz	r0, 800836a <_printf_float+0x41e>
 8008332:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008334:	f108 0201 	add.w	r2, r8, #1
 8008338:	3b01      	subs	r3, #1
 800833a:	4631      	mov	r1, r6
 800833c:	4628      	mov	r0, r5
 800833e:	47b8      	blx	r7
 8008340:	3001      	adds	r0, #1
 8008342:	d10e      	bne.n	8008362 <_printf_float+0x416>
 8008344:	e65d      	b.n	8008002 <_printf_float+0xb6>
 8008346:	2301      	movs	r3, #1
 8008348:	464a      	mov	r2, r9
 800834a:	4631      	mov	r1, r6
 800834c:	4628      	mov	r0, r5
 800834e:	47b8      	blx	r7
 8008350:	3001      	adds	r0, #1
 8008352:	f43f ae56 	beq.w	8008002 <_printf_float+0xb6>
 8008356:	f108 0801 	add.w	r8, r8, #1
 800835a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800835c:	3b01      	subs	r3, #1
 800835e:	4543      	cmp	r3, r8
 8008360:	dcf1      	bgt.n	8008346 <_printf_float+0x3fa>
 8008362:	4653      	mov	r3, sl
 8008364:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008368:	e6e0      	b.n	800812c <_printf_float+0x1e0>
 800836a:	f04f 0800 	mov.w	r8, #0
 800836e:	f104 091a 	add.w	r9, r4, #26
 8008372:	e7f2      	b.n	800835a <_printf_float+0x40e>
 8008374:	2301      	movs	r3, #1
 8008376:	4642      	mov	r2, r8
 8008378:	e7df      	b.n	800833a <_printf_float+0x3ee>
 800837a:	2301      	movs	r3, #1
 800837c:	464a      	mov	r2, r9
 800837e:	4631      	mov	r1, r6
 8008380:	4628      	mov	r0, r5
 8008382:	47b8      	blx	r7
 8008384:	3001      	adds	r0, #1
 8008386:	f43f ae3c 	beq.w	8008002 <_printf_float+0xb6>
 800838a:	f108 0801 	add.w	r8, r8, #1
 800838e:	68e3      	ldr	r3, [r4, #12]
 8008390:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008392:	1a5b      	subs	r3, r3, r1
 8008394:	4543      	cmp	r3, r8
 8008396:	dcf0      	bgt.n	800837a <_printf_float+0x42e>
 8008398:	e6fd      	b.n	8008196 <_printf_float+0x24a>
 800839a:	f04f 0800 	mov.w	r8, #0
 800839e:	f104 0919 	add.w	r9, r4, #25
 80083a2:	e7f4      	b.n	800838e <_printf_float+0x442>

080083a4 <_printf_common>:
 80083a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083a8:	4616      	mov	r6, r2
 80083aa:	4699      	mov	r9, r3
 80083ac:	688a      	ldr	r2, [r1, #8]
 80083ae:	690b      	ldr	r3, [r1, #16]
 80083b0:	4607      	mov	r7, r0
 80083b2:	4293      	cmp	r3, r2
 80083b4:	bfb8      	it	lt
 80083b6:	4613      	movlt	r3, r2
 80083b8:	6033      	str	r3, [r6, #0]
 80083ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80083be:	460c      	mov	r4, r1
 80083c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083c4:	b10a      	cbz	r2, 80083ca <_printf_common+0x26>
 80083c6:	3301      	adds	r3, #1
 80083c8:	6033      	str	r3, [r6, #0]
 80083ca:	6823      	ldr	r3, [r4, #0]
 80083cc:	0699      	lsls	r1, r3, #26
 80083ce:	bf42      	ittt	mi
 80083d0:	6833      	ldrmi	r3, [r6, #0]
 80083d2:	3302      	addmi	r3, #2
 80083d4:	6033      	strmi	r3, [r6, #0]
 80083d6:	6825      	ldr	r5, [r4, #0]
 80083d8:	f015 0506 	ands.w	r5, r5, #6
 80083dc:	d106      	bne.n	80083ec <_printf_common+0x48>
 80083de:	f104 0a19 	add.w	sl, r4, #25
 80083e2:	68e3      	ldr	r3, [r4, #12]
 80083e4:	6832      	ldr	r2, [r6, #0]
 80083e6:	1a9b      	subs	r3, r3, r2
 80083e8:	42ab      	cmp	r3, r5
 80083ea:	dc28      	bgt.n	800843e <_printf_common+0x9a>
 80083ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80083f0:	1e13      	subs	r3, r2, #0
 80083f2:	6822      	ldr	r2, [r4, #0]
 80083f4:	bf18      	it	ne
 80083f6:	2301      	movne	r3, #1
 80083f8:	0692      	lsls	r2, r2, #26
 80083fa:	d42d      	bmi.n	8008458 <_printf_common+0xb4>
 80083fc:	4649      	mov	r1, r9
 80083fe:	4638      	mov	r0, r7
 8008400:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008404:	47c0      	blx	r8
 8008406:	3001      	adds	r0, #1
 8008408:	d020      	beq.n	800844c <_printf_common+0xa8>
 800840a:	6823      	ldr	r3, [r4, #0]
 800840c:	68e5      	ldr	r5, [r4, #12]
 800840e:	f003 0306 	and.w	r3, r3, #6
 8008412:	2b04      	cmp	r3, #4
 8008414:	bf18      	it	ne
 8008416:	2500      	movne	r5, #0
 8008418:	6832      	ldr	r2, [r6, #0]
 800841a:	f04f 0600 	mov.w	r6, #0
 800841e:	68a3      	ldr	r3, [r4, #8]
 8008420:	bf08      	it	eq
 8008422:	1aad      	subeq	r5, r5, r2
 8008424:	6922      	ldr	r2, [r4, #16]
 8008426:	bf08      	it	eq
 8008428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800842c:	4293      	cmp	r3, r2
 800842e:	bfc4      	itt	gt
 8008430:	1a9b      	subgt	r3, r3, r2
 8008432:	18ed      	addgt	r5, r5, r3
 8008434:	341a      	adds	r4, #26
 8008436:	42b5      	cmp	r5, r6
 8008438:	d11a      	bne.n	8008470 <_printf_common+0xcc>
 800843a:	2000      	movs	r0, #0
 800843c:	e008      	b.n	8008450 <_printf_common+0xac>
 800843e:	2301      	movs	r3, #1
 8008440:	4652      	mov	r2, sl
 8008442:	4649      	mov	r1, r9
 8008444:	4638      	mov	r0, r7
 8008446:	47c0      	blx	r8
 8008448:	3001      	adds	r0, #1
 800844a:	d103      	bne.n	8008454 <_printf_common+0xb0>
 800844c:	f04f 30ff 	mov.w	r0, #4294967295
 8008450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008454:	3501      	adds	r5, #1
 8008456:	e7c4      	b.n	80083e2 <_printf_common+0x3e>
 8008458:	2030      	movs	r0, #48	; 0x30
 800845a:	18e1      	adds	r1, r4, r3
 800845c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008460:	1c5a      	adds	r2, r3, #1
 8008462:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008466:	4422      	add	r2, r4
 8008468:	3302      	adds	r3, #2
 800846a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800846e:	e7c5      	b.n	80083fc <_printf_common+0x58>
 8008470:	2301      	movs	r3, #1
 8008472:	4622      	mov	r2, r4
 8008474:	4649      	mov	r1, r9
 8008476:	4638      	mov	r0, r7
 8008478:	47c0      	blx	r8
 800847a:	3001      	adds	r0, #1
 800847c:	d0e6      	beq.n	800844c <_printf_common+0xa8>
 800847e:	3601      	adds	r6, #1
 8008480:	e7d9      	b.n	8008436 <_printf_common+0x92>
	...

08008484 <_printf_i>:
 8008484:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008488:	460c      	mov	r4, r1
 800848a:	7e27      	ldrb	r7, [r4, #24]
 800848c:	4691      	mov	r9, r2
 800848e:	2f78      	cmp	r7, #120	; 0x78
 8008490:	4680      	mov	r8, r0
 8008492:	469a      	mov	sl, r3
 8008494:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008496:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800849a:	d807      	bhi.n	80084ac <_printf_i+0x28>
 800849c:	2f62      	cmp	r7, #98	; 0x62
 800849e:	d80a      	bhi.n	80084b6 <_printf_i+0x32>
 80084a0:	2f00      	cmp	r7, #0
 80084a2:	f000 80d9 	beq.w	8008658 <_printf_i+0x1d4>
 80084a6:	2f58      	cmp	r7, #88	; 0x58
 80084a8:	f000 80a4 	beq.w	80085f4 <_printf_i+0x170>
 80084ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80084b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80084b4:	e03a      	b.n	800852c <_printf_i+0xa8>
 80084b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80084ba:	2b15      	cmp	r3, #21
 80084bc:	d8f6      	bhi.n	80084ac <_printf_i+0x28>
 80084be:	a001      	add	r0, pc, #4	; (adr r0, 80084c4 <_printf_i+0x40>)
 80084c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80084c4:	0800851d 	.word	0x0800851d
 80084c8:	08008531 	.word	0x08008531
 80084cc:	080084ad 	.word	0x080084ad
 80084d0:	080084ad 	.word	0x080084ad
 80084d4:	080084ad 	.word	0x080084ad
 80084d8:	080084ad 	.word	0x080084ad
 80084dc:	08008531 	.word	0x08008531
 80084e0:	080084ad 	.word	0x080084ad
 80084e4:	080084ad 	.word	0x080084ad
 80084e8:	080084ad 	.word	0x080084ad
 80084ec:	080084ad 	.word	0x080084ad
 80084f0:	0800863f 	.word	0x0800863f
 80084f4:	08008561 	.word	0x08008561
 80084f8:	08008621 	.word	0x08008621
 80084fc:	080084ad 	.word	0x080084ad
 8008500:	080084ad 	.word	0x080084ad
 8008504:	08008661 	.word	0x08008661
 8008508:	080084ad 	.word	0x080084ad
 800850c:	08008561 	.word	0x08008561
 8008510:	080084ad 	.word	0x080084ad
 8008514:	080084ad 	.word	0x080084ad
 8008518:	08008629 	.word	0x08008629
 800851c:	680b      	ldr	r3, [r1, #0]
 800851e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008522:	1d1a      	adds	r2, r3, #4
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	600a      	str	r2, [r1, #0]
 8008528:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800852c:	2301      	movs	r3, #1
 800852e:	e0a4      	b.n	800867a <_printf_i+0x1f6>
 8008530:	6825      	ldr	r5, [r4, #0]
 8008532:	6808      	ldr	r0, [r1, #0]
 8008534:	062e      	lsls	r6, r5, #24
 8008536:	f100 0304 	add.w	r3, r0, #4
 800853a:	d50a      	bpl.n	8008552 <_printf_i+0xce>
 800853c:	6805      	ldr	r5, [r0, #0]
 800853e:	600b      	str	r3, [r1, #0]
 8008540:	2d00      	cmp	r5, #0
 8008542:	da03      	bge.n	800854c <_printf_i+0xc8>
 8008544:	232d      	movs	r3, #45	; 0x2d
 8008546:	426d      	negs	r5, r5
 8008548:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800854c:	230a      	movs	r3, #10
 800854e:	485e      	ldr	r0, [pc, #376]	; (80086c8 <_printf_i+0x244>)
 8008550:	e019      	b.n	8008586 <_printf_i+0x102>
 8008552:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008556:	6805      	ldr	r5, [r0, #0]
 8008558:	600b      	str	r3, [r1, #0]
 800855a:	bf18      	it	ne
 800855c:	b22d      	sxthne	r5, r5
 800855e:	e7ef      	b.n	8008540 <_printf_i+0xbc>
 8008560:	680b      	ldr	r3, [r1, #0]
 8008562:	6825      	ldr	r5, [r4, #0]
 8008564:	1d18      	adds	r0, r3, #4
 8008566:	6008      	str	r0, [r1, #0]
 8008568:	0628      	lsls	r0, r5, #24
 800856a:	d501      	bpl.n	8008570 <_printf_i+0xec>
 800856c:	681d      	ldr	r5, [r3, #0]
 800856e:	e002      	b.n	8008576 <_printf_i+0xf2>
 8008570:	0669      	lsls	r1, r5, #25
 8008572:	d5fb      	bpl.n	800856c <_printf_i+0xe8>
 8008574:	881d      	ldrh	r5, [r3, #0]
 8008576:	2f6f      	cmp	r7, #111	; 0x6f
 8008578:	bf0c      	ite	eq
 800857a:	2308      	moveq	r3, #8
 800857c:	230a      	movne	r3, #10
 800857e:	4852      	ldr	r0, [pc, #328]	; (80086c8 <_printf_i+0x244>)
 8008580:	2100      	movs	r1, #0
 8008582:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008586:	6866      	ldr	r6, [r4, #4]
 8008588:	2e00      	cmp	r6, #0
 800858a:	bfa8      	it	ge
 800858c:	6821      	ldrge	r1, [r4, #0]
 800858e:	60a6      	str	r6, [r4, #8]
 8008590:	bfa4      	itt	ge
 8008592:	f021 0104 	bicge.w	r1, r1, #4
 8008596:	6021      	strge	r1, [r4, #0]
 8008598:	b90d      	cbnz	r5, 800859e <_printf_i+0x11a>
 800859a:	2e00      	cmp	r6, #0
 800859c:	d04d      	beq.n	800863a <_printf_i+0x1b6>
 800859e:	4616      	mov	r6, r2
 80085a0:	fbb5 f1f3 	udiv	r1, r5, r3
 80085a4:	fb03 5711 	mls	r7, r3, r1, r5
 80085a8:	5dc7      	ldrb	r7, [r0, r7]
 80085aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80085ae:	462f      	mov	r7, r5
 80085b0:	42bb      	cmp	r3, r7
 80085b2:	460d      	mov	r5, r1
 80085b4:	d9f4      	bls.n	80085a0 <_printf_i+0x11c>
 80085b6:	2b08      	cmp	r3, #8
 80085b8:	d10b      	bne.n	80085d2 <_printf_i+0x14e>
 80085ba:	6823      	ldr	r3, [r4, #0]
 80085bc:	07df      	lsls	r7, r3, #31
 80085be:	d508      	bpl.n	80085d2 <_printf_i+0x14e>
 80085c0:	6923      	ldr	r3, [r4, #16]
 80085c2:	6861      	ldr	r1, [r4, #4]
 80085c4:	4299      	cmp	r1, r3
 80085c6:	bfde      	ittt	le
 80085c8:	2330      	movle	r3, #48	; 0x30
 80085ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 80085ce:	f106 36ff 	addle.w	r6, r6, #4294967295
 80085d2:	1b92      	subs	r2, r2, r6
 80085d4:	6122      	str	r2, [r4, #16]
 80085d6:	464b      	mov	r3, r9
 80085d8:	4621      	mov	r1, r4
 80085da:	4640      	mov	r0, r8
 80085dc:	f8cd a000 	str.w	sl, [sp]
 80085e0:	aa03      	add	r2, sp, #12
 80085e2:	f7ff fedf 	bl	80083a4 <_printf_common>
 80085e6:	3001      	adds	r0, #1
 80085e8:	d14c      	bne.n	8008684 <_printf_i+0x200>
 80085ea:	f04f 30ff 	mov.w	r0, #4294967295
 80085ee:	b004      	add	sp, #16
 80085f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085f4:	4834      	ldr	r0, [pc, #208]	; (80086c8 <_printf_i+0x244>)
 80085f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80085fa:	680e      	ldr	r6, [r1, #0]
 80085fc:	6823      	ldr	r3, [r4, #0]
 80085fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8008602:	061f      	lsls	r7, r3, #24
 8008604:	600e      	str	r6, [r1, #0]
 8008606:	d514      	bpl.n	8008632 <_printf_i+0x1ae>
 8008608:	07d9      	lsls	r1, r3, #31
 800860a:	bf44      	itt	mi
 800860c:	f043 0320 	orrmi.w	r3, r3, #32
 8008610:	6023      	strmi	r3, [r4, #0]
 8008612:	b91d      	cbnz	r5, 800861c <_printf_i+0x198>
 8008614:	6823      	ldr	r3, [r4, #0]
 8008616:	f023 0320 	bic.w	r3, r3, #32
 800861a:	6023      	str	r3, [r4, #0]
 800861c:	2310      	movs	r3, #16
 800861e:	e7af      	b.n	8008580 <_printf_i+0xfc>
 8008620:	6823      	ldr	r3, [r4, #0]
 8008622:	f043 0320 	orr.w	r3, r3, #32
 8008626:	6023      	str	r3, [r4, #0]
 8008628:	2378      	movs	r3, #120	; 0x78
 800862a:	4828      	ldr	r0, [pc, #160]	; (80086cc <_printf_i+0x248>)
 800862c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008630:	e7e3      	b.n	80085fa <_printf_i+0x176>
 8008632:	065e      	lsls	r6, r3, #25
 8008634:	bf48      	it	mi
 8008636:	b2ad      	uxthmi	r5, r5
 8008638:	e7e6      	b.n	8008608 <_printf_i+0x184>
 800863a:	4616      	mov	r6, r2
 800863c:	e7bb      	b.n	80085b6 <_printf_i+0x132>
 800863e:	680b      	ldr	r3, [r1, #0]
 8008640:	6826      	ldr	r6, [r4, #0]
 8008642:	1d1d      	adds	r5, r3, #4
 8008644:	6960      	ldr	r0, [r4, #20]
 8008646:	600d      	str	r5, [r1, #0]
 8008648:	0635      	lsls	r5, r6, #24
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	d501      	bpl.n	8008652 <_printf_i+0x1ce>
 800864e:	6018      	str	r0, [r3, #0]
 8008650:	e002      	b.n	8008658 <_printf_i+0x1d4>
 8008652:	0671      	lsls	r1, r6, #25
 8008654:	d5fb      	bpl.n	800864e <_printf_i+0x1ca>
 8008656:	8018      	strh	r0, [r3, #0]
 8008658:	2300      	movs	r3, #0
 800865a:	4616      	mov	r6, r2
 800865c:	6123      	str	r3, [r4, #16]
 800865e:	e7ba      	b.n	80085d6 <_printf_i+0x152>
 8008660:	680b      	ldr	r3, [r1, #0]
 8008662:	1d1a      	adds	r2, r3, #4
 8008664:	600a      	str	r2, [r1, #0]
 8008666:	681e      	ldr	r6, [r3, #0]
 8008668:	2100      	movs	r1, #0
 800866a:	4630      	mov	r0, r6
 800866c:	6862      	ldr	r2, [r4, #4]
 800866e:	f000 fee1 	bl	8009434 <memchr>
 8008672:	b108      	cbz	r0, 8008678 <_printf_i+0x1f4>
 8008674:	1b80      	subs	r0, r0, r6
 8008676:	6060      	str	r0, [r4, #4]
 8008678:	6863      	ldr	r3, [r4, #4]
 800867a:	6123      	str	r3, [r4, #16]
 800867c:	2300      	movs	r3, #0
 800867e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008682:	e7a8      	b.n	80085d6 <_printf_i+0x152>
 8008684:	4632      	mov	r2, r6
 8008686:	4649      	mov	r1, r9
 8008688:	4640      	mov	r0, r8
 800868a:	6923      	ldr	r3, [r4, #16]
 800868c:	47d0      	blx	sl
 800868e:	3001      	adds	r0, #1
 8008690:	d0ab      	beq.n	80085ea <_printf_i+0x166>
 8008692:	6823      	ldr	r3, [r4, #0]
 8008694:	079b      	lsls	r3, r3, #30
 8008696:	d413      	bmi.n	80086c0 <_printf_i+0x23c>
 8008698:	68e0      	ldr	r0, [r4, #12]
 800869a:	9b03      	ldr	r3, [sp, #12]
 800869c:	4298      	cmp	r0, r3
 800869e:	bfb8      	it	lt
 80086a0:	4618      	movlt	r0, r3
 80086a2:	e7a4      	b.n	80085ee <_printf_i+0x16a>
 80086a4:	2301      	movs	r3, #1
 80086a6:	4632      	mov	r2, r6
 80086a8:	4649      	mov	r1, r9
 80086aa:	4640      	mov	r0, r8
 80086ac:	47d0      	blx	sl
 80086ae:	3001      	adds	r0, #1
 80086b0:	d09b      	beq.n	80085ea <_printf_i+0x166>
 80086b2:	3501      	adds	r5, #1
 80086b4:	68e3      	ldr	r3, [r4, #12]
 80086b6:	9903      	ldr	r1, [sp, #12]
 80086b8:	1a5b      	subs	r3, r3, r1
 80086ba:	42ab      	cmp	r3, r5
 80086bc:	dcf2      	bgt.n	80086a4 <_printf_i+0x220>
 80086be:	e7eb      	b.n	8008698 <_printf_i+0x214>
 80086c0:	2500      	movs	r5, #0
 80086c2:	f104 0619 	add.w	r6, r4, #25
 80086c6:	e7f5      	b.n	80086b4 <_printf_i+0x230>
 80086c8:	0800c052 	.word	0x0800c052
 80086cc:	0800c063 	.word	0x0800c063

080086d0 <_sbrk_r>:
 80086d0:	b538      	push	{r3, r4, r5, lr}
 80086d2:	2300      	movs	r3, #0
 80086d4:	4d05      	ldr	r5, [pc, #20]	; (80086ec <_sbrk_r+0x1c>)
 80086d6:	4604      	mov	r4, r0
 80086d8:	4608      	mov	r0, r1
 80086da:	602b      	str	r3, [r5, #0]
 80086dc:	f7f9 fc3c 	bl	8001f58 <_sbrk>
 80086e0:	1c43      	adds	r3, r0, #1
 80086e2:	d102      	bne.n	80086ea <_sbrk_r+0x1a>
 80086e4:	682b      	ldr	r3, [r5, #0]
 80086e6:	b103      	cbz	r3, 80086ea <_sbrk_r+0x1a>
 80086e8:	6023      	str	r3, [r4, #0]
 80086ea:	bd38      	pop	{r3, r4, r5, pc}
 80086ec:	20000470 	.word	0x20000470

080086f0 <siprintf>:
 80086f0:	b40e      	push	{r1, r2, r3}
 80086f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086f6:	b500      	push	{lr}
 80086f8:	b09c      	sub	sp, #112	; 0x70
 80086fa:	ab1d      	add	r3, sp, #116	; 0x74
 80086fc:	9002      	str	r0, [sp, #8]
 80086fe:	9006      	str	r0, [sp, #24]
 8008700:	9107      	str	r1, [sp, #28]
 8008702:	9104      	str	r1, [sp, #16]
 8008704:	4808      	ldr	r0, [pc, #32]	; (8008728 <siprintf+0x38>)
 8008706:	4909      	ldr	r1, [pc, #36]	; (800872c <siprintf+0x3c>)
 8008708:	f853 2b04 	ldr.w	r2, [r3], #4
 800870c:	9105      	str	r1, [sp, #20]
 800870e:	6800      	ldr	r0, [r0, #0]
 8008710:	a902      	add	r1, sp, #8
 8008712:	9301      	str	r3, [sp, #4]
 8008714:	f001 fa94 	bl	8009c40 <_svfiprintf_r>
 8008718:	2200      	movs	r2, #0
 800871a:	9b02      	ldr	r3, [sp, #8]
 800871c:	701a      	strb	r2, [r3, #0]
 800871e:	b01c      	add	sp, #112	; 0x70
 8008720:	f85d eb04 	ldr.w	lr, [sp], #4
 8008724:	b003      	add	sp, #12
 8008726:	4770      	bx	lr
 8008728:	2000001c 	.word	0x2000001c
 800872c:	ffff0208 	.word	0xffff0208

08008730 <quorem>:
 8008730:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008734:	6903      	ldr	r3, [r0, #16]
 8008736:	690c      	ldr	r4, [r1, #16]
 8008738:	4607      	mov	r7, r0
 800873a:	42a3      	cmp	r3, r4
 800873c:	f2c0 8083 	blt.w	8008846 <quorem+0x116>
 8008740:	3c01      	subs	r4, #1
 8008742:	f100 0514 	add.w	r5, r0, #20
 8008746:	f101 0814 	add.w	r8, r1, #20
 800874a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800874e:	9301      	str	r3, [sp, #4]
 8008750:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008754:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008758:	3301      	adds	r3, #1
 800875a:	429a      	cmp	r2, r3
 800875c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008760:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008764:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008768:	d332      	bcc.n	80087d0 <quorem+0xa0>
 800876a:	f04f 0e00 	mov.w	lr, #0
 800876e:	4640      	mov	r0, r8
 8008770:	46ac      	mov	ip, r5
 8008772:	46f2      	mov	sl, lr
 8008774:	f850 2b04 	ldr.w	r2, [r0], #4
 8008778:	b293      	uxth	r3, r2
 800877a:	fb06 e303 	mla	r3, r6, r3, lr
 800877e:	0c12      	lsrs	r2, r2, #16
 8008780:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008784:	fb06 e202 	mla	r2, r6, r2, lr
 8008788:	b29b      	uxth	r3, r3
 800878a:	ebaa 0303 	sub.w	r3, sl, r3
 800878e:	f8dc a000 	ldr.w	sl, [ip]
 8008792:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008796:	fa1f fa8a 	uxth.w	sl, sl
 800879a:	4453      	add	r3, sl
 800879c:	fa1f fa82 	uxth.w	sl, r2
 80087a0:	f8dc 2000 	ldr.w	r2, [ip]
 80087a4:	4581      	cmp	r9, r0
 80087a6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80087aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087b4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80087b8:	f84c 3b04 	str.w	r3, [ip], #4
 80087bc:	d2da      	bcs.n	8008774 <quorem+0x44>
 80087be:	f855 300b 	ldr.w	r3, [r5, fp]
 80087c2:	b92b      	cbnz	r3, 80087d0 <quorem+0xa0>
 80087c4:	9b01      	ldr	r3, [sp, #4]
 80087c6:	3b04      	subs	r3, #4
 80087c8:	429d      	cmp	r5, r3
 80087ca:	461a      	mov	r2, r3
 80087cc:	d32f      	bcc.n	800882e <quorem+0xfe>
 80087ce:	613c      	str	r4, [r7, #16]
 80087d0:	4638      	mov	r0, r7
 80087d2:	f001 f8c3 	bl	800995c <__mcmp>
 80087d6:	2800      	cmp	r0, #0
 80087d8:	db25      	blt.n	8008826 <quorem+0xf6>
 80087da:	4628      	mov	r0, r5
 80087dc:	f04f 0c00 	mov.w	ip, #0
 80087e0:	3601      	adds	r6, #1
 80087e2:	f858 1b04 	ldr.w	r1, [r8], #4
 80087e6:	f8d0 e000 	ldr.w	lr, [r0]
 80087ea:	b28b      	uxth	r3, r1
 80087ec:	ebac 0303 	sub.w	r3, ip, r3
 80087f0:	fa1f f28e 	uxth.w	r2, lr
 80087f4:	4413      	add	r3, r2
 80087f6:	0c0a      	lsrs	r2, r1, #16
 80087f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80087fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008800:	b29b      	uxth	r3, r3
 8008802:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008806:	45c1      	cmp	r9, r8
 8008808:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800880c:	f840 3b04 	str.w	r3, [r0], #4
 8008810:	d2e7      	bcs.n	80087e2 <quorem+0xb2>
 8008812:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008816:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800881a:	b922      	cbnz	r2, 8008826 <quorem+0xf6>
 800881c:	3b04      	subs	r3, #4
 800881e:	429d      	cmp	r5, r3
 8008820:	461a      	mov	r2, r3
 8008822:	d30a      	bcc.n	800883a <quorem+0x10a>
 8008824:	613c      	str	r4, [r7, #16]
 8008826:	4630      	mov	r0, r6
 8008828:	b003      	add	sp, #12
 800882a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800882e:	6812      	ldr	r2, [r2, #0]
 8008830:	3b04      	subs	r3, #4
 8008832:	2a00      	cmp	r2, #0
 8008834:	d1cb      	bne.n	80087ce <quorem+0x9e>
 8008836:	3c01      	subs	r4, #1
 8008838:	e7c6      	b.n	80087c8 <quorem+0x98>
 800883a:	6812      	ldr	r2, [r2, #0]
 800883c:	3b04      	subs	r3, #4
 800883e:	2a00      	cmp	r2, #0
 8008840:	d1f0      	bne.n	8008824 <quorem+0xf4>
 8008842:	3c01      	subs	r4, #1
 8008844:	e7eb      	b.n	800881e <quorem+0xee>
 8008846:	2000      	movs	r0, #0
 8008848:	e7ee      	b.n	8008828 <quorem+0xf8>
 800884a:	0000      	movs	r0, r0
 800884c:	0000      	movs	r0, r0
	...

08008850 <_dtoa_r>:
 8008850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008854:	4616      	mov	r6, r2
 8008856:	461f      	mov	r7, r3
 8008858:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800885a:	b099      	sub	sp, #100	; 0x64
 800885c:	4605      	mov	r5, r0
 800885e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008862:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008866:	b974      	cbnz	r4, 8008886 <_dtoa_r+0x36>
 8008868:	2010      	movs	r0, #16
 800886a:	f7ff fa0d 	bl	8007c88 <malloc>
 800886e:	4602      	mov	r2, r0
 8008870:	6268      	str	r0, [r5, #36]	; 0x24
 8008872:	b920      	cbnz	r0, 800887e <_dtoa_r+0x2e>
 8008874:	21ea      	movs	r1, #234	; 0xea
 8008876:	4bae      	ldr	r3, [pc, #696]	; (8008b30 <_dtoa_r+0x2e0>)
 8008878:	48ae      	ldr	r0, [pc, #696]	; (8008b34 <_dtoa_r+0x2e4>)
 800887a:	f001 fae1 	bl	8009e40 <__assert_func>
 800887e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008882:	6004      	str	r4, [r0, #0]
 8008884:	60c4      	str	r4, [r0, #12]
 8008886:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008888:	6819      	ldr	r1, [r3, #0]
 800888a:	b151      	cbz	r1, 80088a2 <_dtoa_r+0x52>
 800888c:	685a      	ldr	r2, [r3, #4]
 800888e:	2301      	movs	r3, #1
 8008890:	4093      	lsls	r3, r2
 8008892:	604a      	str	r2, [r1, #4]
 8008894:	608b      	str	r3, [r1, #8]
 8008896:	4628      	mov	r0, r5
 8008898:	f000 fe26 	bl	80094e8 <_Bfree>
 800889c:	2200      	movs	r2, #0
 800889e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80088a0:	601a      	str	r2, [r3, #0]
 80088a2:	1e3b      	subs	r3, r7, #0
 80088a4:	bfaf      	iteee	ge
 80088a6:	2300      	movge	r3, #0
 80088a8:	2201      	movlt	r2, #1
 80088aa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80088ae:	9305      	strlt	r3, [sp, #20]
 80088b0:	bfa8      	it	ge
 80088b2:	f8c8 3000 	strge.w	r3, [r8]
 80088b6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80088ba:	4b9f      	ldr	r3, [pc, #636]	; (8008b38 <_dtoa_r+0x2e8>)
 80088bc:	bfb8      	it	lt
 80088be:	f8c8 2000 	strlt.w	r2, [r8]
 80088c2:	ea33 0309 	bics.w	r3, r3, r9
 80088c6:	d119      	bne.n	80088fc <_dtoa_r+0xac>
 80088c8:	f242 730f 	movw	r3, #9999	; 0x270f
 80088cc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80088ce:	6013      	str	r3, [r2, #0]
 80088d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80088d4:	4333      	orrs	r3, r6
 80088d6:	f000 8580 	beq.w	80093da <_dtoa_r+0xb8a>
 80088da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80088dc:	b953      	cbnz	r3, 80088f4 <_dtoa_r+0xa4>
 80088de:	4b97      	ldr	r3, [pc, #604]	; (8008b3c <_dtoa_r+0x2ec>)
 80088e0:	e022      	b.n	8008928 <_dtoa_r+0xd8>
 80088e2:	4b97      	ldr	r3, [pc, #604]	; (8008b40 <_dtoa_r+0x2f0>)
 80088e4:	9308      	str	r3, [sp, #32]
 80088e6:	3308      	adds	r3, #8
 80088e8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80088ea:	6013      	str	r3, [r2, #0]
 80088ec:	9808      	ldr	r0, [sp, #32]
 80088ee:	b019      	add	sp, #100	; 0x64
 80088f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088f4:	4b91      	ldr	r3, [pc, #580]	; (8008b3c <_dtoa_r+0x2ec>)
 80088f6:	9308      	str	r3, [sp, #32]
 80088f8:	3303      	adds	r3, #3
 80088fa:	e7f5      	b.n	80088e8 <_dtoa_r+0x98>
 80088fc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008900:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008904:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008908:	2200      	movs	r2, #0
 800890a:	2300      	movs	r3, #0
 800890c:	f7f8 f84c 	bl	80009a8 <__aeabi_dcmpeq>
 8008910:	4680      	mov	r8, r0
 8008912:	b158      	cbz	r0, 800892c <_dtoa_r+0xdc>
 8008914:	2301      	movs	r3, #1
 8008916:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008918:	6013      	str	r3, [r2, #0]
 800891a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800891c:	2b00      	cmp	r3, #0
 800891e:	f000 8559 	beq.w	80093d4 <_dtoa_r+0xb84>
 8008922:	4888      	ldr	r0, [pc, #544]	; (8008b44 <_dtoa_r+0x2f4>)
 8008924:	6018      	str	r0, [r3, #0]
 8008926:	1e43      	subs	r3, r0, #1
 8008928:	9308      	str	r3, [sp, #32]
 800892a:	e7df      	b.n	80088ec <_dtoa_r+0x9c>
 800892c:	ab16      	add	r3, sp, #88	; 0x58
 800892e:	9301      	str	r3, [sp, #4]
 8008930:	ab17      	add	r3, sp, #92	; 0x5c
 8008932:	9300      	str	r3, [sp, #0]
 8008934:	4628      	mov	r0, r5
 8008936:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800893a:	f001 f8bb 	bl	8009ab4 <__d2b>
 800893e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008942:	4682      	mov	sl, r0
 8008944:	2c00      	cmp	r4, #0
 8008946:	d07e      	beq.n	8008a46 <_dtoa_r+0x1f6>
 8008948:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800894c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800894e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008952:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008956:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800895a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800895e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008962:	2200      	movs	r2, #0
 8008964:	4b78      	ldr	r3, [pc, #480]	; (8008b48 <_dtoa_r+0x2f8>)
 8008966:	f7f7 fbff 	bl	8000168 <__aeabi_dsub>
 800896a:	a36b      	add	r3, pc, #428	; (adr r3, 8008b18 <_dtoa_r+0x2c8>)
 800896c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008970:	f7f7 fdb2 	bl	80004d8 <__aeabi_dmul>
 8008974:	a36a      	add	r3, pc, #424	; (adr r3, 8008b20 <_dtoa_r+0x2d0>)
 8008976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800897a:	f7f7 fbf7 	bl	800016c <__adddf3>
 800897e:	4606      	mov	r6, r0
 8008980:	4620      	mov	r0, r4
 8008982:	460f      	mov	r7, r1
 8008984:	f7f7 fd3e 	bl	8000404 <__aeabi_i2d>
 8008988:	a367      	add	r3, pc, #412	; (adr r3, 8008b28 <_dtoa_r+0x2d8>)
 800898a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898e:	f7f7 fda3 	bl	80004d8 <__aeabi_dmul>
 8008992:	4602      	mov	r2, r0
 8008994:	460b      	mov	r3, r1
 8008996:	4630      	mov	r0, r6
 8008998:	4639      	mov	r1, r7
 800899a:	f7f7 fbe7 	bl	800016c <__adddf3>
 800899e:	4606      	mov	r6, r0
 80089a0:	460f      	mov	r7, r1
 80089a2:	f7f8 f849 	bl	8000a38 <__aeabi_d2iz>
 80089a6:	2200      	movs	r2, #0
 80089a8:	4681      	mov	r9, r0
 80089aa:	2300      	movs	r3, #0
 80089ac:	4630      	mov	r0, r6
 80089ae:	4639      	mov	r1, r7
 80089b0:	f7f8 f804 	bl	80009bc <__aeabi_dcmplt>
 80089b4:	b148      	cbz	r0, 80089ca <_dtoa_r+0x17a>
 80089b6:	4648      	mov	r0, r9
 80089b8:	f7f7 fd24 	bl	8000404 <__aeabi_i2d>
 80089bc:	4632      	mov	r2, r6
 80089be:	463b      	mov	r3, r7
 80089c0:	f7f7 fff2 	bl	80009a8 <__aeabi_dcmpeq>
 80089c4:	b908      	cbnz	r0, 80089ca <_dtoa_r+0x17a>
 80089c6:	f109 39ff 	add.w	r9, r9, #4294967295
 80089ca:	f1b9 0f16 	cmp.w	r9, #22
 80089ce:	d857      	bhi.n	8008a80 <_dtoa_r+0x230>
 80089d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80089d4:	4b5d      	ldr	r3, [pc, #372]	; (8008b4c <_dtoa_r+0x2fc>)
 80089d6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80089da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089de:	f7f7 ffed 	bl	80009bc <__aeabi_dcmplt>
 80089e2:	2800      	cmp	r0, #0
 80089e4:	d04e      	beq.n	8008a84 <_dtoa_r+0x234>
 80089e6:	2300      	movs	r3, #0
 80089e8:	f109 39ff 	add.w	r9, r9, #4294967295
 80089ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80089ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80089f0:	1b1c      	subs	r4, r3, r4
 80089f2:	1e63      	subs	r3, r4, #1
 80089f4:	9309      	str	r3, [sp, #36]	; 0x24
 80089f6:	bf49      	itett	mi
 80089f8:	f1c4 0301 	rsbmi	r3, r4, #1
 80089fc:	2300      	movpl	r3, #0
 80089fe:	9306      	strmi	r3, [sp, #24]
 8008a00:	2300      	movmi	r3, #0
 8008a02:	bf54      	ite	pl
 8008a04:	9306      	strpl	r3, [sp, #24]
 8008a06:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008a08:	f1b9 0f00 	cmp.w	r9, #0
 8008a0c:	db3c      	blt.n	8008a88 <_dtoa_r+0x238>
 8008a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a10:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008a14:	444b      	add	r3, r9
 8008a16:	9309      	str	r3, [sp, #36]	; 0x24
 8008a18:	2300      	movs	r3, #0
 8008a1a:	930a      	str	r3, [sp, #40]	; 0x28
 8008a1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a1e:	2b09      	cmp	r3, #9
 8008a20:	d86c      	bhi.n	8008afc <_dtoa_r+0x2ac>
 8008a22:	2b05      	cmp	r3, #5
 8008a24:	bfc4      	itt	gt
 8008a26:	3b04      	subgt	r3, #4
 8008a28:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008a2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a2c:	bfc8      	it	gt
 8008a2e:	2400      	movgt	r4, #0
 8008a30:	f1a3 0302 	sub.w	r3, r3, #2
 8008a34:	bfd8      	it	le
 8008a36:	2401      	movle	r4, #1
 8008a38:	2b03      	cmp	r3, #3
 8008a3a:	f200 808b 	bhi.w	8008b54 <_dtoa_r+0x304>
 8008a3e:	e8df f003 	tbb	[pc, r3]
 8008a42:	4f2d      	.short	0x4f2d
 8008a44:	5b4d      	.short	0x5b4d
 8008a46:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008a4a:	441c      	add	r4, r3
 8008a4c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008a50:	2b20      	cmp	r3, #32
 8008a52:	bfc3      	ittte	gt
 8008a54:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008a58:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008a5c:	fa09 f303 	lslgt.w	r3, r9, r3
 8008a60:	f1c3 0320 	rsble	r3, r3, #32
 8008a64:	bfc6      	itte	gt
 8008a66:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008a6a:	4318      	orrgt	r0, r3
 8008a6c:	fa06 f003 	lslle.w	r0, r6, r3
 8008a70:	f7f7 fcb8 	bl	80003e4 <__aeabi_ui2d>
 8008a74:	2301      	movs	r3, #1
 8008a76:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008a7a:	3c01      	subs	r4, #1
 8008a7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8008a7e:	e770      	b.n	8008962 <_dtoa_r+0x112>
 8008a80:	2301      	movs	r3, #1
 8008a82:	e7b3      	b.n	80089ec <_dtoa_r+0x19c>
 8008a84:	900f      	str	r0, [sp, #60]	; 0x3c
 8008a86:	e7b2      	b.n	80089ee <_dtoa_r+0x19e>
 8008a88:	9b06      	ldr	r3, [sp, #24]
 8008a8a:	eba3 0309 	sub.w	r3, r3, r9
 8008a8e:	9306      	str	r3, [sp, #24]
 8008a90:	f1c9 0300 	rsb	r3, r9, #0
 8008a94:	930a      	str	r3, [sp, #40]	; 0x28
 8008a96:	2300      	movs	r3, #0
 8008a98:	930e      	str	r3, [sp, #56]	; 0x38
 8008a9a:	e7bf      	b.n	8008a1c <_dtoa_r+0x1cc>
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008aa0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	dc59      	bgt.n	8008b5a <_dtoa_r+0x30a>
 8008aa6:	f04f 0b01 	mov.w	fp, #1
 8008aaa:	465b      	mov	r3, fp
 8008aac:	f8cd b008 	str.w	fp, [sp, #8]
 8008ab0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008ab8:	6042      	str	r2, [r0, #4]
 8008aba:	2204      	movs	r2, #4
 8008abc:	f102 0614 	add.w	r6, r2, #20
 8008ac0:	429e      	cmp	r6, r3
 8008ac2:	6841      	ldr	r1, [r0, #4]
 8008ac4:	d94f      	bls.n	8008b66 <_dtoa_r+0x316>
 8008ac6:	4628      	mov	r0, r5
 8008ac8:	f000 fcce 	bl	8009468 <_Balloc>
 8008acc:	9008      	str	r0, [sp, #32]
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	d14d      	bne.n	8008b6e <_dtoa_r+0x31e>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008ad8:	4b1d      	ldr	r3, [pc, #116]	; (8008b50 <_dtoa_r+0x300>)
 8008ada:	e6cd      	b.n	8008878 <_dtoa_r+0x28>
 8008adc:	2301      	movs	r3, #1
 8008ade:	e7de      	b.n	8008a9e <_dtoa_r+0x24e>
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ae4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008ae6:	eb09 0b03 	add.w	fp, r9, r3
 8008aea:	f10b 0301 	add.w	r3, fp, #1
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	9302      	str	r3, [sp, #8]
 8008af2:	bfb8      	it	lt
 8008af4:	2301      	movlt	r3, #1
 8008af6:	e7dd      	b.n	8008ab4 <_dtoa_r+0x264>
 8008af8:	2301      	movs	r3, #1
 8008afa:	e7f2      	b.n	8008ae2 <_dtoa_r+0x292>
 8008afc:	2401      	movs	r4, #1
 8008afe:	2300      	movs	r3, #0
 8008b00:	940b      	str	r4, [sp, #44]	; 0x2c
 8008b02:	9322      	str	r3, [sp, #136]	; 0x88
 8008b04:	f04f 3bff 	mov.w	fp, #4294967295
 8008b08:	2200      	movs	r2, #0
 8008b0a:	2312      	movs	r3, #18
 8008b0c:	f8cd b008 	str.w	fp, [sp, #8]
 8008b10:	9223      	str	r2, [sp, #140]	; 0x8c
 8008b12:	e7cf      	b.n	8008ab4 <_dtoa_r+0x264>
 8008b14:	f3af 8000 	nop.w
 8008b18:	636f4361 	.word	0x636f4361
 8008b1c:	3fd287a7 	.word	0x3fd287a7
 8008b20:	8b60c8b3 	.word	0x8b60c8b3
 8008b24:	3fc68a28 	.word	0x3fc68a28
 8008b28:	509f79fb 	.word	0x509f79fb
 8008b2c:	3fd34413 	.word	0x3fd34413
 8008b30:	0800c081 	.word	0x0800c081
 8008b34:	0800c098 	.word	0x0800c098
 8008b38:	7ff00000 	.word	0x7ff00000
 8008b3c:	0800c07d 	.word	0x0800c07d
 8008b40:	0800c074 	.word	0x0800c074
 8008b44:	0800c051 	.word	0x0800c051
 8008b48:	3ff80000 	.word	0x3ff80000
 8008b4c:	0800c190 	.word	0x0800c190
 8008b50:	0800c0f7 	.word	0x0800c0f7
 8008b54:	2301      	movs	r3, #1
 8008b56:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b58:	e7d4      	b.n	8008b04 <_dtoa_r+0x2b4>
 8008b5a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8008b5e:	465b      	mov	r3, fp
 8008b60:	f8cd b008 	str.w	fp, [sp, #8]
 8008b64:	e7a6      	b.n	8008ab4 <_dtoa_r+0x264>
 8008b66:	3101      	adds	r1, #1
 8008b68:	6041      	str	r1, [r0, #4]
 8008b6a:	0052      	lsls	r2, r2, #1
 8008b6c:	e7a6      	b.n	8008abc <_dtoa_r+0x26c>
 8008b6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008b70:	9a08      	ldr	r2, [sp, #32]
 8008b72:	601a      	str	r2, [r3, #0]
 8008b74:	9b02      	ldr	r3, [sp, #8]
 8008b76:	2b0e      	cmp	r3, #14
 8008b78:	f200 80a8 	bhi.w	8008ccc <_dtoa_r+0x47c>
 8008b7c:	2c00      	cmp	r4, #0
 8008b7e:	f000 80a5 	beq.w	8008ccc <_dtoa_r+0x47c>
 8008b82:	f1b9 0f00 	cmp.w	r9, #0
 8008b86:	dd34      	ble.n	8008bf2 <_dtoa_r+0x3a2>
 8008b88:	4a9a      	ldr	r2, [pc, #616]	; (8008df4 <_dtoa_r+0x5a4>)
 8008b8a:	f009 030f 	and.w	r3, r9, #15
 8008b8e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008b92:	f419 7f80 	tst.w	r9, #256	; 0x100
 8008b96:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008b9a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008b9e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8008ba2:	d016      	beq.n	8008bd2 <_dtoa_r+0x382>
 8008ba4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008ba8:	4b93      	ldr	r3, [pc, #588]	; (8008df8 <_dtoa_r+0x5a8>)
 8008baa:	2703      	movs	r7, #3
 8008bac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008bb0:	f7f7 fdbc 	bl	800072c <__aeabi_ddiv>
 8008bb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008bb8:	f004 040f 	and.w	r4, r4, #15
 8008bbc:	4e8e      	ldr	r6, [pc, #568]	; (8008df8 <_dtoa_r+0x5a8>)
 8008bbe:	b954      	cbnz	r4, 8008bd6 <_dtoa_r+0x386>
 8008bc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008bc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bc8:	f7f7 fdb0 	bl	800072c <__aeabi_ddiv>
 8008bcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008bd0:	e029      	b.n	8008c26 <_dtoa_r+0x3d6>
 8008bd2:	2702      	movs	r7, #2
 8008bd4:	e7f2      	b.n	8008bbc <_dtoa_r+0x36c>
 8008bd6:	07e1      	lsls	r1, r4, #31
 8008bd8:	d508      	bpl.n	8008bec <_dtoa_r+0x39c>
 8008bda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008bde:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008be2:	f7f7 fc79 	bl	80004d8 <__aeabi_dmul>
 8008be6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008bea:	3701      	adds	r7, #1
 8008bec:	1064      	asrs	r4, r4, #1
 8008bee:	3608      	adds	r6, #8
 8008bf0:	e7e5      	b.n	8008bbe <_dtoa_r+0x36e>
 8008bf2:	f000 80a5 	beq.w	8008d40 <_dtoa_r+0x4f0>
 8008bf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008bfa:	f1c9 0400 	rsb	r4, r9, #0
 8008bfe:	4b7d      	ldr	r3, [pc, #500]	; (8008df4 <_dtoa_r+0x5a4>)
 8008c00:	f004 020f 	and.w	r2, r4, #15
 8008c04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0c:	f7f7 fc64 	bl	80004d8 <__aeabi_dmul>
 8008c10:	2702      	movs	r7, #2
 8008c12:	2300      	movs	r3, #0
 8008c14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c18:	4e77      	ldr	r6, [pc, #476]	; (8008df8 <_dtoa_r+0x5a8>)
 8008c1a:	1124      	asrs	r4, r4, #4
 8008c1c:	2c00      	cmp	r4, #0
 8008c1e:	f040 8084 	bne.w	8008d2a <_dtoa_r+0x4da>
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d1d2      	bne.n	8008bcc <_dtoa_r+0x37c>
 8008c26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	f000 808b 	beq.w	8008d44 <_dtoa_r+0x4f4>
 8008c2e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008c32:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008c36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	4b6f      	ldr	r3, [pc, #444]	; (8008dfc <_dtoa_r+0x5ac>)
 8008c3e:	f7f7 febd 	bl	80009bc <__aeabi_dcmplt>
 8008c42:	2800      	cmp	r0, #0
 8008c44:	d07e      	beq.n	8008d44 <_dtoa_r+0x4f4>
 8008c46:	9b02      	ldr	r3, [sp, #8]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d07b      	beq.n	8008d44 <_dtoa_r+0x4f4>
 8008c4c:	f1bb 0f00 	cmp.w	fp, #0
 8008c50:	dd38      	ble.n	8008cc4 <_dtoa_r+0x474>
 8008c52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008c56:	2200      	movs	r2, #0
 8008c58:	4b69      	ldr	r3, [pc, #420]	; (8008e00 <_dtoa_r+0x5b0>)
 8008c5a:	f7f7 fc3d 	bl	80004d8 <__aeabi_dmul>
 8008c5e:	465c      	mov	r4, fp
 8008c60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c64:	f109 38ff 	add.w	r8, r9, #4294967295
 8008c68:	3701      	adds	r7, #1
 8008c6a:	4638      	mov	r0, r7
 8008c6c:	f7f7 fbca 	bl	8000404 <__aeabi_i2d>
 8008c70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c74:	f7f7 fc30 	bl	80004d8 <__aeabi_dmul>
 8008c78:	2200      	movs	r2, #0
 8008c7a:	4b62      	ldr	r3, [pc, #392]	; (8008e04 <_dtoa_r+0x5b4>)
 8008c7c:	f7f7 fa76 	bl	800016c <__adddf3>
 8008c80:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008c84:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008c88:	9611      	str	r6, [sp, #68]	; 0x44
 8008c8a:	2c00      	cmp	r4, #0
 8008c8c:	d15d      	bne.n	8008d4a <_dtoa_r+0x4fa>
 8008c8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c92:	2200      	movs	r2, #0
 8008c94:	4b5c      	ldr	r3, [pc, #368]	; (8008e08 <_dtoa_r+0x5b8>)
 8008c96:	f7f7 fa67 	bl	8000168 <__aeabi_dsub>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008ca2:	4633      	mov	r3, r6
 8008ca4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008ca6:	f7f7 fea7 	bl	80009f8 <__aeabi_dcmpgt>
 8008caa:	2800      	cmp	r0, #0
 8008cac:	f040 829e 	bne.w	80091ec <_dtoa_r+0x99c>
 8008cb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008cb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008cb6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008cba:	f7f7 fe7f 	bl	80009bc <__aeabi_dcmplt>
 8008cbe:	2800      	cmp	r0, #0
 8008cc0:	f040 8292 	bne.w	80091e8 <_dtoa_r+0x998>
 8008cc4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008cc8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008ccc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	f2c0 8153 	blt.w	8008f7a <_dtoa_r+0x72a>
 8008cd4:	f1b9 0f0e 	cmp.w	r9, #14
 8008cd8:	f300 814f 	bgt.w	8008f7a <_dtoa_r+0x72a>
 8008cdc:	4b45      	ldr	r3, [pc, #276]	; (8008df4 <_dtoa_r+0x5a4>)
 8008cde:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008ce2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008ce6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008cea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	f280 80db 	bge.w	8008ea8 <_dtoa_r+0x658>
 8008cf2:	9b02      	ldr	r3, [sp, #8]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	f300 80d7 	bgt.w	8008ea8 <_dtoa_r+0x658>
 8008cfa:	f040 8274 	bne.w	80091e6 <_dtoa_r+0x996>
 8008cfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d02:	2200      	movs	r2, #0
 8008d04:	4b40      	ldr	r3, [pc, #256]	; (8008e08 <_dtoa_r+0x5b8>)
 8008d06:	f7f7 fbe7 	bl	80004d8 <__aeabi_dmul>
 8008d0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d0e:	f7f7 fe69 	bl	80009e4 <__aeabi_dcmpge>
 8008d12:	9c02      	ldr	r4, [sp, #8]
 8008d14:	4626      	mov	r6, r4
 8008d16:	2800      	cmp	r0, #0
 8008d18:	f040 824a 	bne.w	80091b0 <_dtoa_r+0x960>
 8008d1c:	2331      	movs	r3, #49	; 0x31
 8008d1e:	9f08      	ldr	r7, [sp, #32]
 8008d20:	f109 0901 	add.w	r9, r9, #1
 8008d24:	f807 3b01 	strb.w	r3, [r7], #1
 8008d28:	e246      	b.n	80091b8 <_dtoa_r+0x968>
 8008d2a:	07e2      	lsls	r2, r4, #31
 8008d2c:	d505      	bpl.n	8008d3a <_dtoa_r+0x4ea>
 8008d2e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008d32:	f7f7 fbd1 	bl	80004d8 <__aeabi_dmul>
 8008d36:	2301      	movs	r3, #1
 8008d38:	3701      	adds	r7, #1
 8008d3a:	1064      	asrs	r4, r4, #1
 8008d3c:	3608      	adds	r6, #8
 8008d3e:	e76d      	b.n	8008c1c <_dtoa_r+0x3cc>
 8008d40:	2702      	movs	r7, #2
 8008d42:	e770      	b.n	8008c26 <_dtoa_r+0x3d6>
 8008d44:	46c8      	mov	r8, r9
 8008d46:	9c02      	ldr	r4, [sp, #8]
 8008d48:	e78f      	b.n	8008c6a <_dtoa_r+0x41a>
 8008d4a:	9908      	ldr	r1, [sp, #32]
 8008d4c:	4b29      	ldr	r3, [pc, #164]	; (8008df4 <_dtoa_r+0x5a4>)
 8008d4e:	4421      	add	r1, r4
 8008d50:	9112      	str	r1, [sp, #72]	; 0x48
 8008d52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d54:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d58:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008d5c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d60:	2900      	cmp	r1, #0
 8008d62:	d055      	beq.n	8008e10 <_dtoa_r+0x5c0>
 8008d64:	2000      	movs	r0, #0
 8008d66:	4929      	ldr	r1, [pc, #164]	; (8008e0c <_dtoa_r+0x5bc>)
 8008d68:	f7f7 fce0 	bl	800072c <__aeabi_ddiv>
 8008d6c:	463b      	mov	r3, r7
 8008d6e:	4632      	mov	r2, r6
 8008d70:	f7f7 f9fa 	bl	8000168 <__aeabi_dsub>
 8008d74:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008d78:	9f08      	ldr	r7, [sp, #32]
 8008d7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d7e:	f7f7 fe5b 	bl	8000a38 <__aeabi_d2iz>
 8008d82:	4604      	mov	r4, r0
 8008d84:	f7f7 fb3e 	bl	8000404 <__aeabi_i2d>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d90:	f7f7 f9ea 	bl	8000168 <__aeabi_dsub>
 8008d94:	4602      	mov	r2, r0
 8008d96:	460b      	mov	r3, r1
 8008d98:	3430      	adds	r4, #48	; 0x30
 8008d9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008d9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008da2:	f807 4b01 	strb.w	r4, [r7], #1
 8008da6:	f7f7 fe09 	bl	80009bc <__aeabi_dcmplt>
 8008daa:	2800      	cmp	r0, #0
 8008dac:	d174      	bne.n	8008e98 <_dtoa_r+0x648>
 8008dae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008db2:	2000      	movs	r0, #0
 8008db4:	4911      	ldr	r1, [pc, #68]	; (8008dfc <_dtoa_r+0x5ac>)
 8008db6:	f7f7 f9d7 	bl	8000168 <__aeabi_dsub>
 8008dba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008dbe:	f7f7 fdfd 	bl	80009bc <__aeabi_dcmplt>
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	f040 80b6 	bne.w	8008f34 <_dtoa_r+0x6e4>
 8008dc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008dca:	429f      	cmp	r7, r3
 8008dcc:	f43f af7a 	beq.w	8008cc4 <_dtoa_r+0x474>
 8008dd0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	4b0a      	ldr	r3, [pc, #40]	; (8008e00 <_dtoa_r+0x5b0>)
 8008dd8:	f7f7 fb7e 	bl	80004d8 <__aeabi_dmul>
 8008ddc:	2200      	movs	r2, #0
 8008dde:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008de2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008de6:	4b06      	ldr	r3, [pc, #24]	; (8008e00 <_dtoa_r+0x5b0>)
 8008de8:	f7f7 fb76 	bl	80004d8 <__aeabi_dmul>
 8008dec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008df0:	e7c3      	b.n	8008d7a <_dtoa_r+0x52a>
 8008df2:	bf00      	nop
 8008df4:	0800c190 	.word	0x0800c190
 8008df8:	0800c168 	.word	0x0800c168
 8008dfc:	3ff00000 	.word	0x3ff00000
 8008e00:	40240000 	.word	0x40240000
 8008e04:	401c0000 	.word	0x401c0000
 8008e08:	40140000 	.word	0x40140000
 8008e0c:	3fe00000 	.word	0x3fe00000
 8008e10:	4630      	mov	r0, r6
 8008e12:	4639      	mov	r1, r7
 8008e14:	f7f7 fb60 	bl	80004d8 <__aeabi_dmul>
 8008e18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e1a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008e1e:	9c08      	ldr	r4, [sp, #32]
 8008e20:	9314      	str	r3, [sp, #80]	; 0x50
 8008e22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e26:	f7f7 fe07 	bl	8000a38 <__aeabi_d2iz>
 8008e2a:	9015      	str	r0, [sp, #84]	; 0x54
 8008e2c:	f7f7 faea 	bl	8000404 <__aeabi_i2d>
 8008e30:	4602      	mov	r2, r0
 8008e32:	460b      	mov	r3, r1
 8008e34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e38:	f7f7 f996 	bl	8000168 <__aeabi_dsub>
 8008e3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e3e:	4606      	mov	r6, r0
 8008e40:	3330      	adds	r3, #48	; 0x30
 8008e42:	f804 3b01 	strb.w	r3, [r4], #1
 8008e46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e48:	460f      	mov	r7, r1
 8008e4a:	429c      	cmp	r4, r3
 8008e4c:	f04f 0200 	mov.w	r2, #0
 8008e50:	d124      	bne.n	8008e9c <_dtoa_r+0x64c>
 8008e52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008e56:	4bb3      	ldr	r3, [pc, #716]	; (8009124 <_dtoa_r+0x8d4>)
 8008e58:	f7f7 f988 	bl	800016c <__adddf3>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	460b      	mov	r3, r1
 8008e60:	4630      	mov	r0, r6
 8008e62:	4639      	mov	r1, r7
 8008e64:	f7f7 fdc8 	bl	80009f8 <__aeabi_dcmpgt>
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	d162      	bne.n	8008f32 <_dtoa_r+0x6e2>
 8008e6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008e70:	2000      	movs	r0, #0
 8008e72:	49ac      	ldr	r1, [pc, #688]	; (8009124 <_dtoa_r+0x8d4>)
 8008e74:	f7f7 f978 	bl	8000168 <__aeabi_dsub>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	4630      	mov	r0, r6
 8008e7e:	4639      	mov	r1, r7
 8008e80:	f7f7 fd9c 	bl	80009bc <__aeabi_dcmplt>
 8008e84:	2800      	cmp	r0, #0
 8008e86:	f43f af1d 	beq.w	8008cc4 <_dtoa_r+0x474>
 8008e8a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008e8c:	1e7b      	subs	r3, r7, #1
 8008e8e:	9314      	str	r3, [sp, #80]	; 0x50
 8008e90:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008e94:	2b30      	cmp	r3, #48	; 0x30
 8008e96:	d0f8      	beq.n	8008e8a <_dtoa_r+0x63a>
 8008e98:	46c1      	mov	r9, r8
 8008e9a:	e03a      	b.n	8008f12 <_dtoa_r+0x6c2>
 8008e9c:	4ba2      	ldr	r3, [pc, #648]	; (8009128 <_dtoa_r+0x8d8>)
 8008e9e:	f7f7 fb1b 	bl	80004d8 <__aeabi_dmul>
 8008ea2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ea6:	e7bc      	b.n	8008e22 <_dtoa_r+0x5d2>
 8008ea8:	9f08      	ldr	r7, [sp, #32]
 8008eaa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008eae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008eb2:	f7f7 fc3b 	bl	800072c <__aeabi_ddiv>
 8008eb6:	f7f7 fdbf 	bl	8000a38 <__aeabi_d2iz>
 8008eba:	4604      	mov	r4, r0
 8008ebc:	f7f7 faa2 	bl	8000404 <__aeabi_i2d>
 8008ec0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ec4:	f7f7 fb08 	bl	80004d8 <__aeabi_dmul>
 8008ec8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008ecc:	460b      	mov	r3, r1
 8008ece:	4602      	mov	r2, r0
 8008ed0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ed4:	f7f7 f948 	bl	8000168 <__aeabi_dsub>
 8008ed8:	f807 6b01 	strb.w	r6, [r7], #1
 8008edc:	9e08      	ldr	r6, [sp, #32]
 8008ede:	9b02      	ldr	r3, [sp, #8]
 8008ee0:	1bbe      	subs	r6, r7, r6
 8008ee2:	42b3      	cmp	r3, r6
 8008ee4:	d13a      	bne.n	8008f5c <_dtoa_r+0x70c>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	460b      	mov	r3, r1
 8008eea:	f7f7 f93f 	bl	800016c <__adddf3>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ef6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008efa:	f7f7 fd7d 	bl	80009f8 <__aeabi_dcmpgt>
 8008efe:	bb58      	cbnz	r0, 8008f58 <_dtoa_r+0x708>
 8008f00:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f08:	f7f7 fd4e 	bl	80009a8 <__aeabi_dcmpeq>
 8008f0c:	b108      	cbz	r0, 8008f12 <_dtoa_r+0x6c2>
 8008f0e:	07e1      	lsls	r1, r4, #31
 8008f10:	d422      	bmi.n	8008f58 <_dtoa_r+0x708>
 8008f12:	4628      	mov	r0, r5
 8008f14:	4651      	mov	r1, sl
 8008f16:	f000 fae7 	bl	80094e8 <_Bfree>
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	703b      	strb	r3, [r7, #0]
 8008f1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008f20:	f109 0001 	add.w	r0, r9, #1
 8008f24:	6018      	str	r0, [r3, #0]
 8008f26:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	f43f acdf 	beq.w	80088ec <_dtoa_r+0x9c>
 8008f2e:	601f      	str	r7, [r3, #0]
 8008f30:	e4dc      	b.n	80088ec <_dtoa_r+0x9c>
 8008f32:	4627      	mov	r7, r4
 8008f34:	463b      	mov	r3, r7
 8008f36:	461f      	mov	r7, r3
 8008f38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f3c:	2a39      	cmp	r2, #57	; 0x39
 8008f3e:	d107      	bne.n	8008f50 <_dtoa_r+0x700>
 8008f40:	9a08      	ldr	r2, [sp, #32]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d1f7      	bne.n	8008f36 <_dtoa_r+0x6e6>
 8008f46:	2230      	movs	r2, #48	; 0x30
 8008f48:	9908      	ldr	r1, [sp, #32]
 8008f4a:	f108 0801 	add.w	r8, r8, #1
 8008f4e:	700a      	strb	r2, [r1, #0]
 8008f50:	781a      	ldrb	r2, [r3, #0]
 8008f52:	3201      	adds	r2, #1
 8008f54:	701a      	strb	r2, [r3, #0]
 8008f56:	e79f      	b.n	8008e98 <_dtoa_r+0x648>
 8008f58:	46c8      	mov	r8, r9
 8008f5a:	e7eb      	b.n	8008f34 <_dtoa_r+0x6e4>
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	4b72      	ldr	r3, [pc, #456]	; (8009128 <_dtoa_r+0x8d8>)
 8008f60:	f7f7 faba 	bl	80004d8 <__aeabi_dmul>
 8008f64:	4602      	mov	r2, r0
 8008f66:	460b      	mov	r3, r1
 8008f68:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	2300      	movs	r3, #0
 8008f70:	f7f7 fd1a 	bl	80009a8 <__aeabi_dcmpeq>
 8008f74:	2800      	cmp	r0, #0
 8008f76:	d098      	beq.n	8008eaa <_dtoa_r+0x65a>
 8008f78:	e7cb      	b.n	8008f12 <_dtoa_r+0x6c2>
 8008f7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f7c:	2a00      	cmp	r2, #0
 8008f7e:	f000 80cd 	beq.w	800911c <_dtoa_r+0x8cc>
 8008f82:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008f84:	2a01      	cmp	r2, #1
 8008f86:	f300 80af 	bgt.w	80090e8 <_dtoa_r+0x898>
 8008f8a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008f8c:	2a00      	cmp	r2, #0
 8008f8e:	f000 80a7 	beq.w	80090e0 <_dtoa_r+0x890>
 8008f92:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008f96:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008f98:	9f06      	ldr	r7, [sp, #24]
 8008f9a:	9a06      	ldr	r2, [sp, #24]
 8008f9c:	2101      	movs	r1, #1
 8008f9e:	441a      	add	r2, r3
 8008fa0:	9206      	str	r2, [sp, #24]
 8008fa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	441a      	add	r2, r3
 8008fa8:	9209      	str	r2, [sp, #36]	; 0x24
 8008faa:	f000 fb57 	bl	800965c <__i2b>
 8008fae:	4606      	mov	r6, r0
 8008fb0:	2f00      	cmp	r7, #0
 8008fb2:	dd0c      	ble.n	8008fce <_dtoa_r+0x77e>
 8008fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	dd09      	ble.n	8008fce <_dtoa_r+0x77e>
 8008fba:	42bb      	cmp	r3, r7
 8008fbc:	bfa8      	it	ge
 8008fbe:	463b      	movge	r3, r7
 8008fc0:	9a06      	ldr	r2, [sp, #24]
 8008fc2:	1aff      	subs	r7, r7, r3
 8008fc4:	1ad2      	subs	r2, r2, r3
 8008fc6:	9206      	str	r2, [sp, #24]
 8008fc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fca:	1ad3      	subs	r3, r2, r3
 8008fcc:	9309      	str	r3, [sp, #36]	; 0x24
 8008fce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fd0:	b1f3      	cbz	r3, 8009010 <_dtoa_r+0x7c0>
 8008fd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	f000 80a9 	beq.w	800912c <_dtoa_r+0x8dc>
 8008fda:	2c00      	cmp	r4, #0
 8008fdc:	dd10      	ble.n	8009000 <_dtoa_r+0x7b0>
 8008fde:	4631      	mov	r1, r6
 8008fe0:	4622      	mov	r2, r4
 8008fe2:	4628      	mov	r0, r5
 8008fe4:	f000 fbf4 	bl	80097d0 <__pow5mult>
 8008fe8:	4652      	mov	r2, sl
 8008fea:	4601      	mov	r1, r0
 8008fec:	4606      	mov	r6, r0
 8008fee:	4628      	mov	r0, r5
 8008ff0:	f000 fb4a 	bl	8009688 <__multiply>
 8008ff4:	4680      	mov	r8, r0
 8008ff6:	4651      	mov	r1, sl
 8008ff8:	4628      	mov	r0, r5
 8008ffa:	f000 fa75 	bl	80094e8 <_Bfree>
 8008ffe:	46c2      	mov	sl, r8
 8009000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009002:	1b1a      	subs	r2, r3, r4
 8009004:	d004      	beq.n	8009010 <_dtoa_r+0x7c0>
 8009006:	4651      	mov	r1, sl
 8009008:	4628      	mov	r0, r5
 800900a:	f000 fbe1 	bl	80097d0 <__pow5mult>
 800900e:	4682      	mov	sl, r0
 8009010:	2101      	movs	r1, #1
 8009012:	4628      	mov	r0, r5
 8009014:	f000 fb22 	bl	800965c <__i2b>
 8009018:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800901a:	4604      	mov	r4, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	f340 8087 	ble.w	8009130 <_dtoa_r+0x8e0>
 8009022:	461a      	mov	r2, r3
 8009024:	4601      	mov	r1, r0
 8009026:	4628      	mov	r0, r5
 8009028:	f000 fbd2 	bl	80097d0 <__pow5mult>
 800902c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800902e:	4604      	mov	r4, r0
 8009030:	2b01      	cmp	r3, #1
 8009032:	f340 8080 	ble.w	8009136 <_dtoa_r+0x8e6>
 8009036:	f04f 0800 	mov.w	r8, #0
 800903a:	6923      	ldr	r3, [r4, #16]
 800903c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009040:	6918      	ldr	r0, [r3, #16]
 8009042:	f000 fabd 	bl	80095c0 <__hi0bits>
 8009046:	f1c0 0020 	rsb	r0, r0, #32
 800904a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800904c:	4418      	add	r0, r3
 800904e:	f010 001f 	ands.w	r0, r0, #31
 8009052:	f000 8092 	beq.w	800917a <_dtoa_r+0x92a>
 8009056:	f1c0 0320 	rsb	r3, r0, #32
 800905a:	2b04      	cmp	r3, #4
 800905c:	f340 808a 	ble.w	8009174 <_dtoa_r+0x924>
 8009060:	f1c0 001c 	rsb	r0, r0, #28
 8009064:	9b06      	ldr	r3, [sp, #24]
 8009066:	4407      	add	r7, r0
 8009068:	4403      	add	r3, r0
 800906a:	9306      	str	r3, [sp, #24]
 800906c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800906e:	4403      	add	r3, r0
 8009070:	9309      	str	r3, [sp, #36]	; 0x24
 8009072:	9b06      	ldr	r3, [sp, #24]
 8009074:	2b00      	cmp	r3, #0
 8009076:	dd05      	ble.n	8009084 <_dtoa_r+0x834>
 8009078:	4651      	mov	r1, sl
 800907a:	461a      	mov	r2, r3
 800907c:	4628      	mov	r0, r5
 800907e:	f000 fc01 	bl	8009884 <__lshift>
 8009082:	4682      	mov	sl, r0
 8009084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009086:	2b00      	cmp	r3, #0
 8009088:	dd05      	ble.n	8009096 <_dtoa_r+0x846>
 800908a:	4621      	mov	r1, r4
 800908c:	461a      	mov	r2, r3
 800908e:	4628      	mov	r0, r5
 8009090:	f000 fbf8 	bl	8009884 <__lshift>
 8009094:	4604      	mov	r4, r0
 8009096:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009098:	2b00      	cmp	r3, #0
 800909a:	d070      	beq.n	800917e <_dtoa_r+0x92e>
 800909c:	4621      	mov	r1, r4
 800909e:	4650      	mov	r0, sl
 80090a0:	f000 fc5c 	bl	800995c <__mcmp>
 80090a4:	2800      	cmp	r0, #0
 80090a6:	da6a      	bge.n	800917e <_dtoa_r+0x92e>
 80090a8:	2300      	movs	r3, #0
 80090aa:	4651      	mov	r1, sl
 80090ac:	220a      	movs	r2, #10
 80090ae:	4628      	mov	r0, r5
 80090b0:	f000 fa3c 	bl	800952c <__multadd>
 80090b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090b6:	4682      	mov	sl, r0
 80090b8:	f109 39ff 	add.w	r9, r9, #4294967295
 80090bc:	2b00      	cmp	r3, #0
 80090be:	f000 8193 	beq.w	80093e8 <_dtoa_r+0xb98>
 80090c2:	4631      	mov	r1, r6
 80090c4:	2300      	movs	r3, #0
 80090c6:	220a      	movs	r2, #10
 80090c8:	4628      	mov	r0, r5
 80090ca:	f000 fa2f 	bl	800952c <__multadd>
 80090ce:	f1bb 0f00 	cmp.w	fp, #0
 80090d2:	4606      	mov	r6, r0
 80090d4:	f300 8093 	bgt.w	80091fe <_dtoa_r+0x9ae>
 80090d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090da:	2b02      	cmp	r3, #2
 80090dc:	dc57      	bgt.n	800918e <_dtoa_r+0x93e>
 80090de:	e08e      	b.n	80091fe <_dtoa_r+0x9ae>
 80090e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80090e2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80090e6:	e756      	b.n	8008f96 <_dtoa_r+0x746>
 80090e8:	9b02      	ldr	r3, [sp, #8]
 80090ea:	1e5c      	subs	r4, r3, #1
 80090ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090ee:	42a3      	cmp	r3, r4
 80090f0:	bfb7      	itett	lt
 80090f2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80090f4:	1b1c      	subge	r4, r3, r4
 80090f6:	1ae2      	sublt	r2, r4, r3
 80090f8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80090fa:	bfbe      	ittt	lt
 80090fc:	940a      	strlt	r4, [sp, #40]	; 0x28
 80090fe:	189b      	addlt	r3, r3, r2
 8009100:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009102:	9b02      	ldr	r3, [sp, #8]
 8009104:	bfb8      	it	lt
 8009106:	2400      	movlt	r4, #0
 8009108:	2b00      	cmp	r3, #0
 800910a:	bfbb      	ittet	lt
 800910c:	9b06      	ldrlt	r3, [sp, #24]
 800910e:	9a02      	ldrlt	r2, [sp, #8]
 8009110:	9f06      	ldrge	r7, [sp, #24]
 8009112:	1a9f      	sublt	r7, r3, r2
 8009114:	bfac      	ite	ge
 8009116:	9b02      	ldrge	r3, [sp, #8]
 8009118:	2300      	movlt	r3, #0
 800911a:	e73e      	b.n	8008f9a <_dtoa_r+0x74a>
 800911c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800911e:	9f06      	ldr	r7, [sp, #24]
 8009120:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009122:	e745      	b.n	8008fb0 <_dtoa_r+0x760>
 8009124:	3fe00000 	.word	0x3fe00000
 8009128:	40240000 	.word	0x40240000
 800912c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800912e:	e76a      	b.n	8009006 <_dtoa_r+0x7b6>
 8009130:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009132:	2b01      	cmp	r3, #1
 8009134:	dc19      	bgt.n	800916a <_dtoa_r+0x91a>
 8009136:	9b04      	ldr	r3, [sp, #16]
 8009138:	b9bb      	cbnz	r3, 800916a <_dtoa_r+0x91a>
 800913a:	9b05      	ldr	r3, [sp, #20]
 800913c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009140:	b99b      	cbnz	r3, 800916a <_dtoa_r+0x91a>
 8009142:	9b05      	ldr	r3, [sp, #20]
 8009144:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009148:	0d1b      	lsrs	r3, r3, #20
 800914a:	051b      	lsls	r3, r3, #20
 800914c:	b183      	cbz	r3, 8009170 <_dtoa_r+0x920>
 800914e:	f04f 0801 	mov.w	r8, #1
 8009152:	9b06      	ldr	r3, [sp, #24]
 8009154:	3301      	adds	r3, #1
 8009156:	9306      	str	r3, [sp, #24]
 8009158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800915a:	3301      	adds	r3, #1
 800915c:	9309      	str	r3, [sp, #36]	; 0x24
 800915e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009160:	2b00      	cmp	r3, #0
 8009162:	f47f af6a 	bne.w	800903a <_dtoa_r+0x7ea>
 8009166:	2001      	movs	r0, #1
 8009168:	e76f      	b.n	800904a <_dtoa_r+0x7fa>
 800916a:	f04f 0800 	mov.w	r8, #0
 800916e:	e7f6      	b.n	800915e <_dtoa_r+0x90e>
 8009170:	4698      	mov	r8, r3
 8009172:	e7f4      	b.n	800915e <_dtoa_r+0x90e>
 8009174:	f43f af7d 	beq.w	8009072 <_dtoa_r+0x822>
 8009178:	4618      	mov	r0, r3
 800917a:	301c      	adds	r0, #28
 800917c:	e772      	b.n	8009064 <_dtoa_r+0x814>
 800917e:	9b02      	ldr	r3, [sp, #8]
 8009180:	2b00      	cmp	r3, #0
 8009182:	dc36      	bgt.n	80091f2 <_dtoa_r+0x9a2>
 8009184:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009186:	2b02      	cmp	r3, #2
 8009188:	dd33      	ble.n	80091f2 <_dtoa_r+0x9a2>
 800918a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800918e:	f1bb 0f00 	cmp.w	fp, #0
 8009192:	d10d      	bne.n	80091b0 <_dtoa_r+0x960>
 8009194:	4621      	mov	r1, r4
 8009196:	465b      	mov	r3, fp
 8009198:	2205      	movs	r2, #5
 800919a:	4628      	mov	r0, r5
 800919c:	f000 f9c6 	bl	800952c <__multadd>
 80091a0:	4601      	mov	r1, r0
 80091a2:	4604      	mov	r4, r0
 80091a4:	4650      	mov	r0, sl
 80091a6:	f000 fbd9 	bl	800995c <__mcmp>
 80091aa:	2800      	cmp	r0, #0
 80091ac:	f73f adb6 	bgt.w	8008d1c <_dtoa_r+0x4cc>
 80091b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80091b2:	9f08      	ldr	r7, [sp, #32]
 80091b4:	ea6f 0903 	mvn.w	r9, r3
 80091b8:	f04f 0800 	mov.w	r8, #0
 80091bc:	4621      	mov	r1, r4
 80091be:	4628      	mov	r0, r5
 80091c0:	f000 f992 	bl	80094e8 <_Bfree>
 80091c4:	2e00      	cmp	r6, #0
 80091c6:	f43f aea4 	beq.w	8008f12 <_dtoa_r+0x6c2>
 80091ca:	f1b8 0f00 	cmp.w	r8, #0
 80091ce:	d005      	beq.n	80091dc <_dtoa_r+0x98c>
 80091d0:	45b0      	cmp	r8, r6
 80091d2:	d003      	beq.n	80091dc <_dtoa_r+0x98c>
 80091d4:	4641      	mov	r1, r8
 80091d6:	4628      	mov	r0, r5
 80091d8:	f000 f986 	bl	80094e8 <_Bfree>
 80091dc:	4631      	mov	r1, r6
 80091de:	4628      	mov	r0, r5
 80091e0:	f000 f982 	bl	80094e8 <_Bfree>
 80091e4:	e695      	b.n	8008f12 <_dtoa_r+0x6c2>
 80091e6:	2400      	movs	r4, #0
 80091e8:	4626      	mov	r6, r4
 80091ea:	e7e1      	b.n	80091b0 <_dtoa_r+0x960>
 80091ec:	46c1      	mov	r9, r8
 80091ee:	4626      	mov	r6, r4
 80091f0:	e594      	b.n	8008d1c <_dtoa_r+0x4cc>
 80091f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091f4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	f000 80fc 	beq.w	80093f6 <_dtoa_r+0xba6>
 80091fe:	2f00      	cmp	r7, #0
 8009200:	dd05      	ble.n	800920e <_dtoa_r+0x9be>
 8009202:	4631      	mov	r1, r6
 8009204:	463a      	mov	r2, r7
 8009206:	4628      	mov	r0, r5
 8009208:	f000 fb3c 	bl	8009884 <__lshift>
 800920c:	4606      	mov	r6, r0
 800920e:	f1b8 0f00 	cmp.w	r8, #0
 8009212:	d05c      	beq.n	80092ce <_dtoa_r+0xa7e>
 8009214:	4628      	mov	r0, r5
 8009216:	6871      	ldr	r1, [r6, #4]
 8009218:	f000 f926 	bl	8009468 <_Balloc>
 800921c:	4607      	mov	r7, r0
 800921e:	b928      	cbnz	r0, 800922c <_dtoa_r+0x9dc>
 8009220:	4602      	mov	r2, r0
 8009222:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009226:	4b7e      	ldr	r3, [pc, #504]	; (8009420 <_dtoa_r+0xbd0>)
 8009228:	f7ff bb26 	b.w	8008878 <_dtoa_r+0x28>
 800922c:	6932      	ldr	r2, [r6, #16]
 800922e:	f106 010c 	add.w	r1, r6, #12
 8009232:	3202      	adds	r2, #2
 8009234:	0092      	lsls	r2, r2, #2
 8009236:	300c      	adds	r0, #12
 8009238:	f7fe fd2e 	bl	8007c98 <memcpy>
 800923c:	2201      	movs	r2, #1
 800923e:	4639      	mov	r1, r7
 8009240:	4628      	mov	r0, r5
 8009242:	f000 fb1f 	bl	8009884 <__lshift>
 8009246:	46b0      	mov	r8, r6
 8009248:	4606      	mov	r6, r0
 800924a:	9b08      	ldr	r3, [sp, #32]
 800924c:	3301      	adds	r3, #1
 800924e:	9302      	str	r3, [sp, #8]
 8009250:	9b08      	ldr	r3, [sp, #32]
 8009252:	445b      	add	r3, fp
 8009254:	930a      	str	r3, [sp, #40]	; 0x28
 8009256:	9b04      	ldr	r3, [sp, #16]
 8009258:	f003 0301 	and.w	r3, r3, #1
 800925c:	9309      	str	r3, [sp, #36]	; 0x24
 800925e:	9b02      	ldr	r3, [sp, #8]
 8009260:	4621      	mov	r1, r4
 8009262:	4650      	mov	r0, sl
 8009264:	f103 3bff 	add.w	fp, r3, #4294967295
 8009268:	f7ff fa62 	bl	8008730 <quorem>
 800926c:	4603      	mov	r3, r0
 800926e:	4641      	mov	r1, r8
 8009270:	3330      	adds	r3, #48	; 0x30
 8009272:	9004      	str	r0, [sp, #16]
 8009274:	4650      	mov	r0, sl
 8009276:	930b      	str	r3, [sp, #44]	; 0x2c
 8009278:	f000 fb70 	bl	800995c <__mcmp>
 800927c:	4632      	mov	r2, r6
 800927e:	9006      	str	r0, [sp, #24]
 8009280:	4621      	mov	r1, r4
 8009282:	4628      	mov	r0, r5
 8009284:	f000 fb86 	bl	8009994 <__mdiff>
 8009288:	68c2      	ldr	r2, [r0, #12]
 800928a:	4607      	mov	r7, r0
 800928c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800928e:	bb02      	cbnz	r2, 80092d2 <_dtoa_r+0xa82>
 8009290:	4601      	mov	r1, r0
 8009292:	4650      	mov	r0, sl
 8009294:	f000 fb62 	bl	800995c <__mcmp>
 8009298:	4602      	mov	r2, r0
 800929a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800929c:	4639      	mov	r1, r7
 800929e:	4628      	mov	r0, r5
 80092a0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80092a4:	f000 f920 	bl	80094e8 <_Bfree>
 80092a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80092aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80092ac:	9f02      	ldr	r7, [sp, #8]
 80092ae:	ea43 0102 	orr.w	r1, r3, r2
 80092b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092b4:	430b      	orrs	r3, r1
 80092b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092b8:	d10d      	bne.n	80092d6 <_dtoa_r+0xa86>
 80092ba:	2b39      	cmp	r3, #57	; 0x39
 80092bc:	d027      	beq.n	800930e <_dtoa_r+0xabe>
 80092be:	9a06      	ldr	r2, [sp, #24]
 80092c0:	2a00      	cmp	r2, #0
 80092c2:	dd01      	ble.n	80092c8 <_dtoa_r+0xa78>
 80092c4:	9b04      	ldr	r3, [sp, #16]
 80092c6:	3331      	adds	r3, #49	; 0x31
 80092c8:	f88b 3000 	strb.w	r3, [fp]
 80092cc:	e776      	b.n	80091bc <_dtoa_r+0x96c>
 80092ce:	4630      	mov	r0, r6
 80092d0:	e7b9      	b.n	8009246 <_dtoa_r+0x9f6>
 80092d2:	2201      	movs	r2, #1
 80092d4:	e7e2      	b.n	800929c <_dtoa_r+0xa4c>
 80092d6:	9906      	ldr	r1, [sp, #24]
 80092d8:	2900      	cmp	r1, #0
 80092da:	db04      	blt.n	80092e6 <_dtoa_r+0xa96>
 80092dc:	9822      	ldr	r0, [sp, #136]	; 0x88
 80092de:	4301      	orrs	r1, r0
 80092e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092e2:	4301      	orrs	r1, r0
 80092e4:	d120      	bne.n	8009328 <_dtoa_r+0xad8>
 80092e6:	2a00      	cmp	r2, #0
 80092e8:	ddee      	ble.n	80092c8 <_dtoa_r+0xa78>
 80092ea:	4651      	mov	r1, sl
 80092ec:	2201      	movs	r2, #1
 80092ee:	4628      	mov	r0, r5
 80092f0:	9302      	str	r3, [sp, #8]
 80092f2:	f000 fac7 	bl	8009884 <__lshift>
 80092f6:	4621      	mov	r1, r4
 80092f8:	4682      	mov	sl, r0
 80092fa:	f000 fb2f 	bl	800995c <__mcmp>
 80092fe:	2800      	cmp	r0, #0
 8009300:	9b02      	ldr	r3, [sp, #8]
 8009302:	dc02      	bgt.n	800930a <_dtoa_r+0xaba>
 8009304:	d1e0      	bne.n	80092c8 <_dtoa_r+0xa78>
 8009306:	07da      	lsls	r2, r3, #31
 8009308:	d5de      	bpl.n	80092c8 <_dtoa_r+0xa78>
 800930a:	2b39      	cmp	r3, #57	; 0x39
 800930c:	d1da      	bne.n	80092c4 <_dtoa_r+0xa74>
 800930e:	2339      	movs	r3, #57	; 0x39
 8009310:	f88b 3000 	strb.w	r3, [fp]
 8009314:	463b      	mov	r3, r7
 8009316:	461f      	mov	r7, r3
 8009318:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800931c:	3b01      	subs	r3, #1
 800931e:	2a39      	cmp	r2, #57	; 0x39
 8009320:	d050      	beq.n	80093c4 <_dtoa_r+0xb74>
 8009322:	3201      	adds	r2, #1
 8009324:	701a      	strb	r2, [r3, #0]
 8009326:	e749      	b.n	80091bc <_dtoa_r+0x96c>
 8009328:	2a00      	cmp	r2, #0
 800932a:	dd03      	ble.n	8009334 <_dtoa_r+0xae4>
 800932c:	2b39      	cmp	r3, #57	; 0x39
 800932e:	d0ee      	beq.n	800930e <_dtoa_r+0xabe>
 8009330:	3301      	adds	r3, #1
 8009332:	e7c9      	b.n	80092c8 <_dtoa_r+0xa78>
 8009334:	9a02      	ldr	r2, [sp, #8]
 8009336:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009338:	f802 3c01 	strb.w	r3, [r2, #-1]
 800933c:	428a      	cmp	r2, r1
 800933e:	d02a      	beq.n	8009396 <_dtoa_r+0xb46>
 8009340:	4651      	mov	r1, sl
 8009342:	2300      	movs	r3, #0
 8009344:	220a      	movs	r2, #10
 8009346:	4628      	mov	r0, r5
 8009348:	f000 f8f0 	bl	800952c <__multadd>
 800934c:	45b0      	cmp	r8, r6
 800934e:	4682      	mov	sl, r0
 8009350:	f04f 0300 	mov.w	r3, #0
 8009354:	f04f 020a 	mov.w	r2, #10
 8009358:	4641      	mov	r1, r8
 800935a:	4628      	mov	r0, r5
 800935c:	d107      	bne.n	800936e <_dtoa_r+0xb1e>
 800935e:	f000 f8e5 	bl	800952c <__multadd>
 8009362:	4680      	mov	r8, r0
 8009364:	4606      	mov	r6, r0
 8009366:	9b02      	ldr	r3, [sp, #8]
 8009368:	3301      	adds	r3, #1
 800936a:	9302      	str	r3, [sp, #8]
 800936c:	e777      	b.n	800925e <_dtoa_r+0xa0e>
 800936e:	f000 f8dd 	bl	800952c <__multadd>
 8009372:	4631      	mov	r1, r6
 8009374:	4680      	mov	r8, r0
 8009376:	2300      	movs	r3, #0
 8009378:	220a      	movs	r2, #10
 800937a:	4628      	mov	r0, r5
 800937c:	f000 f8d6 	bl	800952c <__multadd>
 8009380:	4606      	mov	r6, r0
 8009382:	e7f0      	b.n	8009366 <_dtoa_r+0xb16>
 8009384:	f1bb 0f00 	cmp.w	fp, #0
 8009388:	bfcc      	ite	gt
 800938a:	465f      	movgt	r7, fp
 800938c:	2701      	movle	r7, #1
 800938e:	f04f 0800 	mov.w	r8, #0
 8009392:	9a08      	ldr	r2, [sp, #32]
 8009394:	4417      	add	r7, r2
 8009396:	4651      	mov	r1, sl
 8009398:	2201      	movs	r2, #1
 800939a:	4628      	mov	r0, r5
 800939c:	9302      	str	r3, [sp, #8]
 800939e:	f000 fa71 	bl	8009884 <__lshift>
 80093a2:	4621      	mov	r1, r4
 80093a4:	4682      	mov	sl, r0
 80093a6:	f000 fad9 	bl	800995c <__mcmp>
 80093aa:	2800      	cmp	r0, #0
 80093ac:	dcb2      	bgt.n	8009314 <_dtoa_r+0xac4>
 80093ae:	d102      	bne.n	80093b6 <_dtoa_r+0xb66>
 80093b0:	9b02      	ldr	r3, [sp, #8]
 80093b2:	07db      	lsls	r3, r3, #31
 80093b4:	d4ae      	bmi.n	8009314 <_dtoa_r+0xac4>
 80093b6:	463b      	mov	r3, r7
 80093b8:	461f      	mov	r7, r3
 80093ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80093be:	2a30      	cmp	r2, #48	; 0x30
 80093c0:	d0fa      	beq.n	80093b8 <_dtoa_r+0xb68>
 80093c2:	e6fb      	b.n	80091bc <_dtoa_r+0x96c>
 80093c4:	9a08      	ldr	r2, [sp, #32]
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d1a5      	bne.n	8009316 <_dtoa_r+0xac6>
 80093ca:	2331      	movs	r3, #49	; 0x31
 80093cc:	f109 0901 	add.w	r9, r9, #1
 80093d0:	7013      	strb	r3, [r2, #0]
 80093d2:	e6f3      	b.n	80091bc <_dtoa_r+0x96c>
 80093d4:	4b13      	ldr	r3, [pc, #76]	; (8009424 <_dtoa_r+0xbd4>)
 80093d6:	f7ff baa7 	b.w	8008928 <_dtoa_r+0xd8>
 80093da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80093dc:	2b00      	cmp	r3, #0
 80093de:	f47f aa80 	bne.w	80088e2 <_dtoa_r+0x92>
 80093e2:	4b11      	ldr	r3, [pc, #68]	; (8009428 <_dtoa_r+0xbd8>)
 80093e4:	f7ff baa0 	b.w	8008928 <_dtoa_r+0xd8>
 80093e8:	f1bb 0f00 	cmp.w	fp, #0
 80093ec:	dc03      	bgt.n	80093f6 <_dtoa_r+0xba6>
 80093ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80093f0:	2b02      	cmp	r3, #2
 80093f2:	f73f aecc 	bgt.w	800918e <_dtoa_r+0x93e>
 80093f6:	9f08      	ldr	r7, [sp, #32]
 80093f8:	4621      	mov	r1, r4
 80093fa:	4650      	mov	r0, sl
 80093fc:	f7ff f998 	bl	8008730 <quorem>
 8009400:	9a08      	ldr	r2, [sp, #32]
 8009402:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009406:	f807 3b01 	strb.w	r3, [r7], #1
 800940a:	1aba      	subs	r2, r7, r2
 800940c:	4593      	cmp	fp, r2
 800940e:	ddb9      	ble.n	8009384 <_dtoa_r+0xb34>
 8009410:	4651      	mov	r1, sl
 8009412:	2300      	movs	r3, #0
 8009414:	220a      	movs	r2, #10
 8009416:	4628      	mov	r0, r5
 8009418:	f000 f888 	bl	800952c <__multadd>
 800941c:	4682      	mov	sl, r0
 800941e:	e7eb      	b.n	80093f8 <_dtoa_r+0xba8>
 8009420:	0800c0f7 	.word	0x0800c0f7
 8009424:	0800c050 	.word	0x0800c050
 8009428:	0800c074 	.word	0x0800c074

0800942c <_localeconv_r>:
 800942c:	4800      	ldr	r0, [pc, #0]	; (8009430 <_localeconv_r+0x4>)
 800942e:	4770      	bx	lr
 8009430:	20000170 	.word	0x20000170

08009434 <memchr>:
 8009434:	4603      	mov	r3, r0
 8009436:	b510      	push	{r4, lr}
 8009438:	b2c9      	uxtb	r1, r1
 800943a:	4402      	add	r2, r0
 800943c:	4293      	cmp	r3, r2
 800943e:	4618      	mov	r0, r3
 8009440:	d101      	bne.n	8009446 <memchr+0x12>
 8009442:	2000      	movs	r0, #0
 8009444:	e003      	b.n	800944e <memchr+0x1a>
 8009446:	7804      	ldrb	r4, [r0, #0]
 8009448:	3301      	adds	r3, #1
 800944a:	428c      	cmp	r4, r1
 800944c:	d1f6      	bne.n	800943c <memchr+0x8>
 800944e:	bd10      	pop	{r4, pc}

08009450 <__malloc_lock>:
 8009450:	4801      	ldr	r0, [pc, #4]	; (8009458 <__malloc_lock+0x8>)
 8009452:	f000 bd26 	b.w	8009ea2 <__retarget_lock_acquire_recursive>
 8009456:	bf00      	nop
 8009458:	20000478 	.word	0x20000478

0800945c <__malloc_unlock>:
 800945c:	4801      	ldr	r0, [pc, #4]	; (8009464 <__malloc_unlock+0x8>)
 800945e:	f000 bd21 	b.w	8009ea4 <__retarget_lock_release_recursive>
 8009462:	bf00      	nop
 8009464:	20000478 	.word	0x20000478

08009468 <_Balloc>:
 8009468:	b570      	push	{r4, r5, r6, lr}
 800946a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800946c:	4604      	mov	r4, r0
 800946e:	460d      	mov	r5, r1
 8009470:	b976      	cbnz	r6, 8009490 <_Balloc+0x28>
 8009472:	2010      	movs	r0, #16
 8009474:	f7fe fc08 	bl	8007c88 <malloc>
 8009478:	4602      	mov	r2, r0
 800947a:	6260      	str	r0, [r4, #36]	; 0x24
 800947c:	b920      	cbnz	r0, 8009488 <_Balloc+0x20>
 800947e:	2166      	movs	r1, #102	; 0x66
 8009480:	4b17      	ldr	r3, [pc, #92]	; (80094e0 <_Balloc+0x78>)
 8009482:	4818      	ldr	r0, [pc, #96]	; (80094e4 <_Balloc+0x7c>)
 8009484:	f000 fcdc 	bl	8009e40 <__assert_func>
 8009488:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800948c:	6006      	str	r6, [r0, #0]
 800948e:	60c6      	str	r6, [r0, #12]
 8009490:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009492:	68f3      	ldr	r3, [r6, #12]
 8009494:	b183      	cbz	r3, 80094b8 <_Balloc+0x50>
 8009496:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800949e:	b9b8      	cbnz	r0, 80094d0 <_Balloc+0x68>
 80094a0:	2101      	movs	r1, #1
 80094a2:	fa01 f605 	lsl.w	r6, r1, r5
 80094a6:	1d72      	adds	r2, r6, #5
 80094a8:	4620      	mov	r0, r4
 80094aa:	0092      	lsls	r2, r2, #2
 80094ac:	f000 fb5e 	bl	8009b6c <_calloc_r>
 80094b0:	b160      	cbz	r0, 80094cc <_Balloc+0x64>
 80094b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80094b6:	e00e      	b.n	80094d6 <_Balloc+0x6e>
 80094b8:	2221      	movs	r2, #33	; 0x21
 80094ba:	2104      	movs	r1, #4
 80094bc:	4620      	mov	r0, r4
 80094be:	f000 fb55 	bl	8009b6c <_calloc_r>
 80094c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094c4:	60f0      	str	r0, [r6, #12]
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d1e4      	bne.n	8009496 <_Balloc+0x2e>
 80094cc:	2000      	movs	r0, #0
 80094ce:	bd70      	pop	{r4, r5, r6, pc}
 80094d0:	6802      	ldr	r2, [r0, #0]
 80094d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80094d6:	2300      	movs	r3, #0
 80094d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80094dc:	e7f7      	b.n	80094ce <_Balloc+0x66>
 80094de:	bf00      	nop
 80094e0:	0800c081 	.word	0x0800c081
 80094e4:	0800c108 	.word	0x0800c108

080094e8 <_Bfree>:
 80094e8:	b570      	push	{r4, r5, r6, lr}
 80094ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80094ec:	4605      	mov	r5, r0
 80094ee:	460c      	mov	r4, r1
 80094f0:	b976      	cbnz	r6, 8009510 <_Bfree+0x28>
 80094f2:	2010      	movs	r0, #16
 80094f4:	f7fe fbc8 	bl	8007c88 <malloc>
 80094f8:	4602      	mov	r2, r0
 80094fa:	6268      	str	r0, [r5, #36]	; 0x24
 80094fc:	b920      	cbnz	r0, 8009508 <_Bfree+0x20>
 80094fe:	218a      	movs	r1, #138	; 0x8a
 8009500:	4b08      	ldr	r3, [pc, #32]	; (8009524 <_Bfree+0x3c>)
 8009502:	4809      	ldr	r0, [pc, #36]	; (8009528 <_Bfree+0x40>)
 8009504:	f000 fc9c 	bl	8009e40 <__assert_func>
 8009508:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800950c:	6006      	str	r6, [r0, #0]
 800950e:	60c6      	str	r6, [r0, #12]
 8009510:	b13c      	cbz	r4, 8009522 <_Bfree+0x3a>
 8009512:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009514:	6862      	ldr	r2, [r4, #4]
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800951c:	6021      	str	r1, [r4, #0]
 800951e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009522:	bd70      	pop	{r4, r5, r6, pc}
 8009524:	0800c081 	.word	0x0800c081
 8009528:	0800c108 	.word	0x0800c108

0800952c <__multadd>:
 800952c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009530:	4698      	mov	r8, r3
 8009532:	460c      	mov	r4, r1
 8009534:	2300      	movs	r3, #0
 8009536:	690e      	ldr	r6, [r1, #16]
 8009538:	4607      	mov	r7, r0
 800953a:	f101 0014 	add.w	r0, r1, #20
 800953e:	6805      	ldr	r5, [r0, #0]
 8009540:	3301      	adds	r3, #1
 8009542:	b2a9      	uxth	r1, r5
 8009544:	fb02 8101 	mla	r1, r2, r1, r8
 8009548:	0c2d      	lsrs	r5, r5, #16
 800954a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800954e:	fb02 c505 	mla	r5, r2, r5, ip
 8009552:	b289      	uxth	r1, r1
 8009554:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009558:	429e      	cmp	r6, r3
 800955a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800955e:	f840 1b04 	str.w	r1, [r0], #4
 8009562:	dcec      	bgt.n	800953e <__multadd+0x12>
 8009564:	f1b8 0f00 	cmp.w	r8, #0
 8009568:	d022      	beq.n	80095b0 <__multadd+0x84>
 800956a:	68a3      	ldr	r3, [r4, #8]
 800956c:	42b3      	cmp	r3, r6
 800956e:	dc19      	bgt.n	80095a4 <__multadd+0x78>
 8009570:	6861      	ldr	r1, [r4, #4]
 8009572:	4638      	mov	r0, r7
 8009574:	3101      	adds	r1, #1
 8009576:	f7ff ff77 	bl	8009468 <_Balloc>
 800957a:	4605      	mov	r5, r0
 800957c:	b928      	cbnz	r0, 800958a <__multadd+0x5e>
 800957e:	4602      	mov	r2, r0
 8009580:	21b5      	movs	r1, #181	; 0xb5
 8009582:	4b0d      	ldr	r3, [pc, #52]	; (80095b8 <__multadd+0x8c>)
 8009584:	480d      	ldr	r0, [pc, #52]	; (80095bc <__multadd+0x90>)
 8009586:	f000 fc5b 	bl	8009e40 <__assert_func>
 800958a:	6922      	ldr	r2, [r4, #16]
 800958c:	f104 010c 	add.w	r1, r4, #12
 8009590:	3202      	adds	r2, #2
 8009592:	0092      	lsls	r2, r2, #2
 8009594:	300c      	adds	r0, #12
 8009596:	f7fe fb7f 	bl	8007c98 <memcpy>
 800959a:	4621      	mov	r1, r4
 800959c:	4638      	mov	r0, r7
 800959e:	f7ff ffa3 	bl	80094e8 <_Bfree>
 80095a2:	462c      	mov	r4, r5
 80095a4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80095a8:	3601      	adds	r6, #1
 80095aa:	f8c3 8014 	str.w	r8, [r3, #20]
 80095ae:	6126      	str	r6, [r4, #16]
 80095b0:	4620      	mov	r0, r4
 80095b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095b6:	bf00      	nop
 80095b8:	0800c0f7 	.word	0x0800c0f7
 80095bc:	0800c108 	.word	0x0800c108

080095c0 <__hi0bits>:
 80095c0:	0c02      	lsrs	r2, r0, #16
 80095c2:	0412      	lsls	r2, r2, #16
 80095c4:	4603      	mov	r3, r0
 80095c6:	b9ca      	cbnz	r2, 80095fc <__hi0bits+0x3c>
 80095c8:	0403      	lsls	r3, r0, #16
 80095ca:	2010      	movs	r0, #16
 80095cc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80095d0:	bf04      	itt	eq
 80095d2:	021b      	lsleq	r3, r3, #8
 80095d4:	3008      	addeq	r0, #8
 80095d6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80095da:	bf04      	itt	eq
 80095dc:	011b      	lsleq	r3, r3, #4
 80095de:	3004      	addeq	r0, #4
 80095e0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80095e4:	bf04      	itt	eq
 80095e6:	009b      	lsleq	r3, r3, #2
 80095e8:	3002      	addeq	r0, #2
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	db05      	blt.n	80095fa <__hi0bits+0x3a>
 80095ee:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80095f2:	f100 0001 	add.w	r0, r0, #1
 80095f6:	bf08      	it	eq
 80095f8:	2020      	moveq	r0, #32
 80095fa:	4770      	bx	lr
 80095fc:	2000      	movs	r0, #0
 80095fe:	e7e5      	b.n	80095cc <__hi0bits+0xc>

08009600 <__lo0bits>:
 8009600:	6803      	ldr	r3, [r0, #0]
 8009602:	4602      	mov	r2, r0
 8009604:	f013 0007 	ands.w	r0, r3, #7
 8009608:	d00b      	beq.n	8009622 <__lo0bits+0x22>
 800960a:	07d9      	lsls	r1, r3, #31
 800960c:	d422      	bmi.n	8009654 <__lo0bits+0x54>
 800960e:	0798      	lsls	r0, r3, #30
 8009610:	bf49      	itett	mi
 8009612:	085b      	lsrmi	r3, r3, #1
 8009614:	089b      	lsrpl	r3, r3, #2
 8009616:	2001      	movmi	r0, #1
 8009618:	6013      	strmi	r3, [r2, #0]
 800961a:	bf5c      	itt	pl
 800961c:	2002      	movpl	r0, #2
 800961e:	6013      	strpl	r3, [r2, #0]
 8009620:	4770      	bx	lr
 8009622:	b299      	uxth	r1, r3
 8009624:	b909      	cbnz	r1, 800962a <__lo0bits+0x2a>
 8009626:	2010      	movs	r0, #16
 8009628:	0c1b      	lsrs	r3, r3, #16
 800962a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800962e:	bf04      	itt	eq
 8009630:	0a1b      	lsreq	r3, r3, #8
 8009632:	3008      	addeq	r0, #8
 8009634:	0719      	lsls	r1, r3, #28
 8009636:	bf04      	itt	eq
 8009638:	091b      	lsreq	r3, r3, #4
 800963a:	3004      	addeq	r0, #4
 800963c:	0799      	lsls	r1, r3, #30
 800963e:	bf04      	itt	eq
 8009640:	089b      	lsreq	r3, r3, #2
 8009642:	3002      	addeq	r0, #2
 8009644:	07d9      	lsls	r1, r3, #31
 8009646:	d403      	bmi.n	8009650 <__lo0bits+0x50>
 8009648:	085b      	lsrs	r3, r3, #1
 800964a:	f100 0001 	add.w	r0, r0, #1
 800964e:	d003      	beq.n	8009658 <__lo0bits+0x58>
 8009650:	6013      	str	r3, [r2, #0]
 8009652:	4770      	bx	lr
 8009654:	2000      	movs	r0, #0
 8009656:	4770      	bx	lr
 8009658:	2020      	movs	r0, #32
 800965a:	4770      	bx	lr

0800965c <__i2b>:
 800965c:	b510      	push	{r4, lr}
 800965e:	460c      	mov	r4, r1
 8009660:	2101      	movs	r1, #1
 8009662:	f7ff ff01 	bl	8009468 <_Balloc>
 8009666:	4602      	mov	r2, r0
 8009668:	b928      	cbnz	r0, 8009676 <__i2b+0x1a>
 800966a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800966e:	4b04      	ldr	r3, [pc, #16]	; (8009680 <__i2b+0x24>)
 8009670:	4804      	ldr	r0, [pc, #16]	; (8009684 <__i2b+0x28>)
 8009672:	f000 fbe5 	bl	8009e40 <__assert_func>
 8009676:	2301      	movs	r3, #1
 8009678:	6144      	str	r4, [r0, #20]
 800967a:	6103      	str	r3, [r0, #16]
 800967c:	bd10      	pop	{r4, pc}
 800967e:	bf00      	nop
 8009680:	0800c0f7 	.word	0x0800c0f7
 8009684:	0800c108 	.word	0x0800c108

08009688 <__multiply>:
 8009688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800968c:	4614      	mov	r4, r2
 800968e:	690a      	ldr	r2, [r1, #16]
 8009690:	6923      	ldr	r3, [r4, #16]
 8009692:	460d      	mov	r5, r1
 8009694:	429a      	cmp	r2, r3
 8009696:	bfbe      	ittt	lt
 8009698:	460b      	movlt	r3, r1
 800969a:	4625      	movlt	r5, r4
 800969c:	461c      	movlt	r4, r3
 800969e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80096a2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80096a6:	68ab      	ldr	r3, [r5, #8]
 80096a8:	6869      	ldr	r1, [r5, #4]
 80096aa:	eb0a 0709 	add.w	r7, sl, r9
 80096ae:	42bb      	cmp	r3, r7
 80096b0:	b085      	sub	sp, #20
 80096b2:	bfb8      	it	lt
 80096b4:	3101      	addlt	r1, #1
 80096b6:	f7ff fed7 	bl	8009468 <_Balloc>
 80096ba:	b930      	cbnz	r0, 80096ca <__multiply+0x42>
 80096bc:	4602      	mov	r2, r0
 80096be:	f240 115d 	movw	r1, #349	; 0x15d
 80096c2:	4b41      	ldr	r3, [pc, #260]	; (80097c8 <__multiply+0x140>)
 80096c4:	4841      	ldr	r0, [pc, #260]	; (80097cc <__multiply+0x144>)
 80096c6:	f000 fbbb 	bl	8009e40 <__assert_func>
 80096ca:	f100 0614 	add.w	r6, r0, #20
 80096ce:	4633      	mov	r3, r6
 80096d0:	2200      	movs	r2, #0
 80096d2:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80096d6:	4543      	cmp	r3, r8
 80096d8:	d31e      	bcc.n	8009718 <__multiply+0x90>
 80096da:	f105 0c14 	add.w	ip, r5, #20
 80096de:	f104 0314 	add.w	r3, r4, #20
 80096e2:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80096e6:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80096ea:	9202      	str	r2, [sp, #8]
 80096ec:	ebac 0205 	sub.w	r2, ip, r5
 80096f0:	3a15      	subs	r2, #21
 80096f2:	f022 0203 	bic.w	r2, r2, #3
 80096f6:	3204      	adds	r2, #4
 80096f8:	f105 0115 	add.w	r1, r5, #21
 80096fc:	458c      	cmp	ip, r1
 80096fe:	bf38      	it	cc
 8009700:	2204      	movcc	r2, #4
 8009702:	9201      	str	r2, [sp, #4]
 8009704:	9a02      	ldr	r2, [sp, #8]
 8009706:	9303      	str	r3, [sp, #12]
 8009708:	429a      	cmp	r2, r3
 800970a:	d808      	bhi.n	800971e <__multiply+0x96>
 800970c:	2f00      	cmp	r7, #0
 800970e:	dc55      	bgt.n	80097bc <__multiply+0x134>
 8009710:	6107      	str	r7, [r0, #16]
 8009712:	b005      	add	sp, #20
 8009714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009718:	f843 2b04 	str.w	r2, [r3], #4
 800971c:	e7db      	b.n	80096d6 <__multiply+0x4e>
 800971e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009722:	f1ba 0f00 	cmp.w	sl, #0
 8009726:	d020      	beq.n	800976a <__multiply+0xe2>
 8009728:	46b1      	mov	r9, r6
 800972a:	2200      	movs	r2, #0
 800972c:	f105 0e14 	add.w	lr, r5, #20
 8009730:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009734:	f8d9 b000 	ldr.w	fp, [r9]
 8009738:	b2a1      	uxth	r1, r4
 800973a:	fa1f fb8b 	uxth.w	fp, fp
 800973e:	fb0a b101 	mla	r1, sl, r1, fp
 8009742:	4411      	add	r1, r2
 8009744:	f8d9 2000 	ldr.w	r2, [r9]
 8009748:	0c24      	lsrs	r4, r4, #16
 800974a:	0c12      	lsrs	r2, r2, #16
 800974c:	fb0a 2404 	mla	r4, sl, r4, r2
 8009750:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009754:	b289      	uxth	r1, r1
 8009756:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800975a:	45f4      	cmp	ip, lr
 800975c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009760:	f849 1b04 	str.w	r1, [r9], #4
 8009764:	d8e4      	bhi.n	8009730 <__multiply+0xa8>
 8009766:	9901      	ldr	r1, [sp, #4]
 8009768:	5072      	str	r2, [r6, r1]
 800976a:	9a03      	ldr	r2, [sp, #12]
 800976c:	3304      	adds	r3, #4
 800976e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009772:	f1b9 0f00 	cmp.w	r9, #0
 8009776:	d01f      	beq.n	80097b8 <__multiply+0x130>
 8009778:	46b6      	mov	lr, r6
 800977a:	f04f 0a00 	mov.w	sl, #0
 800977e:	6834      	ldr	r4, [r6, #0]
 8009780:	f105 0114 	add.w	r1, r5, #20
 8009784:	880a      	ldrh	r2, [r1, #0]
 8009786:	f8be b002 	ldrh.w	fp, [lr, #2]
 800978a:	b2a4      	uxth	r4, r4
 800978c:	fb09 b202 	mla	r2, r9, r2, fp
 8009790:	4492      	add	sl, r2
 8009792:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009796:	f84e 4b04 	str.w	r4, [lr], #4
 800979a:	f851 4b04 	ldr.w	r4, [r1], #4
 800979e:	f8be 2000 	ldrh.w	r2, [lr]
 80097a2:	0c24      	lsrs	r4, r4, #16
 80097a4:	fb09 2404 	mla	r4, r9, r4, r2
 80097a8:	458c      	cmp	ip, r1
 80097aa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80097ae:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80097b2:	d8e7      	bhi.n	8009784 <__multiply+0xfc>
 80097b4:	9a01      	ldr	r2, [sp, #4]
 80097b6:	50b4      	str	r4, [r6, r2]
 80097b8:	3604      	adds	r6, #4
 80097ba:	e7a3      	b.n	8009704 <__multiply+0x7c>
 80097bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d1a5      	bne.n	8009710 <__multiply+0x88>
 80097c4:	3f01      	subs	r7, #1
 80097c6:	e7a1      	b.n	800970c <__multiply+0x84>
 80097c8:	0800c0f7 	.word	0x0800c0f7
 80097cc:	0800c108 	.word	0x0800c108

080097d0 <__pow5mult>:
 80097d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097d4:	4615      	mov	r5, r2
 80097d6:	f012 0203 	ands.w	r2, r2, #3
 80097da:	4606      	mov	r6, r0
 80097dc:	460f      	mov	r7, r1
 80097de:	d007      	beq.n	80097f0 <__pow5mult+0x20>
 80097e0:	4c25      	ldr	r4, [pc, #148]	; (8009878 <__pow5mult+0xa8>)
 80097e2:	3a01      	subs	r2, #1
 80097e4:	2300      	movs	r3, #0
 80097e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80097ea:	f7ff fe9f 	bl	800952c <__multadd>
 80097ee:	4607      	mov	r7, r0
 80097f0:	10ad      	asrs	r5, r5, #2
 80097f2:	d03d      	beq.n	8009870 <__pow5mult+0xa0>
 80097f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80097f6:	b97c      	cbnz	r4, 8009818 <__pow5mult+0x48>
 80097f8:	2010      	movs	r0, #16
 80097fa:	f7fe fa45 	bl	8007c88 <malloc>
 80097fe:	4602      	mov	r2, r0
 8009800:	6270      	str	r0, [r6, #36]	; 0x24
 8009802:	b928      	cbnz	r0, 8009810 <__pow5mult+0x40>
 8009804:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009808:	4b1c      	ldr	r3, [pc, #112]	; (800987c <__pow5mult+0xac>)
 800980a:	481d      	ldr	r0, [pc, #116]	; (8009880 <__pow5mult+0xb0>)
 800980c:	f000 fb18 	bl	8009e40 <__assert_func>
 8009810:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009814:	6004      	str	r4, [r0, #0]
 8009816:	60c4      	str	r4, [r0, #12]
 8009818:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800981c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009820:	b94c      	cbnz	r4, 8009836 <__pow5mult+0x66>
 8009822:	f240 2171 	movw	r1, #625	; 0x271
 8009826:	4630      	mov	r0, r6
 8009828:	f7ff ff18 	bl	800965c <__i2b>
 800982c:	2300      	movs	r3, #0
 800982e:	4604      	mov	r4, r0
 8009830:	f8c8 0008 	str.w	r0, [r8, #8]
 8009834:	6003      	str	r3, [r0, #0]
 8009836:	f04f 0900 	mov.w	r9, #0
 800983a:	07eb      	lsls	r3, r5, #31
 800983c:	d50a      	bpl.n	8009854 <__pow5mult+0x84>
 800983e:	4639      	mov	r1, r7
 8009840:	4622      	mov	r2, r4
 8009842:	4630      	mov	r0, r6
 8009844:	f7ff ff20 	bl	8009688 <__multiply>
 8009848:	4680      	mov	r8, r0
 800984a:	4639      	mov	r1, r7
 800984c:	4630      	mov	r0, r6
 800984e:	f7ff fe4b 	bl	80094e8 <_Bfree>
 8009852:	4647      	mov	r7, r8
 8009854:	106d      	asrs	r5, r5, #1
 8009856:	d00b      	beq.n	8009870 <__pow5mult+0xa0>
 8009858:	6820      	ldr	r0, [r4, #0]
 800985a:	b938      	cbnz	r0, 800986c <__pow5mult+0x9c>
 800985c:	4622      	mov	r2, r4
 800985e:	4621      	mov	r1, r4
 8009860:	4630      	mov	r0, r6
 8009862:	f7ff ff11 	bl	8009688 <__multiply>
 8009866:	6020      	str	r0, [r4, #0]
 8009868:	f8c0 9000 	str.w	r9, [r0]
 800986c:	4604      	mov	r4, r0
 800986e:	e7e4      	b.n	800983a <__pow5mult+0x6a>
 8009870:	4638      	mov	r0, r7
 8009872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009876:	bf00      	nop
 8009878:	0800c258 	.word	0x0800c258
 800987c:	0800c081 	.word	0x0800c081
 8009880:	0800c108 	.word	0x0800c108

08009884 <__lshift>:
 8009884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009888:	460c      	mov	r4, r1
 800988a:	4607      	mov	r7, r0
 800988c:	4691      	mov	r9, r2
 800988e:	6923      	ldr	r3, [r4, #16]
 8009890:	6849      	ldr	r1, [r1, #4]
 8009892:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009896:	68a3      	ldr	r3, [r4, #8]
 8009898:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800989c:	f108 0601 	add.w	r6, r8, #1
 80098a0:	42b3      	cmp	r3, r6
 80098a2:	db0b      	blt.n	80098bc <__lshift+0x38>
 80098a4:	4638      	mov	r0, r7
 80098a6:	f7ff fddf 	bl	8009468 <_Balloc>
 80098aa:	4605      	mov	r5, r0
 80098ac:	b948      	cbnz	r0, 80098c2 <__lshift+0x3e>
 80098ae:	4602      	mov	r2, r0
 80098b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80098b4:	4b27      	ldr	r3, [pc, #156]	; (8009954 <__lshift+0xd0>)
 80098b6:	4828      	ldr	r0, [pc, #160]	; (8009958 <__lshift+0xd4>)
 80098b8:	f000 fac2 	bl	8009e40 <__assert_func>
 80098bc:	3101      	adds	r1, #1
 80098be:	005b      	lsls	r3, r3, #1
 80098c0:	e7ee      	b.n	80098a0 <__lshift+0x1c>
 80098c2:	2300      	movs	r3, #0
 80098c4:	f100 0114 	add.w	r1, r0, #20
 80098c8:	f100 0210 	add.w	r2, r0, #16
 80098cc:	4618      	mov	r0, r3
 80098ce:	4553      	cmp	r3, sl
 80098d0:	db33      	blt.n	800993a <__lshift+0xb6>
 80098d2:	6920      	ldr	r0, [r4, #16]
 80098d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80098d8:	f104 0314 	add.w	r3, r4, #20
 80098dc:	f019 091f 	ands.w	r9, r9, #31
 80098e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80098e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80098e8:	d02b      	beq.n	8009942 <__lshift+0xbe>
 80098ea:	468a      	mov	sl, r1
 80098ec:	2200      	movs	r2, #0
 80098ee:	f1c9 0e20 	rsb	lr, r9, #32
 80098f2:	6818      	ldr	r0, [r3, #0]
 80098f4:	fa00 f009 	lsl.w	r0, r0, r9
 80098f8:	4302      	orrs	r2, r0
 80098fa:	f84a 2b04 	str.w	r2, [sl], #4
 80098fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009902:	459c      	cmp	ip, r3
 8009904:	fa22 f20e 	lsr.w	r2, r2, lr
 8009908:	d8f3      	bhi.n	80098f2 <__lshift+0x6e>
 800990a:	ebac 0304 	sub.w	r3, ip, r4
 800990e:	3b15      	subs	r3, #21
 8009910:	f023 0303 	bic.w	r3, r3, #3
 8009914:	3304      	adds	r3, #4
 8009916:	f104 0015 	add.w	r0, r4, #21
 800991a:	4584      	cmp	ip, r0
 800991c:	bf38      	it	cc
 800991e:	2304      	movcc	r3, #4
 8009920:	50ca      	str	r2, [r1, r3]
 8009922:	b10a      	cbz	r2, 8009928 <__lshift+0xa4>
 8009924:	f108 0602 	add.w	r6, r8, #2
 8009928:	3e01      	subs	r6, #1
 800992a:	4638      	mov	r0, r7
 800992c:	4621      	mov	r1, r4
 800992e:	612e      	str	r6, [r5, #16]
 8009930:	f7ff fdda 	bl	80094e8 <_Bfree>
 8009934:	4628      	mov	r0, r5
 8009936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800993a:	f842 0f04 	str.w	r0, [r2, #4]!
 800993e:	3301      	adds	r3, #1
 8009940:	e7c5      	b.n	80098ce <__lshift+0x4a>
 8009942:	3904      	subs	r1, #4
 8009944:	f853 2b04 	ldr.w	r2, [r3], #4
 8009948:	459c      	cmp	ip, r3
 800994a:	f841 2f04 	str.w	r2, [r1, #4]!
 800994e:	d8f9      	bhi.n	8009944 <__lshift+0xc0>
 8009950:	e7ea      	b.n	8009928 <__lshift+0xa4>
 8009952:	bf00      	nop
 8009954:	0800c0f7 	.word	0x0800c0f7
 8009958:	0800c108 	.word	0x0800c108

0800995c <__mcmp>:
 800995c:	4603      	mov	r3, r0
 800995e:	690a      	ldr	r2, [r1, #16]
 8009960:	6900      	ldr	r0, [r0, #16]
 8009962:	b530      	push	{r4, r5, lr}
 8009964:	1a80      	subs	r0, r0, r2
 8009966:	d10d      	bne.n	8009984 <__mcmp+0x28>
 8009968:	3314      	adds	r3, #20
 800996a:	3114      	adds	r1, #20
 800996c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009970:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009974:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009978:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800997c:	4295      	cmp	r5, r2
 800997e:	d002      	beq.n	8009986 <__mcmp+0x2a>
 8009980:	d304      	bcc.n	800998c <__mcmp+0x30>
 8009982:	2001      	movs	r0, #1
 8009984:	bd30      	pop	{r4, r5, pc}
 8009986:	42a3      	cmp	r3, r4
 8009988:	d3f4      	bcc.n	8009974 <__mcmp+0x18>
 800998a:	e7fb      	b.n	8009984 <__mcmp+0x28>
 800998c:	f04f 30ff 	mov.w	r0, #4294967295
 8009990:	e7f8      	b.n	8009984 <__mcmp+0x28>
	...

08009994 <__mdiff>:
 8009994:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009998:	460c      	mov	r4, r1
 800999a:	4606      	mov	r6, r0
 800999c:	4611      	mov	r1, r2
 800999e:	4620      	mov	r0, r4
 80099a0:	4692      	mov	sl, r2
 80099a2:	f7ff ffdb 	bl	800995c <__mcmp>
 80099a6:	1e05      	subs	r5, r0, #0
 80099a8:	d111      	bne.n	80099ce <__mdiff+0x3a>
 80099aa:	4629      	mov	r1, r5
 80099ac:	4630      	mov	r0, r6
 80099ae:	f7ff fd5b 	bl	8009468 <_Balloc>
 80099b2:	4602      	mov	r2, r0
 80099b4:	b928      	cbnz	r0, 80099c2 <__mdiff+0x2e>
 80099b6:	f240 2132 	movw	r1, #562	; 0x232
 80099ba:	4b3c      	ldr	r3, [pc, #240]	; (8009aac <__mdiff+0x118>)
 80099bc:	483c      	ldr	r0, [pc, #240]	; (8009ab0 <__mdiff+0x11c>)
 80099be:	f000 fa3f 	bl	8009e40 <__assert_func>
 80099c2:	2301      	movs	r3, #1
 80099c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80099c8:	4610      	mov	r0, r2
 80099ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ce:	bfa4      	itt	ge
 80099d0:	4653      	movge	r3, sl
 80099d2:	46a2      	movge	sl, r4
 80099d4:	4630      	mov	r0, r6
 80099d6:	f8da 1004 	ldr.w	r1, [sl, #4]
 80099da:	bfa6      	itte	ge
 80099dc:	461c      	movge	r4, r3
 80099de:	2500      	movge	r5, #0
 80099e0:	2501      	movlt	r5, #1
 80099e2:	f7ff fd41 	bl	8009468 <_Balloc>
 80099e6:	4602      	mov	r2, r0
 80099e8:	b918      	cbnz	r0, 80099f2 <__mdiff+0x5e>
 80099ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 80099ee:	4b2f      	ldr	r3, [pc, #188]	; (8009aac <__mdiff+0x118>)
 80099f0:	e7e4      	b.n	80099bc <__mdiff+0x28>
 80099f2:	f100 0814 	add.w	r8, r0, #20
 80099f6:	f8da 7010 	ldr.w	r7, [sl, #16]
 80099fa:	60c5      	str	r5, [r0, #12]
 80099fc:	f04f 0c00 	mov.w	ip, #0
 8009a00:	f10a 0514 	add.w	r5, sl, #20
 8009a04:	f10a 0010 	add.w	r0, sl, #16
 8009a08:	46c2      	mov	sl, r8
 8009a0a:	6926      	ldr	r6, [r4, #16]
 8009a0c:	f104 0914 	add.w	r9, r4, #20
 8009a10:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8009a14:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009a18:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8009a1c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009a20:	fa1f f18b 	uxth.w	r1, fp
 8009a24:	4461      	add	r1, ip
 8009a26:	fa1f fc83 	uxth.w	ip, r3
 8009a2a:	0c1b      	lsrs	r3, r3, #16
 8009a2c:	eba1 010c 	sub.w	r1, r1, ip
 8009a30:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009a34:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009a38:	b289      	uxth	r1, r1
 8009a3a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009a3e:	454e      	cmp	r6, r9
 8009a40:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009a44:	f84a 3b04 	str.w	r3, [sl], #4
 8009a48:	d8e6      	bhi.n	8009a18 <__mdiff+0x84>
 8009a4a:	1b33      	subs	r3, r6, r4
 8009a4c:	3b15      	subs	r3, #21
 8009a4e:	f023 0303 	bic.w	r3, r3, #3
 8009a52:	3415      	adds	r4, #21
 8009a54:	3304      	adds	r3, #4
 8009a56:	42a6      	cmp	r6, r4
 8009a58:	bf38      	it	cc
 8009a5a:	2304      	movcc	r3, #4
 8009a5c:	441d      	add	r5, r3
 8009a5e:	4443      	add	r3, r8
 8009a60:	461e      	mov	r6, r3
 8009a62:	462c      	mov	r4, r5
 8009a64:	4574      	cmp	r4, lr
 8009a66:	d30e      	bcc.n	8009a86 <__mdiff+0xf2>
 8009a68:	f10e 0103 	add.w	r1, lr, #3
 8009a6c:	1b49      	subs	r1, r1, r5
 8009a6e:	f021 0103 	bic.w	r1, r1, #3
 8009a72:	3d03      	subs	r5, #3
 8009a74:	45ae      	cmp	lr, r5
 8009a76:	bf38      	it	cc
 8009a78:	2100      	movcc	r1, #0
 8009a7a:	4419      	add	r1, r3
 8009a7c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009a80:	b18b      	cbz	r3, 8009aa6 <__mdiff+0x112>
 8009a82:	6117      	str	r7, [r2, #16]
 8009a84:	e7a0      	b.n	80099c8 <__mdiff+0x34>
 8009a86:	f854 8b04 	ldr.w	r8, [r4], #4
 8009a8a:	fa1f f188 	uxth.w	r1, r8
 8009a8e:	4461      	add	r1, ip
 8009a90:	1408      	asrs	r0, r1, #16
 8009a92:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8009a96:	b289      	uxth	r1, r1
 8009a98:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009a9c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009aa0:	f846 1b04 	str.w	r1, [r6], #4
 8009aa4:	e7de      	b.n	8009a64 <__mdiff+0xd0>
 8009aa6:	3f01      	subs	r7, #1
 8009aa8:	e7e8      	b.n	8009a7c <__mdiff+0xe8>
 8009aaa:	bf00      	nop
 8009aac:	0800c0f7 	.word	0x0800c0f7
 8009ab0:	0800c108 	.word	0x0800c108

08009ab4 <__d2b>:
 8009ab4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009ab8:	2101      	movs	r1, #1
 8009aba:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009abe:	4690      	mov	r8, r2
 8009ac0:	461d      	mov	r5, r3
 8009ac2:	f7ff fcd1 	bl	8009468 <_Balloc>
 8009ac6:	4604      	mov	r4, r0
 8009ac8:	b930      	cbnz	r0, 8009ad8 <__d2b+0x24>
 8009aca:	4602      	mov	r2, r0
 8009acc:	f240 310a 	movw	r1, #778	; 0x30a
 8009ad0:	4b24      	ldr	r3, [pc, #144]	; (8009b64 <__d2b+0xb0>)
 8009ad2:	4825      	ldr	r0, [pc, #148]	; (8009b68 <__d2b+0xb4>)
 8009ad4:	f000 f9b4 	bl	8009e40 <__assert_func>
 8009ad8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009adc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009ae0:	bb2d      	cbnz	r5, 8009b2e <__d2b+0x7a>
 8009ae2:	9301      	str	r3, [sp, #4]
 8009ae4:	f1b8 0300 	subs.w	r3, r8, #0
 8009ae8:	d026      	beq.n	8009b38 <__d2b+0x84>
 8009aea:	4668      	mov	r0, sp
 8009aec:	9300      	str	r3, [sp, #0]
 8009aee:	f7ff fd87 	bl	8009600 <__lo0bits>
 8009af2:	9900      	ldr	r1, [sp, #0]
 8009af4:	b1f0      	cbz	r0, 8009b34 <__d2b+0x80>
 8009af6:	9a01      	ldr	r2, [sp, #4]
 8009af8:	f1c0 0320 	rsb	r3, r0, #32
 8009afc:	fa02 f303 	lsl.w	r3, r2, r3
 8009b00:	430b      	orrs	r3, r1
 8009b02:	40c2      	lsrs	r2, r0
 8009b04:	6163      	str	r3, [r4, #20]
 8009b06:	9201      	str	r2, [sp, #4]
 8009b08:	9b01      	ldr	r3, [sp, #4]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	bf14      	ite	ne
 8009b0e:	2102      	movne	r1, #2
 8009b10:	2101      	moveq	r1, #1
 8009b12:	61a3      	str	r3, [r4, #24]
 8009b14:	6121      	str	r1, [r4, #16]
 8009b16:	b1c5      	cbz	r5, 8009b4a <__d2b+0x96>
 8009b18:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009b1c:	4405      	add	r5, r0
 8009b1e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009b22:	603d      	str	r5, [r7, #0]
 8009b24:	6030      	str	r0, [r6, #0]
 8009b26:	4620      	mov	r0, r4
 8009b28:	b002      	add	sp, #8
 8009b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b32:	e7d6      	b.n	8009ae2 <__d2b+0x2e>
 8009b34:	6161      	str	r1, [r4, #20]
 8009b36:	e7e7      	b.n	8009b08 <__d2b+0x54>
 8009b38:	a801      	add	r0, sp, #4
 8009b3a:	f7ff fd61 	bl	8009600 <__lo0bits>
 8009b3e:	2101      	movs	r1, #1
 8009b40:	9b01      	ldr	r3, [sp, #4]
 8009b42:	6121      	str	r1, [r4, #16]
 8009b44:	6163      	str	r3, [r4, #20]
 8009b46:	3020      	adds	r0, #32
 8009b48:	e7e5      	b.n	8009b16 <__d2b+0x62>
 8009b4a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009b4e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009b52:	6038      	str	r0, [r7, #0]
 8009b54:	6918      	ldr	r0, [r3, #16]
 8009b56:	f7ff fd33 	bl	80095c0 <__hi0bits>
 8009b5a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009b5e:	6031      	str	r1, [r6, #0]
 8009b60:	e7e1      	b.n	8009b26 <__d2b+0x72>
 8009b62:	bf00      	nop
 8009b64:	0800c0f7 	.word	0x0800c0f7
 8009b68:	0800c108 	.word	0x0800c108

08009b6c <_calloc_r>:
 8009b6c:	b538      	push	{r3, r4, r5, lr}
 8009b6e:	fb02 f501 	mul.w	r5, r2, r1
 8009b72:	4629      	mov	r1, r5
 8009b74:	f7fe f8f2 	bl	8007d5c <_malloc_r>
 8009b78:	4604      	mov	r4, r0
 8009b7a:	b118      	cbz	r0, 8009b84 <_calloc_r+0x18>
 8009b7c:	462a      	mov	r2, r5
 8009b7e:	2100      	movs	r1, #0
 8009b80:	f7fe f898 	bl	8007cb4 <memset>
 8009b84:	4620      	mov	r0, r4
 8009b86:	bd38      	pop	{r3, r4, r5, pc}

08009b88 <__ssputs_r>:
 8009b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b8c:	688e      	ldr	r6, [r1, #8]
 8009b8e:	4682      	mov	sl, r0
 8009b90:	429e      	cmp	r6, r3
 8009b92:	460c      	mov	r4, r1
 8009b94:	4690      	mov	r8, r2
 8009b96:	461f      	mov	r7, r3
 8009b98:	d838      	bhi.n	8009c0c <__ssputs_r+0x84>
 8009b9a:	898a      	ldrh	r2, [r1, #12]
 8009b9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ba0:	d032      	beq.n	8009c08 <__ssputs_r+0x80>
 8009ba2:	6825      	ldr	r5, [r4, #0]
 8009ba4:	6909      	ldr	r1, [r1, #16]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	eba5 0901 	sub.w	r9, r5, r1
 8009bac:	6965      	ldr	r5, [r4, #20]
 8009bae:	444b      	add	r3, r9
 8009bb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009bb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009bb8:	106d      	asrs	r5, r5, #1
 8009bba:	429d      	cmp	r5, r3
 8009bbc:	bf38      	it	cc
 8009bbe:	461d      	movcc	r5, r3
 8009bc0:	0553      	lsls	r3, r2, #21
 8009bc2:	d531      	bpl.n	8009c28 <__ssputs_r+0xa0>
 8009bc4:	4629      	mov	r1, r5
 8009bc6:	f7fe f8c9 	bl	8007d5c <_malloc_r>
 8009bca:	4606      	mov	r6, r0
 8009bcc:	b950      	cbnz	r0, 8009be4 <__ssputs_r+0x5c>
 8009bce:	230c      	movs	r3, #12
 8009bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009bd4:	f8ca 3000 	str.w	r3, [sl]
 8009bd8:	89a3      	ldrh	r3, [r4, #12]
 8009bda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bde:	81a3      	strh	r3, [r4, #12]
 8009be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009be4:	464a      	mov	r2, r9
 8009be6:	6921      	ldr	r1, [r4, #16]
 8009be8:	f7fe f856 	bl	8007c98 <memcpy>
 8009bec:	89a3      	ldrh	r3, [r4, #12]
 8009bee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bf6:	81a3      	strh	r3, [r4, #12]
 8009bf8:	6126      	str	r6, [r4, #16]
 8009bfa:	444e      	add	r6, r9
 8009bfc:	6026      	str	r6, [r4, #0]
 8009bfe:	463e      	mov	r6, r7
 8009c00:	6165      	str	r5, [r4, #20]
 8009c02:	eba5 0509 	sub.w	r5, r5, r9
 8009c06:	60a5      	str	r5, [r4, #8]
 8009c08:	42be      	cmp	r6, r7
 8009c0a:	d900      	bls.n	8009c0e <__ssputs_r+0x86>
 8009c0c:	463e      	mov	r6, r7
 8009c0e:	4632      	mov	r2, r6
 8009c10:	4641      	mov	r1, r8
 8009c12:	6820      	ldr	r0, [r4, #0]
 8009c14:	f000 f959 	bl	8009eca <memmove>
 8009c18:	68a3      	ldr	r3, [r4, #8]
 8009c1a:	6822      	ldr	r2, [r4, #0]
 8009c1c:	1b9b      	subs	r3, r3, r6
 8009c1e:	4432      	add	r2, r6
 8009c20:	2000      	movs	r0, #0
 8009c22:	60a3      	str	r3, [r4, #8]
 8009c24:	6022      	str	r2, [r4, #0]
 8009c26:	e7db      	b.n	8009be0 <__ssputs_r+0x58>
 8009c28:	462a      	mov	r2, r5
 8009c2a:	f000 f968 	bl	8009efe <_realloc_r>
 8009c2e:	4606      	mov	r6, r0
 8009c30:	2800      	cmp	r0, #0
 8009c32:	d1e1      	bne.n	8009bf8 <__ssputs_r+0x70>
 8009c34:	4650      	mov	r0, sl
 8009c36:	6921      	ldr	r1, [r4, #16]
 8009c38:	f7fe f844 	bl	8007cc4 <_free_r>
 8009c3c:	e7c7      	b.n	8009bce <__ssputs_r+0x46>
	...

08009c40 <_svfiprintf_r>:
 8009c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c44:	4698      	mov	r8, r3
 8009c46:	898b      	ldrh	r3, [r1, #12]
 8009c48:	4607      	mov	r7, r0
 8009c4a:	061b      	lsls	r3, r3, #24
 8009c4c:	460d      	mov	r5, r1
 8009c4e:	4614      	mov	r4, r2
 8009c50:	b09d      	sub	sp, #116	; 0x74
 8009c52:	d50e      	bpl.n	8009c72 <_svfiprintf_r+0x32>
 8009c54:	690b      	ldr	r3, [r1, #16]
 8009c56:	b963      	cbnz	r3, 8009c72 <_svfiprintf_r+0x32>
 8009c58:	2140      	movs	r1, #64	; 0x40
 8009c5a:	f7fe f87f 	bl	8007d5c <_malloc_r>
 8009c5e:	6028      	str	r0, [r5, #0]
 8009c60:	6128      	str	r0, [r5, #16]
 8009c62:	b920      	cbnz	r0, 8009c6e <_svfiprintf_r+0x2e>
 8009c64:	230c      	movs	r3, #12
 8009c66:	603b      	str	r3, [r7, #0]
 8009c68:	f04f 30ff 	mov.w	r0, #4294967295
 8009c6c:	e0d1      	b.n	8009e12 <_svfiprintf_r+0x1d2>
 8009c6e:	2340      	movs	r3, #64	; 0x40
 8009c70:	616b      	str	r3, [r5, #20]
 8009c72:	2300      	movs	r3, #0
 8009c74:	9309      	str	r3, [sp, #36]	; 0x24
 8009c76:	2320      	movs	r3, #32
 8009c78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c7c:	2330      	movs	r3, #48	; 0x30
 8009c7e:	f04f 0901 	mov.w	r9, #1
 8009c82:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c86:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009e2c <_svfiprintf_r+0x1ec>
 8009c8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c8e:	4623      	mov	r3, r4
 8009c90:	469a      	mov	sl, r3
 8009c92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c96:	b10a      	cbz	r2, 8009c9c <_svfiprintf_r+0x5c>
 8009c98:	2a25      	cmp	r2, #37	; 0x25
 8009c9a:	d1f9      	bne.n	8009c90 <_svfiprintf_r+0x50>
 8009c9c:	ebba 0b04 	subs.w	fp, sl, r4
 8009ca0:	d00b      	beq.n	8009cba <_svfiprintf_r+0x7a>
 8009ca2:	465b      	mov	r3, fp
 8009ca4:	4622      	mov	r2, r4
 8009ca6:	4629      	mov	r1, r5
 8009ca8:	4638      	mov	r0, r7
 8009caa:	f7ff ff6d 	bl	8009b88 <__ssputs_r>
 8009cae:	3001      	adds	r0, #1
 8009cb0:	f000 80aa 	beq.w	8009e08 <_svfiprintf_r+0x1c8>
 8009cb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cb6:	445a      	add	r2, fp
 8009cb8:	9209      	str	r2, [sp, #36]	; 0x24
 8009cba:	f89a 3000 	ldrb.w	r3, [sl]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	f000 80a2 	beq.w	8009e08 <_svfiprintf_r+0x1c8>
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8009cca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cce:	f10a 0a01 	add.w	sl, sl, #1
 8009cd2:	9304      	str	r3, [sp, #16]
 8009cd4:	9307      	str	r3, [sp, #28]
 8009cd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009cda:	931a      	str	r3, [sp, #104]	; 0x68
 8009cdc:	4654      	mov	r4, sl
 8009cde:	2205      	movs	r2, #5
 8009ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ce4:	4851      	ldr	r0, [pc, #324]	; (8009e2c <_svfiprintf_r+0x1ec>)
 8009ce6:	f7ff fba5 	bl	8009434 <memchr>
 8009cea:	9a04      	ldr	r2, [sp, #16]
 8009cec:	b9d8      	cbnz	r0, 8009d26 <_svfiprintf_r+0xe6>
 8009cee:	06d0      	lsls	r0, r2, #27
 8009cf0:	bf44      	itt	mi
 8009cf2:	2320      	movmi	r3, #32
 8009cf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cf8:	0711      	lsls	r1, r2, #28
 8009cfa:	bf44      	itt	mi
 8009cfc:	232b      	movmi	r3, #43	; 0x2b
 8009cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d02:	f89a 3000 	ldrb.w	r3, [sl]
 8009d06:	2b2a      	cmp	r3, #42	; 0x2a
 8009d08:	d015      	beq.n	8009d36 <_svfiprintf_r+0xf6>
 8009d0a:	4654      	mov	r4, sl
 8009d0c:	2000      	movs	r0, #0
 8009d0e:	f04f 0c0a 	mov.w	ip, #10
 8009d12:	9a07      	ldr	r2, [sp, #28]
 8009d14:	4621      	mov	r1, r4
 8009d16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d1a:	3b30      	subs	r3, #48	; 0x30
 8009d1c:	2b09      	cmp	r3, #9
 8009d1e:	d94e      	bls.n	8009dbe <_svfiprintf_r+0x17e>
 8009d20:	b1b0      	cbz	r0, 8009d50 <_svfiprintf_r+0x110>
 8009d22:	9207      	str	r2, [sp, #28]
 8009d24:	e014      	b.n	8009d50 <_svfiprintf_r+0x110>
 8009d26:	eba0 0308 	sub.w	r3, r0, r8
 8009d2a:	fa09 f303 	lsl.w	r3, r9, r3
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	46a2      	mov	sl, r4
 8009d32:	9304      	str	r3, [sp, #16]
 8009d34:	e7d2      	b.n	8009cdc <_svfiprintf_r+0x9c>
 8009d36:	9b03      	ldr	r3, [sp, #12]
 8009d38:	1d19      	adds	r1, r3, #4
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	9103      	str	r1, [sp, #12]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	bfbb      	ittet	lt
 8009d42:	425b      	neglt	r3, r3
 8009d44:	f042 0202 	orrlt.w	r2, r2, #2
 8009d48:	9307      	strge	r3, [sp, #28]
 8009d4a:	9307      	strlt	r3, [sp, #28]
 8009d4c:	bfb8      	it	lt
 8009d4e:	9204      	strlt	r2, [sp, #16]
 8009d50:	7823      	ldrb	r3, [r4, #0]
 8009d52:	2b2e      	cmp	r3, #46	; 0x2e
 8009d54:	d10c      	bne.n	8009d70 <_svfiprintf_r+0x130>
 8009d56:	7863      	ldrb	r3, [r4, #1]
 8009d58:	2b2a      	cmp	r3, #42	; 0x2a
 8009d5a:	d135      	bne.n	8009dc8 <_svfiprintf_r+0x188>
 8009d5c:	9b03      	ldr	r3, [sp, #12]
 8009d5e:	3402      	adds	r4, #2
 8009d60:	1d1a      	adds	r2, r3, #4
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	9203      	str	r2, [sp, #12]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	bfb8      	it	lt
 8009d6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d6e:	9305      	str	r3, [sp, #20]
 8009d70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009e3c <_svfiprintf_r+0x1fc>
 8009d74:	2203      	movs	r2, #3
 8009d76:	4650      	mov	r0, sl
 8009d78:	7821      	ldrb	r1, [r4, #0]
 8009d7a:	f7ff fb5b 	bl	8009434 <memchr>
 8009d7e:	b140      	cbz	r0, 8009d92 <_svfiprintf_r+0x152>
 8009d80:	2340      	movs	r3, #64	; 0x40
 8009d82:	eba0 000a 	sub.w	r0, r0, sl
 8009d86:	fa03 f000 	lsl.w	r0, r3, r0
 8009d8a:	9b04      	ldr	r3, [sp, #16]
 8009d8c:	3401      	adds	r4, #1
 8009d8e:	4303      	orrs	r3, r0
 8009d90:	9304      	str	r3, [sp, #16]
 8009d92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d96:	2206      	movs	r2, #6
 8009d98:	4825      	ldr	r0, [pc, #148]	; (8009e30 <_svfiprintf_r+0x1f0>)
 8009d9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d9e:	f7ff fb49 	bl	8009434 <memchr>
 8009da2:	2800      	cmp	r0, #0
 8009da4:	d038      	beq.n	8009e18 <_svfiprintf_r+0x1d8>
 8009da6:	4b23      	ldr	r3, [pc, #140]	; (8009e34 <_svfiprintf_r+0x1f4>)
 8009da8:	bb1b      	cbnz	r3, 8009df2 <_svfiprintf_r+0x1b2>
 8009daa:	9b03      	ldr	r3, [sp, #12]
 8009dac:	3307      	adds	r3, #7
 8009dae:	f023 0307 	bic.w	r3, r3, #7
 8009db2:	3308      	adds	r3, #8
 8009db4:	9303      	str	r3, [sp, #12]
 8009db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009db8:	4433      	add	r3, r6
 8009dba:	9309      	str	r3, [sp, #36]	; 0x24
 8009dbc:	e767      	b.n	8009c8e <_svfiprintf_r+0x4e>
 8009dbe:	460c      	mov	r4, r1
 8009dc0:	2001      	movs	r0, #1
 8009dc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009dc6:	e7a5      	b.n	8009d14 <_svfiprintf_r+0xd4>
 8009dc8:	2300      	movs	r3, #0
 8009dca:	f04f 0c0a 	mov.w	ip, #10
 8009dce:	4619      	mov	r1, r3
 8009dd0:	3401      	adds	r4, #1
 8009dd2:	9305      	str	r3, [sp, #20]
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dda:	3a30      	subs	r2, #48	; 0x30
 8009ddc:	2a09      	cmp	r2, #9
 8009dde:	d903      	bls.n	8009de8 <_svfiprintf_r+0x1a8>
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d0c5      	beq.n	8009d70 <_svfiprintf_r+0x130>
 8009de4:	9105      	str	r1, [sp, #20]
 8009de6:	e7c3      	b.n	8009d70 <_svfiprintf_r+0x130>
 8009de8:	4604      	mov	r4, r0
 8009dea:	2301      	movs	r3, #1
 8009dec:	fb0c 2101 	mla	r1, ip, r1, r2
 8009df0:	e7f0      	b.n	8009dd4 <_svfiprintf_r+0x194>
 8009df2:	ab03      	add	r3, sp, #12
 8009df4:	9300      	str	r3, [sp, #0]
 8009df6:	462a      	mov	r2, r5
 8009df8:	4638      	mov	r0, r7
 8009dfa:	4b0f      	ldr	r3, [pc, #60]	; (8009e38 <_svfiprintf_r+0x1f8>)
 8009dfc:	a904      	add	r1, sp, #16
 8009dfe:	f7fe f8a5 	bl	8007f4c <_printf_float>
 8009e02:	1c42      	adds	r2, r0, #1
 8009e04:	4606      	mov	r6, r0
 8009e06:	d1d6      	bne.n	8009db6 <_svfiprintf_r+0x176>
 8009e08:	89ab      	ldrh	r3, [r5, #12]
 8009e0a:	065b      	lsls	r3, r3, #25
 8009e0c:	f53f af2c 	bmi.w	8009c68 <_svfiprintf_r+0x28>
 8009e10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e12:	b01d      	add	sp, #116	; 0x74
 8009e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e18:	ab03      	add	r3, sp, #12
 8009e1a:	9300      	str	r3, [sp, #0]
 8009e1c:	462a      	mov	r2, r5
 8009e1e:	4638      	mov	r0, r7
 8009e20:	4b05      	ldr	r3, [pc, #20]	; (8009e38 <_svfiprintf_r+0x1f8>)
 8009e22:	a904      	add	r1, sp, #16
 8009e24:	f7fe fb2e 	bl	8008484 <_printf_i>
 8009e28:	e7eb      	b.n	8009e02 <_svfiprintf_r+0x1c2>
 8009e2a:	bf00      	nop
 8009e2c:	0800c264 	.word	0x0800c264
 8009e30:	0800c26e 	.word	0x0800c26e
 8009e34:	08007f4d 	.word	0x08007f4d
 8009e38:	08009b89 	.word	0x08009b89
 8009e3c:	0800c26a 	.word	0x0800c26a

08009e40 <__assert_func>:
 8009e40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e42:	4614      	mov	r4, r2
 8009e44:	461a      	mov	r2, r3
 8009e46:	4b09      	ldr	r3, [pc, #36]	; (8009e6c <__assert_func+0x2c>)
 8009e48:	4605      	mov	r5, r0
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	68d8      	ldr	r0, [r3, #12]
 8009e4e:	b14c      	cbz	r4, 8009e64 <__assert_func+0x24>
 8009e50:	4b07      	ldr	r3, [pc, #28]	; (8009e70 <__assert_func+0x30>)
 8009e52:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e56:	9100      	str	r1, [sp, #0]
 8009e58:	462b      	mov	r3, r5
 8009e5a:	4906      	ldr	r1, [pc, #24]	; (8009e74 <__assert_func+0x34>)
 8009e5c:	f000 f80e 	bl	8009e7c <fiprintf>
 8009e60:	f000 fa98 	bl	800a394 <abort>
 8009e64:	4b04      	ldr	r3, [pc, #16]	; (8009e78 <__assert_func+0x38>)
 8009e66:	461c      	mov	r4, r3
 8009e68:	e7f3      	b.n	8009e52 <__assert_func+0x12>
 8009e6a:	bf00      	nop
 8009e6c:	2000001c 	.word	0x2000001c
 8009e70:	0800c275 	.word	0x0800c275
 8009e74:	0800c282 	.word	0x0800c282
 8009e78:	0800c2b0 	.word	0x0800c2b0

08009e7c <fiprintf>:
 8009e7c:	b40e      	push	{r1, r2, r3}
 8009e7e:	b503      	push	{r0, r1, lr}
 8009e80:	4601      	mov	r1, r0
 8009e82:	ab03      	add	r3, sp, #12
 8009e84:	4805      	ldr	r0, [pc, #20]	; (8009e9c <fiprintf+0x20>)
 8009e86:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e8a:	6800      	ldr	r0, [r0, #0]
 8009e8c:	9301      	str	r3, [sp, #4]
 8009e8e:	f000 f883 	bl	8009f98 <_vfiprintf_r>
 8009e92:	b002      	add	sp, #8
 8009e94:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e98:	b003      	add	sp, #12
 8009e9a:	4770      	bx	lr
 8009e9c:	2000001c 	.word	0x2000001c

08009ea0 <__retarget_lock_init_recursive>:
 8009ea0:	4770      	bx	lr

08009ea2 <__retarget_lock_acquire_recursive>:
 8009ea2:	4770      	bx	lr

08009ea4 <__retarget_lock_release_recursive>:
 8009ea4:	4770      	bx	lr

08009ea6 <__ascii_mbtowc>:
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	b901      	cbnz	r1, 8009eac <__ascii_mbtowc+0x6>
 8009eaa:	a901      	add	r1, sp, #4
 8009eac:	b142      	cbz	r2, 8009ec0 <__ascii_mbtowc+0x1a>
 8009eae:	b14b      	cbz	r3, 8009ec4 <__ascii_mbtowc+0x1e>
 8009eb0:	7813      	ldrb	r3, [r2, #0]
 8009eb2:	600b      	str	r3, [r1, #0]
 8009eb4:	7812      	ldrb	r2, [r2, #0]
 8009eb6:	1e10      	subs	r0, r2, #0
 8009eb8:	bf18      	it	ne
 8009eba:	2001      	movne	r0, #1
 8009ebc:	b002      	add	sp, #8
 8009ebe:	4770      	bx	lr
 8009ec0:	4610      	mov	r0, r2
 8009ec2:	e7fb      	b.n	8009ebc <__ascii_mbtowc+0x16>
 8009ec4:	f06f 0001 	mvn.w	r0, #1
 8009ec8:	e7f8      	b.n	8009ebc <__ascii_mbtowc+0x16>

08009eca <memmove>:
 8009eca:	4288      	cmp	r0, r1
 8009ecc:	b510      	push	{r4, lr}
 8009ece:	eb01 0402 	add.w	r4, r1, r2
 8009ed2:	d902      	bls.n	8009eda <memmove+0x10>
 8009ed4:	4284      	cmp	r4, r0
 8009ed6:	4623      	mov	r3, r4
 8009ed8:	d807      	bhi.n	8009eea <memmove+0x20>
 8009eda:	1e43      	subs	r3, r0, #1
 8009edc:	42a1      	cmp	r1, r4
 8009ede:	d008      	beq.n	8009ef2 <memmove+0x28>
 8009ee0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ee4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ee8:	e7f8      	b.n	8009edc <memmove+0x12>
 8009eea:	4601      	mov	r1, r0
 8009eec:	4402      	add	r2, r0
 8009eee:	428a      	cmp	r2, r1
 8009ef0:	d100      	bne.n	8009ef4 <memmove+0x2a>
 8009ef2:	bd10      	pop	{r4, pc}
 8009ef4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ef8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009efc:	e7f7      	b.n	8009eee <memmove+0x24>

08009efe <_realloc_r>:
 8009efe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f00:	4607      	mov	r7, r0
 8009f02:	4614      	mov	r4, r2
 8009f04:	460e      	mov	r6, r1
 8009f06:	b921      	cbnz	r1, 8009f12 <_realloc_r+0x14>
 8009f08:	4611      	mov	r1, r2
 8009f0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009f0e:	f7fd bf25 	b.w	8007d5c <_malloc_r>
 8009f12:	b922      	cbnz	r2, 8009f1e <_realloc_r+0x20>
 8009f14:	f7fd fed6 	bl	8007cc4 <_free_r>
 8009f18:	4625      	mov	r5, r4
 8009f1a:	4628      	mov	r0, r5
 8009f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f1e:	f000 fc5d 	bl	800a7dc <_malloc_usable_size_r>
 8009f22:	42a0      	cmp	r0, r4
 8009f24:	d20f      	bcs.n	8009f46 <_realloc_r+0x48>
 8009f26:	4621      	mov	r1, r4
 8009f28:	4638      	mov	r0, r7
 8009f2a:	f7fd ff17 	bl	8007d5c <_malloc_r>
 8009f2e:	4605      	mov	r5, r0
 8009f30:	2800      	cmp	r0, #0
 8009f32:	d0f2      	beq.n	8009f1a <_realloc_r+0x1c>
 8009f34:	4631      	mov	r1, r6
 8009f36:	4622      	mov	r2, r4
 8009f38:	f7fd feae 	bl	8007c98 <memcpy>
 8009f3c:	4631      	mov	r1, r6
 8009f3e:	4638      	mov	r0, r7
 8009f40:	f7fd fec0 	bl	8007cc4 <_free_r>
 8009f44:	e7e9      	b.n	8009f1a <_realloc_r+0x1c>
 8009f46:	4635      	mov	r5, r6
 8009f48:	e7e7      	b.n	8009f1a <_realloc_r+0x1c>

08009f4a <__sfputc_r>:
 8009f4a:	6893      	ldr	r3, [r2, #8]
 8009f4c:	b410      	push	{r4}
 8009f4e:	3b01      	subs	r3, #1
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	6093      	str	r3, [r2, #8]
 8009f54:	da07      	bge.n	8009f66 <__sfputc_r+0x1c>
 8009f56:	6994      	ldr	r4, [r2, #24]
 8009f58:	42a3      	cmp	r3, r4
 8009f5a:	db01      	blt.n	8009f60 <__sfputc_r+0x16>
 8009f5c:	290a      	cmp	r1, #10
 8009f5e:	d102      	bne.n	8009f66 <__sfputc_r+0x1c>
 8009f60:	bc10      	pop	{r4}
 8009f62:	f000 b949 	b.w	800a1f8 <__swbuf_r>
 8009f66:	6813      	ldr	r3, [r2, #0]
 8009f68:	1c58      	adds	r0, r3, #1
 8009f6a:	6010      	str	r0, [r2, #0]
 8009f6c:	7019      	strb	r1, [r3, #0]
 8009f6e:	4608      	mov	r0, r1
 8009f70:	bc10      	pop	{r4}
 8009f72:	4770      	bx	lr

08009f74 <__sfputs_r>:
 8009f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f76:	4606      	mov	r6, r0
 8009f78:	460f      	mov	r7, r1
 8009f7a:	4614      	mov	r4, r2
 8009f7c:	18d5      	adds	r5, r2, r3
 8009f7e:	42ac      	cmp	r4, r5
 8009f80:	d101      	bne.n	8009f86 <__sfputs_r+0x12>
 8009f82:	2000      	movs	r0, #0
 8009f84:	e007      	b.n	8009f96 <__sfputs_r+0x22>
 8009f86:	463a      	mov	r2, r7
 8009f88:	4630      	mov	r0, r6
 8009f8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f8e:	f7ff ffdc 	bl	8009f4a <__sfputc_r>
 8009f92:	1c43      	adds	r3, r0, #1
 8009f94:	d1f3      	bne.n	8009f7e <__sfputs_r+0xa>
 8009f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009f98 <_vfiprintf_r>:
 8009f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f9c:	460d      	mov	r5, r1
 8009f9e:	4614      	mov	r4, r2
 8009fa0:	4698      	mov	r8, r3
 8009fa2:	4606      	mov	r6, r0
 8009fa4:	b09d      	sub	sp, #116	; 0x74
 8009fa6:	b118      	cbz	r0, 8009fb0 <_vfiprintf_r+0x18>
 8009fa8:	6983      	ldr	r3, [r0, #24]
 8009faa:	b90b      	cbnz	r3, 8009fb0 <_vfiprintf_r+0x18>
 8009fac:	f000 fb14 	bl	800a5d8 <__sinit>
 8009fb0:	4b89      	ldr	r3, [pc, #548]	; (800a1d8 <_vfiprintf_r+0x240>)
 8009fb2:	429d      	cmp	r5, r3
 8009fb4:	d11b      	bne.n	8009fee <_vfiprintf_r+0x56>
 8009fb6:	6875      	ldr	r5, [r6, #4]
 8009fb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fba:	07d9      	lsls	r1, r3, #31
 8009fbc:	d405      	bmi.n	8009fca <_vfiprintf_r+0x32>
 8009fbe:	89ab      	ldrh	r3, [r5, #12]
 8009fc0:	059a      	lsls	r2, r3, #22
 8009fc2:	d402      	bmi.n	8009fca <_vfiprintf_r+0x32>
 8009fc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fc6:	f7ff ff6c 	bl	8009ea2 <__retarget_lock_acquire_recursive>
 8009fca:	89ab      	ldrh	r3, [r5, #12]
 8009fcc:	071b      	lsls	r3, r3, #28
 8009fce:	d501      	bpl.n	8009fd4 <_vfiprintf_r+0x3c>
 8009fd0:	692b      	ldr	r3, [r5, #16]
 8009fd2:	b9eb      	cbnz	r3, 800a010 <_vfiprintf_r+0x78>
 8009fd4:	4629      	mov	r1, r5
 8009fd6:	4630      	mov	r0, r6
 8009fd8:	f000 f96e 	bl	800a2b8 <__swsetup_r>
 8009fdc:	b1c0      	cbz	r0, 800a010 <_vfiprintf_r+0x78>
 8009fde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fe0:	07dc      	lsls	r4, r3, #31
 8009fe2:	d50e      	bpl.n	800a002 <_vfiprintf_r+0x6a>
 8009fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe8:	b01d      	add	sp, #116	; 0x74
 8009fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fee:	4b7b      	ldr	r3, [pc, #492]	; (800a1dc <_vfiprintf_r+0x244>)
 8009ff0:	429d      	cmp	r5, r3
 8009ff2:	d101      	bne.n	8009ff8 <_vfiprintf_r+0x60>
 8009ff4:	68b5      	ldr	r5, [r6, #8]
 8009ff6:	e7df      	b.n	8009fb8 <_vfiprintf_r+0x20>
 8009ff8:	4b79      	ldr	r3, [pc, #484]	; (800a1e0 <_vfiprintf_r+0x248>)
 8009ffa:	429d      	cmp	r5, r3
 8009ffc:	bf08      	it	eq
 8009ffe:	68f5      	ldreq	r5, [r6, #12]
 800a000:	e7da      	b.n	8009fb8 <_vfiprintf_r+0x20>
 800a002:	89ab      	ldrh	r3, [r5, #12]
 800a004:	0598      	lsls	r0, r3, #22
 800a006:	d4ed      	bmi.n	8009fe4 <_vfiprintf_r+0x4c>
 800a008:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a00a:	f7ff ff4b 	bl	8009ea4 <__retarget_lock_release_recursive>
 800a00e:	e7e9      	b.n	8009fe4 <_vfiprintf_r+0x4c>
 800a010:	2300      	movs	r3, #0
 800a012:	9309      	str	r3, [sp, #36]	; 0x24
 800a014:	2320      	movs	r3, #32
 800a016:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a01a:	2330      	movs	r3, #48	; 0x30
 800a01c:	f04f 0901 	mov.w	r9, #1
 800a020:	f8cd 800c 	str.w	r8, [sp, #12]
 800a024:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a1e4 <_vfiprintf_r+0x24c>
 800a028:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a02c:	4623      	mov	r3, r4
 800a02e:	469a      	mov	sl, r3
 800a030:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a034:	b10a      	cbz	r2, 800a03a <_vfiprintf_r+0xa2>
 800a036:	2a25      	cmp	r2, #37	; 0x25
 800a038:	d1f9      	bne.n	800a02e <_vfiprintf_r+0x96>
 800a03a:	ebba 0b04 	subs.w	fp, sl, r4
 800a03e:	d00b      	beq.n	800a058 <_vfiprintf_r+0xc0>
 800a040:	465b      	mov	r3, fp
 800a042:	4622      	mov	r2, r4
 800a044:	4629      	mov	r1, r5
 800a046:	4630      	mov	r0, r6
 800a048:	f7ff ff94 	bl	8009f74 <__sfputs_r>
 800a04c:	3001      	adds	r0, #1
 800a04e:	f000 80aa 	beq.w	800a1a6 <_vfiprintf_r+0x20e>
 800a052:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a054:	445a      	add	r2, fp
 800a056:	9209      	str	r2, [sp, #36]	; 0x24
 800a058:	f89a 3000 	ldrb.w	r3, [sl]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	f000 80a2 	beq.w	800a1a6 <_vfiprintf_r+0x20e>
 800a062:	2300      	movs	r3, #0
 800a064:	f04f 32ff 	mov.w	r2, #4294967295
 800a068:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a06c:	f10a 0a01 	add.w	sl, sl, #1
 800a070:	9304      	str	r3, [sp, #16]
 800a072:	9307      	str	r3, [sp, #28]
 800a074:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a078:	931a      	str	r3, [sp, #104]	; 0x68
 800a07a:	4654      	mov	r4, sl
 800a07c:	2205      	movs	r2, #5
 800a07e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a082:	4858      	ldr	r0, [pc, #352]	; (800a1e4 <_vfiprintf_r+0x24c>)
 800a084:	f7ff f9d6 	bl	8009434 <memchr>
 800a088:	9a04      	ldr	r2, [sp, #16]
 800a08a:	b9d8      	cbnz	r0, 800a0c4 <_vfiprintf_r+0x12c>
 800a08c:	06d1      	lsls	r1, r2, #27
 800a08e:	bf44      	itt	mi
 800a090:	2320      	movmi	r3, #32
 800a092:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a096:	0713      	lsls	r3, r2, #28
 800a098:	bf44      	itt	mi
 800a09a:	232b      	movmi	r3, #43	; 0x2b
 800a09c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0a0:	f89a 3000 	ldrb.w	r3, [sl]
 800a0a4:	2b2a      	cmp	r3, #42	; 0x2a
 800a0a6:	d015      	beq.n	800a0d4 <_vfiprintf_r+0x13c>
 800a0a8:	4654      	mov	r4, sl
 800a0aa:	2000      	movs	r0, #0
 800a0ac:	f04f 0c0a 	mov.w	ip, #10
 800a0b0:	9a07      	ldr	r2, [sp, #28]
 800a0b2:	4621      	mov	r1, r4
 800a0b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0b8:	3b30      	subs	r3, #48	; 0x30
 800a0ba:	2b09      	cmp	r3, #9
 800a0bc:	d94e      	bls.n	800a15c <_vfiprintf_r+0x1c4>
 800a0be:	b1b0      	cbz	r0, 800a0ee <_vfiprintf_r+0x156>
 800a0c0:	9207      	str	r2, [sp, #28]
 800a0c2:	e014      	b.n	800a0ee <_vfiprintf_r+0x156>
 800a0c4:	eba0 0308 	sub.w	r3, r0, r8
 800a0c8:	fa09 f303 	lsl.w	r3, r9, r3
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	46a2      	mov	sl, r4
 800a0d0:	9304      	str	r3, [sp, #16]
 800a0d2:	e7d2      	b.n	800a07a <_vfiprintf_r+0xe2>
 800a0d4:	9b03      	ldr	r3, [sp, #12]
 800a0d6:	1d19      	adds	r1, r3, #4
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	9103      	str	r1, [sp, #12]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	bfbb      	ittet	lt
 800a0e0:	425b      	neglt	r3, r3
 800a0e2:	f042 0202 	orrlt.w	r2, r2, #2
 800a0e6:	9307      	strge	r3, [sp, #28]
 800a0e8:	9307      	strlt	r3, [sp, #28]
 800a0ea:	bfb8      	it	lt
 800a0ec:	9204      	strlt	r2, [sp, #16]
 800a0ee:	7823      	ldrb	r3, [r4, #0]
 800a0f0:	2b2e      	cmp	r3, #46	; 0x2e
 800a0f2:	d10c      	bne.n	800a10e <_vfiprintf_r+0x176>
 800a0f4:	7863      	ldrb	r3, [r4, #1]
 800a0f6:	2b2a      	cmp	r3, #42	; 0x2a
 800a0f8:	d135      	bne.n	800a166 <_vfiprintf_r+0x1ce>
 800a0fa:	9b03      	ldr	r3, [sp, #12]
 800a0fc:	3402      	adds	r4, #2
 800a0fe:	1d1a      	adds	r2, r3, #4
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	9203      	str	r2, [sp, #12]
 800a104:	2b00      	cmp	r3, #0
 800a106:	bfb8      	it	lt
 800a108:	f04f 33ff 	movlt.w	r3, #4294967295
 800a10c:	9305      	str	r3, [sp, #20]
 800a10e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a1f4 <_vfiprintf_r+0x25c>
 800a112:	2203      	movs	r2, #3
 800a114:	4650      	mov	r0, sl
 800a116:	7821      	ldrb	r1, [r4, #0]
 800a118:	f7ff f98c 	bl	8009434 <memchr>
 800a11c:	b140      	cbz	r0, 800a130 <_vfiprintf_r+0x198>
 800a11e:	2340      	movs	r3, #64	; 0x40
 800a120:	eba0 000a 	sub.w	r0, r0, sl
 800a124:	fa03 f000 	lsl.w	r0, r3, r0
 800a128:	9b04      	ldr	r3, [sp, #16]
 800a12a:	3401      	adds	r4, #1
 800a12c:	4303      	orrs	r3, r0
 800a12e:	9304      	str	r3, [sp, #16]
 800a130:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a134:	2206      	movs	r2, #6
 800a136:	482c      	ldr	r0, [pc, #176]	; (800a1e8 <_vfiprintf_r+0x250>)
 800a138:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a13c:	f7ff f97a 	bl	8009434 <memchr>
 800a140:	2800      	cmp	r0, #0
 800a142:	d03f      	beq.n	800a1c4 <_vfiprintf_r+0x22c>
 800a144:	4b29      	ldr	r3, [pc, #164]	; (800a1ec <_vfiprintf_r+0x254>)
 800a146:	bb1b      	cbnz	r3, 800a190 <_vfiprintf_r+0x1f8>
 800a148:	9b03      	ldr	r3, [sp, #12]
 800a14a:	3307      	adds	r3, #7
 800a14c:	f023 0307 	bic.w	r3, r3, #7
 800a150:	3308      	adds	r3, #8
 800a152:	9303      	str	r3, [sp, #12]
 800a154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a156:	443b      	add	r3, r7
 800a158:	9309      	str	r3, [sp, #36]	; 0x24
 800a15a:	e767      	b.n	800a02c <_vfiprintf_r+0x94>
 800a15c:	460c      	mov	r4, r1
 800a15e:	2001      	movs	r0, #1
 800a160:	fb0c 3202 	mla	r2, ip, r2, r3
 800a164:	e7a5      	b.n	800a0b2 <_vfiprintf_r+0x11a>
 800a166:	2300      	movs	r3, #0
 800a168:	f04f 0c0a 	mov.w	ip, #10
 800a16c:	4619      	mov	r1, r3
 800a16e:	3401      	adds	r4, #1
 800a170:	9305      	str	r3, [sp, #20]
 800a172:	4620      	mov	r0, r4
 800a174:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a178:	3a30      	subs	r2, #48	; 0x30
 800a17a:	2a09      	cmp	r2, #9
 800a17c:	d903      	bls.n	800a186 <_vfiprintf_r+0x1ee>
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d0c5      	beq.n	800a10e <_vfiprintf_r+0x176>
 800a182:	9105      	str	r1, [sp, #20]
 800a184:	e7c3      	b.n	800a10e <_vfiprintf_r+0x176>
 800a186:	4604      	mov	r4, r0
 800a188:	2301      	movs	r3, #1
 800a18a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a18e:	e7f0      	b.n	800a172 <_vfiprintf_r+0x1da>
 800a190:	ab03      	add	r3, sp, #12
 800a192:	9300      	str	r3, [sp, #0]
 800a194:	462a      	mov	r2, r5
 800a196:	4630      	mov	r0, r6
 800a198:	4b15      	ldr	r3, [pc, #84]	; (800a1f0 <_vfiprintf_r+0x258>)
 800a19a:	a904      	add	r1, sp, #16
 800a19c:	f7fd fed6 	bl	8007f4c <_printf_float>
 800a1a0:	4607      	mov	r7, r0
 800a1a2:	1c78      	adds	r0, r7, #1
 800a1a4:	d1d6      	bne.n	800a154 <_vfiprintf_r+0x1bc>
 800a1a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1a8:	07d9      	lsls	r1, r3, #31
 800a1aa:	d405      	bmi.n	800a1b8 <_vfiprintf_r+0x220>
 800a1ac:	89ab      	ldrh	r3, [r5, #12]
 800a1ae:	059a      	lsls	r2, r3, #22
 800a1b0:	d402      	bmi.n	800a1b8 <_vfiprintf_r+0x220>
 800a1b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1b4:	f7ff fe76 	bl	8009ea4 <__retarget_lock_release_recursive>
 800a1b8:	89ab      	ldrh	r3, [r5, #12]
 800a1ba:	065b      	lsls	r3, r3, #25
 800a1bc:	f53f af12 	bmi.w	8009fe4 <_vfiprintf_r+0x4c>
 800a1c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1c2:	e711      	b.n	8009fe8 <_vfiprintf_r+0x50>
 800a1c4:	ab03      	add	r3, sp, #12
 800a1c6:	9300      	str	r3, [sp, #0]
 800a1c8:	462a      	mov	r2, r5
 800a1ca:	4630      	mov	r0, r6
 800a1cc:	4b08      	ldr	r3, [pc, #32]	; (800a1f0 <_vfiprintf_r+0x258>)
 800a1ce:	a904      	add	r1, sp, #16
 800a1d0:	f7fe f958 	bl	8008484 <_printf_i>
 800a1d4:	e7e4      	b.n	800a1a0 <_vfiprintf_r+0x208>
 800a1d6:	bf00      	nop
 800a1d8:	0800c3dc 	.word	0x0800c3dc
 800a1dc:	0800c3fc 	.word	0x0800c3fc
 800a1e0:	0800c3bc 	.word	0x0800c3bc
 800a1e4:	0800c264 	.word	0x0800c264
 800a1e8:	0800c26e 	.word	0x0800c26e
 800a1ec:	08007f4d 	.word	0x08007f4d
 800a1f0:	08009f75 	.word	0x08009f75
 800a1f4:	0800c26a 	.word	0x0800c26a

0800a1f8 <__swbuf_r>:
 800a1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1fa:	460e      	mov	r6, r1
 800a1fc:	4614      	mov	r4, r2
 800a1fe:	4605      	mov	r5, r0
 800a200:	b118      	cbz	r0, 800a20a <__swbuf_r+0x12>
 800a202:	6983      	ldr	r3, [r0, #24]
 800a204:	b90b      	cbnz	r3, 800a20a <__swbuf_r+0x12>
 800a206:	f000 f9e7 	bl	800a5d8 <__sinit>
 800a20a:	4b21      	ldr	r3, [pc, #132]	; (800a290 <__swbuf_r+0x98>)
 800a20c:	429c      	cmp	r4, r3
 800a20e:	d12b      	bne.n	800a268 <__swbuf_r+0x70>
 800a210:	686c      	ldr	r4, [r5, #4]
 800a212:	69a3      	ldr	r3, [r4, #24]
 800a214:	60a3      	str	r3, [r4, #8]
 800a216:	89a3      	ldrh	r3, [r4, #12]
 800a218:	071a      	lsls	r2, r3, #28
 800a21a:	d52f      	bpl.n	800a27c <__swbuf_r+0x84>
 800a21c:	6923      	ldr	r3, [r4, #16]
 800a21e:	b36b      	cbz	r3, 800a27c <__swbuf_r+0x84>
 800a220:	6923      	ldr	r3, [r4, #16]
 800a222:	6820      	ldr	r0, [r4, #0]
 800a224:	b2f6      	uxtb	r6, r6
 800a226:	1ac0      	subs	r0, r0, r3
 800a228:	6963      	ldr	r3, [r4, #20]
 800a22a:	4637      	mov	r7, r6
 800a22c:	4283      	cmp	r3, r0
 800a22e:	dc04      	bgt.n	800a23a <__swbuf_r+0x42>
 800a230:	4621      	mov	r1, r4
 800a232:	4628      	mov	r0, r5
 800a234:	f000 f93c 	bl	800a4b0 <_fflush_r>
 800a238:	bb30      	cbnz	r0, 800a288 <__swbuf_r+0x90>
 800a23a:	68a3      	ldr	r3, [r4, #8]
 800a23c:	3001      	adds	r0, #1
 800a23e:	3b01      	subs	r3, #1
 800a240:	60a3      	str	r3, [r4, #8]
 800a242:	6823      	ldr	r3, [r4, #0]
 800a244:	1c5a      	adds	r2, r3, #1
 800a246:	6022      	str	r2, [r4, #0]
 800a248:	701e      	strb	r6, [r3, #0]
 800a24a:	6963      	ldr	r3, [r4, #20]
 800a24c:	4283      	cmp	r3, r0
 800a24e:	d004      	beq.n	800a25a <__swbuf_r+0x62>
 800a250:	89a3      	ldrh	r3, [r4, #12]
 800a252:	07db      	lsls	r3, r3, #31
 800a254:	d506      	bpl.n	800a264 <__swbuf_r+0x6c>
 800a256:	2e0a      	cmp	r6, #10
 800a258:	d104      	bne.n	800a264 <__swbuf_r+0x6c>
 800a25a:	4621      	mov	r1, r4
 800a25c:	4628      	mov	r0, r5
 800a25e:	f000 f927 	bl	800a4b0 <_fflush_r>
 800a262:	b988      	cbnz	r0, 800a288 <__swbuf_r+0x90>
 800a264:	4638      	mov	r0, r7
 800a266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a268:	4b0a      	ldr	r3, [pc, #40]	; (800a294 <__swbuf_r+0x9c>)
 800a26a:	429c      	cmp	r4, r3
 800a26c:	d101      	bne.n	800a272 <__swbuf_r+0x7a>
 800a26e:	68ac      	ldr	r4, [r5, #8]
 800a270:	e7cf      	b.n	800a212 <__swbuf_r+0x1a>
 800a272:	4b09      	ldr	r3, [pc, #36]	; (800a298 <__swbuf_r+0xa0>)
 800a274:	429c      	cmp	r4, r3
 800a276:	bf08      	it	eq
 800a278:	68ec      	ldreq	r4, [r5, #12]
 800a27a:	e7ca      	b.n	800a212 <__swbuf_r+0x1a>
 800a27c:	4621      	mov	r1, r4
 800a27e:	4628      	mov	r0, r5
 800a280:	f000 f81a 	bl	800a2b8 <__swsetup_r>
 800a284:	2800      	cmp	r0, #0
 800a286:	d0cb      	beq.n	800a220 <__swbuf_r+0x28>
 800a288:	f04f 37ff 	mov.w	r7, #4294967295
 800a28c:	e7ea      	b.n	800a264 <__swbuf_r+0x6c>
 800a28e:	bf00      	nop
 800a290:	0800c3dc 	.word	0x0800c3dc
 800a294:	0800c3fc 	.word	0x0800c3fc
 800a298:	0800c3bc 	.word	0x0800c3bc

0800a29c <__ascii_wctomb>:
 800a29c:	4603      	mov	r3, r0
 800a29e:	4608      	mov	r0, r1
 800a2a0:	b141      	cbz	r1, 800a2b4 <__ascii_wctomb+0x18>
 800a2a2:	2aff      	cmp	r2, #255	; 0xff
 800a2a4:	d904      	bls.n	800a2b0 <__ascii_wctomb+0x14>
 800a2a6:	228a      	movs	r2, #138	; 0x8a
 800a2a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ac:	601a      	str	r2, [r3, #0]
 800a2ae:	4770      	bx	lr
 800a2b0:	2001      	movs	r0, #1
 800a2b2:	700a      	strb	r2, [r1, #0]
 800a2b4:	4770      	bx	lr
	...

0800a2b8 <__swsetup_r>:
 800a2b8:	4b32      	ldr	r3, [pc, #200]	; (800a384 <__swsetup_r+0xcc>)
 800a2ba:	b570      	push	{r4, r5, r6, lr}
 800a2bc:	681d      	ldr	r5, [r3, #0]
 800a2be:	4606      	mov	r6, r0
 800a2c0:	460c      	mov	r4, r1
 800a2c2:	b125      	cbz	r5, 800a2ce <__swsetup_r+0x16>
 800a2c4:	69ab      	ldr	r3, [r5, #24]
 800a2c6:	b913      	cbnz	r3, 800a2ce <__swsetup_r+0x16>
 800a2c8:	4628      	mov	r0, r5
 800a2ca:	f000 f985 	bl	800a5d8 <__sinit>
 800a2ce:	4b2e      	ldr	r3, [pc, #184]	; (800a388 <__swsetup_r+0xd0>)
 800a2d0:	429c      	cmp	r4, r3
 800a2d2:	d10f      	bne.n	800a2f4 <__swsetup_r+0x3c>
 800a2d4:	686c      	ldr	r4, [r5, #4]
 800a2d6:	89a3      	ldrh	r3, [r4, #12]
 800a2d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2dc:	0719      	lsls	r1, r3, #28
 800a2de:	d42c      	bmi.n	800a33a <__swsetup_r+0x82>
 800a2e0:	06dd      	lsls	r5, r3, #27
 800a2e2:	d411      	bmi.n	800a308 <__swsetup_r+0x50>
 800a2e4:	2309      	movs	r3, #9
 800a2e6:	6033      	str	r3, [r6, #0]
 800a2e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f0:	81a3      	strh	r3, [r4, #12]
 800a2f2:	e03e      	b.n	800a372 <__swsetup_r+0xba>
 800a2f4:	4b25      	ldr	r3, [pc, #148]	; (800a38c <__swsetup_r+0xd4>)
 800a2f6:	429c      	cmp	r4, r3
 800a2f8:	d101      	bne.n	800a2fe <__swsetup_r+0x46>
 800a2fa:	68ac      	ldr	r4, [r5, #8]
 800a2fc:	e7eb      	b.n	800a2d6 <__swsetup_r+0x1e>
 800a2fe:	4b24      	ldr	r3, [pc, #144]	; (800a390 <__swsetup_r+0xd8>)
 800a300:	429c      	cmp	r4, r3
 800a302:	bf08      	it	eq
 800a304:	68ec      	ldreq	r4, [r5, #12]
 800a306:	e7e6      	b.n	800a2d6 <__swsetup_r+0x1e>
 800a308:	0758      	lsls	r0, r3, #29
 800a30a:	d512      	bpl.n	800a332 <__swsetup_r+0x7a>
 800a30c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a30e:	b141      	cbz	r1, 800a322 <__swsetup_r+0x6a>
 800a310:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a314:	4299      	cmp	r1, r3
 800a316:	d002      	beq.n	800a31e <__swsetup_r+0x66>
 800a318:	4630      	mov	r0, r6
 800a31a:	f7fd fcd3 	bl	8007cc4 <_free_r>
 800a31e:	2300      	movs	r3, #0
 800a320:	6363      	str	r3, [r4, #52]	; 0x34
 800a322:	89a3      	ldrh	r3, [r4, #12]
 800a324:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a328:	81a3      	strh	r3, [r4, #12]
 800a32a:	2300      	movs	r3, #0
 800a32c:	6063      	str	r3, [r4, #4]
 800a32e:	6923      	ldr	r3, [r4, #16]
 800a330:	6023      	str	r3, [r4, #0]
 800a332:	89a3      	ldrh	r3, [r4, #12]
 800a334:	f043 0308 	orr.w	r3, r3, #8
 800a338:	81a3      	strh	r3, [r4, #12]
 800a33a:	6923      	ldr	r3, [r4, #16]
 800a33c:	b94b      	cbnz	r3, 800a352 <__swsetup_r+0x9a>
 800a33e:	89a3      	ldrh	r3, [r4, #12]
 800a340:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a348:	d003      	beq.n	800a352 <__swsetup_r+0x9a>
 800a34a:	4621      	mov	r1, r4
 800a34c:	4630      	mov	r0, r6
 800a34e:	f000 fa05 	bl	800a75c <__smakebuf_r>
 800a352:	89a0      	ldrh	r0, [r4, #12]
 800a354:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a358:	f010 0301 	ands.w	r3, r0, #1
 800a35c:	d00a      	beq.n	800a374 <__swsetup_r+0xbc>
 800a35e:	2300      	movs	r3, #0
 800a360:	60a3      	str	r3, [r4, #8]
 800a362:	6963      	ldr	r3, [r4, #20]
 800a364:	425b      	negs	r3, r3
 800a366:	61a3      	str	r3, [r4, #24]
 800a368:	6923      	ldr	r3, [r4, #16]
 800a36a:	b943      	cbnz	r3, 800a37e <__swsetup_r+0xc6>
 800a36c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a370:	d1ba      	bne.n	800a2e8 <__swsetup_r+0x30>
 800a372:	bd70      	pop	{r4, r5, r6, pc}
 800a374:	0781      	lsls	r1, r0, #30
 800a376:	bf58      	it	pl
 800a378:	6963      	ldrpl	r3, [r4, #20]
 800a37a:	60a3      	str	r3, [r4, #8]
 800a37c:	e7f4      	b.n	800a368 <__swsetup_r+0xb0>
 800a37e:	2000      	movs	r0, #0
 800a380:	e7f7      	b.n	800a372 <__swsetup_r+0xba>
 800a382:	bf00      	nop
 800a384:	2000001c 	.word	0x2000001c
 800a388:	0800c3dc 	.word	0x0800c3dc
 800a38c:	0800c3fc 	.word	0x0800c3fc
 800a390:	0800c3bc 	.word	0x0800c3bc

0800a394 <abort>:
 800a394:	2006      	movs	r0, #6
 800a396:	b508      	push	{r3, lr}
 800a398:	f000 fa50 	bl	800a83c <raise>
 800a39c:	2001      	movs	r0, #1
 800a39e:	f7f7 fd68 	bl	8001e72 <_exit>
	...

0800a3a4 <__sflush_r>:
 800a3a4:	898a      	ldrh	r2, [r1, #12]
 800a3a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3aa:	4605      	mov	r5, r0
 800a3ac:	0710      	lsls	r0, r2, #28
 800a3ae:	460c      	mov	r4, r1
 800a3b0:	d458      	bmi.n	800a464 <__sflush_r+0xc0>
 800a3b2:	684b      	ldr	r3, [r1, #4]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	dc05      	bgt.n	800a3c4 <__sflush_r+0x20>
 800a3b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	dc02      	bgt.n	800a3c4 <__sflush_r+0x20>
 800a3be:	2000      	movs	r0, #0
 800a3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3c6:	2e00      	cmp	r6, #0
 800a3c8:	d0f9      	beq.n	800a3be <__sflush_r+0x1a>
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a3d0:	682f      	ldr	r7, [r5, #0]
 800a3d2:	602b      	str	r3, [r5, #0]
 800a3d4:	d032      	beq.n	800a43c <__sflush_r+0x98>
 800a3d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a3d8:	89a3      	ldrh	r3, [r4, #12]
 800a3da:	075a      	lsls	r2, r3, #29
 800a3dc:	d505      	bpl.n	800a3ea <__sflush_r+0x46>
 800a3de:	6863      	ldr	r3, [r4, #4]
 800a3e0:	1ac0      	subs	r0, r0, r3
 800a3e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a3e4:	b10b      	cbz	r3, 800a3ea <__sflush_r+0x46>
 800a3e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a3e8:	1ac0      	subs	r0, r0, r3
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	4602      	mov	r2, r0
 800a3ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3f0:	4628      	mov	r0, r5
 800a3f2:	6a21      	ldr	r1, [r4, #32]
 800a3f4:	47b0      	blx	r6
 800a3f6:	1c43      	adds	r3, r0, #1
 800a3f8:	89a3      	ldrh	r3, [r4, #12]
 800a3fa:	d106      	bne.n	800a40a <__sflush_r+0x66>
 800a3fc:	6829      	ldr	r1, [r5, #0]
 800a3fe:	291d      	cmp	r1, #29
 800a400:	d82c      	bhi.n	800a45c <__sflush_r+0xb8>
 800a402:	4a2a      	ldr	r2, [pc, #168]	; (800a4ac <__sflush_r+0x108>)
 800a404:	40ca      	lsrs	r2, r1
 800a406:	07d6      	lsls	r6, r2, #31
 800a408:	d528      	bpl.n	800a45c <__sflush_r+0xb8>
 800a40a:	2200      	movs	r2, #0
 800a40c:	6062      	str	r2, [r4, #4]
 800a40e:	6922      	ldr	r2, [r4, #16]
 800a410:	04d9      	lsls	r1, r3, #19
 800a412:	6022      	str	r2, [r4, #0]
 800a414:	d504      	bpl.n	800a420 <__sflush_r+0x7c>
 800a416:	1c42      	adds	r2, r0, #1
 800a418:	d101      	bne.n	800a41e <__sflush_r+0x7a>
 800a41a:	682b      	ldr	r3, [r5, #0]
 800a41c:	b903      	cbnz	r3, 800a420 <__sflush_r+0x7c>
 800a41e:	6560      	str	r0, [r4, #84]	; 0x54
 800a420:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a422:	602f      	str	r7, [r5, #0]
 800a424:	2900      	cmp	r1, #0
 800a426:	d0ca      	beq.n	800a3be <__sflush_r+0x1a>
 800a428:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a42c:	4299      	cmp	r1, r3
 800a42e:	d002      	beq.n	800a436 <__sflush_r+0x92>
 800a430:	4628      	mov	r0, r5
 800a432:	f7fd fc47 	bl	8007cc4 <_free_r>
 800a436:	2000      	movs	r0, #0
 800a438:	6360      	str	r0, [r4, #52]	; 0x34
 800a43a:	e7c1      	b.n	800a3c0 <__sflush_r+0x1c>
 800a43c:	6a21      	ldr	r1, [r4, #32]
 800a43e:	2301      	movs	r3, #1
 800a440:	4628      	mov	r0, r5
 800a442:	47b0      	blx	r6
 800a444:	1c41      	adds	r1, r0, #1
 800a446:	d1c7      	bne.n	800a3d8 <__sflush_r+0x34>
 800a448:	682b      	ldr	r3, [r5, #0]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d0c4      	beq.n	800a3d8 <__sflush_r+0x34>
 800a44e:	2b1d      	cmp	r3, #29
 800a450:	d001      	beq.n	800a456 <__sflush_r+0xb2>
 800a452:	2b16      	cmp	r3, #22
 800a454:	d101      	bne.n	800a45a <__sflush_r+0xb6>
 800a456:	602f      	str	r7, [r5, #0]
 800a458:	e7b1      	b.n	800a3be <__sflush_r+0x1a>
 800a45a:	89a3      	ldrh	r3, [r4, #12]
 800a45c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a460:	81a3      	strh	r3, [r4, #12]
 800a462:	e7ad      	b.n	800a3c0 <__sflush_r+0x1c>
 800a464:	690f      	ldr	r7, [r1, #16]
 800a466:	2f00      	cmp	r7, #0
 800a468:	d0a9      	beq.n	800a3be <__sflush_r+0x1a>
 800a46a:	0793      	lsls	r3, r2, #30
 800a46c:	bf18      	it	ne
 800a46e:	2300      	movne	r3, #0
 800a470:	680e      	ldr	r6, [r1, #0]
 800a472:	bf08      	it	eq
 800a474:	694b      	ldreq	r3, [r1, #20]
 800a476:	eba6 0807 	sub.w	r8, r6, r7
 800a47a:	600f      	str	r7, [r1, #0]
 800a47c:	608b      	str	r3, [r1, #8]
 800a47e:	f1b8 0f00 	cmp.w	r8, #0
 800a482:	dd9c      	ble.n	800a3be <__sflush_r+0x1a>
 800a484:	4643      	mov	r3, r8
 800a486:	463a      	mov	r2, r7
 800a488:	4628      	mov	r0, r5
 800a48a:	6a21      	ldr	r1, [r4, #32]
 800a48c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a48e:	47b0      	blx	r6
 800a490:	2800      	cmp	r0, #0
 800a492:	dc06      	bgt.n	800a4a2 <__sflush_r+0xfe>
 800a494:	89a3      	ldrh	r3, [r4, #12]
 800a496:	f04f 30ff 	mov.w	r0, #4294967295
 800a49a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a49e:	81a3      	strh	r3, [r4, #12]
 800a4a0:	e78e      	b.n	800a3c0 <__sflush_r+0x1c>
 800a4a2:	4407      	add	r7, r0
 800a4a4:	eba8 0800 	sub.w	r8, r8, r0
 800a4a8:	e7e9      	b.n	800a47e <__sflush_r+0xda>
 800a4aa:	bf00      	nop
 800a4ac:	20400001 	.word	0x20400001

0800a4b0 <_fflush_r>:
 800a4b0:	b538      	push	{r3, r4, r5, lr}
 800a4b2:	690b      	ldr	r3, [r1, #16]
 800a4b4:	4605      	mov	r5, r0
 800a4b6:	460c      	mov	r4, r1
 800a4b8:	b913      	cbnz	r3, 800a4c0 <_fflush_r+0x10>
 800a4ba:	2500      	movs	r5, #0
 800a4bc:	4628      	mov	r0, r5
 800a4be:	bd38      	pop	{r3, r4, r5, pc}
 800a4c0:	b118      	cbz	r0, 800a4ca <_fflush_r+0x1a>
 800a4c2:	6983      	ldr	r3, [r0, #24]
 800a4c4:	b90b      	cbnz	r3, 800a4ca <_fflush_r+0x1a>
 800a4c6:	f000 f887 	bl	800a5d8 <__sinit>
 800a4ca:	4b14      	ldr	r3, [pc, #80]	; (800a51c <_fflush_r+0x6c>)
 800a4cc:	429c      	cmp	r4, r3
 800a4ce:	d11b      	bne.n	800a508 <_fflush_r+0x58>
 800a4d0:	686c      	ldr	r4, [r5, #4]
 800a4d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d0ef      	beq.n	800a4ba <_fflush_r+0xa>
 800a4da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a4dc:	07d0      	lsls	r0, r2, #31
 800a4de:	d404      	bmi.n	800a4ea <_fflush_r+0x3a>
 800a4e0:	0599      	lsls	r1, r3, #22
 800a4e2:	d402      	bmi.n	800a4ea <_fflush_r+0x3a>
 800a4e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4e6:	f7ff fcdc 	bl	8009ea2 <__retarget_lock_acquire_recursive>
 800a4ea:	4628      	mov	r0, r5
 800a4ec:	4621      	mov	r1, r4
 800a4ee:	f7ff ff59 	bl	800a3a4 <__sflush_r>
 800a4f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4f4:	4605      	mov	r5, r0
 800a4f6:	07da      	lsls	r2, r3, #31
 800a4f8:	d4e0      	bmi.n	800a4bc <_fflush_r+0xc>
 800a4fa:	89a3      	ldrh	r3, [r4, #12]
 800a4fc:	059b      	lsls	r3, r3, #22
 800a4fe:	d4dd      	bmi.n	800a4bc <_fflush_r+0xc>
 800a500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a502:	f7ff fccf 	bl	8009ea4 <__retarget_lock_release_recursive>
 800a506:	e7d9      	b.n	800a4bc <_fflush_r+0xc>
 800a508:	4b05      	ldr	r3, [pc, #20]	; (800a520 <_fflush_r+0x70>)
 800a50a:	429c      	cmp	r4, r3
 800a50c:	d101      	bne.n	800a512 <_fflush_r+0x62>
 800a50e:	68ac      	ldr	r4, [r5, #8]
 800a510:	e7df      	b.n	800a4d2 <_fflush_r+0x22>
 800a512:	4b04      	ldr	r3, [pc, #16]	; (800a524 <_fflush_r+0x74>)
 800a514:	429c      	cmp	r4, r3
 800a516:	bf08      	it	eq
 800a518:	68ec      	ldreq	r4, [r5, #12]
 800a51a:	e7da      	b.n	800a4d2 <_fflush_r+0x22>
 800a51c:	0800c3dc 	.word	0x0800c3dc
 800a520:	0800c3fc 	.word	0x0800c3fc
 800a524:	0800c3bc 	.word	0x0800c3bc

0800a528 <std>:
 800a528:	2300      	movs	r3, #0
 800a52a:	b510      	push	{r4, lr}
 800a52c:	4604      	mov	r4, r0
 800a52e:	e9c0 3300 	strd	r3, r3, [r0]
 800a532:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a536:	6083      	str	r3, [r0, #8]
 800a538:	8181      	strh	r1, [r0, #12]
 800a53a:	6643      	str	r3, [r0, #100]	; 0x64
 800a53c:	81c2      	strh	r2, [r0, #14]
 800a53e:	6183      	str	r3, [r0, #24]
 800a540:	4619      	mov	r1, r3
 800a542:	2208      	movs	r2, #8
 800a544:	305c      	adds	r0, #92	; 0x5c
 800a546:	f7fd fbb5 	bl	8007cb4 <memset>
 800a54a:	4b05      	ldr	r3, [pc, #20]	; (800a560 <std+0x38>)
 800a54c:	6224      	str	r4, [r4, #32]
 800a54e:	6263      	str	r3, [r4, #36]	; 0x24
 800a550:	4b04      	ldr	r3, [pc, #16]	; (800a564 <std+0x3c>)
 800a552:	62a3      	str	r3, [r4, #40]	; 0x28
 800a554:	4b04      	ldr	r3, [pc, #16]	; (800a568 <std+0x40>)
 800a556:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a558:	4b04      	ldr	r3, [pc, #16]	; (800a56c <std+0x44>)
 800a55a:	6323      	str	r3, [r4, #48]	; 0x30
 800a55c:	bd10      	pop	{r4, pc}
 800a55e:	bf00      	nop
 800a560:	0800a875 	.word	0x0800a875
 800a564:	0800a897 	.word	0x0800a897
 800a568:	0800a8cf 	.word	0x0800a8cf
 800a56c:	0800a8f3 	.word	0x0800a8f3

0800a570 <_cleanup_r>:
 800a570:	4901      	ldr	r1, [pc, #4]	; (800a578 <_cleanup_r+0x8>)
 800a572:	f000 b8af 	b.w	800a6d4 <_fwalk_reent>
 800a576:	bf00      	nop
 800a578:	0800a4b1 	.word	0x0800a4b1

0800a57c <__sfmoreglue>:
 800a57c:	b570      	push	{r4, r5, r6, lr}
 800a57e:	2568      	movs	r5, #104	; 0x68
 800a580:	1e4a      	subs	r2, r1, #1
 800a582:	4355      	muls	r5, r2
 800a584:	460e      	mov	r6, r1
 800a586:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a58a:	f7fd fbe7 	bl	8007d5c <_malloc_r>
 800a58e:	4604      	mov	r4, r0
 800a590:	b140      	cbz	r0, 800a5a4 <__sfmoreglue+0x28>
 800a592:	2100      	movs	r1, #0
 800a594:	e9c0 1600 	strd	r1, r6, [r0]
 800a598:	300c      	adds	r0, #12
 800a59a:	60a0      	str	r0, [r4, #8]
 800a59c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a5a0:	f7fd fb88 	bl	8007cb4 <memset>
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	bd70      	pop	{r4, r5, r6, pc}

0800a5a8 <__sfp_lock_acquire>:
 800a5a8:	4801      	ldr	r0, [pc, #4]	; (800a5b0 <__sfp_lock_acquire+0x8>)
 800a5aa:	f7ff bc7a 	b.w	8009ea2 <__retarget_lock_acquire_recursive>
 800a5ae:	bf00      	nop
 800a5b0:	2000047c 	.word	0x2000047c

0800a5b4 <__sfp_lock_release>:
 800a5b4:	4801      	ldr	r0, [pc, #4]	; (800a5bc <__sfp_lock_release+0x8>)
 800a5b6:	f7ff bc75 	b.w	8009ea4 <__retarget_lock_release_recursive>
 800a5ba:	bf00      	nop
 800a5bc:	2000047c 	.word	0x2000047c

0800a5c0 <__sinit_lock_acquire>:
 800a5c0:	4801      	ldr	r0, [pc, #4]	; (800a5c8 <__sinit_lock_acquire+0x8>)
 800a5c2:	f7ff bc6e 	b.w	8009ea2 <__retarget_lock_acquire_recursive>
 800a5c6:	bf00      	nop
 800a5c8:	20000477 	.word	0x20000477

0800a5cc <__sinit_lock_release>:
 800a5cc:	4801      	ldr	r0, [pc, #4]	; (800a5d4 <__sinit_lock_release+0x8>)
 800a5ce:	f7ff bc69 	b.w	8009ea4 <__retarget_lock_release_recursive>
 800a5d2:	bf00      	nop
 800a5d4:	20000477 	.word	0x20000477

0800a5d8 <__sinit>:
 800a5d8:	b510      	push	{r4, lr}
 800a5da:	4604      	mov	r4, r0
 800a5dc:	f7ff fff0 	bl	800a5c0 <__sinit_lock_acquire>
 800a5e0:	69a3      	ldr	r3, [r4, #24]
 800a5e2:	b11b      	cbz	r3, 800a5ec <__sinit+0x14>
 800a5e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5e8:	f7ff bff0 	b.w	800a5cc <__sinit_lock_release>
 800a5ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a5f0:	6523      	str	r3, [r4, #80]	; 0x50
 800a5f2:	4b13      	ldr	r3, [pc, #76]	; (800a640 <__sinit+0x68>)
 800a5f4:	4a13      	ldr	r2, [pc, #76]	; (800a644 <__sinit+0x6c>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	62a2      	str	r2, [r4, #40]	; 0x28
 800a5fa:	42a3      	cmp	r3, r4
 800a5fc:	bf08      	it	eq
 800a5fe:	2301      	moveq	r3, #1
 800a600:	4620      	mov	r0, r4
 800a602:	bf08      	it	eq
 800a604:	61a3      	streq	r3, [r4, #24]
 800a606:	f000 f81f 	bl	800a648 <__sfp>
 800a60a:	6060      	str	r0, [r4, #4]
 800a60c:	4620      	mov	r0, r4
 800a60e:	f000 f81b 	bl	800a648 <__sfp>
 800a612:	60a0      	str	r0, [r4, #8]
 800a614:	4620      	mov	r0, r4
 800a616:	f000 f817 	bl	800a648 <__sfp>
 800a61a:	2200      	movs	r2, #0
 800a61c:	2104      	movs	r1, #4
 800a61e:	60e0      	str	r0, [r4, #12]
 800a620:	6860      	ldr	r0, [r4, #4]
 800a622:	f7ff ff81 	bl	800a528 <std>
 800a626:	2201      	movs	r2, #1
 800a628:	2109      	movs	r1, #9
 800a62a:	68a0      	ldr	r0, [r4, #8]
 800a62c:	f7ff ff7c 	bl	800a528 <std>
 800a630:	2202      	movs	r2, #2
 800a632:	2112      	movs	r1, #18
 800a634:	68e0      	ldr	r0, [r4, #12]
 800a636:	f7ff ff77 	bl	800a528 <std>
 800a63a:	2301      	movs	r3, #1
 800a63c:	61a3      	str	r3, [r4, #24]
 800a63e:	e7d1      	b.n	800a5e4 <__sinit+0xc>
 800a640:	0800c03c 	.word	0x0800c03c
 800a644:	0800a571 	.word	0x0800a571

0800a648 <__sfp>:
 800a648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a64a:	4607      	mov	r7, r0
 800a64c:	f7ff ffac 	bl	800a5a8 <__sfp_lock_acquire>
 800a650:	4b1e      	ldr	r3, [pc, #120]	; (800a6cc <__sfp+0x84>)
 800a652:	681e      	ldr	r6, [r3, #0]
 800a654:	69b3      	ldr	r3, [r6, #24]
 800a656:	b913      	cbnz	r3, 800a65e <__sfp+0x16>
 800a658:	4630      	mov	r0, r6
 800a65a:	f7ff ffbd 	bl	800a5d8 <__sinit>
 800a65e:	3648      	adds	r6, #72	; 0x48
 800a660:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a664:	3b01      	subs	r3, #1
 800a666:	d503      	bpl.n	800a670 <__sfp+0x28>
 800a668:	6833      	ldr	r3, [r6, #0]
 800a66a:	b30b      	cbz	r3, 800a6b0 <__sfp+0x68>
 800a66c:	6836      	ldr	r6, [r6, #0]
 800a66e:	e7f7      	b.n	800a660 <__sfp+0x18>
 800a670:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a674:	b9d5      	cbnz	r5, 800a6ac <__sfp+0x64>
 800a676:	4b16      	ldr	r3, [pc, #88]	; (800a6d0 <__sfp+0x88>)
 800a678:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a67c:	60e3      	str	r3, [r4, #12]
 800a67e:	6665      	str	r5, [r4, #100]	; 0x64
 800a680:	f7ff fc0e 	bl	8009ea0 <__retarget_lock_init_recursive>
 800a684:	f7ff ff96 	bl	800a5b4 <__sfp_lock_release>
 800a688:	2208      	movs	r2, #8
 800a68a:	4629      	mov	r1, r5
 800a68c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a690:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a694:	6025      	str	r5, [r4, #0]
 800a696:	61a5      	str	r5, [r4, #24]
 800a698:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a69c:	f7fd fb0a 	bl	8007cb4 <memset>
 800a6a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a6a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a6a8:	4620      	mov	r0, r4
 800a6aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6ac:	3468      	adds	r4, #104	; 0x68
 800a6ae:	e7d9      	b.n	800a664 <__sfp+0x1c>
 800a6b0:	2104      	movs	r1, #4
 800a6b2:	4638      	mov	r0, r7
 800a6b4:	f7ff ff62 	bl	800a57c <__sfmoreglue>
 800a6b8:	4604      	mov	r4, r0
 800a6ba:	6030      	str	r0, [r6, #0]
 800a6bc:	2800      	cmp	r0, #0
 800a6be:	d1d5      	bne.n	800a66c <__sfp+0x24>
 800a6c0:	f7ff ff78 	bl	800a5b4 <__sfp_lock_release>
 800a6c4:	230c      	movs	r3, #12
 800a6c6:	603b      	str	r3, [r7, #0]
 800a6c8:	e7ee      	b.n	800a6a8 <__sfp+0x60>
 800a6ca:	bf00      	nop
 800a6cc:	0800c03c 	.word	0x0800c03c
 800a6d0:	ffff0001 	.word	0xffff0001

0800a6d4 <_fwalk_reent>:
 800a6d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6d8:	4606      	mov	r6, r0
 800a6da:	4688      	mov	r8, r1
 800a6dc:	2700      	movs	r7, #0
 800a6de:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a6e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a6e6:	f1b9 0901 	subs.w	r9, r9, #1
 800a6ea:	d505      	bpl.n	800a6f8 <_fwalk_reent+0x24>
 800a6ec:	6824      	ldr	r4, [r4, #0]
 800a6ee:	2c00      	cmp	r4, #0
 800a6f0:	d1f7      	bne.n	800a6e2 <_fwalk_reent+0xe>
 800a6f2:	4638      	mov	r0, r7
 800a6f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6f8:	89ab      	ldrh	r3, [r5, #12]
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d907      	bls.n	800a70e <_fwalk_reent+0x3a>
 800a6fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a702:	3301      	adds	r3, #1
 800a704:	d003      	beq.n	800a70e <_fwalk_reent+0x3a>
 800a706:	4629      	mov	r1, r5
 800a708:	4630      	mov	r0, r6
 800a70a:	47c0      	blx	r8
 800a70c:	4307      	orrs	r7, r0
 800a70e:	3568      	adds	r5, #104	; 0x68
 800a710:	e7e9      	b.n	800a6e6 <_fwalk_reent+0x12>

0800a712 <__swhatbuf_r>:
 800a712:	b570      	push	{r4, r5, r6, lr}
 800a714:	460e      	mov	r6, r1
 800a716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a71a:	4614      	mov	r4, r2
 800a71c:	2900      	cmp	r1, #0
 800a71e:	461d      	mov	r5, r3
 800a720:	b096      	sub	sp, #88	; 0x58
 800a722:	da07      	bge.n	800a734 <__swhatbuf_r+0x22>
 800a724:	2300      	movs	r3, #0
 800a726:	602b      	str	r3, [r5, #0]
 800a728:	89b3      	ldrh	r3, [r6, #12]
 800a72a:	061a      	lsls	r2, r3, #24
 800a72c:	d410      	bmi.n	800a750 <__swhatbuf_r+0x3e>
 800a72e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a732:	e00e      	b.n	800a752 <__swhatbuf_r+0x40>
 800a734:	466a      	mov	r2, sp
 800a736:	f000 f903 	bl	800a940 <_fstat_r>
 800a73a:	2800      	cmp	r0, #0
 800a73c:	dbf2      	blt.n	800a724 <__swhatbuf_r+0x12>
 800a73e:	9a01      	ldr	r2, [sp, #4]
 800a740:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a744:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a748:	425a      	negs	r2, r3
 800a74a:	415a      	adcs	r2, r3
 800a74c:	602a      	str	r2, [r5, #0]
 800a74e:	e7ee      	b.n	800a72e <__swhatbuf_r+0x1c>
 800a750:	2340      	movs	r3, #64	; 0x40
 800a752:	2000      	movs	r0, #0
 800a754:	6023      	str	r3, [r4, #0]
 800a756:	b016      	add	sp, #88	; 0x58
 800a758:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a75c <__smakebuf_r>:
 800a75c:	898b      	ldrh	r3, [r1, #12]
 800a75e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a760:	079d      	lsls	r5, r3, #30
 800a762:	4606      	mov	r6, r0
 800a764:	460c      	mov	r4, r1
 800a766:	d507      	bpl.n	800a778 <__smakebuf_r+0x1c>
 800a768:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a76c:	6023      	str	r3, [r4, #0]
 800a76e:	6123      	str	r3, [r4, #16]
 800a770:	2301      	movs	r3, #1
 800a772:	6163      	str	r3, [r4, #20]
 800a774:	b002      	add	sp, #8
 800a776:	bd70      	pop	{r4, r5, r6, pc}
 800a778:	466a      	mov	r2, sp
 800a77a:	ab01      	add	r3, sp, #4
 800a77c:	f7ff ffc9 	bl	800a712 <__swhatbuf_r>
 800a780:	9900      	ldr	r1, [sp, #0]
 800a782:	4605      	mov	r5, r0
 800a784:	4630      	mov	r0, r6
 800a786:	f7fd fae9 	bl	8007d5c <_malloc_r>
 800a78a:	b948      	cbnz	r0, 800a7a0 <__smakebuf_r+0x44>
 800a78c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a790:	059a      	lsls	r2, r3, #22
 800a792:	d4ef      	bmi.n	800a774 <__smakebuf_r+0x18>
 800a794:	f023 0303 	bic.w	r3, r3, #3
 800a798:	f043 0302 	orr.w	r3, r3, #2
 800a79c:	81a3      	strh	r3, [r4, #12]
 800a79e:	e7e3      	b.n	800a768 <__smakebuf_r+0xc>
 800a7a0:	4b0d      	ldr	r3, [pc, #52]	; (800a7d8 <__smakebuf_r+0x7c>)
 800a7a2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a7a4:	89a3      	ldrh	r3, [r4, #12]
 800a7a6:	6020      	str	r0, [r4, #0]
 800a7a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7ac:	81a3      	strh	r3, [r4, #12]
 800a7ae:	9b00      	ldr	r3, [sp, #0]
 800a7b0:	6120      	str	r0, [r4, #16]
 800a7b2:	6163      	str	r3, [r4, #20]
 800a7b4:	9b01      	ldr	r3, [sp, #4]
 800a7b6:	b15b      	cbz	r3, 800a7d0 <__smakebuf_r+0x74>
 800a7b8:	4630      	mov	r0, r6
 800a7ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7be:	f000 f8d1 	bl	800a964 <_isatty_r>
 800a7c2:	b128      	cbz	r0, 800a7d0 <__smakebuf_r+0x74>
 800a7c4:	89a3      	ldrh	r3, [r4, #12]
 800a7c6:	f023 0303 	bic.w	r3, r3, #3
 800a7ca:	f043 0301 	orr.w	r3, r3, #1
 800a7ce:	81a3      	strh	r3, [r4, #12]
 800a7d0:	89a0      	ldrh	r0, [r4, #12]
 800a7d2:	4305      	orrs	r5, r0
 800a7d4:	81a5      	strh	r5, [r4, #12]
 800a7d6:	e7cd      	b.n	800a774 <__smakebuf_r+0x18>
 800a7d8:	0800a571 	.word	0x0800a571

0800a7dc <_malloc_usable_size_r>:
 800a7dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7e0:	1f18      	subs	r0, r3, #4
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	bfbc      	itt	lt
 800a7e6:	580b      	ldrlt	r3, [r1, r0]
 800a7e8:	18c0      	addlt	r0, r0, r3
 800a7ea:	4770      	bx	lr

0800a7ec <_raise_r>:
 800a7ec:	291f      	cmp	r1, #31
 800a7ee:	b538      	push	{r3, r4, r5, lr}
 800a7f0:	4604      	mov	r4, r0
 800a7f2:	460d      	mov	r5, r1
 800a7f4:	d904      	bls.n	800a800 <_raise_r+0x14>
 800a7f6:	2316      	movs	r3, #22
 800a7f8:	6003      	str	r3, [r0, #0]
 800a7fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a7fe:	bd38      	pop	{r3, r4, r5, pc}
 800a800:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a802:	b112      	cbz	r2, 800a80a <_raise_r+0x1e>
 800a804:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a808:	b94b      	cbnz	r3, 800a81e <_raise_r+0x32>
 800a80a:	4620      	mov	r0, r4
 800a80c:	f000 f830 	bl	800a870 <_getpid_r>
 800a810:	462a      	mov	r2, r5
 800a812:	4601      	mov	r1, r0
 800a814:	4620      	mov	r0, r4
 800a816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a81a:	f000 b817 	b.w	800a84c <_kill_r>
 800a81e:	2b01      	cmp	r3, #1
 800a820:	d00a      	beq.n	800a838 <_raise_r+0x4c>
 800a822:	1c59      	adds	r1, r3, #1
 800a824:	d103      	bne.n	800a82e <_raise_r+0x42>
 800a826:	2316      	movs	r3, #22
 800a828:	6003      	str	r3, [r0, #0]
 800a82a:	2001      	movs	r0, #1
 800a82c:	e7e7      	b.n	800a7fe <_raise_r+0x12>
 800a82e:	2400      	movs	r4, #0
 800a830:	4628      	mov	r0, r5
 800a832:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a836:	4798      	blx	r3
 800a838:	2000      	movs	r0, #0
 800a83a:	e7e0      	b.n	800a7fe <_raise_r+0x12>

0800a83c <raise>:
 800a83c:	4b02      	ldr	r3, [pc, #8]	; (800a848 <raise+0xc>)
 800a83e:	4601      	mov	r1, r0
 800a840:	6818      	ldr	r0, [r3, #0]
 800a842:	f7ff bfd3 	b.w	800a7ec <_raise_r>
 800a846:	bf00      	nop
 800a848:	2000001c 	.word	0x2000001c

0800a84c <_kill_r>:
 800a84c:	b538      	push	{r3, r4, r5, lr}
 800a84e:	2300      	movs	r3, #0
 800a850:	4d06      	ldr	r5, [pc, #24]	; (800a86c <_kill_r+0x20>)
 800a852:	4604      	mov	r4, r0
 800a854:	4608      	mov	r0, r1
 800a856:	4611      	mov	r1, r2
 800a858:	602b      	str	r3, [r5, #0]
 800a85a:	f7f7 fafa 	bl	8001e52 <_kill>
 800a85e:	1c43      	adds	r3, r0, #1
 800a860:	d102      	bne.n	800a868 <_kill_r+0x1c>
 800a862:	682b      	ldr	r3, [r5, #0]
 800a864:	b103      	cbz	r3, 800a868 <_kill_r+0x1c>
 800a866:	6023      	str	r3, [r4, #0]
 800a868:	bd38      	pop	{r3, r4, r5, pc}
 800a86a:	bf00      	nop
 800a86c:	20000470 	.word	0x20000470

0800a870 <_getpid_r>:
 800a870:	f7f7 bae8 	b.w	8001e44 <_getpid>

0800a874 <__sread>:
 800a874:	b510      	push	{r4, lr}
 800a876:	460c      	mov	r4, r1
 800a878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a87c:	f000 f894 	bl	800a9a8 <_read_r>
 800a880:	2800      	cmp	r0, #0
 800a882:	bfab      	itete	ge
 800a884:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a886:	89a3      	ldrhlt	r3, [r4, #12]
 800a888:	181b      	addge	r3, r3, r0
 800a88a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a88e:	bfac      	ite	ge
 800a890:	6563      	strge	r3, [r4, #84]	; 0x54
 800a892:	81a3      	strhlt	r3, [r4, #12]
 800a894:	bd10      	pop	{r4, pc}

0800a896 <__swrite>:
 800a896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a89a:	461f      	mov	r7, r3
 800a89c:	898b      	ldrh	r3, [r1, #12]
 800a89e:	4605      	mov	r5, r0
 800a8a0:	05db      	lsls	r3, r3, #23
 800a8a2:	460c      	mov	r4, r1
 800a8a4:	4616      	mov	r6, r2
 800a8a6:	d505      	bpl.n	800a8b4 <__swrite+0x1e>
 800a8a8:	2302      	movs	r3, #2
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8b0:	f000 f868 	bl	800a984 <_lseek_r>
 800a8b4:	89a3      	ldrh	r3, [r4, #12]
 800a8b6:	4632      	mov	r2, r6
 800a8b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8bc:	81a3      	strh	r3, [r4, #12]
 800a8be:	4628      	mov	r0, r5
 800a8c0:	463b      	mov	r3, r7
 800a8c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ca:	f000 b817 	b.w	800a8fc <_write_r>

0800a8ce <__sseek>:
 800a8ce:	b510      	push	{r4, lr}
 800a8d0:	460c      	mov	r4, r1
 800a8d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8d6:	f000 f855 	bl	800a984 <_lseek_r>
 800a8da:	1c43      	adds	r3, r0, #1
 800a8dc:	89a3      	ldrh	r3, [r4, #12]
 800a8de:	bf15      	itete	ne
 800a8e0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a8e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a8e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a8ea:	81a3      	strheq	r3, [r4, #12]
 800a8ec:	bf18      	it	ne
 800a8ee:	81a3      	strhne	r3, [r4, #12]
 800a8f0:	bd10      	pop	{r4, pc}

0800a8f2 <__sclose>:
 800a8f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8f6:	f000 b813 	b.w	800a920 <_close_r>
	...

0800a8fc <_write_r>:
 800a8fc:	b538      	push	{r3, r4, r5, lr}
 800a8fe:	4604      	mov	r4, r0
 800a900:	4608      	mov	r0, r1
 800a902:	4611      	mov	r1, r2
 800a904:	2200      	movs	r2, #0
 800a906:	4d05      	ldr	r5, [pc, #20]	; (800a91c <_write_r+0x20>)
 800a908:	602a      	str	r2, [r5, #0]
 800a90a:	461a      	mov	r2, r3
 800a90c:	f7f7 fad8 	bl	8001ec0 <_write>
 800a910:	1c43      	adds	r3, r0, #1
 800a912:	d102      	bne.n	800a91a <_write_r+0x1e>
 800a914:	682b      	ldr	r3, [r5, #0]
 800a916:	b103      	cbz	r3, 800a91a <_write_r+0x1e>
 800a918:	6023      	str	r3, [r4, #0]
 800a91a:	bd38      	pop	{r3, r4, r5, pc}
 800a91c:	20000470 	.word	0x20000470

0800a920 <_close_r>:
 800a920:	b538      	push	{r3, r4, r5, lr}
 800a922:	2300      	movs	r3, #0
 800a924:	4d05      	ldr	r5, [pc, #20]	; (800a93c <_close_r+0x1c>)
 800a926:	4604      	mov	r4, r0
 800a928:	4608      	mov	r0, r1
 800a92a:	602b      	str	r3, [r5, #0]
 800a92c:	f7f7 fae4 	bl	8001ef8 <_close>
 800a930:	1c43      	adds	r3, r0, #1
 800a932:	d102      	bne.n	800a93a <_close_r+0x1a>
 800a934:	682b      	ldr	r3, [r5, #0]
 800a936:	b103      	cbz	r3, 800a93a <_close_r+0x1a>
 800a938:	6023      	str	r3, [r4, #0]
 800a93a:	bd38      	pop	{r3, r4, r5, pc}
 800a93c:	20000470 	.word	0x20000470

0800a940 <_fstat_r>:
 800a940:	b538      	push	{r3, r4, r5, lr}
 800a942:	2300      	movs	r3, #0
 800a944:	4d06      	ldr	r5, [pc, #24]	; (800a960 <_fstat_r+0x20>)
 800a946:	4604      	mov	r4, r0
 800a948:	4608      	mov	r0, r1
 800a94a:	4611      	mov	r1, r2
 800a94c:	602b      	str	r3, [r5, #0]
 800a94e:	f7f7 fade 	bl	8001f0e <_fstat>
 800a952:	1c43      	adds	r3, r0, #1
 800a954:	d102      	bne.n	800a95c <_fstat_r+0x1c>
 800a956:	682b      	ldr	r3, [r5, #0]
 800a958:	b103      	cbz	r3, 800a95c <_fstat_r+0x1c>
 800a95a:	6023      	str	r3, [r4, #0]
 800a95c:	bd38      	pop	{r3, r4, r5, pc}
 800a95e:	bf00      	nop
 800a960:	20000470 	.word	0x20000470

0800a964 <_isatty_r>:
 800a964:	b538      	push	{r3, r4, r5, lr}
 800a966:	2300      	movs	r3, #0
 800a968:	4d05      	ldr	r5, [pc, #20]	; (800a980 <_isatty_r+0x1c>)
 800a96a:	4604      	mov	r4, r0
 800a96c:	4608      	mov	r0, r1
 800a96e:	602b      	str	r3, [r5, #0]
 800a970:	f7f7 fadc 	bl	8001f2c <_isatty>
 800a974:	1c43      	adds	r3, r0, #1
 800a976:	d102      	bne.n	800a97e <_isatty_r+0x1a>
 800a978:	682b      	ldr	r3, [r5, #0]
 800a97a:	b103      	cbz	r3, 800a97e <_isatty_r+0x1a>
 800a97c:	6023      	str	r3, [r4, #0]
 800a97e:	bd38      	pop	{r3, r4, r5, pc}
 800a980:	20000470 	.word	0x20000470

0800a984 <_lseek_r>:
 800a984:	b538      	push	{r3, r4, r5, lr}
 800a986:	4604      	mov	r4, r0
 800a988:	4608      	mov	r0, r1
 800a98a:	4611      	mov	r1, r2
 800a98c:	2200      	movs	r2, #0
 800a98e:	4d05      	ldr	r5, [pc, #20]	; (800a9a4 <_lseek_r+0x20>)
 800a990:	602a      	str	r2, [r5, #0]
 800a992:	461a      	mov	r2, r3
 800a994:	f7f7 fad4 	bl	8001f40 <_lseek>
 800a998:	1c43      	adds	r3, r0, #1
 800a99a:	d102      	bne.n	800a9a2 <_lseek_r+0x1e>
 800a99c:	682b      	ldr	r3, [r5, #0]
 800a99e:	b103      	cbz	r3, 800a9a2 <_lseek_r+0x1e>
 800a9a0:	6023      	str	r3, [r4, #0]
 800a9a2:	bd38      	pop	{r3, r4, r5, pc}
 800a9a4:	20000470 	.word	0x20000470

0800a9a8 <_read_r>:
 800a9a8:	b538      	push	{r3, r4, r5, lr}
 800a9aa:	4604      	mov	r4, r0
 800a9ac:	4608      	mov	r0, r1
 800a9ae:	4611      	mov	r1, r2
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	4d05      	ldr	r5, [pc, #20]	; (800a9c8 <_read_r+0x20>)
 800a9b4:	602a      	str	r2, [r5, #0]
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	f7f7 fa65 	bl	8001e86 <_read>
 800a9bc:	1c43      	adds	r3, r0, #1
 800a9be:	d102      	bne.n	800a9c6 <_read_r+0x1e>
 800a9c0:	682b      	ldr	r3, [r5, #0]
 800a9c2:	b103      	cbz	r3, 800a9c6 <_read_r+0x1e>
 800a9c4:	6023      	str	r3, [r4, #0]
 800a9c6:	bd38      	pop	{r3, r4, r5, pc}
 800a9c8:	20000470 	.word	0x20000470

0800a9cc <round>:
 800a9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ce:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a9d2:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 800a9d6:	2c13      	cmp	r4, #19
 800a9d8:	4602      	mov	r2, r0
 800a9da:	460b      	mov	r3, r1
 800a9dc:	4606      	mov	r6, r0
 800a9de:	460d      	mov	r5, r1
 800a9e0:	dc19      	bgt.n	800aa16 <round+0x4a>
 800a9e2:	2c00      	cmp	r4, #0
 800a9e4:	da09      	bge.n	800a9fa <round+0x2e>
 800a9e6:	3401      	adds	r4, #1
 800a9e8:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800a9ec:	d103      	bne.n	800a9f6 <round+0x2a>
 800a9ee:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a9f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	e02a      	b.n	800aa50 <round+0x84>
 800a9fa:	4917      	ldr	r1, [pc, #92]	; (800aa58 <round+0x8c>)
 800a9fc:	4121      	asrs	r1, r4
 800a9fe:	ea03 0001 	and.w	r0, r3, r1
 800aa02:	4302      	orrs	r2, r0
 800aa04:	d010      	beq.n	800aa28 <round+0x5c>
 800aa06:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800aa0a:	fa42 f404 	asr.w	r4, r2, r4
 800aa0e:	4423      	add	r3, r4
 800aa10:	ea23 0301 	bic.w	r3, r3, r1
 800aa14:	e7ef      	b.n	800a9f6 <round+0x2a>
 800aa16:	2c33      	cmp	r4, #51	; 0x33
 800aa18:	dd09      	ble.n	800aa2e <round+0x62>
 800aa1a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800aa1e:	d103      	bne.n	800aa28 <round+0x5c>
 800aa20:	f7f5 fba4 	bl	800016c <__adddf3>
 800aa24:	4606      	mov	r6, r0
 800aa26:	460d      	mov	r5, r1
 800aa28:	4630      	mov	r0, r6
 800aa2a:	4629      	mov	r1, r5
 800aa2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa2e:	f04f 30ff 	mov.w	r0, #4294967295
 800aa32:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800aa36:	40f8      	lsrs	r0, r7
 800aa38:	4202      	tst	r2, r0
 800aa3a:	d0f5      	beq.n	800aa28 <round+0x5c>
 800aa3c:	2101      	movs	r1, #1
 800aa3e:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800aa42:	fa01 f404 	lsl.w	r4, r1, r4
 800aa46:	1912      	adds	r2, r2, r4
 800aa48:	bf28      	it	cs
 800aa4a:	185b      	addcs	r3, r3, r1
 800aa4c:	ea22 0200 	bic.w	r2, r2, r0
 800aa50:	4619      	mov	r1, r3
 800aa52:	4610      	mov	r0, r2
 800aa54:	e7e6      	b.n	800aa24 <round+0x58>
 800aa56:	bf00      	nop
 800aa58:	000fffff 	.word	0x000fffff

0800aa5c <_init>:
 800aa5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa5e:	bf00      	nop
 800aa60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa62:	bc08      	pop	{r3}
 800aa64:	469e      	mov	lr, r3
 800aa66:	4770      	bx	lr

0800aa68 <_fini>:
 800aa68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa6a:	bf00      	nop
 800aa6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa6e:	bc08      	pop	{r3}
 800aa70:	469e      	mov	lr, r3
 800aa72:	4770      	bx	lr
