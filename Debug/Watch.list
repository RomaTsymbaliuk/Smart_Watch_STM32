
Watch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a314  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001994  0800a428  0800a428  0001a428  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdbc  0800bdbc  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800bdbc  0800bdbc  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bdbc  0800bdbc  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdbc  0800bdbc  0001bdbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bdc0  0800bdc0  0001bdc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800bdc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  200001ec  0800bfb0  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000428  0800bfb0  00020428  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d32  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e28  00000000  00000000  00035f47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001540  00000000  00000000  00038d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001418  00000000  00000000  0003a2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a13b  00000000  00000000  0003b6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018271  00000000  00000000  00055803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099900  00000000  00000000  0006da74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107374  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c84  00000000  00000000  001073c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a40c 	.word	0x0800a40c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	0800a40c 	.word	0x0800a40c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <get_week_day>:
/* USER CODE BEGIN PTD */
int iteration = 0;
int last_beat = 0;
int delays[20];

char *get_week_day(int day) {
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	enum WEEKDAY {MONDAY = 1, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY};

	switch(day) {
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	2b06      	cmp	r3, #6
 8000f92:	d81f      	bhi.n	8000fd4 <get_week_day+0x50>
 8000f94:	a201      	add	r2, pc, #4	; (adr r2, 8000f9c <get_week_day+0x18>)
 8000f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f9a:	bf00      	nop
 8000f9c:	08000fb9 	.word	0x08000fb9
 8000fa0:	08000fbd 	.word	0x08000fbd
 8000fa4:	08000fc1 	.word	0x08000fc1
 8000fa8:	08000fc5 	.word	0x08000fc5
 8000fac:	08000fc9 	.word	0x08000fc9
 8000fb0:	08000fcd 	.word	0x08000fcd
 8000fb4:	08000fd1 	.word	0x08000fd1
		case MONDAY:
			return "Mon";
 8000fb8:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <get_week_day+0x5c>)
 8000fba:	e00c      	b.n	8000fd6 <get_week_day+0x52>
			break;
		case TUESDAY:
			return "Tue";
 8000fbc:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <get_week_day+0x60>)
 8000fbe:	e00a      	b.n	8000fd6 <get_week_day+0x52>
			break;
		case WEDNESDAY:
			return "Wed";
 8000fc0:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <get_week_day+0x64>)
 8000fc2:	e008      	b.n	8000fd6 <get_week_day+0x52>
			break;
		case THURSDAY:
			return "Thu";
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <get_week_day+0x68>)
 8000fc6:	e006      	b.n	8000fd6 <get_week_day+0x52>
			break;
		case FRIDAY:
			return "Fri";
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <get_week_day+0x6c>)
 8000fca:	e004      	b.n	8000fd6 <get_week_day+0x52>
			break;
		case SATURDAY:
			return "Sat";
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <get_week_day+0x70>)
 8000fce:	e002      	b.n	8000fd6 <get_week_day+0x52>
			break;
		case SUNDAY:
			return "Sun";
 8000fd0:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <get_week_day+0x74>)
 8000fd2:	e000      	b.n	8000fd6 <get_week_day+0x52>
			break;
		default:
			return "Non";
 8000fd4:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <get_week_day+0x78>)
			break;
	}
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr
 8000fe0:	0800a428 	.word	0x0800a428
 8000fe4:	0800a42c 	.word	0x0800a42c
 8000fe8:	0800a430 	.word	0x0800a430
 8000fec:	0800a434 	.word	0x0800a434
 8000ff0:	0800a438 	.word	0x0800a438
 8000ff4:	0800a43c 	.word	0x0800a43c
 8000ff8:	0800a440 	.word	0x0800a440
 8000ffc:	0800a444 	.word	0x0800a444

08001000 <display_date_and_time>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char time[30] = {0};
char date[30] = {0};

void display_date_and_time() {
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af04      	add	r7, sp, #16
	ILI9341_WriteString(40, 10, date, Font_7x10, ILI9341_GREEN, ILI9341_BLACK);
 8001006:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <display_date_and_time+0x44>)
 8001008:	2200      	movs	r2, #0
 800100a:	9202      	str	r2, [sp, #8]
 800100c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001010:	9201      	str	r2, [sp, #4]
 8001012:	685a      	ldr	r2, [r3, #4]
 8001014:	9200      	str	r2, [sp, #0]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <display_date_and_time+0x48>)
 800101a:	210a      	movs	r1, #10
 800101c:	2028      	movs	r0, #40	; 0x28
 800101e:	f001 f9da 	bl	80023d6 <ILI9341_WriteString>
	ILI9341_WriteString(40, 100, time, Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8001022:	4b0a      	ldr	r3, [pc, #40]	; (800104c <display_date_and_time+0x4c>)
 8001024:	2200      	movs	r2, #0
 8001026:	9202      	str	r2, [sp, #8]
 8001028:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800102c:	9201      	str	r2, [sp, #4]
 800102e:	685a      	ldr	r2, [r3, #4]
 8001030:	9200      	str	r2, [sp, #0]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a06      	ldr	r2, [pc, #24]	; (8001050 <display_date_and_time+0x50>)
 8001036:	2164      	movs	r1, #100	; 0x64
 8001038:	2028      	movs	r0, #40	; 0x28
 800103a:	f001 f9cc 	bl	80023d6 <ILI9341_WriteString>
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000004 	.word	0x20000004
 8001048:	200003f0 	.word	0x200003f0
 800104c:	2000000c 	.word	0x2000000c
 8001050:	200003d0 	.word	0x200003d0

08001054 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	; 0x28
 8001058:	af02      	add	r7, sp, #8
 800105a:	6078      	str	r0, [r7, #4]

	char voltage_dc[2];
	char *dat;
	RTC_TimeTypeDef sTime = {0};
 800105c:	f107 0310 	add.w	r3, r7, #16
 8001060:	2100      	movs	r1, #0
 8001062:	460a      	mov	r2, r1
 8001064:	801a      	strh	r2, [r3, #0]
 8001066:	460a      	mov	r2, r1
 8001068:	709a      	strb	r2, [r3, #2]
	RTC_DateTypeDef sDate = {0};
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
	int raw;
	float voltage = 0;
 800106e:	f04f 0300 	mov.w	r3, #0
 8001072:	61fb      	str	r3, [r7, #28]
	enum WEEKDAY {MONDAY = 1, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY};

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001074:	f107 0310 	add.w	r3, r7, #16
 8001078:	2200      	movs	r2, #0
 800107a:	4619      	mov	r1, r3
 800107c:	4815      	ldr	r0, [pc, #84]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800107e:	f004 fea5 	bl	8005dcc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001082:	f107 030c 	add.w	r3, r7, #12
 8001086:	2200      	movs	r2, #0
 8001088:	4619      	mov	r1, r3
 800108a:	4812      	ldr	r0, [pc, #72]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800108c:	f005 f82c 	bl	80060e8 <HAL_RTC_GetDate>
	dat = get_week_day(sDate.WeekDay);
 8001090:	7b3b      	ldrb	r3, [r7, #12]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ff76 	bl	8000f84 <get_week_day>
 8001098:	61b8      	str	r0, [r7, #24]
	sprintf(date, "%s %02d/%02d/%02d", dat, sDate.Date, sDate.Month, sDate.Year);
 800109a:	7bbb      	ldrb	r3, [r7, #14]
 800109c:	4619      	mov	r1, r3
 800109e:	7b7b      	ldrb	r3, [r7, #13]
 80010a0:	7bfa      	ldrb	r2, [r7, #15]
 80010a2:	9201      	str	r2, [sp, #4]
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	460b      	mov	r3, r1
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	490b      	ldr	r1, [pc, #44]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80010ac:	480b      	ldr	r0, [pc, #44]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0x88>)
 80010ae:	f006 ffef 	bl	8008090 <siprintf>
	sprintf(time, "%02d:%02d:%02d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 80010b2:	7c3b      	ldrb	r3, [r7, #16]
 80010b4:	461a      	mov	r2, r3
 80010b6:	7c7b      	ldrb	r3, [r7, #17]
 80010b8:	4619      	mov	r1, r3
 80010ba:	7cbb      	ldrb	r3, [r7, #18]
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	460b      	mov	r3, r1
 80010c0:	4907      	ldr	r1, [pc, #28]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80010c2:	4808      	ldr	r0, [pc, #32]	; (80010e4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80010c4:	f006 ffe4 	bl	8008090 <siprintf>
	display_date_and_time();
 80010c8:	f7ff ff9a 	bl	8001000 <display_date_and_time>
}
 80010cc:	bf00      	nop
 80010ce:	3720      	adds	r7, #32
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	2000028c 	.word	0x2000028c
 80010d8:	0800a448 	.word	0x0800a448
 80010dc:	200003f0 	.word	0x200003f0
 80010e0:	0800a45c 	.word	0x0800a45c
 80010e4:	200003d0 	.word	0x200003d0

080010e8 <init>:

void init() {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
    ILI9341_Unselect();
 80010ec:	f000 feee 	bl	8001ecc <ILI9341_Unselect>
    ILI9341_Init();
 80010f0:	f000 ff9e 	bl	8002030 <ILI9341_Init>
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <read_menu>:
  HAL_ADC_Stop(&hadc2);
  sprintf(adc_char, "Vol : %f", adc_value);
  ILI9341_WriteString(10, 70, adc_char, Font_11x18, ILI9341_RED, ILI9341_BLACK);
}

void read_menu(uint8_t key) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af04      	add	r7, sp, #16
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
	enum KEY { LEFT, RIGHT, BOTTOM };
	switch(key) {
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	2b02      	cmp	r3, #2
 8001106:	d032      	beq.n	800116e <read_menu+0x76>
 8001108:	2b02      	cmp	r3, #2
 800110a:	dc46      	bgt.n	800119a <read_menu+0xa2>
 800110c:	2b00      	cmp	r3, #0
 800110e:	d002      	beq.n	8001116 <read_menu+0x1e>
 8001110:	2b01      	cmp	r3, #1
 8001112:	d016      	beq.n	8001142 <read_menu+0x4a>
			ILI9341_WriteString(10, 10, "Pressed BOTTOM", Font_11x18, ILI9341_RED, ILI9341_BLACK);
			HAL_Delay(500);
			ILI9341_FillScreen(ILI9341_BLACK);
			break;
	}
}
 8001114:	e041      	b.n	800119a <read_menu+0xa2>
			ILI9341_WriteString(10, 10, "Pressed LEFT", Font_11x18, ILI9341_RED, ILI9341_BLACK);
 8001116:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <read_menu+0xac>)
 8001118:	2200      	movs	r2, #0
 800111a:	9202      	str	r2, [sp, #8]
 800111c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001120:	9201      	str	r2, [sp, #4]
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	9200      	str	r2, [sp, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a1f      	ldr	r2, [pc, #124]	; (80011a8 <read_menu+0xb0>)
 800112a:	210a      	movs	r1, #10
 800112c:	200a      	movs	r0, #10
 800112e:	f001 f952 	bl	80023d6 <ILI9341_WriteString>
			HAL_Delay(500);
 8001132:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001136:	f001 fbe1 	bl	80028fc <HAL_Delay>
			ILI9341_FillScreen(ILI9341_BLACK);
 800113a:	2000      	movs	r0, #0
 800113c:	f001 fa04 	bl	8002548 <ILI9341_FillScreen>
			break;
 8001140:	e02b      	b.n	800119a <read_menu+0xa2>
			ILI9341_WriteString(10, 10, "Pressed RIGHT", Font_11x18, ILI9341_RED, ILI9341_BLACK);
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <read_menu+0xac>)
 8001144:	2200      	movs	r2, #0
 8001146:	9202      	str	r2, [sp, #8]
 8001148:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800114c:	9201      	str	r2, [sp, #4]
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	9200      	str	r2, [sp, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a15      	ldr	r2, [pc, #84]	; (80011ac <read_menu+0xb4>)
 8001156:	210a      	movs	r1, #10
 8001158:	200a      	movs	r0, #10
 800115a:	f001 f93c 	bl	80023d6 <ILI9341_WriteString>
			HAL_Delay(500);
 800115e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001162:	f001 fbcb 	bl	80028fc <HAL_Delay>
			ILI9341_FillScreen(ILI9341_BLACK);
 8001166:	2000      	movs	r0, #0
 8001168:	f001 f9ee 	bl	8002548 <ILI9341_FillScreen>
			break;
 800116c:	e015      	b.n	800119a <read_menu+0xa2>
			ILI9341_WriteString(10, 10, "Pressed BOTTOM", Font_11x18, ILI9341_RED, ILI9341_BLACK);
 800116e:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <read_menu+0xac>)
 8001170:	2200      	movs	r2, #0
 8001172:	9202      	str	r2, [sp, #8]
 8001174:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001178:	9201      	str	r2, [sp, #4]
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	9200      	str	r2, [sp, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a0b      	ldr	r2, [pc, #44]	; (80011b0 <read_menu+0xb8>)
 8001182:	210a      	movs	r1, #10
 8001184:	200a      	movs	r0, #10
 8001186:	f001 f926 	bl	80023d6 <ILI9341_WriteString>
			HAL_Delay(500);
 800118a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800118e:	f001 fbb5 	bl	80028fc <HAL_Delay>
			ILI9341_FillScreen(ILI9341_BLACK);
 8001192:	2000      	movs	r0, #0
 8001194:	f001 f9d8 	bl	8002548 <ILI9341_FillScreen>
			break;
 8001198:	bf00      	nop
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	2000000c 	.word	0x2000000c
 80011a8:	0800a478 	.word	0x0800a478
 80011ac:	0800a488 	.word	0x0800a488
 80011b0:	0800a498 	.word	0x0800a498

080011b4 <check_menu>:

void check_menu(){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  enum KEY {LEFT, RIGHT, BOTTOM};
  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET) {
 80011b8:	2104      	movs	r1, #4
 80011ba:	4810      	ldr	r0, [pc, #64]	; (80011fc <check_menu+0x48>)
 80011bc:	f002 f8ec 	bl	8003398 <HAL_GPIO_ReadPin>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d102      	bne.n	80011cc <check_menu+0x18>
	  read_menu(RIGHT);
 80011c6:	2001      	movs	r0, #1
 80011c8:	f7ff ff96 	bl	80010f8 <read_menu>
  }
  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET) {
 80011cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011d0:	480a      	ldr	r0, [pc, #40]	; (80011fc <check_menu+0x48>)
 80011d2:	f002 f8e1 	bl	8003398 <HAL_GPIO_ReadPin>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d102      	bne.n	80011e2 <check_menu+0x2e>
	  read_menu(LEFT);
 80011dc:	2000      	movs	r0, #0
 80011de:	f7ff ff8b 	bl	80010f8 <read_menu>
  }
  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == GPIO_PIN_RESET) {
 80011e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011e6:	4806      	ldr	r0, [pc, #24]	; (8001200 <check_menu+0x4c>)
 80011e8:	f002 f8d6 	bl	8003398 <HAL_GPIO_ReadPin>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d102      	bne.n	80011f8 <check_menu+0x44>
	  read_menu(BOTTOM);
 80011f2:	2002      	movs	r0, #2
 80011f4:	f7ff ff80 	bl	80010f8 <read_menu>
  }
}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40010800 	.word	0x40010800
 8001200:	40010c00 	.word	0x40010c00

08001204 <display_david_star>:

void display_david_star(uint16_t color) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b08c      	sub	sp, #48	; 0x30
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	80fb      	strh	r3, [r7, #6]
	int star_width = 30;
 800120e:	231e      	movs	r3, #30
 8001210:	62fb      	str	r3, [r7, #44]	; 0x2c
	int star_height = 50;
 8001212:	2332      	movs	r3, #50	; 0x32
 8001214:	62bb      	str	r3, [r7, #40]	; 0x28
	int star_distance = 60;
 8001216:	233c      	movs	r3, #60	; 0x3c
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
	int start_y = 35;
 800121a:	2323      	movs	r3, #35	; 0x23
 800121c:	623b      	str	r3, [r7, #32]

	struct point point_a = {ILI9341_WIDTH / 2, start_y};
 800121e:	2350      	movs	r3, #80	; 0x50
 8001220:	773b      	strb	r3, [r7, #28]
 8001222:	6a3b      	ldr	r3, [r7, #32]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	777b      	strb	r3, [r7, #29]
	struct point point_b = {ILI9341_WIDTH / 2 - star_width, start_y + star_height};
 8001228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800122a:	b2db      	uxtb	r3, r3
 800122c:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8001230:	b2db      	uxtb	r3, r3
 8001232:	763b      	strb	r3, [r7, #24]
 8001234:	6a3b      	ldr	r3, [r7, #32]
 8001236:	b2da      	uxtb	r2, r3
 8001238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800123a:	b2db      	uxtb	r3, r3
 800123c:	4413      	add	r3, r2
 800123e:	b2db      	uxtb	r3, r3
 8001240:	767b      	strb	r3, [r7, #25]
	struct point point_c = {ILI9341_WIDTH / 2 + star_width, start_y + star_height};
 8001242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001244:	b2db      	uxtb	r3, r3
 8001246:	3350      	adds	r3, #80	; 0x50
 8001248:	b2db      	uxtb	r3, r3
 800124a:	753b      	strb	r3, [r7, #20]
 800124c:	6a3b      	ldr	r3, [r7, #32]
 800124e:	b2da      	uxtb	r2, r3
 8001250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001252:	b2db      	uxtb	r3, r3
 8001254:	4413      	add	r3, r2
 8001256:	b2db      	uxtb	r3, r3
 8001258:	757b      	strb	r3, [r7, #21]

	struct point point_a1 = {ILI9341_WIDTH / 2, start_y + star_distance};
 800125a:	2350      	movs	r3, #80	; 0x50
 800125c:	743b      	strb	r3, [r7, #16]
 800125e:	6a3b      	ldr	r3, [r7, #32]
 8001260:	b2da      	uxtb	r2, r3
 8001262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001264:	b2db      	uxtb	r3, r3
 8001266:	4413      	add	r3, r2
 8001268:	b2db      	uxtb	r3, r3
 800126a:	747b      	strb	r3, [r7, #17]
	struct point point_b1 = {ILI9341_WIDTH / 2 - star_width, start_y + star_distance - star_height};
 800126c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800126e:	b2db      	uxtb	r3, r3
 8001270:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8001274:	b2db      	uxtb	r3, r3
 8001276:	733b      	strb	r3, [r7, #12]
 8001278:	6a3b      	ldr	r3, [r7, #32]
 800127a:	b2da      	uxtb	r2, r3
 800127c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127e:	b2db      	uxtb	r3, r3
 8001280:	4413      	add	r3, r2
 8001282:	b2da      	uxtb	r2, r3
 8001284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001286:	b2db      	uxtb	r3, r3
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	b2db      	uxtb	r3, r3
 800128c:	737b      	strb	r3, [r7, #13]
	struct point point_c1 = {ILI9341_WIDTH / 2 + star_width, start_y + star_distance - star_height};
 800128e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001290:	b2db      	uxtb	r3, r3
 8001292:	3350      	adds	r3, #80	; 0x50
 8001294:	b2db      	uxtb	r3, r3
 8001296:	723b      	strb	r3, [r7, #8]
 8001298:	6a3b      	ldr	r3, [r7, #32]
 800129a:	b2da      	uxtb	r2, r3
 800129c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	4413      	add	r3, r2
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	727b      	strb	r3, [r7, #9]

	ILI9341_DrawTriangle(point_a, point_b, point_c, color);
 80012ae:	88fb      	ldrh	r3, [r7, #6]
 80012b0:	697a      	ldr	r2, [r7, #20]
 80012b2:	69b9      	ldr	r1, [r7, #24]
 80012b4:	69f8      	ldr	r0, [r7, #28]
 80012b6:	f001 faa1 	bl	80027fc <ILI9341_DrawTriangle>
	ILI9341_DrawTriangle(point_a1, point_b1, point_c1, color);
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	68ba      	ldr	r2, [r7, #8]
 80012be:	68f9      	ldr	r1, [r7, #12]
 80012c0:	6938      	ldr	r0, [r7, #16]
 80012c2:	f001 fa9b 	bl	80027fc <ILI9341_DrawTriangle>
}
 80012c6:	bf00      	nop
 80012c8:	3730      	adds	r7, #48	; 0x30
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b090      	sub	sp, #64	; 0x40
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  char buffer[50];
  float voltage_bat = 0;
 80012d6:	f04f 0300 	mov.w	r3, #0
 80012da:	63fb      	str	r3, [r7, #60]	; 0x3c
  float max_voltage = 4.2;
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <main+0x54>)
 80012de:	63bb      	str	r3, [r7, #56]	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012e0:	f001 faaa 	bl	8002838 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e4:	f000 f822 	bl	800132c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e8:	f000 fa28 	bl	800173c <MX_GPIO_Init>
  MX_RTC_Init();
 80012ec:	f000 f8e0 	bl	80014b0 <MX_RTC_Init>
  MX_TIM2_Init();
 80012f0:	f000 f9ae 	bl	8001650 <MX_TIM2_Init>
  MX_TIM1_Init();
 80012f4:	f000 f95c 	bl	80015b0 <MX_TIM1_Init>
  MX_SPI2_Init();
 80012f8:	f000 f924 	bl	8001544 <MX_SPI2_Init>
  MX_I2C2_Init();
 80012fc:	f000 f8aa 	bl	8001454 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001300:	f000 f9f2 	bl	80016e8 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 8001304:	f000 f868 	bl	80013d8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  init();
 8001308:	f7ff feee 	bl	80010e8 <init>
  ILI9341_FillScreen(ILI9341_BLACK);
 800130c:	2000      	movs	r0, #0
 800130e:	f001 f91b 	bl	8002548 <ILI9341_FillScreen>

  // Read The ADC Conversion Result & Map It To PWM DutyCycle
  display_david_star(ILI9341_BLUE);
 8001312:	201f      	movs	r0, #31
 8001314:	f7ff ff76 	bl	8001204 <display_david_star>
  HAL_TIM_Base_Start_IT(&htim2);
 8001318:	4803      	ldr	r0, [pc, #12]	; (8001328 <main+0x58>)
 800131a:	f005 fc99 	bl	8006c50 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	check_menu();
 800131e:	f7ff ff49 	bl	80011b4 <check_menu>
 8001322:	e7fc      	b.n	800131e <main+0x4e>
 8001324:	40866666 	.word	0x40866666
 8001328:	20000340 	.word	0x20000340

0800132c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b094      	sub	sp, #80	; 0x50
 8001330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001332:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001336:	2228      	movs	r2, #40	; 0x28
 8001338:	2100      	movs	r1, #0
 800133a:	4618      	mov	r0, r3
 800133c:	f006 f954 	bl	80075e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800135c:	2306      	movs	r3, #6
 800135e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001360:	2301      	movs	r3, #1
 8001362:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001364:	2301      	movs	r3, #1
 8001366:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001368:	2310      	movs	r3, #16
 800136a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800136c:	2300      	movs	r3, #0
 800136e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001370:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001374:	4618      	mov	r0, r3
 8001376:	f003 fe89 	bl	800508c <HAL_RCC_OscConfig>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001380:	f000 faae 	bl	80018e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001384:	230f      	movs	r3, #15
 8001386:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001388:	2300      	movs	r3, #0
 800138a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800138c:	2300      	movs	r3, #0
 800138e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001390:	2300      	movs	r3, #0
 8001392:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001394:	2300      	movs	r3, #0
 8001396:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f004 f8f6 	bl	8005590 <HAL_RCC_ClockConfig>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <SystemClock_Config+0x82>
  {
    Error_Handler();
 80013aa:	f000 fa99 	bl	80018e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80013ae:	2303      	movs	r3, #3
 80013b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80013b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	4618      	mov	r0, r3
 80013c0:	f004 fa74 	bl	80058ac <HAL_RCCEx_PeriphCLKConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80013ca:	f000 fa89 	bl	80018e0 <Error_Handler>
  }
}
 80013ce:	bf00      	nop
 80013d0:	3750      	adds	r7, #80	; 0x50
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80013e8:	4b18      	ldr	r3, [pc, #96]	; (800144c <MX_ADC2_Init+0x74>)
 80013ea:	4a19      	ldr	r2, [pc, #100]	; (8001450 <MX_ADC2_Init+0x78>)
 80013ec:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013ee:	4b17      	ldr	r3, [pc, #92]	; (800144c <MX_ADC2_Init+0x74>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80013f4:	4b15      	ldr	r3, [pc, #84]	; (800144c <MX_ADC2_Init+0x74>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80013fa:	4b14      	ldr	r3, [pc, #80]	; (800144c <MX_ADC2_Init+0x74>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <MX_ADC2_Init+0x74>)
 8001402:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001406:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001408:	4b10      	ldr	r3, [pc, #64]	; (800144c <MX_ADC2_Init+0x74>)
 800140a:	2200      	movs	r2, #0
 800140c:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800140e:	4b0f      	ldr	r3, [pc, #60]	; (800144c <MX_ADC2_Init+0x74>)
 8001410:	2201      	movs	r2, #1
 8001412:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001414:	480d      	ldr	r0, [pc, #52]	; (800144c <MX_ADC2_Init+0x74>)
 8001416:	f001 fa95 	bl	8002944 <HAL_ADC_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001420:	f000 fa5e 	bl	80018e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001424:	2306      	movs	r3, #6
 8001426:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001428:	2301      	movs	r3, #1
 800142a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	4619      	mov	r1, r3
 8001434:	4805      	ldr	r0, [pc, #20]	; (800144c <MX_ADC2_Init+0x74>)
 8001436:	f001 fb5d 	bl	8002af4 <HAL_ADC_ConfigChannel>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001440:	f000 fa4e 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001444:	bf00      	nop
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000208 	.word	0x20000208
 8001450:	40012800 	.word	0x40012800

08001454 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <MX_I2C2_Init+0x50>)
 800145a:	4a13      	ldr	r2, [pc, #76]	; (80014a8 <MX_I2C2_Init+0x54>)
 800145c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <MX_I2C2_Init+0x50>)
 8001460:	4a12      	ldr	r2, [pc, #72]	; (80014ac <MX_I2C2_Init+0x58>)
 8001462:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001464:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <MX_I2C2_Init+0x50>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <MX_I2C2_Init+0x50>)
 800146c:	2200      	movs	r2, #0
 800146e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <MX_I2C2_Init+0x50>)
 8001472:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001476:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001478:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <MX_I2C2_Init+0x50>)
 800147a:	2200      	movs	r2, #0
 800147c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <MX_I2C2_Init+0x50>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001484:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <MX_I2C2_Init+0x50>)
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <MX_I2C2_Init+0x50>)
 800148c:	2200      	movs	r2, #0
 800148e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001490:	4804      	ldr	r0, [pc, #16]	; (80014a4 <MX_I2C2_Init+0x50>)
 8001492:	f001 ffb1 	bl	80033f8 <HAL_I2C_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800149c:	f000 fa20 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000238 	.word	0x20000238
 80014a8:	40005800 	.word	0x40005800
 80014ac:	000186a0 	.word	0x000186a0

080014b0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	2100      	movs	r1, #0
 80014ba:	460a      	mov	r2, r1
 80014bc:	801a      	strh	r2, [r3, #0]
 80014be:	460a      	mov	r2, r1
 80014c0:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80014c2:	2300      	movs	r3, #0
 80014c4:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80014c6:	4b1d      	ldr	r3, [pc, #116]	; (800153c <MX_RTC_Init+0x8c>)
 80014c8:	4a1d      	ldr	r2, [pc, #116]	; (8001540 <MX_RTC_Init+0x90>)
 80014ca:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80014cc:	4b1b      	ldr	r3, [pc, #108]	; (800153c <MX_RTC_Init+0x8c>)
 80014ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80014d4:	4b19      	ldr	r3, [pc, #100]	; (800153c <MX_RTC_Init+0x8c>)
 80014d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014da:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80014dc:	4817      	ldr	r0, [pc, #92]	; (800153c <MX_RTC_Init+0x8c>)
 80014de:	f004 fb51 	bl	8005b84 <HAL_RTC_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 80014e8:	f000 f9fa 	bl	80018e0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	2201      	movs	r2, #1
 80014fc:	4619      	mov	r1, r3
 80014fe:	480f      	ldr	r0, [pc, #60]	; (800153c <MX_RTC_Init+0x8c>)
 8001500:	f004 fbcc 	bl	8005c9c <HAL_RTC_SetTime>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 800150a:	f000 f9e9 	bl	80018e0 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_FRIDAY;
 800150e:	2305      	movs	r3, #5
 8001510:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_SEPTEMBER;
 8001512:	2309      	movs	r3, #9
 8001514:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x22;
 8001516:	2322      	movs	r3, #34	; 0x22
 8001518:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x23;
 800151a:	2323      	movs	r3, #35	; 0x23
 800151c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800151e:	463b      	mov	r3, r7
 8001520:	2201      	movs	r2, #1
 8001522:	4619      	mov	r1, r3
 8001524:	4805      	ldr	r0, [pc, #20]	; (800153c <MX_RTC_Init+0x8c>)
 8001526:	f004 fd29 	bl	8005f7c <HAL_RTC_SetDate>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001530:	f000 f9d6 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	2000028c 	.word	0x2000028c
 8001540:	40002800 	.word	0x40002800

08001544 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001548:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <MX_SPI2_Init+0x64>)
 800154a:	4a18      	ldr	r2, [pc, #96]	; (80015ac <MX_SPI2_Init+0x68>)
 800154c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800154e:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <MX_SPI2_Init+0x64>)
 8001550:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001554:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001556:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <MX_SPI2_Init+0x64>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <MX_SPI2_Init+0x64>)
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MX_SPI2_Init+0x64>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <MX_SPI2_Init+0x64>)
 800156a:	2200      	movs	r2, #0
 800156c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <MX_SPI2_Init+0x64>)
 8001570:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001574:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001576:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <MX_SPI2_Init+0x64>)
 8001578:	2200      	movs	r2, #0
 800157a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800157c:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <MX_SPI2_Init+0x64>)
 800157e:	2200      	movs	r2, #0
 8001580:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <MX_SPI2_Init+0x64>)
 8001584:	2200      	movs	r2, #0
 8001586:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001588:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <MX_SPI2_Init+0x64>)
 800158a:	2200      	movs	r2, #0
 800158c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <MX_SPI2_Init+0x64>)
 8001590:	220a      	movs	r2, #10
 8001592:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001594:	4804      	ldr	r0, [pc, #16]	; (80015a8 <MX_SPI2_Init+0x64>)
 8001596:	f005 f89d 	bl	80066d4 <HAL_SPI_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80015a0:	f000 f99e 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	200002a0 	.word	0x200002a0
 80015ac:	40003800 	.word	0x40003800

080015b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015b6:	f107 0308 	add.w	r3, r7, #8
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c4:	463b      	mov	r3, r7
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015cc:	4b1e      	ldr	r3, [pc, #120]	; (8001648 <MX_TIM1_Init+0x98>)
 80015ce:	4a1f      	ldr	r2, [pc, #124]	; (800164c <MX_TIM1_Init+0x9c>)
 80015d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 80015d2:	4b1d      	ldr	r3, [pc, #116]	; (8001648 <MX_TIM1_Init+0x98>)
 80015d4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80015d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015da:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <MX_TIM1_Init+0x98>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 80015e0:	4b19      	ldr	r3, [pc, #100]	; (8001648 <MX_TIM1_Init+0x98>)
 80015e2:	2264      	movs	r2, #100	; 0x64
 80015e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e6:	4b18      	ldr	r3, [pc, #96]	; (8001648 <MX_TIM1_Init+0x98>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015ec:	4b16      	ldr	r3, [pc, #88]	; (8001648 <MX_TIM1_Init+0x98>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f2:	4b15      	ldr	r3, [pc, #84]	; (8001648 <MX_TIM1_Init+0x98>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015f8:	4813      	ldr	r0, [pc, #76]	; (8001648 <MX_TIM1_Init+0x98>)
 80015fa:	f005 fad9 	bl	8006bb0 <HAL_TIM_Base_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001604:	f000 f96c 	bl	80018e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800160c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800160e:	f107 0308 	add.w	r3, r7, #8
 8001612:	4619      	mov	r1, r3
 8001614:	480c      	ldr	r0, [pc, #48]	; (8001648 <MX_TIM1_Init+0x98>)
 8001616:	f005 fc75 	bl	8006f04 <HAL_TIM_ConfigClockSource>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001620:	f000 f95e 	bl	80018e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001624:	2300      	movs	r3, #0
 8001626:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800162c:	463b      	mov	r3, r7
 800162e:	4619      	mov	r1, r3
 8001630:	4805      	ldr	r0, [pc, #20]	; (8001648 <MX_TIM1_Init+0x98>)
 8001632:	f005 fe4b 	bl	80072cc <HAL_TIMEx_MasterConfigSynchronization>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800163c:	f000 f950 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001640:	bf00      	nop
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	200002f8 	.word	0x200002f8
 800164c:	40012c00 	.word	0x40012c00

08001650 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001656:	f107 0308 	add.w	r3, r7, #8
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001664:	463b      	mov	r3, r7
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800166c:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <MX_TIM2_Init+0x94>)
 800166e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001672:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001674:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <MX_TIM2_Init+0x94>)
 8001676:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800167a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167c:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <MX_TIM2_Init+0x94>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8001682:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <MX_TIM2_Init+0x94>)
 8001684:	2264      	movs	r2, #100	; 0x64
 8001686:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001688:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <MX_TIM2_Init+0x94>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <MX_TIM2_Init+0x94>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001694:	4813      	ldr	r0, [pc, #76]	; (80016e4 <MX_TIM2_Init+0x94>)
 8001696:	f005 fa8b 	bl	8006bb0 <HAL_TIM_Base_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80016a0:	f000 f91e 	bl	80018e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016aa:	f107 0308 	add.w	r3, r7, #8
 80016ae:	4619      	mov	r1, r3
 80016b0:	480c      	ldr	r0, [pc, #48]	; (80016e4 <MX_TIM2_Init+0x94>)
 80016b2:	f005 fc27 	bl	8006f04 <HAL_TIM_ConfigClockSource>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80016bc:	f000 f910 	bl	80018e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c0:	2300      	movs	r3, #0
 80016c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016c8:	463b      	mov	r3, r7
 80016ca:	4619      	mov	r1, r3
 80016cc:	4805      	ldr	r0, [pc, #20]	; (80016e4 <MX_TIM2_Init+0x94>)
 80016ce:	f005 fdfd 	bl	80072cc <HAL_TIMEx_MasterConfigSynchronization>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80016d8:	f000 f902 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016dc:	bf00      	nop
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000340 	.word	0x20000340

080016e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <MX_USART1_UART_Init+0x4c>)
 80016ee:	4a12      	ldr	r2, [pc, #72]	; (8001738 <MX_USART1_UART_Init+0x50>)
 80016f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <MX_USART1_UART_Init+0x4c>)
 80016f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016fa:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <MX_USART1_UART_Init+0x4c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <MX_USART1_UART_Init+0x4c>)
 8001702:	2200      	movs	r2, #0
 8001704:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001706:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <MX_USART1_UART_Init+0x4c>)
 8001708:	2200      	movs	r2, #0
 800170a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800170c:	4b09      	ldr	r3, [pc, #36]	; (8001734 <MX_USART1_UART_Init+0x4c>)
 800170e:	220c      	movs	r2, #12
 8001710:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001712:	4b08      	ldr	r3, [pc, #32]	; (8001734 <MX_USART1_UART_Init+0x4c>)
 8001714:	2200      	movs	r2, #0
 8001716:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001718:	4b06      	ldr	r3, [pc, #24]	; (8001734 <MX_USART1_UART_Init+0x4c>)
 800171a:	2200      	movs	r2, #0
 800171c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800171e:	4805      	ldr	r0, [pc, #20]	; (8001734 <MX_USART1_UART_Init+0x4c>)
 8001720:	f005 fe44 	bl	80073ac <HAL_UART_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800172a:	f000 f8d9 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000388 	.word	0x20000388
 8001738:	40013800 	.word	0x40013800

0800173c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	; 0x28
 8001740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001750:	4b5e      	ldr	r3, [pc, #376]	; (80018cc <MX_GPIO_Init+0x190>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	4a5d      	ldr	r2, [pc, #372]	; (80018cc <MX_GPIO_Init+0x190>)
 8001756:	f043 0310 	orr.w	r3, r3, #16
 800175a:	6193      	str	r3, [r2, #24]
 800175c:	4b5b      	ldr	r3, [pc, #364]	; (80018cc <MX_GPIO_Init+0x190>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f003 0310 	and.w	r3, r3, #16
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001768:	4b58      	ldr	r3, [pc, #352]	; (80018cc <MX_GPIO_Init+0x190>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	4a57      	ldr	r2, [pc, #348]	; (80018cc <MX_GPIO_Init+0x190>)
 800176e:	f043 0320 	orr.w	r3, r3, #32
 8001772:	6193      	str	r3, [r2, #24]
 8001774:	4b55      	ldr	r3, [pc, #340]	; (80018cc <MX_GPIO_Init+0x190>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	f003 0320 	and.w	r3, r3, #32
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001780:	4b52      	ldr	r3, [pc, #328]	; (80018cc <MX_GPIO_Init+0x190>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	4a51      	ldr	r2, [pc, #324]	; (80018cc <MX_GPIO_Init+0x190>)
 8001786:	f043 0304 	orr.w	r3, r3, #4
 800178a:	6193      	str	r3, [r2, #24]
 800178c:	4b4f      	ldr	r3, [pc, #316]	; (80018cc <MX_GPIO_Init+0x190>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001798:	4b4c      	ldr	r3, [pc, #304]	; (80018cc <MX_GPIO_Init+0x190>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	4a4b      	ldr	r2, [pc, #300]	; (80018cc <MX_GPIO_Init+0x190>)
 800179e:	f043 0308 	orr.w	r3, r3, #8
 80017a2:	6193      	str	r3, [r2, #24]
 80017a4:	4b49      	ldr	r3, [pc, #292]	; (80018cc <MX_GPIO_Init+0x190>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80017b0:	2200      	movs	r2, #0
 80017b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017b6:	4846      	ldr	r0, [pc, #280]	; (80018d0 <MX_GPIO_Init+0x194>)
 80017b8:	f001 fe05 	bl	80033c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8
 80017bc:	2200      	movs	r2, #0
 80017be:	f640 1198 	movw	r1, #2456	; 0x998
 80017c2:	4844      	ldr	r0, [pc, #272]	; (80018d4 <MX_GPIO_Init+0x198>)
 80017c4:	f001 fdff 	bl	80033c6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2180      	movs	r1, #128	; 0x80
 80017cc:	4842      	ldr	r0, [pc, #264]	; (80018d8 <MX_GPIO_Init+0x19c>)
 80017ce:	f001 fdfa 	bl	80033c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80017d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d8:	2301      	movs	r3, #1
 80017da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2302      	movs	r3, #2
 80017e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	4619      	mov	r1, r3
 80017ea:	4839      	ldr	r0, [pc, #228]	; (80018d0 <MX_GPIO_Init+0x194>)
 80017ec:	f001 fc50 	bl	8003090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80017f0:	2322      	movs	r3, #34	; 0x22
 80017f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	4619      	mov	r1, r3
 8001802:	4834      	ldr	r0, [pc, #208]	; (80018d4 <MX_GPIO_Init+0x198>)
 8001804:	f001 fc44 	bl	8003090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_15;
 8001808:	f249 0304 	movw	r3, #36868	; 0x9004
 800180c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800180e:	2300      	movs	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001812:	2301      	movs	r3, #1
 8001814:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	4619      	mov	r1, r3
 800181c:	482d      	ldr	r0, [pc, #180]	; (80018d4 <MX_GPIO_Init+0x198>)
 800181e:	f001 fc37 	bl	8003090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA7 PA8
                           PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8
 8001822:	f640 1398 	movw	r3, #2456	; 0x998
 8001826:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001828:	2301      	movs	r3, #1
 800182a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	2302      	movs	r3, #2
 8001832:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	4619      	mov	r1, r3
 800183a:	4826      	ldr	r0, [pc, #152]	; (80018d4 <MX_GPIO_Init+0x198>)
 800183c:	f001 fc28 	bl	8003090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8001840:	2342      	movs	r3, #66	; 0x42
 8001842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001844:	2300      	movs	r3, #0
 8001846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	4619      	mov	r1, r3
 8001852:	4821      	ldr	r0, [pc, #132]	; (80018d8 <MX_GPIO_Init+0x19c>)
 8001854:	f001 fc1c 	bl	8003090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_9;
 8001858:	f44f 7301 	mov.w	r3, #516	; 0x204
 800185c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800185e:	2300      	movs	r3, #0
 8001860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001862:	2301      	movs	r3, #1
 8001864:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001866:	f107 0314 	add.w	r3, r7, #20
 800186a:	4619      	mov	r1, r3
 800186c:	481a      	ldr	r0, [pc, #104]	; (80018d8 <MX_GPIO_Init+0x19c>)
 800186e:	f001 fc0f 	bl	8003090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001872:	2338      	movs	r3, #56	; 0x38
 8001874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	2302      	movs	r3, #2
 8001878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800187a:	2303      	movs	r3, #3
 800187c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	4619      	mov	r1, r3
 8001884:	4814      	ldr	r0, [pc, #80]	; (80018d8 <MX_GPIO_Init+0x19c>)
 8001886:	f001 fc03 	bl	8003090 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800188a:	2380      	movs	r3, #128	; 0x80
 800188c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188e:	2301      	movs	r3, #1
 8001890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001896:	2302      	movs	r3, #2
 8001898:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189a:	f107 0314 	add.w	r3, r7, #20
 800189e:	4619      	mov	r1, r3
 80018a0:	480d      	ldr	r0, [pc, #52]	; (80018d8 <MX_GPIO_Init+0x19c>)
 80018a2:	f001 fbf5 	bl	8003090 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_SPI1_ENABLE();
 80018a6:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <MX_GPIO_Init+0x1a0>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80018b2:	627b      	str	r3, [r7, #36]	; 0x24
 80018b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
 80018bc:	4a07      	ldr	r2, [pc, #28]	; (80018dc <MX_GPIO_Init+0x1a0>)
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	6053      	str	r3, [r2, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018c2:	bf00      	nop
 80018c4:	3728      	adds	r7, #40	; 0x28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40011000 	.word	0x40011000
 80018d4:	40010800 	.word	0x40010800
 80018d8:	40010c00 	.word	0x40010c00
 80018dc:	40010000 	.word	0x40010000

080018e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e4:	b672      	cpsid	i
}
 80018e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <Error_Handler+0x8>
	...

080018ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018f2:	4b15      	ldr	r3, [pc, #84]	; (8001948 <HAL_MspInit+0x5c>)
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	4a14      	ldr	r2, [pc, #80]	; (8001948 <HAL_MspInit+0x5c>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6193      	str	r3, [r2, #24]
 80018fe:	4b12      	ldr	r3, [pc, #72]	; (8001948 <HAL_MspInit+0x5c>)
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800190a:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <HAL_MspInit+0x5c>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	4a0e      	ldr	r2, [pc, #56]	; (8001948 <HAL_MspInit+0x5c>)
 8001910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001914:	61d3      	str	r3, [r2, #28]
 8001916:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <HAL_MspInit+0x5c>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191e:	607b      	str	r3, [r7, #4]
 8001920:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <HAL_MspInit+0x60>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	4a04      	ldr	r2, [pc, #16]	; (800194c <HAL_MspInit+0x60>)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800193e:	bf00      	nop
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr
 8001948:	40021000 	.word	0x40021000
 800194c:	40010000 	.word	0x40010000

08001950 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b088      	sub	sp, #32
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	f107 0310 	add.w	r3, r7, #16
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC2)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a14      	ldr	r2, [pc, #80]	; (80019bc <HAL_ADC_MspInit+0x6c>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d121      	bne.n	80019b4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001970:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <HAL_ADC_MspInit+0x70>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	4a12      	ldr	r2, [pc, #72]	; (80019c0 <HAL_ADC_MspInit+0x70>)
 8001976:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800197a:	6193      	str	r3, [r2, #24]
 800197c:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <HAL_ADC_MspInit+0x70>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001988:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <HAL_ADC_MspInit+0x70>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	4a0c      	ldr	r2, [pc, #48]	; (80019c0 <HAL_ADC_MspInit+0x70>)
 800198e:	f043 0304 	orr.w	r3, r3, #4
 8001992:	6193      	str	r3, [r2, #24]
 8001994:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <HAL_ADC_MspInit+0x70>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA6     ------> ADC2_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019a0:	2340      	movs	r3, #64	; 0x40
 80019a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019a4:	2303      	movs	r3, #3
 80019a6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a8:	f107 0310 	add.w	r3, r7, #16
 80019ac:	4619      	mov	r1, r3
 80019ae:	4805      	ldr	r0, [pc, #20]	; (80019c4 <HAL_ADC_MspInit+0x74>)
 80019b0:	f001 fb6e 	bl	8003090 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80019b4:	bf00      	nop
 80019b6:	3720      	adds	r7, #32
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40012800 	.word	0x40012800
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40010800 	.word	0x40010800

080019c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 0310 	add.w	r3, r7, #16
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a1e      	ldr	r2, [pc, #120]	; (8001a5c <HAL_I2C_MspInit+0x94>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d134      	bne.n	8001a52 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e8:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <HAL_I2C_MspInit+0x98>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	4a1c      	ldr	r2, [pc, #112]	; (8001a60 <HAL_I2C_MspInit+0x98>)
 80019ee:	f043 0308 	orr.w	r3, r3, #8
 80019f2:	6193      	str	r3, [r2, #24]
 80019f4:	4b1a      	ldr	r3, [pc, #104]	; (8001a60 <HAL_I2C_MspInit+0x98>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	f003 0308 	and.w	r3, r3, #8
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a00:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a06:	2312      	movs	r3, #18
 8001a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0e:	f107 0310 	add.w	r3, r7, #16
 8001a12:	4619      	mov	r1, r3
 8001a14:	4813      	ldr	r0, [pc, #76]	; (8001a64 <HAL_I2C_MspInit+0x9c>)
 8001a16:	f001 fb3b 	bl	8003090 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a1a:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <HAL_I2C_MspInit+0x98>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	4a10      	ldr	r2, [pc, #64]	; (8001a60 <HAL_I2C_MspInit+0x98>)
 8001a20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a24:	61d3      	str	r3, [r2, #28]
 8001a26:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <HAL_I2C_MspInit+0x98>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2100      	movs	r1, #0
 8001a36:	2021      	movs	r0, #33	; 0x21
 8001a38:	f001 fa6d 	bl	8002f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001a3c:	2021      	movs	r0, #33	; 0x21
 8001a3e:	f001 fa86 	bl	8002f4e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2100      	movs	r1, #0
 8001a46:	2022      	movs	r0, #34	; 0x22
 8001a48:	f001 fa65 	bl	8002f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001a4c:	2022      	movs	r0, #34	; 0x22
 8001a4e:	f001 fa7e 	bl	8002f4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a52:	bf00      	nop
 8001a54:	3720      	adds	r7, #32
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40005800 	.word	0x40005800
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40010c00 	.word	0x40010c00

08001a68 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a0b      	ldr	r2, [pc, #44]	; (8001aa4 <HAL_RTC_MspInit+0x3c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d110      	bne.n	8001a9c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001a7a:	f003 fafb 	bl	8005074 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <HAL_RTC_MspInit+0x40>)
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	4a09      	ldr	r2, [pc, #36]	; (8001aa8 <HAL_RTC_MspInit+0x40>)
 8001a84:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a88:	61d3      	str	r3, [r2, #28]
 8001a8a:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <HAL_RTC_MspInit+0x40>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a96:	4b05      	ldr	r3, [pc, #20]	; (8001aac <HAL_RTC_MspInit+0x44>)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a9c:	bf00      	nop
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40002800 	.word	0x40002800
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	4242043c 	.word	0x4242043c

08001ab0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 0310 	add.w	r3, r7, #16
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a1c      	ldr	r2, [pc, #112]	; (8001b3c <HAL_SPI_MspInit+0x8c>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d131      	bne.n	8001b34 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <HAL_SPI_MspInit+0x90>)
 8001ad2:	69db      	ldr	r3, [r3, #28]
 8001ad4:	4a1a      	ldr	r2, [pc, #104]	; (8001b40 <HAL_SPI_MspInit+0x90>)
 8001ad6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ada:	61d3      	str	r3, [r2, #28]
 8001adc:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <HAL_SPI_MspInit+0x90>)
 8001ade:	69db      	ldr	r3, [r3, #28]
 8001ae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae8:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <HAL_SPI_MspInit+0x90>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	4a14      	ldr	r2, [pc, #80]	; (8001b40 <HAL_SPI_MspInit+0x90>)
 8001aee:	f043 0308 	orr.w	r3, r3, #8
 8001af2:	6193      	str	r3, [r2, #24]
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_SPI_MspInit+0x90>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	f003 0308 	and.w	r3, r3, #8
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001b00:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001b04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	2302      	movs	r3, #2
 8001b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0e:	f107 0310 	add.w	r3, r7, #16
 8001b12:	4619      	mov	r1, r3
 8001b14:	480b      	ldr	r0, [pc, #44]	; (8001b44 <HAL_SPI_MspInit+0x94>)
 8001b16:	f001 fabb 	bl	8003090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001b1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b28:	f107 0310 	add.w	r3, r7, #16
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4805      	ldr	r0, [pc, #20]	; (8001b44 <HAL_SPI_MspInit+0x94>)
 8001b30:	f001 faae 	bl	8003090 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001b34:	bf00      	nop
 8001b36:	3720      	adds	r7, #32
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40003800 	.word	0x40003800
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40010c00 	.word	0x40010c00

08001b48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a16      	ldr	r2, [pc, #88]	; (8001bb0 <HAL_TIM_Base_MspInit+0x68>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d10c      	bne.n	8001b74 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b5a:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <HAL_TIM_Base_MspInit+0x6c>)
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	4a15      	ldr	r2, [pc, #84]	; (8001bb4 <HAL_TIM_Base_MspInit+0x6c>)
 8001b60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b64:	6193      	str	r3, [r2, #24]
 8001b66:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <HAL_TIM_Base_MspInit+0x6c>)
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b72:	e018      	b.n	8001ba6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b7c:	d113      	bne.n	8001ba6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <HAL_TIM_Base_MspInit+0x6c>)
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	4a0c      	ldr	r2, [pc, #48]	; (8001bb4 <HAL_TIM_Base_MspInit+0x6c>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	61d3      	str	r3, [r2, #28]
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <HAL_TIM_Base_MspInit+0x6c>)
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b96:	2200      	movs	r2, #0
 8001b98:	2100      	movs	r1, #0
 8001b9a:	201c      	movs	r0, #28
 8001b9c:	f001 f9bb 	bl	8002f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ba0:	201c      	movs	r0, #28
 8001ba2:	f001 f9d4 	bl	8002f4e <HAL_NVIC_EnableIRQ>
}
 8001ba6:	bf00      	nop
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40012c00 	.word	0x40012c00
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b088      	sub	sp, #32
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc0:	f107 0310 	add.w	r3, r7, #16
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a1c      	ldr	r2, [pc, #112]	; (8001c44 <HAL_UART_MspInit+0x8c>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d131      	bne.n	8001c3c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bd8:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <HAL_UART_MspInit+0x90>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	4a1a      	ldr	r2, [pc, #104]	; (8001c48 <HAL_UART_MspInit+0x90>)
 8001bde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be2:	6193      	str	r3, [r2, #24]
 8001be4:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <HAL_UART_MspInit+0x90>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf0:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <HAL_UART_MspInit+0x90>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	4a14      	ldr	r2, [pc, #80]	; (8001c48 <HAL_UART_MspInit+0x90>)
 8001bf6:	f043 0304 	orr.w	r3, r3, #4
 8001bfa:	6193      	str	r3, [r2, #24]
 8001bfc:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <HAL_UART_MspInit+0x90>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c12:	2303      	movs	r3, #3
 8001c14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c16:	f107 0310 	add.w	r3, r7, #16
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	480b      	ldr	r0, [pc, #44]	; (8001c4c <HAL_UART_MspInit+0x94>)
 8001c1e:	f001 fa37 	bl	8003090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c30:	f107 0310 	add.w	r3, r7, #16
 8001c34:	4619      	mov	r1, r3
 8001c36:	4805      	ldr	r0, [pc, #20]	; (8001c4c <HAL_UART_MspInit+0x94>)
 8001c38:	f001 fa2a 	bl	8003090 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c3c:	bf00      	nop
 8001c3e:	3720      	adds	r7, #32
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40013800 	.word	0x40013800
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40010800 	.word	0x40010800

08001c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <NMI_Handler+0x4>

08001c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c5a:	e7fe      	b.n	8001c5a <HardFault_Handler+0x4>

08001c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <MemManage_Handler+0x4>

08001c62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c66:	e7fe      	b.n	8001c66 <BusFault_Handler+0x4>

08001c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <UsageFault_Handler+0x4>

08001c6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr

08001c7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr

08001c86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr

08001c92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c96:	f000 fe15 	bl	80028c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ca4:	4802      	ldr	r0, [pc, #8]	; (8001cb0 <TIM2_IRQHandler+0x10>)
 8001ca6:	f005 f825 	bl	8006cf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000340 	.word	0x20000340

08001cb4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001cb8:	4802      	ldr	r0, [pc, #8]	; (8001cc4 <I2C2_EV_IRQHandler+0x10>)
 8001cba:	f001 fcf5 	bl	80036a8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000238 	.word	0x20000238

08001cc8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001ccc:	4802      	ldr	r0, [pc, #8]	; (8001cd8 <I2C2_ER_IRQHandler+0x10>)
 8001cce:	f001 fe5c 	bl	800398a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000238 	.word	0x20000238

08001cdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
	return 1;
 8001ce0:	2301      	movs	r3, #1
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr

08001cea <_kill>:

int _kill(int pid, int sig)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001cf4:	f005 fc38 	bl	8007568 <__errno>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2216      	movs	r2, #22
 8001cfc:	601a      	str	r2, [r3, #0]
	return -1;
 8001cfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <_exit>:

void _exit (int status)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d12:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff ffe7 	bl	8001cea <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d1c:	e7fe      	b.n	8001d1c <_exit+0x12>

08001d1e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b086      	sub	sp, #24
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	60f8      	str	r0, [r7, #12]
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	e00a      	b.n	8001d46 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d30:	f3af 8000 	nop.w
 8001d34:	4601      	mov	r1, r0
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	1c5a      	adds	r2, r3, #1
 8001d3a:	60ba      	str	r2, [r7, #8]
 8001d3c:	b2ca      	uxtb	r2, r1
 8001d3e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	3301      	adds	r3, #1
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	dbf0      	blt.n	8001d30 <_read+0x12>
	}

return len;
 8001d4e:	687b      	ldr	r3, [r7, #4]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	e009      	b.n	8001d7e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	1c5a      	adds	r2, r3, #1
 8001d6e:	60ba      	str	r2, [r7, #8]
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	617b      	str	r3, [r7, #20]
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	dbf1      	blt.n	8001d6a <_write+0x12>
	}
	return len;
 8001d86:	687b      	ldr	r3, [r7, #4]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <_close>:

int _close(int file)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
	return -1;
 8001d98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr

08001da6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
 8001dae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001db6:	605a      	str	r2, [r3, #4]
	return 0;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr

08001dc4 <_isatty>:

int _isatty(int file)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
	return 1;
 8001dcc:	2301      	movs	r3, #1
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr

08001dd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
	return 0;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001df8:	4a14      	ldr	r2, [pc, #80]	; (8001e4c <_sbrk+0x5c>)
 8001dfa:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <_sbrk+0x60>)
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e04:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <_sbrk+0x64>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d102      	bne.n	8001e12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e0c:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <_sbrk+0x64>)
 8001e0e:	4a12      	ldr	r2, [pc, #72]	; (8001e58 <_sbrk+0x68>)
 8001e10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e12:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <_sbrk+0x64>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4413      	add	r3, r2
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d207      	bcs.n	8001e30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e20:	f005 fba2 	bl	8007568 <__errno>
 8001e24:	4603      	mov	r3, r0
 8001e26:	220c      	movs	r2, #12
 8001e28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e2e:	e009      	b.n	8001e44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e30:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <_sbrk+0x64>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e36:	4b07      	ldr	r3, [pc, #28]	; (8001e54 <_sbrk+0x64>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	4a05      	ldr	r2, [pc, #20]	; (8001e54 <_sbrk+0x64>)
 8001e40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e42:	68fb      	ldr	r3, [r7, #12]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20005000 	.word	0x20005000
 8001e50:	00000400 	.word	0x00000400
 8001e54:	20000410 	.word	0x20000410
 8001e58:	20000428 	.word	0x20000428

08001e5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr

08001e68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e68:	f7ff fff8 	bl	8001e5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e6c:	480b      	ldr	r0, [pc, #44]	; (8001e9c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e6e:	490c      	ldr	r1, [pc, #48]	; (8001ea0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e70:	4a0c      	ldr	r2, [pc, #48]	; (8001ea4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e74:	e002      	b.n	8001e7c <LoopCopyDataInit>

08001e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e7a:	3304      	adds	r3, #4

08001e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e80:	d3f9      	bcc.n	8001e76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e82:	4a09      	ldr	r2, [pc, #36]	; (8001ea8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e84:	4c09      	ldr	r4, [pc, #36]	; (8001eac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e88:	e001      	b.n	8001e8e <LoopFillZerobss>

08001e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e8c:	3204      	adds	r2, #4

08001e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e90:	d3fb      	bcc.n	8001e8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e92:	f005 fb6f 	bl	8007574 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e96:	f7ff fa1b 	bl	80012d0 <main>
  bx lr
 8001e9a:	4770      	bx	lr
  ldr r0, =_sdata
 8001e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001ea4:	0800bdc4 	.word	0x0800bdc4
  ldr r2, =_sbss
 8001ea8:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001eac:	20000428 	.word	0x20000428

08001eb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001eb0:	e7fe      	b.n	8001eb0 <ADC1_2_IRQHandler>
	...

08001eb4 <ILI9341_Select>:
/* vim: set ai et ts=4 sw=4: */
#include "stm32f1xx_hal.h"
#include "st7735.h"
#include <math.h>

static void ILI9341_Select() {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2110      	movs	r1, #16
 8001ebc:	4802      	ldr	r0, [pc, #8]	; (8001ec8 <ILI9341_Select+0x14>)
 8001ebe:	f001 fa82 	bl	80033c6 <HAL_GPIO_WritePin>
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40010800 	.word	0x40010800

08001ecc <ILI9341_Unselect>:

void ILI9341_Unselect() {
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	2110      	movs	r1, #16
 8001ed4:	4802      	ldr	r0, [pc, #8]	; (8001ee0 <ILI9341_Unselect+0x14>)
 8001ed6:	f001 fa76 	bl	80033c6 <HAL_GPIO_WritePin>
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40010800 	.word	0x40010800

08001ee4 <ILI9341_Reset>:

static void ILI9341_Reset() {
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001eee:	4807      	ldr	r0, [pc, #28]	; (8001f0c <ILI9341_Reset+0x28>)
 8001ef0:	f001 fa69 	bl	80033c6 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001ef4:	2005      	movs	r0, #5
 8001ef6:	f000 fd01 	bl	80028fc <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8001efa:	2201      	movs	r2, #1
 8001efc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f00:	4802      	ldr	r0, [pc, #8]	; (8001f0c <ILI9341_Reset+0x28>)
 8001f02:	f001 fa60 	bl	80033c6 <HAL_GPIO_WritePin>
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40010800 	.word	0x40010800

08001f10 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f20:	4806      	ldr	r0, [pc, #24]	; (8001f3c <ILI9341_WriteCommand+0x2c>)
 8001f22:	f001 fa50 	bl	80033c6 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001f26:	1df9      	adds	r1, r7, #7
 8001f28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	4804      	ldr	r0, [pc, #16]	; (8001f40 <ILI9341_WriteCommand+0x30>)
 8001f30:	f004 fc54 	bl	80067dc <HAL_SPI_Transmit>
}
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40010800 	.word	0x40010800
 8001f40:	200002a0 	.word	0x200002a0

08001f44 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f54:	4810      	ldr	r0, [pc, #64]	; (8001f98 <ILI9341_WriteData+0x54>)
 8001f56:	f001 fa36 	bl	80033c6 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8001f5a:	e015      	b.n	8001f88 <ILI9341_WriteData+0x44>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f62:	bf28      	it	cs
 8001f64:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8001f68:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8001f6a:	89fa      	ldrh	r2, [r7, #14]
 8001f6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	480a      	ldr	r0, [pc, #40]	; (8001f9c <ILI9341_WriteData+0x58>)
 8001f74:	f004 fc32 	bl	80067dc <HAL_SPI_Transmit>
        buff += chunk_size;
 8001f78:	89fb      	ldrh	r3, [r7, #14]
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 8001f80:	89fb      	ldrh	r3, [r7, #14]
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1e6      	bne.n	8001f5c <ILI9341_WriteData+0x18>
    }
}
 8001f8e:	bf00      	nop
 8001f90:	bf00      	nop
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40010800 	.word	0x40010800
 8001f9c:	200002a0 	.word	0x200002a0

08001fa0 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8001fa0:	b590      	push	{r4, r7, lr}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4604      	mov	r4, r0
 8001fa8:	4608      	mov	r0, r1
 8001faa:	4611      	mov	r1, r2
 8001fac:	461a      	mov	r2, r3
 8001fae:	4623      	mov	r3, r4
 8001fb0:	80fb      	strh	r3, [r7, #6]
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	80bb      	strh	r3, [r7, #4]
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	807b      	strh	r3, [r7, #2]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 8001fbe:	202a      	movs	r0, #42	; 0x2a
 8001fc0:	f7ff ffa6 	bl	8001f10 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8001fc4:	88fb      	ldrh	r3, [r7, #6]
 8001fc6:	0a1b      	lsrs	r3, r3, #8
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	733b      	strb	r3, [r7, #12]
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	737b      	strb	r3, [r7, #13]
 8001fd4:	887b      	ldrh	r3, [r7, #2]
 8001fd6:	0a1b      	lsrs	r3, r3, #8
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	73bb      	strb	r3, [r7, #14]
 8001fde:	887b      	ldrh	r3, [r7, #2]
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 8001fe4:	f107 030c 	add.w	r3, r7, #12
 8001fe8:	2104      	movs	r1, #4
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff ffaa 	bl	8001f44 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 8001ff0:	202b      	movs	r0, #43	; 0x2b
 8001ff2:	f7ff ff8d 	bl	8001f10 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8001ff6:	88bb      	ldrh	r3, [r7, #4]
 8001ff8:	0a1b      	lsrs	r3, r3, #8
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	723b      	strb	r3, [r7, #8]
 8002000:	88bb      	ldrh	r3, [r7, #4]
 8002002:	b2db      	uxtb	r3, r3
 8002004:	727b      	strb	r3, [r7, #9]
 8002006:	883b      	ldrh	r3, [r7, #0]
 8002008:	0a1b      	lsrs	r3, r3, #8
 800200a:	b29b      	uxth	r3, r3
 800200c:	b2db      	uxtb	r3, r3
 800200e:	72bb      	strb	r3, [r7, #10]
 8002010:	883b      	ldrh	r3, [r7, #0]
 8002012:	b2db      	uxtb	r3, r3
 8002014:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 8002016:	f107 0308 	add.w	r3, r7, #8
 800201a:	2104      	movs	r1, #4
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff91 	bl	8001f44 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 8002022:	202c      	movs	r0, #44	; 0x2c
 8002024:	f7ff ff74 	bl	8001f10 <ILI9341_WriteCommand>
}
 8002028:	bf00      	nop
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	bd90      	pop	{r4, r7, pc}

08002030 <ILI9341_Init>:

void ILI9341_Init() {
 8002030:	b590      	push	{r4, r7, lr}
 8002032:	b09b      	sub	sp, #108	; 0x6c
 8002034:	af00      	add	r7, sp, #0
    ILI9341_Select();
 8002036:	f7ff ff3d 	bl	8001eb4 <ILI9341_Select>
    ILI9341_Reset();
 800203a:	f7ff ff53 	bl	8001ee4 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 800203e:	2001      	movs	r0, #1
 8002040:	f7ff ff66 	bl	8001f10 <ILI9341_WriteCommand>
    HAL_Delay(1000);
 8002044:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002048:	f000 fc58 	bl	80028fc <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 800204c:	20cb      	movs	r0, #203	; 0xcb
 800204e:	f7ff ff5f 	bl	8001f10 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 8002052:	4a87      	ldr	r2, [pc, #540]	; (8002270 <ILI9341_Init+0x240>)
 8002054:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002058:	e892 0003 	ldmia.w	r2, {r0, r1}
 800205c:	6018      	str	r0, [r3, #0]
 800205e:	3304      	adds	r3, #4
 8002060:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8002062:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002066:	2105      	movs	r1, #5
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff6b 	bl	8001f44 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 800206e:	20cf      	movs	r0, #207	; 0xcf
 8002070:	f7ff ff4e 	bl	8001f10 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 8002074:	4a7f      	ldr	r2, [pc, #508]	; (8002274 <ILI9341_Init+0x244>)
 8002076:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800207a:	6812      	ldr	r2, [r2, #0]
 800207c:	4611      	mov	r1, r2
 800207e:	8019      	strh	r1, [r3, #0]
 8002080:	3302      	adds	r3, #2
 8002082:	0c12      	lsrs	r2, r2, #16
 8002084:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8002086:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800208a:	2103      	movs	r1, #3
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff ff59 	bl	8001f44 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 8002092:	20e8      	movs	r0, #232	; 0xe8
 8002094:	f7ff ff3c 	bl	8001f10 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8002098:	4a77      	ldr	r2, [pc, #476]	; (8002278 <ILI9341_Init+0x248>)
 800209a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800209e:	6812      	ldr	r2, [r2, #0]
 80020a0:	4611      	mov	r1, r2
 80020a2:	8019      	strh	r1, [r3, #0]
 80020a4:	3302      	adds	r3, #2
 80020a6:	0c12      	lsrs	r2, r2, #16
 80020a8:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80020aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020ae:	2103      	movs	r1, #3
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ff47 	bl	8001f44 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 80020b6:	20ea      	movs	r0, #234	; 0xea
 80020b8:	f7ff ff2a 	bl	8001f10 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 80020bc:	2300      	movs	r3, #0
 80020be:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        ILI9341_WriteData(data, sizeof(data));
 80020c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020c6:	2102      	movs	r1, #2
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff ff3b 	bl	8001f44 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 80020ce:	20ed      	movs	r0, #237	; 0xed
 80020d0:	f7ff ff1e 	bl	8001f10 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 80020d4:	4b69      	ldr	r3, [pc, #420]	; (800227c <ILI9341_Init+0x24c>)
 80020d6:	653b      	str	r3, [r7, #80]	; 0x50
        ILI9341_WriteData(data, sizeof(data));
 80020d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80020dc:	2104      	movs	r1, #4
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff ff30 	bl	8001f44 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 80020e4:	20f7      	movs	r0, #247	; 0xf7
 80020e6:	f7ff ff13 	bl	8001f10 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 80020ea:	2320      	movs	r3, #32
 80020ec:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        ILI9341_WriteData(data, sizeof(data));
 80020f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020f4:	2101      	movs	r1, #1
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff ff24 	bl	8001f44 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 80020fc:	20c0      	movs	r0, #192	; 0xc0
 80020fe:	f7ff ff07 	bl	8001f10 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 8002102:	2323      	movs	r3, #35	; 0x23
 8002104:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        ILI9341_WriteData(data, sizeof(data));
 8002108:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800210c:	2101      	movs	r1, #1
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff ff18 	bl	8001f44 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 8002114:	20c1      	movs	r0, #193	; 0xc1
 8002116:	f7ff fefb 	bl	8001f10 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 800211a:	2310      	movs	r3, #16
 800211c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        ILI9341_WriteData(data, sizeof(data));
 8002120:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002124:	2101      	movs	r1, #1
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff ff0c 	bl	8001f44 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 800212c:	20c5      	movs	r0, #197	; 0xc5
 800212e:	f7ff feef 	bl	8001f10 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 8002132:	f642 033e 	movw	r3, #10302	; 0x283e
 8002136:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        ILI9341_WriteData(data, sizeof(data));
 800213a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800213e:	2102      	movs	r1, #2
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff feff 	bl	8001f44 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 8002146:	20c7      	movs	r0, #199	; 0xc7
 8002148:	f7ff fee2 	bl	8001f10 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 800214c:	2386      	movs	r3, #134	; 0x86
 800214e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        ILI9341_WriteData(data, sizeof(data));
 8002152:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002156:	2101      	movs	r1, #1
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff fef3 	bl	8001f44 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 800215e:	2036      	movs	r0, #54	; 0x36
 8002160:	f7ff fed6 	bl	8001f10 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 8002164:	2348      	movs	r3, #72	; 0x48
 8002166:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        ILI9341_WriteData(data, sizeof(data));
 800216a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800216e:	2101      	movs	r1, #1
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff fee7 	bl	8001f44 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 8002176:	203a      	movs	r0, #58	; 0x3a
 8002178:	f7ff feca 	bl	8001f10 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 800217c:	2355      	movs	r3, #85	; 0x55
 800217e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        ILI9341_WriteData(data, sizeof(data));
 8002182:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002186:	2101      	movs	r1, #1
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff fedb 	bl	8001f44 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 800218e:	20b1      	movs	r0, #177	; 0xb1
 8002190:	f7ff febe 	bl	8001f10 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 8002194:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002198:	863b      	strh	r3, [r7, #48]	; 0x30
        ILI9341_WriteData(data, sizeof(data));
 800219a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800219e:	2102      	movs	r1, #2
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fecf 	bl	8001f44 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 80021a6:	20b6      	movs	r0, #182	; 0xb6
 80021a8:	f7ff feb2 	bl	8001f10 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 80021ac:	4a34      	ldr	r2, [pc, #208]	; (8002280 <ILI9341_Init+0x250>)
 80021ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	4611      	mov	r1, r2
 80021b6:	8019      	strh	r1, [r3, #0]
 80021b8:	3302      	adds	r3, #2
 80021ba:	0c12      	lsrs	r2, r2, #16
 80021bc:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80021be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021c2:	2103      	movs	r1, #3
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff febd 	bl	8001f44 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 80021ca:	20f2      	movs	r0, #242	; 0xf2
 80021cc:	f7ff fea0 	bl	8001f10 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 80021d0:	2300      	movs	r3, #0
 80021d2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        ILI9341_WriteData(data, sizeof(data));
 80021d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021da:	2101      	movs	r1, #1
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff feb1 	bl	8001f44 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 80021e2:	2026      	movs	r0, #38	; 0x26
 80021e4:	f7ff fe94 	bl	8001f10 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 80021e8:	2301      	movs	r3, #1
 80021ea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        ILI9341_WriteData(data, sizeof(data));
 80021ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f2:	2101      	movs	r1, #1
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff fea5 	bl	8001f44 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 80021fa:	20e0      	movs	r0, #224	; 0xe0
 80021fc:	f7ff fe88 	bl	8001f10 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8002200:	4b20      	ldr	r3, [pc, #128]	; (8002284 <ILI9341_Init+0x254>)
 8002202:	f107 0414 	add.w	r4, r7, #20
 8002206:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002208:	c407      	stmia	r4!, {r0, r1, r2}
 800220a:	8023      	strh	r3, [r4, #0]
 800220c:	3402      	adds	r4, #2
 800220e:	0c1b      	lsrs	r3, r3, #16
 8002210:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 8002212:	f107 0314 	add.w	r3, r7, #20
 8002216:	210f      	movs	r1, #15
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff fe93 	bl	8001f44 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 800221e:	20e1      	movs	r0, #225	; 0xe1
 8002220:	f7ff fe76 	bl	8001f10 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8002224:	4b18      	ldr	r3, [pc, #96]	; (8002288 <ILI9341_Init+0x258>)
 8002226:	1d3c      	adds	r4, r7, #4
 8002228:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800222a:	c407      	stmia	r4!, {r0, r1, r2}
 800222c:	8023      	strh	r3, [r4, #0]
 800222e:	3402      	adds	r4, #2
 8002230:	0c1b      	lsrs	r3, r3, #16
 8002232:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 8002234:	1d3b      	adds	r3, r7, #4
 8002236:	210f      	movs	r1, #15
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff fe83 	bl	8001f44 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 800223e:	2011      	movs	r0, #17
 8002240:	f7ff fe66 	bl	8001f10 <ILI9341_WriteCommand>
    HAL_Delay(120);
 8002244:	2078      	movs	r0, #120	; 0x78
 8002246:	f000 fb59 	bl	80028fc <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 800224a:	2029      	movs	r0, #41	; 0x29
 800224c:	f7ff fe60 	bl	8001f10 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 8002250:	2036      	movs	r0, #54	; 0x36
 8002252:	f7ff fe5d 	bl	8001f10 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 8002256:	23a0      	movs	r3, #160	; 0xa0
 8002258:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 800225a:	463b      	mov	r3, r7
 800225c:	2101      	movs	r1, #1
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff fe70 	bl	8001f44 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 8002264:	f7ff fe32 	bl	8001ecc <ILI9341_Unselect>
}
 8002268:	bf00      	nop
 800226a:	376c      	adds	r7, #108	; 0x6c
 800226c:	46bd      	mov	sp, r7
 800226e:	bd90      	pop	{r4, r7, pc}
 8002270:	0800a4a8 	.word	0x0800a4a8
 8002274:	0800a4b0 	.word	0x0800a4b0
 8002278:	0800a4b4 	.word	0x0800a4b4
 800227c:	81120364 	.word	0x81120364
 8002280:	0800a4b8 	.word	0x0800a4b8
 8002284:	0800a4bc 	.word	0x0800a4bc
 8002288:	0800a4cc 	.word	0x0800a4cc

0800228c <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	80fb      	strh	r3, [r7, #6]
 8002296:	460b      	mov	r3, r1
 8002298:	80bb      	strh	r3, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	807b      	strh	r3, [r7, #2]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 800229e:	88fb      	ldrh	r3, [r7, #6]
 80022a0:	2b9f      	cmp	r3, #159	; 0x9f
 80022a2:	d81f      	bhi.n	80022e4 <ILI9341_DrawPixel+0x58>
 80022a4:	88bb      	ldrh	r3, [r7, #4]
 80022a6:	2b7f      	cmp	r3, #127	; 0x7f
 80022a8:	d81c      	bhi.n	80022e4 <ILI9341_DrawPixel+0x58>
        return;

    ILI9341_Select();
 80022aa:	f7ff fe03 	bl	8001eb4 <ILI9341_Select>

    ILI9341_SetAddressWindow(x, y, x+1, y+1);
 80022ae:	88fb      	ldrh	r3, [r7, #6]
 80022b0:	3301      	adds	r3, #1
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	88bb      	ldrh	r3, [r7, #4]
 80022b6:	3301      	adds	r3, #1
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	88b9      	ldrh	r1, [r7, #4]
 80022bc:	88f8      	ldrh	r0, [r7, #6]
 80022be:	f7ff fe6f 	bl	8001fa0 <ILI9341_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 80022c2:	887b      	ldrh	r3, [r7, #2]
 80022c4:	0a1b      	lsrs	r3, r3, #8
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	733b      	strb	r3, [r7, #12]
 80022cc:	887b      	ldrh	r3, [r7, #2]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	737b      	strb	r3, [r7, #13]
    ILI9341_WriteData(data, sizeof(data));
 80022d2:	f107 030c 	add.w	r3, r7, #12
 80022d6:	2102      	movs	r1, #2
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff fe33 	bl	8001f44 <ILI9341_WriteData>

    ILI9341_Unselect();
 80022de:	f7ff fdf5 	bl	8001ecc <ILI9341_Unselect>
 80022e2:	e000      	b.n	80022e6 <ILI9341_DrawPixel+0x5a>
        return;
 80022e4:	bf00      	nop
}
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <ILI9341_WriteChar>:

void ILI9341_DrawPoint(struct point point_a, uint16_t color) {
	ILI9341_DrawPixel(point_a.x, point_a.y, color);
}

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80022ec:	b082      	sub	sp, #8
 80022ee:	b590      	push	{r4, r7, lr}
 80022f0:	b089      	sub	sp, #36	; 0x24
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	637b      	str	r3, [r7, #52]	; 0x34
 80022f6:	4603      	mov	r3, r0
 80022f8:	80fb      	strh	r3, [r7, #6]
 80022fa:	460b      	mov	r3, r1
 80022fc:	80bb      	strh	r3, [r7, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8002302:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002306:	b29a      	uxth	r2, r3
 8002308:	88fb      	ldrh	r3, [r7, #6]
 800230a:	4413      	add	r3, r2
 800230c:	b29b      	uxth	r3, r3
 800230e:	3b01      	subs	r3, #1
 8002310:	b29c      	uxth	r4, r3
 8002312:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002316:	b29a      	uxth	r2, r3
 8002318:	88bb      	ldrh	r3, [r7, #4]
 800231a:	4413      	add	r3, r2
 800231c:	b29b      	uxth	r3, r3
 800231e:	3b01      	subs	r3, #1
 8002320:	b29b      	uxth	r3, r3
 8002322:	88b9      	ldrh	r1, [r7, #4]
 8002324:	88f8      	ldrh	r0, [r7, #6]
 8002326:	4622      	mov	r2, r4
 8002328:	f7ff fe3a 	bl	8001fa0 <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800232c:	2300      	movs	r3, #0
 800232e:	61fb      	str	r3, [r7, #28]
 8002330:	e043      	b.n	80023ba <ILI9341_WriteChar+0xce>
        b = font.data[(ch - 32) * font.height + i];
 8002332:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002334:	78fb      	ldrb	r3, [r7, #3]
 8002336:	3b20      	subs	r3, #32
 8002338:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800233c:	fb01 f303 	mul.w	r3, r1, r3
 8002340:	4619      	mov	r1, r3
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	440b      	add	r3, r1
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	4413      	add	r3, r2
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800234e:	2300      	movs	r3, #0
 8002350:	61bb      	str	r3, [r7, #24]
 8002352:	e029      	b.n	80023a8 <ILI9341_WriteChar+0xbc>
            if((b << j) & 0x8000)  {
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00e      	beq.n	8002382 <ILI9341_WriteChar+0x96>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8002364:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002366:	0a1b      	lsrs	r3, r3, #8
 8002368:	b29b      	uxth	r3, r3
 800236a:	b2db      	uxtb	r3, r3
 800236c:	743b      	strb	r3, [r7, #16]
 800236e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002370:	b2db      	uxtb	r3, r3
 8002372:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 8002374:	f107 0310 	add.w	r3, r7, #16
 8002378:	2102      	movs	r1, #2
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fde2 	bl	8001f44 <ILI9341_WriteData>
 8002380:	e00f      	b.n	80023a2 <ILI9341_WriteChar+0xb6>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8002382:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002386:	0a1b      	lsrs	r3, r3, #8
 8002388:	b29b      	uxth	r3, r3
 800238a:	b2db      	uxtb	r3, r3
 800238c:	733b      	strb	r3, [r7, #12]
 800238e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002392:	b2db      	uxtb	r3, r3
 8002394:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 8002396:	f107 030c 	add.w	r3, r7, #12
 800239a:	2102      	movs	r1, #2
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff fdd1 	bl	8001f44 <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	3301      	adds	r3, #1
 80023a6:	61bb      	str	r3, [r7, #24]
 80023a8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80023ac:	461a      	mov	r2, r3
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d3cf      	bcc.n	8002354 <ILI9341_WriteChar+0x68>
    for(i = 0; i < font.height; i++) {
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	3301      	adds	r3, #1
 80023b8:	61fb      	str	r3, [r7, #28]
 80023ba:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80023be:	461a      	mov	r2, r3
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d3b5      	bcc.n	8002332 <ILI9341_WriteChar+0x46>
            }
        }
    }
}
 80023c6:	bf00      	nop
 80023c8:	bf00      	nop
 80023ca:	3724      	adds	r7, #36	; 0x24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80023d2:	b002      	add	sp, #8
 80023d4:	4770      	bx	lr

080023d6 <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80023d6:	b082      	sub	sp, #8
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af04      	add	r7, sp, #16
 80023de:	603a      	str	r2, [r7, #0]
 80023e0:	617b      	str	r3, [r7, #20]
 80023e2:	4603      	mov	r3, r0
 80023e4:	80fb      	strh	r3, [r7, #6]
 80023e6:	460b      	mov	r3, r1
 80023e8:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 80023ea:	f7ff fd63 	bl	8001eb4 <ILI9341_Select>

    while(*str) {
 80023ee:	e02d      	b.n	800244c <ILI9341_WriteString+0x76>
        if(x + font.width >= ILI9341_WIDTH) {
 80023f0:	88fb      	ldrh	r3, [r7, #6]
 80023f2:	7d3a      	ldrb	r2, [r7, #20]
 80023f4:	4413      	add	r3, r2
 80023f6:	2b9f      	cmp	r3, #159	; 0x9f
 80023f8:	dd13      	ble.n	8002422 <ILI9341_WriteString+0x4c>
            x = 0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80023fe:	7d7b      	ldrb	r3, [r7, #21]
 8002400:	b29a      	uxth	r2, r3
 8002402:	88bb      	ldrh	r3, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 8002408:	88bb      	ldrh	r3, [r7, #4]
 800240a:	7d7a      	ldrb	r2, [r7, #21]
 800240c:	4413      	add	r3, r2
 800240e:	2b7f      	cmp	r3, #127	; 0x7f
 8002410:	dc21      	bgt.n	8002456 <ILI9341_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b20      	cmp	r3, #32
 8002418:	d103      	bne.n	8002422 <ILI9341_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	3301      	adds	r3, #1
 800241e:	603b      	str	r3, [r7, #0]
                continue;
 8002420:	e014      	b.n	800244c <ILI9341_WriteString+0x76>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	781a      	ldrb	r2, [r3, #0]
 8002426:	88b9      	ldrh	r1, [r7, #4]
 8002428:	88f8      	ldrh	r0, [r7, #6]
 800242a:	8c3b      	ldrh	r3, [r7, #32]
 800242c:	9302      	str	r3, [sp, #8]
 800242e:	8bbb      	ldrh	r3, [r7, #28]
 8002430:	9301      	str	r3, [sp, #4]
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f7ff ff58 	bl	80022ec <ILI9341_WriteChar>
        x += font.width;
 800243c:	7d3b      	ldrb	r3, [r7, #20]
 800243e:	b29a      	uxth	r2, r3
 8002440:	88fb      	ldrh	r3, [r7, #6]
 8002442:	4413      	add	r3, r2
 8002444:	80fb      	strh	r3, [r7, #6]
        str++;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	3301      	adds	r3, #1
 800244a:	603b      	str	r3, [r7, #0]
    while(*str) {
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1cd      	bne.n	80023f0 <ILI9341_WriteString+0x1a>
 8002454:	e000      	b.n	8002458 <ILI9341_WriteString+0x82>
                break;
 8002456:	bf00      	nop
    }

    ILI9341_Unselect();
 8002458:	f7ff fd38 	bl	8001ecc <ILI9341_Unselect>
}
 800245c:	bf00      	nop
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002466:	b002      	add	sp, #8
 8002468:	4770      	bx	lr
	...

0800246c <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 800246c:	b590      	push	{r4, r7, lr}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	4604      	mov	r4, r0
 8002474:	4608      	mov	r0, r1
 8002476:	4611      	mov	r1, r2
 8002478:	461a      	mov	r2, r3
 800247a:	4623      	mov	r3, r4
 800247c:	80fb      	strh	r3, [r7, #6]
 800247e:	4603      	mov	r3, r0
 8002480:	80bb      	strh	r3, [r7, #4]
 8002482:	460b      	mov	r3, r1
 8002484:	807b      	strh	r3, [r7, #2]
 8002486:	4613      	mov	r3, r2
 8002488:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 800248a:	88fb      	ldrh	r3, [r7, #6]
 800248c:	2b9f      	cmp	r3, #159	; 0x9f
 800248e:	d852      	bhi.n	8002536 <ILI9341_FillRectangle+0xca>
 8002490:	88bb      	ldrh	r3, [r7, #4]
 8002492:	2b7f      	cmp	r3, #127	; 0x7f
 8002494:	d84f      	bhi.n	8002536 <ILI9341_FillRectangle+0xca>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8002496:	88fa      	ldrh	r2, [r7, #6]
 8002498:	887b      	ldrh	r3, [r7, #2]
 800249a:	4413      	add	r3, r2
 800249c:	2ba0      	cmp	r3, #160	; 0xa0
 800249e:	dd03      	ble.n	80024a8 <ILI9341_FillRectangle+0x3c>
 80024a0:	88fb      	ldrh	r3, [r7, #6]
 80024a2:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80024a6:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 80024a8:	88ba      	ldrh	r2, [r7, #4]
 80024aa:	883b      	ldrh	r3, [r7, #0]
 80024ac:	4413      	add	r3, r2
 80024ae:	2b80      	cmp	r3, #128	; 0x80
 80024b0:	dd03      	ble.n	80024ba <ILI9341_FillRectangle+0x4e>
 80024b2:	88bb      	ldrh	r3, [r7, #4]
 80024b4:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80024b8:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 80024ba:	f7ff fcfb 	bl	8001eb4 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 80024be:	88fa      	ldrh	r2, [r7, #6]
 80024c0:	887b      	ldrh	r3, [r7, #2]
 80024c2:	4413      	add	r3, r2
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	3b01      	subs	r3, #1
 80024c8:	b29c      	uxth	r4, r3
 80024ca:	88ba      	ldrh	r2, [r7, #4]
 80024cc:	883b      	ldrh	r3, [r7, #0]
 80024ce:	4413      	add	r3, r2
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	3b01      	subs	r3, #1
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	88b9      	ldrh	r1, [r7, #4]
 80024d8:	88f8      	ldrh	r0, [r7, #6]
 80024da:	4622      	mov	r2, r4
 80024dc:	f7ff fd60 	bl	8001fa0 <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80024e0:	8c3b      	ldrh	r3, [r7, #32]
 80024e2:	0a1b      	lsrs	r3, r3, #8
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	733b      	strb	r3, [r7, #12]
 80024ea:	8c3b      	ldrh	r3, [r7, #32]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80024f0:	2201      	movs	r2, #1
 80024f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024f6:	4812      	ldr	r0, [pc, #72]	; (8002540 <ILI9341_FillRectangle+0xd4>)
 80024f8:	f000 ff65 	bl	80033c6 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80024fc:	883b      	ldrh	r3, [r7, #0]
 80024fe:	80bb      	strh	r3, [r7, #4]
 8002500:	e013      	b.n	800252a <ILI9341_FillRectangle+0xbe>
        for(x = w; x > 0; x--) {
 8002502:	887b      	ldrh	r3, [r7, #2]
 8002504:	80fb      	strh	r3, [r7, #6]
 8002506:	e00a      	b.n	800251e <ILI9341_FillRectangle+0xb2>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8002508:	f107 010c 	add.w	r1, r7, #12
 800250c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002510:	2202      	movs	r2, #2
 8002512:	480c      	ldr	r0, [pc, #48]	; (8002544 <ILI9341_FillRectangle+0xd8>)
 8002514:	f004 f962 	bl	80067dc <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8002518:	88fb      	ldrh	r3, [r7, #6]
 800251a:	3b01      	subs	r3, #1
 800251c:	80fb      	strh	r3, [r7, #6]
 800251e:	88fb      	ldrh	r3, [r7, #6]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1f1      	bne.n	8002508 <ILI9341_FillRectangle+0x9c>
    for(y = h; y > 0; y--) {
 8002524:	88bb      	ldrh	r3, [r7, #4]
 8002526:	3b01      	subs	r3, #1
 8002528:	80bb      	strh	r3, [r7, #4]
 800252a:	88bb      	ldrh	r3, [r7, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1e8      	bne.n	8002502 <ILI9341_FillRectangle+0x96>
        }
    }

    ILI9341_Unselect();
 8002530:	f7ff fccc 	bl	8001ecc <ILI9341_Unselect>
 8002534:	e000      	b.n	8002538 <ILI9341_FillRectangle+0xcc>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8002536:	bf00      	nop
}
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	bd90      	pop	{r4, r7, pc}
 800253e:	bf00      	nop
 8002540:	40010800 	.word	0x40010800
 8002544:	200002a0 	.word	0x200002a0

08002548 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af02      	add	r7, sp, #8
 800254e:	4603      	mov	r3, r0
 8002550:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8002552:	88fb      	ldrh	r3, [r7, #6]
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	2380      	movs	r3, #128	; 0x80
 8002558:	22a0      	movs	r2, #160	; 0xa0
 800255a:	2100      	movs	r1, #0
 800255c:	2000      	movs	r0, #0
 800255e:	f7ff ff85 	bl	800246c <ILI9341_FillRectangle>
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <ILI9341_DrawLine>:
    ILI9341_WriteCommand(invert ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
    ILI9341_Unselect();
}


void ILI9341_DrawLine(struct point point_a, struct point point_b, uint16_t color) {
 800256c:	b590      	push	{r4, r7, lr}
 800256e:	b08d      	sub	sp, #52	; 0x34
 8002570:	af00      	add	r7, sp, #0
 8002572:	81b8      	strh	r0, [r7, #12]
 8002574:	8139      	strh	r1, [r7, #8]
 8002576:	4613      	mov	r3, r2
 8002578:	80fb      	strh	r3, [r7, #6]
	float x = point_a.x;
 800257a:	7b3b      	ldrb	r3, [r7, #12]
 800257c:	4618      	mov	r0, r3
 800257e:	f7fe fb59 	bl	8000c34 <__aeabi_ui2f>
 8002582:	4603      	mov	r3, r0
 8002584:	62fb      	str	r3, [r7, #44]	; 0x2c
	float y = point_a.y;
 8002586:	7b7b      	ldrb	r3, [r7, #13]
 8002588:	4618      	mov	r0, r3
 800258a:	f7fe fb53 	bl	8000c34 <__aeabi_ui2f>
 800258e:	4603      	mov	r3, r0
 8002590:	62bb      	str	r3, [r7, #40]	; 0x28
	int16_t dx = point_b.x - point_a.x;
 8002592:	7a3b      	ldrb	r3, [r7, #8]
 8002594:	b29a      	uxth	r2, r3
 8002596:	7b3b      	ldrb	r3, [r7, #12]
 8002598:	b29b      	uxth	r3, r3
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	b29b      	uxth	r3, r3
 800259e:	847b      	strh	r3, [r7, #34]	; 0x22
	int16_t dy = point_b.y - point_a.y;
 80025a0:	7a7b      	ldrb	r3, [r7, #9]
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	7b7b      	ldrb	r3, [r7, #13]
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	843b      	strh	r3, [r7, #32]
	int steps = abs(dx) > abs(dy) ? abs(dx) : abs(dy);
 80025ae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	bfb8      	it	lt
 80025b6:	425b      	neglt	r3, r3
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80025be:	2b00      	cmp	r3, #0
 80025c0:	bfb8      	it	lt
 80025c2:	425b      	neglt	r3, r3
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	4293      	cmp	r3, r2
 80025c8:	bf38      	it	cc
 80025ca:	4613      	movcc	r3, r2
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	61fb      	str	r3, [r7, #28]
	float x_increment = dx / (float) steps;
 80025d0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fe fb31 	bl	8000c3c <__aeabi_i2f>
 80025da:	4604      	mov	r4, r0
 80025dc:	69f8      	ldr	r0, [r7, #28]
 80025de:	f7fe fb2d 	bl	8000c3c <__aeabi_i2f>
 80025e2:	4603      	mov	r3, r0
 80025e4:	4619      	mov	r1, r3
 80025e6:	4620      	mov	r0, r4
 80025e8:	f7fe fc30 	bl	8000e4c <__aeabi_fdiv>
 80025ec:	4603      	mov	r3, r0
 80025ee:	61bb      	str	r3, [r7, #24]
	float y_increment = dy / (float) steps;
 80025f0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fe fb21 	bl	8000c3c <__aeabi_i2f>
 80025fa:	4604      	mov	r4, r0
 80025fc:	69f8      	ldr	r0, [r7, #28]
 80025fe:	f7fe fb1d 	bl	8000c3c <__aeabi_i2f>
 8002602:	4603      	mov	r3, r0
 8002604:	4619      	mov	r1, r3
 8002606:	4620      	mov	r0, r4
 8002608:	f7fe fc20 	bl	8000e4c <__aeabi_fdiv>
 800260c:	4603      	mov	r3, r0
 800260e:	617b      	str	r3, [r7, #20]

	for (int v = 0; v < steps; v++) {
 8002610:	2300      	movs	r3, #0
 8002612:	627b      	str	r3, [r7, #36]	; 0x24
 8002614:	e0e5      	b.n	80027e2 <ILI9341_DrawLine+0x276>
		x = x + x_increment;
 8002616:	69b9      	ldr	r1, [r7, #24]
 8002618:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800261a:	f7fe fa5b 	bl	8000ad4 <__addsf3>
 800261e:	4603      	mov	r3, r0
 8002620:	62fb      	str	r3, [r7, #44]	; 0x2c
		y = y + y_increment;
 8002622:	6979      	ldr	r1, [r7, #20]
 8002624:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002626:	f7fe fa55 	bl	8000ad4 <__addsf3>
 800262a:	4603      	mov	r3, r0
 800262c:	62bb      	str	r3, [r7, #40]	; 0x28
		ILI9341_DrawPixel(round(x), round(y), color);
 800262e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002630:	f7fd fefa 	bl	8000428 <__aeabi_f2d>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	4610      	mov	r0, r2
 800263a:	4619      	mov	r1, r3
 800263c:	f007 fe9e 	bl	800a37c <round>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4610      	mov	r0, r2
 8002646:	4619      	mov	r1, r3
 8002648:	f7fe fa1e 	bl	8000a88 <__aeabi_d2uiz>
 800264c:	4603      	mov	r3, r0
 800264e:	b29c      	uxth	r4, r3
 8002650:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002652:	f7fd fee9 	bl	8000428 <__aeabi_f2d>
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	4610      	mov	r0, r2
 800265c:	4619      	mov	r1, r3
 800265e:	f007 fe8d 	bl	800a37c <round>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	4610      	mov	r0, r2
 8002668:	4619      	mov	r1, r3
 800266a:	f7fe fa0d 	bl	8000a88 <__aeabi_d2uiz>
 800266e:	4603      	mov	r3, r0
 8002670:	b29b      	uxth	r3, r3
 8002672:	88fa      	ldrh	r2, [r7, #6]
 8002674:	4619      	mov	r1, r3
 8002676:	4620      	mov	r0, r4
 8002678:	f7ff fe08 	bl	800228c <ILI9341_DrawPixel>
		ILI9341_DrawPixel(round(x) - 1, round(y), color);
 800267c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800267e:	f7fd fed3 	bl	8000428 <__aeabi_f2d>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4610      	mov	r0, r2
 8002688:	4619      	mov	r1, r3
 800268a:	f007 fe77 	bl	800a37c <round>
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	4b59      	ldr	r3, [pc, #356]	; (80027f8 <ILI9341_DrawLine+0x28c>)
 8002694:	f7fd fd68 	bl	8000168 <__aeabi_dsub>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	4610      	mov	r0, r2
 800269e:	4619      	mov	r1, r3
 80026a0:	f7fe f9f2 	bl	8000a88 <__aeabi_d2uiz>
 80026a4:	4603      	mov	r3, r0
 80026a6:	b29c      	uxth	r4, r3
 80026a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026aa:	f7fd febd 	bl	8000428 <__aeabi_f2d>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	4610      	mov	r0, r2
 80026b4:	4619      	mov	r1, r3
 80026b6:	f007 fe61 	bl	800a37c <round>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	4610      	mov	r0, r2
 80026c0:	4619      	mov	r1, r3
 80026c2:	f7fe f9e1 	bl	8000a88 <__aeabi_d2uiz>
 80026c6:	4603      	mov	r3, r0
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	88fa      	ldrh	r2, [r7, #6]
 80026cc:	4619      	mov	r1, r3
 80026ce:	4620      	mov	r0, r4
 80026d0:	f7ff fddc 	bl	800228c <ILI9341_DrawPixel>
		ILI9341_DrawPixel(round(x) + 1, round(y), color);
 80026d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80026d6:	f7fd fea7 	bl	8000428 <__aeabi_f2d>
 80026da:	4602      	mov	r2, r0
 80026dc:	460b      	mov	r3, r1
 80026de:	4610      	mov	r0, r2
 80026e0:	4619      	mov	r1, r3
 80026e2:	f007 fe4b 	bl	800a37c <round>
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	4b43      	ldr	r3, [pc, #268]	; (80027f8 <ILI9341_DrawLine+0x28c>)
 80026ec:	f7fd fd3e 	bl	800016c <__adddf3>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4610      	mov	r0, r2
 80026f6:	4619      	mov	r1, r3
 80026f8:	f7fe f9c6 	bl	8000a88 <__aeabi_d2uiz>
 80026fc:	4603      	mov	r3, r0
 80026fe:	b29c      	uxth	r4, r3
 8002700:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002702:	f7fd fe91 	bl	8000428 <__aeabi_f2d>
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	4610      	mov	r0, r2
 800270c:	4619      	mov	r1, r3
 800270e:	f007 fe35 	bl	800a37c <round>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	4610      	mov	r0, r2
 8002718:	4619      	mov	r1, r3
 800271a:	f7fe f9b5 	bl	8000a88 <__aeabi_d2uiz>
 800271e:	4603      	mov	r3, r0
 8002720:	b29b      	uxth	r3, r3
 8002722:	88fa      	ldrh	r2, [r7, #6]
 8002724:	4619      	mov	r1, r3
 8002726:	4620      	mov	r0, r4
 8002728:	f7ff fdb0 	bl	800228c <ILI9341_DrawPixel>
		ILI9341_DrawPixel(round(x), round(y) - 1, color);
 800272c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800272e:	f7fd fe7b 	bl	8000428 <__aeabi_f2d>
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
 8002736:	4610      	mov	r0, r2
 8002738:	4619      	mov	r1, r3
 800273a:	f007 fe1f 	bl	800a37c <round>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	4610      	mov	r0, r2
 8002744:	4619      	mov	r1, r3
 8002746:	f7fe f99f 	bl	8000a88 <__aeabi_d2uiz>
 800274a:	4603      	mov	r3, r0
 800274c:	b29c      	uxth	r4, r3
 800274e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002750:	f7fd fe6a 	bl	8000428 <__aeabi_f2d>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4610      	mov	r0, r2
 800275a:	4619      	mov	r1, r3
 800275c:	f007 fe0e 	bl	800a37c <round>
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	4b24      	ldr	r3, [pc, #144]	; (80027f8 <ILI9341_DrawLine+0x28c>)
 8002766:	f7fd fcff 	bl	8000168 <__aeabi_dsub>
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	4610      	mov	r0, r2
 8002770:	4619      	mov	r1, r3
 8002772:	f7fe f989 	bl	8000a88 <__aeabi_d2uiz>
 8002776:	4603      	mov	r3, r0
 8002778:	b29b      	uxth	r3, r3
 800277a:	88fa      	ldrh	r2, [r7, #6]
 800277c:	4619      	mov	r1, r3
 800277e:	4620      	mov	r0, r4
 8002780:	f7ff fd84 	bl	800228c <ILI9341_DrawPixel>
		ILI9341_DrawPixel(round(x), round(y) + 1, color);
 8002784:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002786:	f7fd fe4f 	bl	8000428 <__aeabi_f2d>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	4610      	mov	r0, r2
 8002790:	4619      	mov	r1, r3
 8002792:	f007 fdf3 	bl	800a37c <round>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	4610      	mov	r0, r2
 800279c:	4619      	mov	r1, r3
 800279e:	f7fe f973 	bl	8000a88 <__aeabi_d2uiz>
 80027a2:	4603      	mov	r3, r0
 80027a4:	b29c      	uxth	r4, r3
 80027a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027a8:	f7fd fe3e 	bl	8000428 <__aeabi_f2d>
 80027ac:	4602      	mov	r2, r0
 80027ae:	460b      	mov	r3, r1
 80027b0:	4610      	mov	r0, r2
 80027b2:	4619      	mov	r1, r3
 80027b4:	f007 fde2 	bl	800a37c <round>
 80027b8:	f04f 0200 	mov.w	r2, #0
 80027bc:	4b0e      	ldr	r3, [pc, #56]	; (80027f8 <ILI9341_DrawLine+0x28c>)
 80027be:	f7fd fcd5 	bl	800016c <__adddf3>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	4610      	mov	r0, r2
 80027c8:	4619      	mov	r1, r3
 80027ca:	f7fe f95d 	bl	8000a88 <__aeabi_d2uiz>
 80027ce:	4603      	mov	r3, r0
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	88fa      	ldrh	r2, [r7, #6]
 80027d4:	4619      	mov	r1, r3
 80027d6:	4620      	mov	r0, r4
 80027d8:	f7ff fd58 	bl	800228c <ILI9341_DrawPixel>
	for (int v = 0; v < steps; v++) {
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	3301      	adds	r3, #1
 80027e0:	627b      	str	r3, [r7, #36]	; 0x24
 80027e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	f6ff af15 	blt.w	8002616 <ILI9341_DrawLine+0xaa>
	}
}
 80027ec:	bf00      	nop
 80027ee:	bf00      	nop
 80027f0:	3734      	adds	r7, #52	; 0x34
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd90      	pop	{r4, r7, pc}
 80027f6:	bf00      	nop
 80027f8:	3ff00000 	.word	0x3ff00000

080027fc <ILI9341_DrawTriangle>:

void ILI9341_DrawTriangle(struct point point_a, struct point point_b, struct point point_c, uint16_t color) {
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	81b8      	strh	r0, [r7, #12]
 8002804:	8139      	strh	r1, [r7, #8]
 8002806:	80ba      	strh	r2, [r7, #4]
 8002808:	807b      	strh	r3, [r7, #2]
	ILI9341_DrawLine(point_a, point_b, color);
 800280a:	887b      	ldrh	r3, [r7, #2]
 800280c:	461a      	mov	r2, r3
 800280e:	68b9      	ldr	r1, [r7, #8]
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f7ff feab 	bl	800256c <ILI9341_DrawLine>
	ILI9341_DrawLine(point_a, point_c, color);
 8002816:	887b      	ldrh	r3, [r7, #2]
 8002818:	461a      	mov	r2, r3
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f7ff fea5 	bl	800256c <ILI9341_DrawLine>
	ILI9341_DrawLine(point_b, point_c, color);
 8002822:	887b      	ldrh	r3, [r7, #2]
 8002824:	461a      	mov	r2, r3
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	68b8      	ldr	r0, [r7, #8]
 800282a:	f7ff fe9f 	bl	800256c <ILI9341_DrawLine>
}
 800282e:	bf00      	nop
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800283c:	4b08      	ldr	r3, [pc, #32]	; (8002860 <HAL_Init+0x28>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a07      	ldr	r2, [pc, #28]	; (8002860 <HAL_Init+0x28>)
 8002842:	f043 0310 	orr.w	r3, r3, #16
 8002846:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002848:	2003      	movs	r0, #3
 800284a:	f000 fb59 	bl	8002f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800284e:	200f      	movs	r0, #15
 8002850:	f000 f808 	bl	8002864 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002854:	f7ff f84a 	bl	80018ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40022000 	.word	0x40022000

08002864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800286c:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <HAL_InitTick+0x54>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	4b12      	ldr	r3, [pc, #72]	; (80028bc <HAL_InitTick+0x58>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	4619      	mov	r1, r3
 8002876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800287a:	fbb3 f3f1 	udiv	r3, r3, r1
 800287e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002882:	4618      	mov	r0, r3
 8002884:	f000 fb71 	bl	8002f6a <HAL_SYSTICK_Config>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e00e      	b.n	80028b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b0f      	cmp	r3, #15
 8002896:	d80a      	bhi.n	80028ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002898:	2200      	movs	r2, #0
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028a0:	f000 fb39 	bl	8002f16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028a4:	4a06      	ldr	r2, [pc, #24]	; (80028c0 <HAL_InitTick+0x5c>)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
 80028ac:	e000      	b.n	80028b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20000000 	.word	0x20000000
 80028bc:	20000018 	.word	0x20000018
 80028c0:	20000014 	.word	0x20000014

080028c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028c8:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <HAL_IncTick+0x1c>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	461a      	mov	r2, r3
 80028ce:	4b05      	ldr	r3, [pc, #20]	; (80028e4 <HAL_IncTick+0x20>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4413      	add	r3, r2
 80028d4:	4a03      	ldr	r2, [pc, #12]	; (80028e4 <HAL_IncTick+0x20>)
 80028d6:	6013      	str	r3, [r2, #0]
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr
 80028e0:	20000018 	.word	0x20000018
 80028e4:	20000414 	.word	0x20000414

080028e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  return uwTick;
 80028ec:	4b02      	ldr	r3, [pc, #8]	; (80028f8 <HAL_GetTick+0x10>)
 80028ee:	681b      	ldr	r3, [r3, #0]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr
 80028f8:	20000414 	.word	0x20000414

080028fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002904:	f7ff fff0 	bl	80028e8 <HAL_GetTick>
 8002908:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002914:	d005      	beq.n	8002922 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002916:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <HAL_Delay+0x44>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4413      	add	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002922:	bf00      	nop
 8002924:	f7ff ffe0 	bl	80028e8 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	429a      	cmp	r2, r3
 8002932:	d8f7      	bhi.n	8002924 <HAL_Delay+0x28>
  {
  }
}
 8002934:	bf00      	nop
 8002936:	bf00      	nop
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	20000018 	.word	0x20000018

08002944 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800294c:	2300      	movs	r3, #0
 800294e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002950:	2300      	movs	r3, #0
 8002952:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002954:	2300      	movs	r3, #0
 8002956:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002958:	2300      	movs	r3, #0
 800295a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e0be      	b.n	8002ae4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002970:	2b00      	cmp	r3, #0
 8002972:	d109      	bne.n	8002988 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7fe ffe4 	bl	8001950 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 f9ab 	bl	8002ce4 <ADC_ConversionStop_Disable>
 800298e:	4603      	mov	r3, r0
 8002990:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	2b00      	cmp	r3, #0
 800299c:	f040 8099 	bne.w	8002ad2 <HAL_ADC_Init+0x18e>
 80029a0:	7dfb      	ldrb	r3, [r7, #23]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f040 8095 	bne.w	8002ad2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029b0:	f023 0302 	bic.w	r3, r3, #2
 80029b4:	f043 0202 	orr.w	r2, r3, #2
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80029c4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	7b1b      	ldrb	r3, [r3, #12]
 80029ca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80029cc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029dc:	d003      	beq.n	80029e6 <HAL_ADC_Init+0xa2>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d102      	bne.n	80029ec <HAL_ADC_Init+0xa8>
 80029e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029ea:	e000      	b.n	80029ee <HAL_ADC_Init+0xaa>
 80029ec:	2300      	movs	r3, #0
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	7d1b      	ldrb	r3, [r3, #20]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d119      	bne.n	8002a30 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	7b1b      	ldrb	r3, [r3, #12]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d109      	bne.n	8002a18 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	035a      	lsls	r2, r3, #13
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	e00b      	b.n	8002a30 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1c:	f043 0220 	orr.w	r2, r3, #32
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a28:	f043 0201 	orr.w	r2, r3, #1
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	4b28      	ldr	r3, [pc, #160]	; (8002aec <HAL_ADC_Init+0x1a8>)
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6812      	ldr	r2, [r2, #0]
 8002a52:	68b9      	ldr	r1, [r7, #8]
 8002a54:	430b      	orrs	r3, r1
 8002a56:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a60:	d003      	beq.n	8002a6a <HAL_ADC_Init+0x126>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d104      	bne.n	8002a74 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	051b      	lsls	r3, r3, #20
 8002a72:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	4b18      	ldr	r3, [pc, #96]	; (8002af0 <HAL_ADC_Init+0x1ac>)
 8002a90:	4013      	ands	r3, r2
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d10b      	bne.n	8002ab0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa2:	f023 0303 	bic.w	r3, r3, #3
 8002aa6:	f043 0201 	orr.w	r2, r3, #1
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002aae:	e018      	b.n	8002ae2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab4:	f023 0312 	bic.w	r3, r3, #18
 8002ab8:	f043 0210 	orr.w	r2, r3, #16
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac4:	f043 0201 	orr.w	r2, r3, #1
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ad0:	e007      	b.n	8002ae2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad6:	f043 0210 	orr.w	r2, r3, #16
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3718      	adds	r7, #24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	ffe1f7fd 	.word	0xffe1f7fd
 8002af0:	ff1f0efe 	.word	0xff1f0efe

08002af4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d101      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x20>
 8002b10:	2302      	movs	r3, #2
 8002b12:	e0dc      	b.n	8002cce <HAL_ADC_ConfigChannel+0x1da>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b06      	cmp	r3, #6
 8002b22:	d81c      	bhi.n	8002b5e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4413      	add	r3, r2
 8002b34:	3b05      	subs	r3, #5
 8002b36:	221f      	movs	r2, #31
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	4019      	ands	r1, r3
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	6818      	ldr	r0, [r3, #0]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	3b05      	subs	r3, #5
 8002b50:	fa00 f203 	lsl.w	r2, r0, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	635a      	str	r2, [r3, #52]	; 0x34
 8002b5c:	e03c      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b0c      	cmp	r3, #12
 8002b64:	d81c      	bhi.n	8002ba0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	3b23      	subs	r3, #35	; 0x23
 8002b78:	221f      	movs	r2, #31
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	4019      	ands	r1, r3
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	6818      	ldr	r0, [r3, #0]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	3b23      	subs	r3, #35	; 0x23
 8002b92:	fa00 f203 	lsl.w	r2, r0, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	631a      	str	r2, [r3, #48]	; 0x30
 8002b9e:	e01b      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	4613      	mov	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	3b41      	subs	r3, #65	; 0x41
 8002bb2:	221f      	movs	r2, #31
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	4019      	ands	r1, r3
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	6818      	ldr	r0, [r3, #0]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	3b41      	subs	r3, #65	; 0x41
 8002bcc:	fa00 f203 	lsl.w	r2, r0, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b09      	cmp	r3, #9
 8002bde:	d91c      	bls.n	8002c1a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68d9      	ldr	r1, [r3, #12]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	4613      	mov	r3, r2
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	4413      	add	r3, r2
 8002bf0:	3b1e      	subs	r3, #30
 8002bf2:	2207      	movs	r2, #7
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	4019      	ands	r1, r3
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	6898      	ldr	r0, [r3, #8]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	4613      	mov	r3, r2
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	4413      	add	r3, r2
 8002c0a:	3b1e      	subs	r3, #30
 8002c0c:	fa00 f203 	lsl.w	r2, r0, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	60da      	str	r2, [r3, #12]
 8002c18:	e019      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6919      	ldr	r1, [r3, #16]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	4613      	mov	r3, r2
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	4413      	add	r3, r2
 8002c2a:	2207      	movs	r2, #7
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	4019      	ands	r1, r3
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	6898      	ldr	r0, [r3, #8]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	4413      	add	r3, r2
 8002c42:	fa00 f203 	lsl.w	r2, r0, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b10      	cmp	r3, #16
 8002c54:	d003      	beq.n	8002c5e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002c5a:	2b11      	cmp	r3, #17
 8002c5c:	d132      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a1d      	ldr	r2, [pc, #116]	; (8002cd8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d125      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d126      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002c84:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2b10      	cmp	r3, #16
 8002c8c:	d11a      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c8e:	4b13      	ldr	r3, [pc, #76]	; (8002cdc <HAL_ADC_ConfigChannel+0x1e8>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a13      	ldr	r2, [pc, #76]	; (8002ce0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002c94:	fba2 2303 	umull	r2, r3, r2, r3
 8002c98:	0c9a      	lsrs	r2, r3, #18
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ca4:	e002      	b.n	8002cac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f9      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x1b2>
 8002cb2:	e007      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb8:	f043 0220 	orr.w	r2, r3, #32
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr
 8002cd8:	40012400 	.word	0x40012400
 8002cdc:	20000000 	.word	0x20000000
 8002ce0:	431bde83 	.word	0x431bde83

08002ce4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d12e      	bne.n	8002d5c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0201 	bic.w	r2, r2, #1
 8002d0c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d0e:	f7ff fdeb 	bl	80028e8 <HAL_GetTick>
 8002d12:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d14:	e01b      	b.n	8002d4e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d16:	f7ff fde7 	bl	80028e8 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d914      	bls.n	8002d4e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d10d      	bne.n	8002d4e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d36:	f043 0210 	orr.w	r2, r3, #16
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d42:	f043 0201 	orr.w	r2, r3, #1
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e007      	b.n	8002d5e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d0dc      	beq.n	8002d16 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d78:	4b0c      	ldr	r3, [pc, #48]	; (8002dac <__NVIC_SetPriorityGrouping+0x44>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d84:	4013      	ands	r3, r2
 8002d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d9a:	4a04      	ldr	r2, [pc, #16]	; (8002dac <__NVIC_SetPriorityGrouping+0x44>)
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	60d3      	str	r3, [r2, #12]
}
 8002da0:	bf00      	nop
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	e000ed00 	.word	0xe000ed00

08002db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002db4:	4b04      	ldr	r3, [pc, #16]	; (8002dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	0a1b      	lsrs	r3, r3, #8
 8002dba:	f003 0307 	and.w	r3, r3, #7
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc80      	pop	{r7}
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	e000ed00 	.word	0xe000ed00

08002dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	db0b      	blt.n	8002df6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dde:	79fb      	ldrb	r3, [r7, #7]
 8002de0:	f003 021f 	and.w	r2, r3, #31
 8002de4:	4906      	ldr	r1, [pc, #24]	; (8002e00 <__NVIC_EnableIRQ+0x34>)
 8002de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dea:	095b      	lsrs	r3, r3, #5
 8002dec:	2001      	movs	r0, #1
 8002dee:	fa00 f202 	lsl.w	r2, r0, r2
 8002df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr
 8002e00:	e000e100 	.word	0xe000e100

08002e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	6039      	str	r1, [r7, #0]
 8002e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	db0a      	blt.n	8002e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	490c      	ldr	r1, [pc, #48]	; (8002e50 <__NVIC_SetPriority+0x4c>)
 8002e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e22:	0112      	lsls	r2, r2, #4
 8002e24:	b2d2      	uxtb	r2, r2
 8002e26:	440b      	add	r3, r1
 8002e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e2c:	e00a      	b.n	8002e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	4908      	ldr	r1, [pc, #32]	; (8002e54 <__NVIC_SetPriority+0x50>)
 8002e34:	79fb      	ldrb	r3, [r7, #7]
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	3b04      	subs	r3, #4
 8002e3c:	0112      	lsls	r2, r2, #4
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	440b      	add	r3, r1
 8002e42:	761a      	strb	r2, [r3, #24]
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	e000e100 	.word	0xe000e100
 8002e54:	e000ed00 	.word	0xe000ed00

08002e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b089      	sub	sp, #36	; 0x24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f1c3 0307 	rsb	r3, r3, #7
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	bf28      	it	cs
 8002e76:	2304      	movcs	r3, #4
 8002e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	2b06      	cmp	r3, #6
 8002e80:	d902      	bls.n	8002e88 <NVIC_EncodePriority+0x30>
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	3b03      	subs	r3, #3
 8002e86:	e000      	b.n	8002e8a <NVIC_EncodePriority+0x32>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	43da      	mvns	r2, r3
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	401a      	ands	r2, r3
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ea0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eaa:	43d9      	mvns	r1, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb0:	4313      	orrs	r3, r2
         );
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3724      	adds	r7, #36	; 0x24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr

08002ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ecc:	d301      	bcc.n	8002ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e00f      	b.n	8002ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ed2:	4a0a      	ldr	r2, [pc, #40]	; (8002efc <SysTick_Config+0x40>)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eda:	210f      	movs	r1, #15
 8002edc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ee0:	f7ff ff90 	bl	8002e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ee4:	4b05      	ldr	r3, [pc, #20]	; (8002efc <SysTick_Config+0x40>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eea:	4b04      	ldr	r3, [pc, #16]	; (8002efc <SysTick_Config+0x40>)
 8002eec:	2207      	movs	r2, #7
 8002eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	e000e010 	.word	0xe000e010

08002f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7ff ff2d 	bl	8002d68 <__NVIC_SetPriorityGrouping>
}
 8002f0e:	bf00      	nop
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b086      	sub	sp, #24
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	60b9      	str	r1, [r7, #8]
 8002f20:	607a      	str	r2, [r7, #4]
 8002f22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f28:	f7ff ff42 	bl	8002db0 <__NVIC_GetPriorityGrouping>
 8002f2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	68b9      	ldr	r1, [r7, #8]
 8002f32:	6978      	ldr	r0, [r7, #20]
 8002f34:	f7ff ff90 	bl	8002e58 <NVIC_EncodePriority>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f3e:	4611      	mov	r1, r2
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff ff5f 	bl	8002e04 <__NVIC_SetPriority>
}
 8002f46:	bf00      	nop
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b082      	sub	sp, #8
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	4603      	mov	r3, r0
 8002f56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff ff35 	bl	8002dcc <__NVIC_EnableIRQ>
}
 8002f62:	bf00      	nop
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7ff ffa2 	bl	8002ebc <SysTick_Config>
 8002f78:	4603      	mov	r3, r0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d005      	beq.n	8002fa8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2204      	movs	r2, #4
 8002fa0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	73fb      	strb	r3, [r7, #15]
 8002fa6:	e051      	b.n	800304c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 020e 	bic.w	r2, r2, #14
 8002fb6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 0201 	bic.w	r2, r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a22      	ldr	r2, [pc, #136]	; (8003058 <HAL_DMA_Abort_IT+0xd4>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d029      	beq.n	8003026 <HAL_DMA_Abort_IT+0xa2>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a21      	ldr	r2, [pc, #132]	; (800305c <HAL_DMA_Abort_IT+0xd8>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d022      	beq.n	8003022 <HAL_DMA_Abort_IT+0x9e>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a1f      	ldr	r2, [pc, #124]	; (8003060 <HAL_DMA_Abort_IT+0xdc>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d01a      	beq.n	800301c <HAL_DMA_Abort_IT+0x98>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a1e      	ldr	r2, [pc, #120]	; (8003064 <HAL_DMA_Abort_IT+0xe0>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d012      	beq.n	8003016 <HAL_DMA_Abort_IT+0x92>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a1c      	ldr	r2, [pc, #112]	; (8003068 <HAL_DMA_Abort_IT+0xe4>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d00a      	beq.n	8003010 <HAL_DMA_Abort_IT+0x8c>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a1b      	ldr	r2, [pc, #108]	; (800306c <HAL_DMA_Abort_IT+0xe8>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d102      	bne.n	800300a <HAL_DMA_Abort_IT+0x86>
 8003004:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003008:	e00e      	b.n	8003028 <HAL_DMA_Abort_IT+0xa4>
 800300a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800300e:	e00b      	b.n	8003028 <HAL_DMA_Abort_IT+0xa4>
 8003010:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003014:	e008      	b.n	8003028 <HAL_DMA_Abort_IT+0xa4>
 8003016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800301a:	e005      	b.n	8003028 <HAL_DMA_Abort_IT+0xa4>
 800301c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003020:	e002      	b.n	8003028 <HAL_DMA_Abort_IT+0xa4>
 8003022:	2310      	movs	r3, #16
 8003024:	e000      	b.n	8003028 <HAL_DMA_Abort_IT+0xa4>
 8003026:	2301      	movs	r3, #1
 8003028:	4a11      	ldr	r2, [pc, #68]	; (8003070 <HAL_DMA_Abort_IT+0xec>)
 800302a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	4798      	blx	r3
    } 
  }
  return status;
 800304c:	7bfb      	ldrb	r3, [r7, #15]
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40020008 	.word	0x40020008
 800305c:	4002001c 	.word	0x4002001c
 8003060:	40020030 	.word	0x40020030
 8003064:	40020044 	.word	0x40020044
 8003068:	40020058 	.word	0x40020058
 800306c:	4002006c 	.word	0x4002006c
 8003070:	40020000 	.word	0x40020000

08003074 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003082:	b2db      	uxtb	r3, r3
}
 8003084:	4618      	mov	r0, r3
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr
	...

08003090 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003090:	b480      	push	{r7}
 8003092:	b08b      	sub	sp, #44	; 0x2c
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800309a:	2300      	movs	r3, #0
 800309c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800309e:	2300      	movs	r3, #0
 80030a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030a2:	e169      	b.n	8003378 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80030a4:	2201      	movs	r2, #1
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	69fa      	ldr	r2, [r7, #28]
 80030b4:	4013      	ands	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	429a      	cmp	r2, r3
 80030be:	f040 8158 	bne.w	8003372 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	4a9a      	ldr	r2, [pc, #616]	; (8003330 <HAL_GPIO_Init+0x2a0>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d05e      	beq.n	800318a <HAL_GPIO_Init+0xfa>
 80030cc:	4a98      	ldr	r2, [pc, #608]	; (8003330 <HAL_GPIO_Init+0x2a0>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d875      	bhi.n	80031be <HAL_GPIO_Init+0x12e>
 80030d2:	4a98      	ldr	r2, [pc, #608]	; (8003334 <HAL_GPIO_Init+0x2a4>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d058      	beq.n	800318a <HAL_GPIO_Init+0xfa>
 80030d8:	4a96      	ldr	r2, [pc, #600]	; (8003334 <HAL_GPIO_Init+0x2a4>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d86f      	bhi.n	80031be <HAL_GPIO_Init+0x12e>
 80030de:	4a96      	ldr	r2, [pc, #600]	; (8003338 <HAL_GPIO_Init+0x2a8>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d052      	beq.n	800318a <HAL_GPIO_Init+0xfa>
 80030e4:	4a94      	ldr	r2, [pc, #592]	; (8003338 <HAL_GPIO_Init+0x2a8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d869      	bhi.n	80031be <HAL_GPIO_Init+0x12e>
 80030ea:	4a94      	ldr	r2, [pc, #592]	; (800333c <HAL_GPIO_Init+0x2ac>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d04c      	beq.n	800318a <HAL_GPIO_Init+0xfa>
 80030f0:	4a92      	ldr	r2, [pc, #584]	; (800333c <HAL_GPIO_Init+0x2ac>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d863      	bhi.n	80031be <HAL_GPIO_Init+0x12e>
 80030f6:	4a92      	ldr	r2, [pc, #584]	; (8003340 <HAL_GPIO_Init+0x2b0>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d046      	beq.n	800318a <HAL_GPIO_Init+0xfa>
 80030fc:	4a90      	ldr	r2, [pc, #576]	; (8003340 <HAL_GPIO_Init+0x2b0>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d85d      	bhi.n	80031be <HAL_GPIO_Init+0x12e>
 8003102:	2b12      	cmp	r3, #18
 8003104:	d82a      	bhi.n	800315c <HAL_GPIO_Init+0xcc>
 8003106:	2b12      	cmp	r3, #18
 8003108:	d859      	bhi.n	80031be <HAL_GPIO_Init+0x12e>
 800310a:	a201      	add	r2, pc, #4	; (adr r2, 8003110 <HAL_GPIO_Init+0x80>)
 800310c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003110:	0800318b 	.word	0x0800318b
 8003114:	08003165 	.word	0x08003165
 8003118:	08003177 	.word	0x08003177
 800311c:	080031b9 	.word	0x080031b9
 8003120:	080031bf 	.word	0x080031bf
 8003124:	080031bf 	.word	0x080031bf
 8003128:	080031bf 	.word	0x080031bf
 800312c:	080031bf 	.word	0x080031bf
 8003130:	080031bf 	.word	0x080031bf
 8003134:	080031bf 	.word	0x080031bf
 8003138:	080031bf 	.word	0x080031bf
 800313c:	080031bf 	.word	0x080031bf
 8003140:	080031bf 	.word	0x080031bf
 8003144:	080031bf 	.word	0x080031bf
 8003148:	080031bf 	.word	0x080031bf
 800314c:	080031bf 	.word	0x080031bf
 8003150:	080031bf 	.word	0x080031bf
 8003154:	0800316d 	.word	0x0800316d
 8003158:	08003181 	.word	0x08003181
 800315c:	4a79      	ldr	r2, [pc, #484]	; (8003344 <HAL_GPIO_Init+0x2b4>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d013      	beq.n	800318a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003162:	e02c      	b.n	80031be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	623b      	str	r3, [r7, #32]
          break;
 800316a:	e029      	b.n	80031c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	3304      	adds	r3, #4
 8003172:	623b      	str	r3, [r7, #32]
          break;
 8003174:	e024      	b.n	80031c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	3308      	adds	r3, #8
 800317c:	623b      	str	r3, [r7, #32]
          break;
 800317e:	e01f      	b.n	80031c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	330c      	adds	r3, #12
 8003186:	623b      	str	r3, [r7, #32]
          break;
 8003188:	e01a      	b.n	80031c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d102      	bne.n	8003198 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003192:	2304      	movs	r3, #4
 8003194:	623b      	str	r3, [r7, #32]
          break;
 8003196:	e013      	b.n	80031c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d105      	bne.n	80031ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031a0:	2308      	movs	r3, #8
 80031a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	69fa      	ldr	r2, [r7, #28]
 80031a8:	611a      	str	r2, [r3, #16]
          break;
 80031aa:	e009      	b.n	80031c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031ac:	2308      	movs	r3, #8
 80031ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	69fa      	ldr	r2, [r7, #28]
 80031b4:	615a      	str	r2, [r3, #20]
          break;
 80031b6:	e003      	b.n	80031c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031b8:	2300      	movs	r3, #0
 80031ba:	623b      	str	r3, [r7, #32]
          break;
 80031bc:	e000      	b.n	80031c0 <HAL_GPIO_Init+0x130>
          break;
 80031be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	2bff      	cmp	r3, #255	; 0xff
 80031c4:	d801      	bhi.n	80031ca <HAL_GPIO_Init+0x13a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	e001      	b.n	80031ce <HAL_GPIO_Init+0x13e>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	3304      	adds	r3, #4
 80031ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	2bff      	cmp	r3, #255	; 0xff
 80031d4:	d802      	bhi.n	80031dc <HAL_GPIO_Init+0x14c>
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	e002      	b.n	80031e2 <HAL_GPIO_Init+0x152>
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	3b08      	subs	r3, #8
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	210f      	movs	r1, #15
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	fa01 f303 	lsl.w	r3, r1, r3
 80031f0:	43db      	mvns	r3, r3
 80031f2:	401a      	ands	r2, r3
 80031f4:	6a39      	ldr	r1, [r7, #32]
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	fa01 f303 	lsl.w	r3, r1, r3
 80031fc:	431a      	orrs	r2, r3
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 80b1 	beq.w	8003372 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003210:	4b4d      	ldr	r3, [pc, #308]	; (8003348 <HAL_GPIO_Init+0x2b8>)
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	4a4c      	ldr	r2, [pc, #304]	; (8003348 <HAL_GPIO_Init+0x2b8>)
 8003216:	f043 0301 	orr.w	r3, r3, #1
 800321a:	6193      	str	r3, [r2, #24]
 800321c:	4b4a      	ldr	r3, [pc, #296]	; (8003348 <HAL_GPIO_Init+0x2b8>)
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	60bb      	str	r3, [r7, #8]
 8003226:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003228:	4a48      	ldr	r2, [pc, #288]	; (800334c <HAL_GPIO_Init+0x2bc>)
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	089b      	lsrs	r3, r3, #2
 800322e:	3302      	adds	r3, #2
 8003230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003234:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	f003 0303 	and.w	r3, r3, #3
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	220f      	movs	r2, #15
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	43db      	mvns	r3, r3
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	4013      	ands	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a40      	ldr	r2, [pc, #256]	; (8003350 <HAL_GPIO_Init+0x2c0>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d013      	beq.n	800327c <HAL_GPIO_Init+0x1ec>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a3f      	ldr	r2, [pc, #252]	; (8003354 <HAL_GPIO_Init+0x2c4>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d00d      	beq.n	8003278 <HAL_GPIO_Init+0x1e8>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a3e      	ldr	r2, [pc, #248]	; (8003358 <HAL_GPIO_Init+0x2c8>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d007      	beq.n	8003274 <HAL_GPIO_Init+0x1e4>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a3d      	ldr	r2, [pc, #244]	; (800335c <HAL_GPIO_Init+0x2cc>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d101      	bne.n	8003270 <HAL_GPIO_Init+0x1e0>
 800326c:	2303      	movs	r3, #3
 800326e:	e006      	b.n	800327e <HAL_GPIO_Init+0x1ee>
 8003270:	2304      	movs	r3, #4
 8003272:	e004      	b.n	800327e <HAL_GPIO_Init+0x1ee>
 8003274:	2302      	movs	r3, #2
 8003276:	e002      	b.n	800327e <HAL_GPIO_Init+0x1ee>
 8003278:	2301      	movs	r3, #1
 800327a:	e000      	b.n	800327e <HAL_GPIO_Init+0x1ee>
 800327c:	2300      	movs	r3, #0
 800327e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003280:	f002 0203 	and.w	r2, r2, #3
 8003284:	0092      	lsls	r2, r2, #2
 8003286:	4093      	lsls	r3, r2
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	4313      	orrs	r3, r2
 800328c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800328e:	492f      	ldr	r1, [pc, #188]	; (800334c <HAL_GPIO_Init+0x2bc>)
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	089b      	lsrs	r3, r3, #2
 8003294:	3302      	adds	r3, #2
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d006      	beq.n	80032b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032a8:	4b2d      	ldr	r3, [pc, #180]	; (8003360 <HAL_GPIO_Init+0x2d0>)
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	492c      	ldr	r1, [pc, #176]	; (8003360 <HAL_GPIO_Init+0x2d0>)
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	608b      	str	r3, [r1, #8]
 80032b4:	e006      	b.n	80032c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032b6:	4b2a      	ldr	r3, [pc, #168]	; (8003360 <HAL_GPIO_Init+0x2d0>)
 80032b8:	689a      	ldr	r2, [r3, #8]
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	43db      	mvns	r3, r3
 80032be:	4928      	ldr	r1, [pc, #160]	; (8003360 <HAL_GPIO_Init+0x2d0>)
 80032c0:	4013      	ands	r3, r2
 80032c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d006      	beq.n	80032de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032d0:	4b23      	ldr	r3, [pc, #140]	; (8003360 <HAL_GPIO_Init+0x2d0>)
 80032d2:	68da      	ldr	r2, [r3, #12]
 80032d4:	4922      	ldr	r1, [pc, #136]	; (8003360 <HAL_GPIO_Init+0x2d0>)
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	4313      	orrs	r3, r2
 80032da:	60cb      	str	r3, [r1, #12]
 80032dc:	e006      	b.n	80032ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032de:	4b20      	ldr	r3, [pc, #128]	; (8003360 <HAL_GPIO_Init+0x2d0>)
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	43db      	mvns	r3, r3
 80032e6:	491e      	ldr	r1, [pc, #120]	; (8003360 <HAL_GPIO_Init+0x2d0>)
 80032e8:	4013      	ands	r3, r2
 80032ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d006      	beq.n	8003306 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80032f8:	4b19      	ldr	r3, [pc, #100]	; (8003360 <HAL_GPIO_Init+0x2d0>)
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	4918      	ldr	r1, [pc, #96]	; (8003360 <HAL_GPIO_Init+0x2d0>)
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	4313      	orrs	r3, r2
 8003302:	604b      	str	r3, [r1, #4]
 8003304:	e006      	b.n	8003314 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003306:	4b16      	ldr	r3, [pc, #88]	; (8003360 <HAL_GPIO_Init+0x2d0>)
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	43db      	mvns	r3, r3
 800330e:	4914      	ldr	r1, [pc, #80]	; (8003360 <HAL_GPIO_Init+0x2d0>)
 8003310:	4013      	ands	r3, r2
 8003312:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d021      	beq.n	8003364 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003320:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <HAL_GPIO_Init+0x2d0>)
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	490e      	ldr	r1, [pc, #56]	; (8003360 <HAL_GPIO_Init+0x2d0>)
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	4313      	orrs	r3, r2
 800332a:	600b      	str	r3, [r1, #0]
 800332c:	e021      	b.n	8003372 <HAL_GPIO_Init+0x2e2>
 800332e:	bf00      	nop
 8003330:	10320000 	.word	0x10320000
 8003334:	10310000 	.word	0x10310000
 8003338:	10220000 	.word	0x10220000
 800333c:	10210000 	.word	0x10210000
 8003340:	10120000 	.word	0x10120000
 8003344:	10110000 	.word	0x10110000
 8003348:	40021000 	.word	0x40021000
 800334c:	40010000 	.word	0x40010000
 8003350:	40010800 	.word	0x40010800
 8003354:	40010c00 	.word	0x40010c00
 8003358:	40011000 	.word	0x40011000
 800335c:	40011400 	.word	0x40011400
 8003360:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003364:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <HAL_GPIO_Init+0x304>)
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	43db      	mvns	r3, r3
 800336c:	4909      	ldr	r1, [pc, #36]	; (8003394 <HAL_GPIO_Init+0x304>)
 800336e:	4013      	ands	r3, r2
 8003370:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	3301      	adds	r3, #1
 8003376:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	fa22 f303 	lsr.w	r3, r2, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	f47f ae8e 	bne.w	80030a4 <HAL_GPIO_Init+0x14>
  }
}
 8003388:	bf00      	nop
 800338a:	bf00      	nop
 800338c:	372c      	adds	r7, #44	; 0x2c
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr
 8003394:	40010400 	.word	0x40010400

08003398 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	887b      	ldrh	r3, [r7, #2]
 80033aa:	4013      	ands	r3, r2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d002      	beq.n	80033b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033b0:	2301      	movs	r3, #1
 80033b2:	73fb      	strb	r3, [r7, #15]
 80033b4:	e001      	b.n	80033ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033b6:	2300      	movs	r3, #0
 80033b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr

080033c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
 80033ce:	460b      	mov	r3, r1
 80033d0:	807b      	strh	r3, [r7, #2]
 80033d2:	4613      	mov	r3, r2
 80033d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033d6:	787b      	ldrb	r3, [r7, #1]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033dc:	887a      	ldrh	r2, [r7, #2]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033e2:	e003      	b.n	80033ec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033e4:	887b      	ldrh	r3, [r7, #2]
 80033e6:	041a      	lsls	r2, r3, #16
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	611a      	str	r2, [r3, #16]
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bc80      	pop	{r7}
 80033f4:	4770      	bx	lr
	...

080033f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e12b      	b.n	8003662 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d106      	bne.n	8003424 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7fe fad2 	bl	80019c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2224      	movs	r2, #36	; 0x24
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0201 	bic.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800344a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800345a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800345c:	f002 f9e0 	bl	8005820 <HAL_RCC_GetPCLK1Freq>
 8003460:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	4a81      	ldr	r2, [pc, #516]	; (800366c <HAL_I2C_Init+0x274>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d807      	bhi.n	800347c <HAL_I2C_Init+0x84>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4a80      	ldr	r2, [pc, #512]	; (8003670 <HAL_I2C_Init+0x278>)
 8003470:	4293      	cmp	r3, r2
 8003472:	bf94      	ite	ls
 8003474:	2301      	movls	r3, #1
 8003476:	2300      	movhi	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	e006      	b.n	800348a <HAL_I2C_Init+0x92>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4a7d      	ldr	r2, [pc, #500]	; (8003674 <HAL_I2C_Init+0x27c>)
 8003480:	4293      	cmp	r3, r2
 8003482:	bf94      	ite	ls
 8003484:	2301      	movls	r3, #1
 8003486:	2300      	movhi	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e0e7      	b.n	8003662 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	4a78      	ldr	r2, [pc, #480]	; (8003678 <HAL_I2C_Init+0x280>)
 8003496:	fba2 2303 	umull	r2, r3, r2, r3
 800349a:	0c9b      	lsrs	r3, r3, #18
 800349c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	4a6a      	ldr	r2, [pc, #424]	; (800366c <HAL_I2C_Init+0x274>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d802      	bhi.n	80034cc <HAL_I2C_Init+0xd4>
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	3301      	adds	r3, #1
 80034ca:	e009      	b.n	80034e0 <HAL_I2C_Init+0xe8>
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034d2:	fb02 f303 	mul.w	r3, r2, r3
 80034d6:	4a69      	ldr	r2, [pc, #420]	; (800367c <HAL_I2C_Init+0x284>)
 80034d8:	fba2 2303 	umull	r2, r3, r2, r3
 80034dc:	099b      	lsrs	r3, r3, #6
 80034de:	3301      	adds	r3, #1
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6812      	ldr	r2, [r2, #0]
 80034e4:	430b      	orrs	r3, r1
 80034e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80034f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	495c      	ldr	r1, [pc, #368]	; (800366c <HAL_I2C_Init+0x274>)
 80034fc:	428b      	cmp	r3, r1
 80034fe:	d819      	bhi.n	8003534 <HAL_I2C_Init+0x13c>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	1e59      	subs	r1, r3, #1
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	fbb1 f3f3 	udiv	r3, r1, r3
 800350e:	1c59      	adds	r1, r3, #1
 8003510:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003514:	400b      	ands	r3, r1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00a      	beq.n	8003530 <HAL_I2C_Init+0x138>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	1e59      	subs	r1, r3, #1
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	fbb1 f3f3 	udiv	r3, r1, r3
 8003528:	3301      	adds	r3, #1
 800352a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800352e:	e051      	b.n	80035d4 <HAL_I2C_Init+0x1dc>
 8003530:	2304      	movs	r3, #4
 8003532:	e04f      	b.n	80035d4 <HAL_I2C_Init+0x1dc>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d111      	bne.n	8003560 <HAL_I2C_Init+0x168>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	1e58      	subs	r0, r3, #1
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6859      	ldr	r1, [r3, #4]
 8003544:	460b      	mov	r3, r1
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	440b      	add	r3, r1
 800354a:	fbb0 f3f3 	udiv	r3, r0, r3
 800354e:	3301      	adds	r3, #1
 8003550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003554:	2b00      	cmp	r3, #0
 8003556:	bf0c      	ite	eq
 8003558:	2301      	moveq	r3, #1
 800355a:	2300      	movne	r3, #0
 800355c:	b2db      	uxtb	r3, r3
 800355e:	e012      	b.n	8003586 <HAL_I2C_Init+0x18e>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	1e58      	subs	r0, r3, #1
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6859      	ldr	r1, [r3, #4]
 8003568:	460b      	mov	r3, r1
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	0099      	lsls	r1, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	fbb0 f3f3 	udiv	r3, r0, r3
 8003576:	3301      	adds	r3, #1
 8003578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800357c:	2b00      	cmp	r3, #0
 800357e:	bf0c      	ite	eq
 8003580:	2301      	moveq	r3, #1
 8003582:	2300      	movne	r3, #0
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <HAL_I2C_Init+0x196>
 800358a:	2301      	movs	r3, #1
 800358c:	e022      	b.n	80035d4 <HAL_I2C_Init+0x1dc>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10e      	bne.n	80035b4 <HAL_I2C_Init+0x1bc>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	1e58      	subs	r0, r3, #1
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6859      	ldr	r1, [r3, #4]
 800359e:	460b      	mov	r3, r1
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	440b      	add	r3, r1
 80035a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80035a8:	3301      	adds	r3, #1
 80035aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035b2:	e00f      	b.n	80035d4 <HAL_I2C_Init+0x1dc>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	1e58      	subs	r0, r3, #1
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6859      	ldr	r1, [r3, #4]
 80035bc:	460b      	mov	r3, r1
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	440b      	add	r3, r1
 80035c2:	0099      	lsls	r1, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ca:	3301      	adds	r3, #1
 80035cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	6809      	ldr	r1, [r1, #0]
 80035d8:	4313      	orrs	r3, r2
 80035da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69da      	ldr	r2, [r3, #28]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003602:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6911      	ldr	r1, [r2, #16]
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	68d2      	ldr	r2, [r2, #12]
 800360e:	4311      	orrs	r1, r2
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6812      	ldr	r2, [r2, #0]
 8003614:	430b      	orrs	r3, r1
 8003616:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	695a      	ldr	r2, [r3, #20]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0201 	orr.w	r2, r2, #1
 8003642:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2220      	movs	r2, #32
 800364e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	000186a0 	.word	0x000186a0
 8003670:	001e847f 	.word	0x001e847f
 8003674:	003d08ff 	.word	0x003d08ff
 8003678:	431bde83 	.word	0x431bde83
 800367c:	10624dd3 	.word	0x10624dd3

08003680 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003692:	2b80      	cmp	r3, #128	; 0x80
 8003694:	d103      	bne.n	800369e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2200      	movs	r2, #0
 800369c:	611a      	str	r2, [r3, #16]
  }
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bc80      	pop	{r7}
 80036a6:	4770      	bx	lr

080036a8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b088      	sub	sp, #32
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036c8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
 80036d4:	2b10      	cmp	r3, #16
 80036d6:	d003      	beq.n	80036e0 <HAL_I2C_EV_IRQHandler+0x38>
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
 80036da:	2b40      	cmp	r3, #64	; 0x40
 80036dc:	f040 80c1 	bne.w	8003862 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10d      	bne.n	8003716 <HAL_I2C_EV_IRQHandler+0x6e>
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003700:	d003      	beq.n	800370a <HAL_I2C_EV_IRQHandler+0x62>
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003708:	d101      	bne.n	800370e <HAL_I2C_EV_IRQHandler+0x66>
 800370a:	2301      	movs	r3, #1
 800370c:	e000      	b.n	8003710 <HAL_I2C_EV_IRQHandler+0x68>
 800370e:	2300      	movs	r3, #0
 8003710:	2b01      	cmp	r3, #1
 8003712:	f000 8132 	beq.w	800397a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00c      	beq.n	800373a <HAL_I2C_EV_IRQHandler+0x92>
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	0a5b      	lsrs	r3, r3, #9
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b00      	cmp	r3, #0
 800372a:	d006      	beq.n	800373a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f001 fc87 	bl	8005040 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 fd85 	bl	8004242 <I2C_Master_SB>
 8003738:	e092      	b.n	8003860 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	08db      	lsrs	r3, r3, #3
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d009      	beq.n	800375a <HAL_I2C_EV_IRQHandler+0xb2>
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	0a5b      	lsrs	r3, r3, #9
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 fdfa 	bl	800434c <I2C_Master_ADD10>
 8003758:	e082      	b.n	8003860 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	085b      	lsrs	r3, r3, #1
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d009      	beq.n	800377a <HAL_I2C_EV_IRQHandler+0xd2>
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	0a5b      	lsrs	r3, r3, #9
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 fe13 	bl	800439e <I2C_Master_ADDR>
 8003778:	e072      	b.n	8003860 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	089b      	lsrs	r3, r3, #2
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d03b      	beq.n	80037fe <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003794:	f000 80f3 	beq.w	800397e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	09db      	lsrs	r3, r3, #7
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00f      	beq.n	80037c4 <HAL_I2C_EV_IRQHandler+0x11c>
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	0a9b      	lsrs	r3, r3, #10
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d009      	beq.n	80037c4 <HAL_I2C_EV_IRQHandler+0x11c>
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	089b      	lsrs	r3, r3, #2
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d103      	bne.n	80037c4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 f9f1 	bl	8003ba4 <I2C_MasterTransmit_TXE>
 80037c2:	e04d      	b.n	8003860 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	089b      	lsrs	r3, r3, #2
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 80d6 	beq.w	800397e <HAL_I2C_EV_IRQHandler+0x2d6>
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	0a5b      	lsrs	r3, r3, #9
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 80cf 	beq.w	800397e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80037e0:	7bbb      	ldrb	r3, [r7, #14]
 80037e2:	2b21      	cmp	r3, #33	; 0x21
 80037e4:	d103      	bne.n	80037ee <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 fa78 	bl	8003cdc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037ec:	e0c7      	b.n	800397e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80037ee:	7bfb      	ldrb	r3, [r7, #15]
 80037f0:	2b40      	cmp	r3, #64	; 0x40
 80037f2:	f040 80c4 	bne.w	800397e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 fae6 	bl	8003dc8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037fc:	e0bf      	b.n	800397e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800380c:	f000 80b7 	beq.w	800397e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	099b      	lsrs	r3, r3, #6
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00f      	beq.n	800383c <HAL_I2C_EV_IRQHandler+0x194>
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	0a9b      	lsrs	r3, r3, #10
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b00      	cmp	r3, #0
 8003826:	d009      	beq.n	800383c <HAL_I2C_EV_IRQHandler+0x194>
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	089b      	lsrs	r3, r3, #2
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b00      	cmp	r3, #0
 8003832:	d103      	bne.n	800383c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 fb5f 	bl	8003ef8 <I2C_MasterReceive_RXNE>
 800383a:	e011      	b.n	8003860 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	089b      	lsrs	r3, r3, #2
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 809a 	beq.w	800397e <HAL_I2C_EV_IRQHandler+0x2d6>
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	0a5b      	lsrs	r3, r3, #9
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 8093 	beq.w	800397e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 fc08 	bl	800406e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800385e:	e08e      	b.n	800397e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003860:	e08d      	b.n	800397e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	2b00      	cmp	r3, #0
 8003868:	d004      	beq.n	8003874 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	61fb      	str	r3, [r7, #28]
 8003872:	e007      	b.n	8003884 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	085b      	lsrs	r3, r3, #1
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b00      	cmp	r3, #0
 800388e:	d012      	beq.n	80038b6 <HAL_I2C_EV_IRQHandler+0x20e>
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	0a5b      	lsrs	r3, r3, #9
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00c      	beq.n	80038b6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80038ac:	69b9      	ldr	r1, [r7, #24]
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 ffcc 	bl	800484c <I2C_Slave_ADDR>
 80038b4:	e066      	b.n	8003984 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	091b      	lsrs	r3, r3, #4
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d009      	beq.n	80038d6 <HAL_I2C_EV_IRQHandler+0x22e>
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	0a5b      	lsrs	r3, r3, #9
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f001 f806 	bl	80048e0 <I2C_Slave_STOPF>
 80038d4:	e056      	b.n	8003984 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80038d6:	7bbb      	ldrb	r3, [r7, #14]
 80038d8:	2b21      	cmp	r3, #33	; 0x21
 80038da:	d002      	beq.n	80038e2 <HAL_I2C_EV_IRQHandler+0x23a>
 80038dc:	7bbb      	ldrb	r3, [r7, #14]
 80038de:	2b29      	cmp	r3, #41	; 0x29
 80038e0:	d125      	bne.n	800392e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	09db      	lsrs	r3, r3, #7
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00f      	beq.n	800390e <HAL_I2C_EV_IRQHandler+0x266>
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	0a9b      	lsrs	r3, r3, #10
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d009      	beq.n	800390e <HAL_I2C_EV_IRQHandler+0x266>
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	089b      	lsrs	r3, r3, #2
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d103      	bne.n	800390e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 fee4 	bl	80046d4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800390c:	e039      	b.n	8003982 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	089b      	lsrs	r3, r3, #2
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d033      	beq.n	8003982 <HAL_I2C_EV_IRQHandler+0x2da>
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	0a5b      	lsrs	r3, r3, #9
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d02d      	beq.n	8003982 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 ff11 	bl	800474e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800392c:	e029      	b.n	8003982 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	099b      	lsrs	r3, r3, #6
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00f      	beq.n	800395a <HAL_I2C_EV_IRQHandler+0x2b2>
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	0a9b      	lsrs	r3, r3, #10
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b00      	cmp	r3, #0
 8003944:	d009      	beq.n	800395a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	089b      	lsrs	r3, r3, #2
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d103      	bne.n	800395a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 ff1b 	bl	800478e <I2C_SlaveReceive_RXNE>
 8003958:	e014      	b.n	8003984 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	089b      	lsrs	r3, r3, #2
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00e      	beq.n	8003984 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	0a5b      	lsrs	r3, r3, #9
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d008      	beq.n	8003984 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 ff49 	bl	800480a <I2C_SlaveReceive_BTF>
 8003978:	e004      	b.n	8003984 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800397a:	bf00      	nop
 800397c:	e002      	b.n	8003984 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800397e:	bf00      	nop
 8003980:	e000      	b.n	8003984 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003982:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003984:	3720      	adds	r7, #32
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b08a      	sub	sp, #40	; 0x28
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80039a2:	2300      	movs	r3, #0
 80039a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039ac:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80039ae:	6a3b      	ldr	r3, [r7, #32]
 80039b0:	0a1b      	lsrs	r3, r3, #8
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d016      	beq.n	80039e8 <HAL_I2C_ER_IRQHandler+0x5e>
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	0a1b      	lsrs	r3, r3, #8
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d010      	beq.n	80039e8 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80039d6:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039e6:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	0a5b      	lsrs	r3, r3, #9
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00e      	beq.n	8003a12 <HAL_I2C_ER_IRQHandler+0x88>
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	0a1b      	lsrs	r3, r3, #8
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d008      	beq.n	8003a12 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	f043 0302 	orr.w	r3, r3, #2
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003a10:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	0a9b      	lsrs	r3, r3, #10
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d03f      	beq.n	8003a9e <HAL_I2C_ER_IRQHandler+0x114>
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	0a1b      	lsrs	r3, r3, #8
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d039      	beq.n	8003a9e <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8003a2a:	7efb      	ldrb	r3, [r7, #27]
 8003a2c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a3c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003a44:	7ebb      	ldrb	r3, [r7, #26]
 8003a46:	2b20      	cmp	r3, #32
 8003a48:	d112      	bne.n	8003a70 <HAL_I2C_ER_IRQHandler+0xe6>
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10f      	bne.n	8003a70 <HAL_I2C_ER_IRQHandler+0xe6>
 8003a50:	7cfb      	ldrb	r3, [r7, #19]
 8003a52:	2b21      	cmp	r3, #33	; 0x21
 8003a54:	d008      	beq.n	8003a68 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003a56:	7cfb      	ldrb	r3, [r7, #19]
 8003a58:	2b29      	cmp	r3, #41	; 0x29
 8003a5a:	d005      	beq.n	8003a68 <HAL_I2C_ER_IRQHandler+0xde>
 8003a5c:	7cfb      	ldrb	r3, [r7, #19]
 8003a5e:	2b28      	cmp	r3, #40	; 0x28
 8003a60:	d106      	bne.n	8003a70 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2b21      	cmp	r3, #33	; 0x21
 8003a66:	d103      	bne.n	8003a70 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f001 f869 	bl	8004b40 <I2C_Slave_AF>
 8003a6e:	e016      	b.n	8003a9e <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a78:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	f043 0304 	orr.w	r3, r3, #4
 8003a80:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003a82:	7efb      	ldrb	r3, [r7, #27]
 8003a84:	2b10      	cmp	r3, #16
 8003a86:	d002      	beq.n	8003a8e <HAL_I2C_ER_IRQHandler+0x104>
 8003a88:	7efb      	ldrb	r3, [r7, #27]
 8003a8a:	2b40      	cmp	r3, #64	; 0x40
 8003a8c:	d107      	bne.n	8003a9e <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a9c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	0adb      	lsrs	r3, r3, #11
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00e      	beq.n	8003ac8 <HAL_I2C_ER_IRQHandler+0x13e>
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	0a1b      	lsrs	r3, r3, #8
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d008      	beq.n	8003ac8 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	f043 0308 	orr.w	r3, r3, #8
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003ac6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d008      	beq.n	8003ae0 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f001 f8a4 	bl	8004c28 <I2C_ITError>
  }
}
 8003ae0:	bf00      	nop
 8003ae2:	3728      	adds	r7, #40	; 0x28
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bc80      	pop	{r7}
 8003af8:	4770      	bx	lr

08003afa <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr

08003b0c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bc80      	pop	{r7}
 8003b1c:	4770      	bx	lr

08003b1e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr

08003b30 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	70fb      	strb	r3, [r7, #3]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bc80      	pop	{r7}
 8003b48:	4770      	bx	lr

08003b4a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b083      	sub	sp, #12
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003b52:	bf00      	nop
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bc80      	pop	{r7}
 8003b5a:	4770      	bx	lr

08003b5c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bc80      	pop	{r7}
 8003b6c:	4770      	bx	lr

08003b6e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b083      	sub	sp, #12
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bc80      	pop	{r7}
 8003b7e:	4770      	bx	lr

08003b80 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bc80      	pop	{r7}
 8003b90:	4770      	bx	lr

08003b92 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bc80      	pop	{r7}
 8003ba2:	4770      	bx	lr

08003ba4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d150      	bne.n	8003c6c <I2C_MasterTransmit_TXE+0xc8>
 8003bca:	7bfb      	ldrb	r3, [r7, #15]
 8003bcc:	2b21      	cmp	r3, #33	; 0x21
 8003bce:	d14d      	bne.n	8003c6c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	2b08      	cmp	r3, #8
 8003bd4:	d01d      	beq.n	8003c12 <I2C_MasterTransmit_TXE+0x6e>
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2b20      	cmp	r3, #32
 8003bda:	d01a      	beq.n	8003c12 <I2C_MasterTransmit_TXE+0x6e>
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003be2:	d016      	beq.n	8003c12 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bf2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2211      	movs	r2, #17
 8003bf8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2220      	movs	r2, #32
 8003c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7ff ff6c 	bl	8003ae8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c10:	e060      	b.n	8003cd4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c20:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c30:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b40      	cmp	r3, #64	; 0x40
 8003c4a:	d107      	bne.n	8003c5c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7ff ff81 	bl	8003b5c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c5a:	e03b      	b.n	8003cd4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f7ff ff3f 	bl	8003ae8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c6a:	e033      	b.n	8003cd4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003c6c:	7bfb      	ldrb	r3, [r7, #15]
 8003c6e:	2b21      	cmp	r3, #33	; 0x21
 8003c70:	d005      	beq.n	8003c7e <I2C_MasterTransmit_TXE+0xda>
 8003c72:	7bbb      	ldrb	r3, [r7, #14]
 8003c74:	2b40      	cmp	r3, #64	; 0x40
 8003c76:	d12d      	bne.n	8003cd4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
 8003c7a:	2b22      	cmp	r3, #34	; 0x22
 8003c7c:	d12a      	bne.n	8003cd4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d108      	bne.n	8003c9a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c96:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003c98:	e01c      	b.n	8003cd4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b40      	cmp	r3, #64	; 0x40
 8003ca4:	d103      	bne.n	8003cae <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f88e 	bl	8003dc8 <I2C_MemoryTransmit_TXE_BTF>
}
 8003cac:	e012      	b.n	8003cd4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	781a      	ldrb	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003cd2:	e7ff      	b.n	8003cd4 <I2C_MasterTransmit_TXE+0x130>
 8003cd4:	bf00      	nop
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b21      	cmp	r3, #33	; 0x21
 8003cf4:	d164      	bne.n	8003dc0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d012      	beq.n	8003d26 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	781a      	ldrb	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	1c5a      	adds	r2, r3, #1
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003d24:	e04c      	b.n	8003dc0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d01d      	beq.n	8003d68 <I2C_MasterTransmit_BTF+0x8c>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2b20      	cmp	r3, #32
 8003d30:	d01a      	beq.n	8003d68 <I2C_MasterTransmit_BTF+0x8c>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d38:	d016      	beq.n	8003d68 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d48:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2211      	movs	r2, #17
 8003d4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7ff fec1 	bl	8003ae8 <HAL_I2C_MasterTxCpltCallback>
}
 8003d66:	e02b      	b.n	8003dc0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d76:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d86:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2220      	movs	r2, #32
 8003d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b40      	cmp	r3, #64	; 0x40
 8003da0:	d107      	bne.n	8003db2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7ff fed6 	bl	8003b5c <HAL_I2C_MemTxCpltCallback>
}
 8003db0:	e006      	b.n	8003dc0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7ff fe94 	bl	8003ae8 <HAL_I2C_MasterTxCpltCallback>
}
 8003dc0:	bf00      	nop
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d11d      	bne.n	8003e1c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d10b      	bne.n	8003e00 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df8:	1c9a      	adds	r2, r3, #2
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003dfe:	e077      	b.n	8003ef0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	121b      	asrs	r3, r3, #8
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003e1a:	e069      	b.n	8003ef0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d10b      	bne.n	8003e3c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003e3a:	e059      	b.n	8003ef0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d152      	bne.n	8003eea <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003e44:	7bfb      	ldrb	r3, [r7, #15]
 8003e46:	2b22      	cmp	r3, #34	; 0x22
 8003e48:	d10d      	bne.n	8003e66 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e58:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003e64:	e044      	b.n	8003ef0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d015      	beq.n	8003e9c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
 8003e72:	2b21      	cmp	r3, #33	; 0x21
 8003e74:	d112      	bne.n	8003e9c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	781a      	ldrb	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	1c5a      	adds	r2, r3, #1
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	3b01      	subs	r3, #1
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003e9a:	e029      	b.n	8003ef0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d124      	bne.n	8003ef0 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
 8003ea8:	2b21      	cmp	r3, #33	; 0x21
 8003eaa:	d121      	bne.n	8003ef0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003eba:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7ff fe3a 	bl	8003b5c <HAL_I2C_MemTxCpltCallback>
}
 8003ee8:	e002      	b.n	8003ef0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7ff fbc8 	bl	8003680 <I2C_Flush_DR>
}
 8003ef0:	bf00      	nop
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b22      	cmp	r3, #34	; 0x22
 8003f0a:	f040 80ac 	bne.w	8004066 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2b03      	cmp	r3, #3
 8003f1a:	d921      	bls.n	8003f60 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	691a      	ldr	r2, [r3, #16]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	1c5a      	adds	r2, r3, #1
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	2b03      	cmp	r3, #3
 8003f4a:	f040 808c 	bne.w	8004066 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f5c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003f5e:	e082      	b.n	8004066 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d075      	beq.n	8004054 <I2C_MasterReceive_RXNE+0x15c>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d002      	beq.n	8003f74 <I2C_MasterReceive_RXNE+0x7c>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d16f      	bne.n	8004054 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f001 f831 	bl	8004fdc <I2C_WaitOnSTOPRequestThroughIT>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d142      	bne.n	8004006 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f8e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f9e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691a      	ldr	r2, [r3, #16]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	b2d2      	uxtb	r2, r2
 8003fac:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	1c5a      	adds	r2, r3, #1
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b40      	cmp	r3, #64	; 0x40
 8003fd8:	d10a      	bne.n	8003ff0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7ff fdc0 	bl	8003b6e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003fee:	e03a      	b.n	8004066 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2212      	movs	r2, #18
 8003ffc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7ff fd7b 	bl	8003afa <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004004:	e02f      	b.n	8004066 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004014:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	691a      	ldr	r2, [r3, #16]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	b2d2      	uxtb	r2, r2
 8004022:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004032:	b29b      	uxth	r3, r3
 8004034:	3b01      	subs	r3, #1
 8004036:	b29a      	uxth	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2220      	movs	r2, #32
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f7ff fd97 	bl	8003b80 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004052:	e008      	b.n	8004066 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004062:	605a      	str	r2, [r3, #4]
}
 8004064:	e7ff      	b.n	8004066 <I2C_MasterReceive_RXNE+0x16e>
 8004066:	bf00      	nop
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b084      	sub	sp, #16
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004080:	b29b      	uxth	r3, r3
 8004082:	2b04      	cmp	r3, #4
 8004084:	d11b      	bne.n	80040be <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004094:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	691a      	ldr	r2, [r3, #16]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	b2d2      	uxtb	r2, r2
 80040a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	1c5a      	adds	r2, r3, #1
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	3b01      	subs	r3, #1
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80040bc:	e0bd      	b.n	800423a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	2b03      	cmp	r3, #3
 80040c6:	d129      	bne.n	800411c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040d6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2b04      	cmp	r3, #4
 80040dc:	d00a      	beq.n	80040f4 <I2C_MasterReceive_BTF+0x86>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d007      	beq.n	80040f4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040f2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	691a      	ldr	r2, [r3, #16]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	b2d2      	uxtb	r2, r2
 8004100:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	1c5a      	adds	r2, r3, #1
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004110:	b29b      	uxth	r3, r3
 8004112:	3b01      	subs	r3, #1
 8004114:	b29a      	uxth	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800411a:	e08e      	b.n	800423a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004120:	b29b      	uxth	r3, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d176      	bne.n	8004214 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d002      	beq.n	8004132 <I2C_MasterReceive_BTF+0xc4>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2b10      	cmp	r3, #16
 8004130:	d108      	bne.n	8004144 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	e019      	b.n	8004178 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2b04      	cmp	r3, #4
 8004148:	d002      	beq.n	8004150 <I2C_MasterReceive_BTF+0xe2>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2b02      	cmp	r3, #2
 800414e:	d108      	bne.n	8004162 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	e00a      	b.n	8004178 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2b10      	cmp	r3, #16
 8004166:	d007      	beq.n	8004178 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004176:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	691a      	ldr	r2, [r3, #16]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	1c5a      	adds	r2, r3, #1
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004194:	b29b      	uxth	r3, r3
 8004196:	3b01      	subs	r3, #1
 8004198:	b29a      	uxth	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	691a      	ldr	r2, [r3, #16]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	b2d2      	uxtb	r2, r2
 80041aa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	1c5a      	adds	r2, r3, #1
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	3b01      	subs	r3, #1
 80041be:	b29a      	uxth	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80041d2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2220      	movs	r2, #32
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b40      	cmp	r3, #64	; 0x40
 80041e6:	d10a      	bne.n	80041fe <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7ff fcb9 	bl	8003b6e <HAL_I2C_MemRxCpltCallback>
}
 80041fc:	e01d      	b.n	800423a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2212      	movs	r2, #18
 800420a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f7ff fc74 	bl	8003afa <HAL_I2C_MasterRxCpltCallback>
}
 8004212:	e012      	b.n	800423a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	691a      	ldr	r2, [r3, #16]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004226:	1c5a      	adds	r2, r3, #1
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004230:	b29b      	uxth	r3, r3
 8004232:	3b01      	subs	r3, #1
 8004234:	b29a      	uxth	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800423a:	bf00      	nop
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b40      	cmp	r3, #64	; 0x40
 8004254:	d117      	bne.n	8004286 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800425a:	2b00      	cmp	r3, #0
 800425c:	d109      	bne.n	8004272 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004262:	b2db      	uxtb	r3, r3
 8004264:	461a      	mov	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800426e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004270:	e067      	b.n	8004342 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004276:	b2db      	uxtb	r3, r3
 8004278:	f043 0301 	orr.w	r3, r3, #1
 800427c:	b2da      	uxtb	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	611a      	str	r2, [r3, #16]
}
 8004284:	e05d      	b.n	8004342 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800428e:	d133      	bne.n	80042f8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b21      	cmp	r3, #33	; 0x21
 800429a:	d109      	bne.n	80042b0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	461a      	mov	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042ac:	611a      	str	r2, [r3, #16]
 80042ae:	e008      	b.n	80042c2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	f043 0301 	orr.w	r3, r3, #1
 80042ba:	b2da      	uxtb	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d004      	beq.n	80042d4 <I2C_Master_SB+0x92>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d108      	bne.n	80042e6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d032      	beq.n	8004342 <I2C_Master_SB+0x100>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d02d      	beq.n	8004342 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042f4:	605a      	str	r2, [r3, #4]
}
 80042f6:	e024      	b.n	8004342 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10e      	bne.n	800431e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004304:	b29b      	uxth	r3, r3
 8004306:	11db      	asrs	r3, r3, #7
 8004308:	b2db      	uxtb	r3, r3
 800430a:	f003 0306 	and.w	r3, r3, #6
 800430e:	b2db      	uxtb	r3, r3
 8004310:	f063 030f 	orn	r3, r3, #15
 8004314:	b2da      	uxtb	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	611a      	str	r2, [r3, #16]
}
 800431c:	e011      	b.n	8004342 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004322:	2b01      	cmp	r3, #1
 8004324:	d10d      	bne.n	8004342 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432a:	b29b      	uxth	r3, r3
 800432c:	11db      	asrs	r3, r3, #7
 800432e:	b2db      	uxtb	r3, r3
 8004330:	f003 0306 	and.w	r3, r3, #6
 8004334:	b2db      	uxtb	r3, r3
 8004336:	f063 030e 	orn	r3, r3, #14
 800433a:	b2da      	uxtb	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	611a      	str	r2, [r3, #16]
}
 8004342:	bf00      	nop
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr

0800434c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004358:	b2da      	uxtb	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004364:	2b00      	cmp	r3, #0
 8004366:	d004      	beq.n	8004372 <I2C_Master_ADD10+0x26>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436e:	2b00      	cmp	r3, #0
 8004370:	d108      	bne.n	8004384 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00c      	beq.n	8004394 <I2C_Master_ADD10+0x48>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004380:	2b00      	cmp	r3, #0
 8004382:	d007      	beq.n	8004394 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004392:	605a      	str	r2, [r3, #4]
  }
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	bc80      	pop	{r7}
 800439c:	4770      	bx	lr

0800439e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800439e:	b480      	push	{r7}
 80043a0:	b091      	sub	sp, #68	; 0x44
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ba:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b22      	cmp	r3, #34	; 0x22
 80043c6:	f040 8174 	bne.w	80046b2 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10f      	bne.n	80043f2 <I2C_Master_ADDR+0x54>
 80043d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80043d6:	2b40      	cmp	r3, #64	; 0x40
 80043d8:	d10b      	bne.n	80043f2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043da:	2300      	movs	r3, #0
 80043dc:	633b      	str	r3, [r7, #48]	; 0x30
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	633b      	str	r3, [r7, #48]	; 0x30
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	633b      	str	r3, [r7, #48]	; 0x30
 80043ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f0:	e16b      	b.n	80046ca <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d11d      	bne.n	8004436 <I2C_Master_ADDR+0x98>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004402:	d118      	bne.n	8004436 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004404:	2300      	movs	r3, #0
 8004406:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004418:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004428:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800442e:	1c5a      	adds	r2, r3, #1
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	651a      	str	r2, [r3, #80]	; 0x50
 8004434:	e149      	b.n	80046ca <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800443a:	b29b      	uxth	r3, r3
 800443c:	2b00      	cmp	r3, #0
 800443e:	d113      	bne.n	8004468 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004440:	2300      	movs	r3, #0
 8004442:	62bb      	str	r3, [r7, #40]	; 0x28
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	62bb      	str	r3, [r7, #40]	; 0x28
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	62bb      	str	r3, [r7, #40]	; 0x28
 8004454:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004464:	601a      	str	r2, [r3, #0]
 8004466:	e120      	b.n	80046aa <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446c:	b29b      	uxth	r3, r3
 800446e:	2b01      	cmp	r3, #1
 8004470:	f040 808a 	bne.w	8004588 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004476:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800447a:	d137      	bne.n	80044ec <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800448a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004496:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800449a:	d113      	bne.n	80044c4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044aa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ac:	2300      	movs	r3, #0
 80044ae:	627b      	str	r3, [r7, #36]	; 0x24
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	627b      	str	r3, [r7, #36]	; 0x24
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	627b      	str	r3, [r7, #36]	; 0x24
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c2:	e0f2      	b.n	80046aa <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044c4:	2300      	movs	r3, #0
 80044c6:	623b      	str	r3, [r7, #32]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	623b      	str	r3, [r7, #32]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	623b      	str	r3, [r7, #32]
 80044d8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044e8:	601a      	str	r2, [r3, #0]
 80044ea:	e0de      	b.n	80046aa <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80044ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ee:	2b08      	cmp	r3, #8
 80044f0:	d02e      	beq.n	8004550 <I2C_Master_ADDR+0x1b2>
 80044f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f4:	2b20      	cmp	r3, #32
 80044f6:	d02b      	beq.n	8004550 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80044f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044fa:	2b12      	cmp	r3, #18
 80044fc:	d102      	bne.n	8004504 <I2C_Master_ADDR+0x166>
 80044fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004500:	2b01      	cmp	r3, #1
 8004502:	d125      	bne.n	8004550 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004506:	2b04      	cmp	r3, #4
 8004508:	d00e      	beq.n	8004528 <I2C_Master_ADDR+0x18a>
 800450a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450c:	2b02      	cmp	r3, #2
 800450e:	d00b      	beq.n	8004528 <I2C_Master_ADDR+0x18a>
 8004510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004512:	2b10      	cmp	r3, #16
 8004514:	d008      	beq.n	8004528 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	e007      	b.n	8004538 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004536:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004538:	2300      	movs	r3, #0
 800453a:	61fb      	str	r3, [r7, #28]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	61fb      	str	r3, [r7, #28]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	61fb      	str	r3, [r7, #28]
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	e0ac      	b.n	80046aa <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800455e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004560:	2300      	movs	r3, #0
 8004562:	61bb      	str	r3, [r7, #24]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	61bb      	str	r3, [r7, #24]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	61bb      	str	r3, [r7, #24]
 8004574:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	e090      	b.n	80046aa <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458c:	b29b      	uxth	r3, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d158      	bne.n	8004644 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004594:	2b04      	cmp	r3, #4
 8004596:	d021      	beq.n	80045dc <I2C_Master_ADDR+0x23e>
 8004598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800459a:	2b02      	cmp	r3, #2
 800459c:	d01e      	beq.n	80045dc <I2C_Master_ADDR+0x23e>
 800459e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a0:	2b10      	cmp	r3, #16
 80045a2:	d01b      	beq.n	80045dc <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045b2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045b4:	2300      	movs	r3, #0
 80045b6:	617b      	str	r3, [r7, #20]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	617b      	str	r3, [r7, #20]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	617b      	str	r3, [r7, #20]
 80045c8:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	e012      	b.n	8004602 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045ea:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ec:	2300      	movs	r3, #0
 80045ee:	613b      	str	r3, [r7, #16]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	613b      	str	r3, [r7, #16]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	613b      	str	r3, [r7, #16]
 8004600:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800460c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004610:	d14b      	bne.n	80046aa <I2C_Master_ADDR+0x30c>
 8004612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004614:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004618:	d00b      	beq.n	8004632 <I2C_Master_ADDR+0x294>
 800461a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800461c:	2b01      	cmp	r3, #1
 800461e:	d008      	beq.n	8004632 <I2C_Master_ADDR+0x294>
 8004620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004622:	2b08      	cmp	r3, #8
 8004624:	d005      	beq.n	8004632 <I2C_Master_ADDR+0x294>
 8004626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004628:	2b10      	cmp	r3, #16
 800462a:	d002      	beq.n	8004632 <I2C_Master_ADDR+0x294>
 800462c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462e:	2b20      	cmp	r3, #32
 8004630:	d13b      	bne.n	80046aa <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004640:	605a      	str	r2, [r3, #4]
 8004642:	e032      	b.n	80046aa <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004652:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800465e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004662:	d117      	bne.n	8004694 <I2C_Master_ADDR+0x2f6>
 8004664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004666:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800466a:	d00b      	beq.n	8004684 <I2C_Master_ADDR+0x2e6>
 800466c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466e:	2b01      	cmp	r3, #1
 8004670:	d008      	beq.n	8004684 <I2C_Master_ADDR+0x2e6>
 8004672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004674:	2b08      	cmp	r3, #8
 8004676:	d005      	beq.n	8004684 <I2C_Master_ADDR+0x2e6>
 8004678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467a:	2b10      	cmp	r3, #16
 800467c:	d002      	beq.n	8004684 <I2C_Master_ADDR+0x2e6>
 800467e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004680:	2b20      	cmp	r3, #32
 8004682:	d107      	bne.n	8004694 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004692:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004694:	2300      	movs	r3, #0
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80046b0:	e00b      	b.n	80046ca <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046b2:	2300      	movs	r3, #0
 80046b4:	60bb      	str	r3, [r7, #8]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	60bb      	str	r3, [r7, #8]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	60bb      	str	r3, [r7, #8]
 80046c6:	68bb      	ldr	r3, [r7, #8]
}
 80046c8:	e7ff      	b.n	80046ca <I2C_Master_ADDR+0x32c>
 80046ca:	bf00      	nop
 80046cc:	3744      	adds	r7, #68	; 0x44
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bc80      	pop	{r7}
 80046d2:	4770      	bx	lr

080046d4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d02b      	beq.n	8004746 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	781a      	ldrb	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	1c5a      	adds	r2, r3, #1
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004708:	b29b      	uxth	r3, r3
 800470a:	3b01      	subs	r3, #1
 800470c:	b29a      	uxth	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004716:	b29b      	uxth	r3, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	d114      	bne.n	8004746 <I2C_SlaveTransmit_TXE+0x72>
 800471c:	7bfb      	ldrb	r3, [r7, #15]
 800471e:	2b29      	cmp	r3, #41	; 0x29
 8004720:	d111      	bne.n	8004746 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004730:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2221      	movs	r2, #33	; 0x21
 8004736:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2228      	movs	r2, #40	; 0x28
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7ff f9e3 	bl	8003b0c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004746:	bf00      	nop
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800474e:	b480      	push	{r7}
 8004750:	b083      	sub	sp, #12
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800475a:	b29b      	uxth	r3, r3
 800475c:	2b00      	cmp	r3, #0
 800475e:	d011      	beq.n	8004784 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	781a      	ldrb	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004770:	1c5a      	adds	r2, r3, #1
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477a:	b29b      	uxth	r3, r3
 800477c:	3b01      	subs	r3, #1
 800477e:	b29a      	uxth	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	bc80      	pop	{r7}
 800478c:	4770      	bx	lr

0800478e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b084      	sub	sp, #16
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800479c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d02c      	beq.n	8004802 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	691a      	ldr	r2, [r3, #16]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	b2d2      	uxtb	r2, r2
 80047b4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	1c5a      	adds	r2, r3, #1
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	3b01      	subs	r3, #1
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d114      	bne.n	8004802 <I2C_SlaveReceive_RXNE+0x74>
 80047d8:	7bfb      	ldrb	r3, [r7, #15]
 80047da:	2b2a      	cmp	r3, #42	; 0x2a
 80047dc:	d111      	bne.n	8004802 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ec:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2222      	movs	r2, #34	; 0x22
 80047f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2228      	movs	r2, #40	; 0x28
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7ff f98e 	bl	8003b1e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004802:	bf00      	nop
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800480a:	b480      	push	{r7}
 800480c:	b083      	sub	sp, #12
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004816:	b29b      	uxth	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d012      	beq.n	8004842 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	691a      	ldr	r2, [r3, #16]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	b2d2      	uxtb	r2, r2
 8004828:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482e:	1c5a      	adds	r2, r3, #1
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004838:	b29b      	uxth	r3, r3
 800483a:	3b01      	subs	r3, #1
 800483c:	b29a      	uxth	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	bc80      	pop	{r7}
 800484a:	4770      	bx	lr

0800484c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004856:	2300      	movs	r3, #0
 8004858:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004860:	b2db      	uxtb	r3, r3
 8004862:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004866:	2b28      	cmp	r3, #40	; 0x28
 8004868:	d127      	bne.n	80048ba <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004878:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	089b      	lsrs	r3, r3, #2
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004886:	2301      	movs	r3, #1
 8004888:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	09db      	lsrs	r3, r3, #7
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d103      	bne.n	800489e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	81bb      	strh	r3, [r7, #12]
 800489c:	e002      	b.n	80048a4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80048ac:	89ba      	ldrh	r2, [r7, #12]
 80048ae:	7bfb      	ldrb	r3, [r7, #15]
 80048b0:	4619      	mov	r1, r3
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7ff f93c 	bl	8003b30 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80048b8:	e00e      	b.n	80048d8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ba:	2300      	movs	r3, #0
 80048bc:	60bb      	str	r3, [r7, #8]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	60bb      	str	r3, [r7, #8]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	60bb      	str	r3, [r7, #8]
 80048ce:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80048d8:	bf00      	nop
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ee:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	685a      	ldr	r2, [r3, #4]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048fe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004900:	2300      	movs	r3, #0
 8004902:	60bb      	str	r3, [r7, #8]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	60bb      	str	r3, [r7, #8]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f042 0201 	orr.w	r2, r2, #1
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800492c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004938:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800493c:	d172      	bne.n	8004a24 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800493e:	7bfb      	ldrb	r3, [r7, #15]
 8004940:	2b22      	cmp	r3, #34	; 0x22
 8004942:	d002      	beq.n	800494a <I2C_Slave_STOPF+0x6a>
 8004944:	7bfb      	ldrb	r3, [r7, #15]
 8004946:	2b2a      	cmp	r3, #42	; 0x2a
 8004948:	d135      	bne.n	80049b6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	b29a      	uxth	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800495c:	b29b      	uxth	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d005      	beq.n	800496e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004966:	f043 0204 	orr.w	r2, r3, #4
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685a      	ldr	r2, [r3, #4]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800497c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004982:	4618      	mov	r0, r3
 8004984:	f7fe fb76 	bl	8003074 <HAL_DMA_GetState>
 8004988:	4603      	mov	r3, r0
 800498a:	2b01      	cmp	r3, #1
 800498c:	d049      	beq.n	8004a22 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004992:	4a69      	ldr	r2, [pc, #420]	; (8004b38 <I2C_Slave_STOPF+0x258>)
 8004994:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499a:	4618      	mov	r0, r3
 800499c:	f7fe faf2 	bl	8002f84 <HAL_DMA_Abort_IT>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d03d      	beq.n	8004a22 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049b0:	4610      	mov	r0, r2
 80049b2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80049b4:	e035      	b.n	8004a22 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	b29a      	uxth	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d005      	beq.n	80049da <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	f043 0204 	orr.w	r2, r3, #4
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049e8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fe fb40 	bl	8003074 <HAL_DMA_GetState>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d014      	beq.n	8004a24 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fe:	4a4e      	ldr	r2, [pc, #312]	; (8004b38 <I2C_Slave_STOPF+0x258>)
 8004a00:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fe fabc 	bl	8002f84 <HAL_DMA_Abort_IT>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d008      	beq.n	8004a24 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a1c:	4610      	mov	r0, r2
 8004a1e:	4798      	blx	r3
 8004a20:	e000      	b.n	8004a24 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a22:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d03e      	beq.n	8004aac <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	f003 0304 	and.w	r3, r3, #4
 8004a38:	2b04      	cmp	r3, #4
 8004a3a:	d112      	bne.n	8004a62 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	691a      	ldr	r2, [r3, #16]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	b2d2      	uxtb	r2, r2
 8004a48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	1c5a      	adds	r2, r3, #1
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6c:	2b40      	cmp	r3, #64	; 0x40
 8004a6e:	d112      	bne.n	8004a96 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	691a      	ldr	r2, [r3, #16]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	1c5a      	adds	r2, r3, #1
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d005      	beq.n	8004aac <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa4:	f043 0204 	orr.w	r2, r3, #4
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 f8b7 	bl	8004c28 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004aba:	e039      	b.n	8004b30 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
 8004abe:	2b2a      	cmp	r3, #42	; 0x2a
 8004ac0:	d109      	bne.n	8004ad6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2228      	movs	r2, #40	; 0x28
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f7ff f824 	bl	8003b1e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b28      	cmp	r3, #40	; 0x28
 8004ae0:	d111      	bne.n	8004b06 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a15      	ldr	r2, [pc, #84]	; (8004b3c <I2C_Slave_STOPF+0x25c>)
 8004ae6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7ff f823 	bl	8003b4a <HAL_I2C_ListenCpltCallback>
}
 8004b04:	e014      	b.n	8004b30 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0a:	2b22      	cmp	r3, #34	; 0x22
 8004b0c:	d002      	beq.n	8004b14 <I2C_Slave_STOPF+0x234>
 8004b0e:	7bfb      	ldrb	r3, [r7, #15]
 8004b10:	2b22      	cmp	r3, #34	; 0x22
 8004b12:	d10d      	bne.n	8004b30 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2220      	movs	r2, #32
 8004b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7fe fff7 	bl	8003b1e <HAL_I2C_SlaveRxCpltCallback>
}
 8004b30:	bf00      	nop
 8004b32:	3710      	adds	r7, #16
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	08004e8d 	.word	0x08004e8d
 8004b3c:	ffff0000 	.word	0xffff0000

08004b40 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b54:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	2b08      	cmp	r3, #8
 8004b5a:	d002      	beq.n	8004b62 <I2C_Slave_AF+0x22>
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	2b20      	cmp	r3, #32
 8004b60:	d129      	bne.n	8004bb6 <I2C_Slave_AF+0x76>
 8004b62:	7bfb      	ldrb	r3, [r7, #15]
 8004b64:	2b28      	cmp	r3, #40	; 0x28
 8004b66:	d126      	bne.n	8004bb6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a2e      	ldr	r2, [pc, #184]	; (8004c24 <I2C_Slave_AF+0xe4>)
 8004b6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b7c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b86:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b96:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7fe ffcb 	bl	8003b4a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004bb4:	e031      	b.n	8004c1a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004bb6:	7bfb      	ldrb	r3, [r7, #15]
 8004bb8:	2b21      	cmp	r3, #33	; 0x21
 8004bba:	d129      	bne.n	8004c10 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a19      	ldr	r2, [pc, #100]	; (8004c24 <I2C_Slave_AF+0xe4>)
 8004bc0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2221      	movs	r2, #33	; 0x21
 8004bc6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004be6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bf0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c00:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7fe fd3c 	bl	8003680 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f7fe ff7f 	bl	8003b0c <HAL_I2C_SlaveTxCpltCallback>
}
 8004c0e:	e004      	b.n	8004c1a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c18:	615a      	str	r2, [r3, #20]
}
 8004c1a:	bf00      	nop
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	ffff0000 	.word	0xffff0000

08004c28 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c36:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c3e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004c40:	7bbb      	ldrb	r3, [r7, #14]
 8004c42:	2b10      	cmp	r3, #16
 8004c44:	d002      	beq.n	8004c4c <I2C_ITError+0x24>
 8004c46:	7bbb      	ldrb	r3, [r7, #14]
 8004c48:	2b40      	cmp	r3, #64	; 0x40
 8004c4a:	d10a      	bne.n	8004c62 <I2C_ITError+0x3a>
 8004c4c:	7bfb      	ldrb	r3, [r7, #15]
 8004c4e:	2b22      	cmp	r3, #34	; 0x22
 8004c50:	d107      	bne.n	8004c62 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c60:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c62:	7bfb      	ldrb	r3, [r7, #15]
 8004c64:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c68:	2b28      	cmp	r3, #40	; 0x28
 8004c6a:	d107      	bne.n	8004c7c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2228      	movs	r2, #40	; 0x28
 8004c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004c7a:	e015      	b.n	8004ca8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c8a:	d00a      	beq.n	8004ca2 <I2C_ITError+0x7a>
 8004c8c:	7bfb      	ldrb	r3, [r7, #15]
 8004c8e:	2b60      	cmp	r3, #96	; 0x60
 8004c90:	d007      	beq.n	8004ca2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cb6:	d162      	bne.n	8004d7e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cc6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ccc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d020      	beq.n	8004d18 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cda:	4a6a      	ldr	r2, [pc, #424]	; (8004e84 <I2C_ITError+0x25c>)
 8004cdc:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7fe f94e 	bl	8002f84 <HAL_DMA_Abort_IT>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f000 8089 	beq.w	8004e02 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 0201 	bic.w	r2, r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2220      	movs	r2, #32
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d12:	4610      	mov	r0, r2
 8004d14:	4798      	blx	r3
 8004d16:	e074      	b.n	8004e02 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1c:	4a59      	ldr	r2, [pc, #356]	; (8004e84 <I2C_ITError+0x25c>)
 8004d1e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7fe f92d 	bl	8002f84 <HAL_DMA_Abort_IT>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d068      	beq.n	8004e02 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3a:	2b40      	cmp	r3, #64	; 0x40
 8004d3c:	d10b      	bne.n	8004d56 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	691a      	ldr	r2, [r3, #16]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 0201 	bic.w	r2, r2, #1
 8004d64:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d78:	4610      	mov	r0, r2
 8004d7a:	4798      	blx	r3
 8004d7c:	e041      	b.n	8004e02 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b60      	cmp	r3, #96	; 0x60
 8004d88:	d125      	bne.n	8004dd6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da2:	2b40      	cmp	r3, #64	; 0x40
 8004da4:	d10b      	bne.n	8004dbe <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	691a      	ldr	r2, [r3, #16]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	b2d2      	uxtb	r2, r2
 8004db2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	1c5a      	adds	r2, r3, #1
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f022 0201 	bic.w	r2, r2, #1
 8004dcc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7fe fedf 	bl	8003b92 <HAL_I2C_AbortCpltCallback>
 8004dd4:	e015      	b.n	8004e02 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de0:	2b40      	cmp	r3, #64	; 0x40
 8004de2:	d10b      	bne.n	8004dfc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	691a      	ldr	r2, [r3, #16]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	b2d2      	uxtb	r2, r2
 8004df0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f7fe febf 	bl	8003b80 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10e      	bne.n	8004e30 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d109      	bne.n	8004e30 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d104      	bne.n	8004e30 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d007      	beq.n	8004e40 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e3e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e46:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4c:	f003 0304 	and.w	r3, r3, #4
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	d113      	bne.n	8004e7c <I2C_ITError+0x254>
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
 8004e56:	2b28      	cmp	r3, #40	; 0x28
 8004e58:	d110      	bne.n	8004e7c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a0a      	ldr	r2, [pc, #40]	; (8004e88 <I2C_ITError+0x260>)
 8004e5e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7fe fe67 	bl	8003b4a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e7c:	bf00      	nop
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	08004e8d 	.word	0x08004e8d
 8004e88:	ffff0000 	.word	0xffff0000

08004e8c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ea6:	4b4b      	ldr	r3, [pc, #300]	; (8004fd4 <I2C_DMAAbort+0x148>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	08db      	lsrs	r3, r3, #3
 8004eac:	4a4a      	ldr	r2, [pc, #296]	; (8004fd8 <I2C_DMAAbort+0x14c>)
 8004eae:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb2:	0a1a      	lsrs	r2, r3, #8
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	00da      	lsls	r2, r3, #3
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d106      	bne.n	8004ed4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	f043 0220 	orr.w	r2, r3, #32
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004ed2:	e00a      	b.n	8004eea <I2C_DMAAbort+0x5e>
    }
    count--;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ee8:	d0ea      	beq.n	8004ec0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f06:	2200      	movs	r2, #0
 8004f08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f18:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d003      	beq.n	8004f30 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d003      	beq.n	8004f40 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 0201 	bic.w	r2, r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b60      	cmp	r3, #96	; 0x60
 8004f5a:	d10e      	bne.n	8004f7a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004f72:	6978      	ldr	r0, [r7, #20]
 8004f74:	f7fe fe0d 	bl	8003b92 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f78:	e027      	b.n	8004fca <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f7a:	7cfb      	ldrb	r3, [r7, #19]
 8004f7c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f80:	2b28      	cmp	r3, #40	; 0x28
 8004f82:	d117      	bne.n	8004fb4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f042 0201 	orr.w	r2, r2, #1
 8004f92:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fa2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	2228      	movs	r2, #40	; 0x28
 8004fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004fb2:	e007      	b.n	8004fc4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004fc4:	6978      	ldr	r0, [r7, #20]
 8004fc6:	f7fe fddb 	bl	8003b80 <HAL_I2C_ErrorCallback>
}
 8004fca:	bf00      	nop
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	20000000 	.word	0x20000000
 8004fd8:	14f8b589 	.word	0x14f8b589

08004fdc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004fe8:	4b13      	ldr	r3, [pc, #76]	; (8005038 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	08db      	lsrs	r3, r3, #3
 8004fee:	4a13      	ldr	r2, [pc, #76]	; (800503c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff4:	0a1a      	lsrs	r2, r3, #8
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4413      	add	r3, r2
 8004ffc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	3b01      	subs	r3, #1
 8005002:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d107      	bne.n	800501a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500e:	f043 0220 	orr.w	r2, r3, #32
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e008      	b.n	800502c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005028:	d0e9      	beq.n	8004ffe <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3714      	adds	r7, #20
 8005030:	46bd      	mov	sp, r7
 8005032:	bc80      	pop	{r7}
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	20000000 	.word	0x20000000
 800503c:	14f8b589 	.word	0x14f8b589

08005040 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005050:	d103      	bne.n	800505a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005058:	e007      	b.n	800506a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005062:	d102      	bne.n	800506a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2208      	movs	r2, #8
 8005068:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	bc80      	pop	{r7}
 8005072:	4770      	bx	lr

08005074 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005074:	b480      	push	{r7}
 8005076:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005078:	4b03      	ldr	r3, [pc, #12]	; (8005088 <HAL_PWR_EnableBkUpAccess+0x14>)
 800507a:	2201      	movs	r2, #1
 800507c:	601a      	str	r2, [r3, #0]
}
 800507e:	bf00      	nop
 8005080:	46bd      	mov	sp, r7
 8005082:	bc80      	pop	{r7}
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	420e0020 	.word	0x420e0020

0800508c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e272      	b.n	8005584 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 8087 	beq.w	80051ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80050ac:	4b92      	ldr	r3, [pc, #584]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f003 030c 	and.w	r3, r3, #12
 80050b4:	2b04      	cmp	r3, #4
 80050b6:	d00c      	beq.n	80050d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80050b8:	4b8f      	ldr	r3, [pc, #572]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f003 030c 	and.w	r3, r3, #12
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	d112      	bne.n	80050ea <HAL_RCC_OscConfig+0x5e>
 80050c4:	4b8c      	ldr	r3, [pc, #560]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d0:	d10b      	bne.n	80050ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050d2:	4b89      	ldr	r3, [pc, #548]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d06c      	beq.n	80051b8 <HAL_RCC_OscConfig+0x12c>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d168      	bne.n	80051b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e24c      	b.n	8005584 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050f2:	d106      	bne.n	8005102 <HAL_RCC_OscConfig+0x76>
 80050f4:	4b80      	ldr	r3, [pc, #512]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a7f      	ldr	r2, [pc, #508]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 80050fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050fe:	6013      	str	r3, [r2, #0]
 8005100:	e02e      	b.n	8005160 <HAL_RCC_OscConfig+0xd4>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10c      	bne.n	8005124 <HAL_RCC_OscConfig+0x98>
 800510a:	4b7b      	ldr	r3, [pc, #492]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a7a      	ldr	r2, [pc, #488]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 8005110:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005114:	6013      	str	r3, [r2, #0]
 8005116:	4b78      	ldr	r3, [pc, #480]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a77      	ldr	r2, [pc, #476]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 800511c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005120:	6013      	str	r3, [r2, #0]
 8005122:	e01d      	b.n	8005160 <HAL_RCC_OscConfig+0xd4>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800512c:	d10c      	bne.n	8005148 <HAL_RCC_OscConfig+0xbc>
 800512e:	4b72      	ldr	r3, [pc, #456]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a71      	ldr	r2, [pc, #452]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 8005134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005138:	6013      	str	r3, [r2, #0]
 800513a:	4b6f      	ldr	r3, [pc, #444]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a6e      	ldr	r2, [pc, #440]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 8005140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005144:	6013      	str	r3, [r2, #0]
 8005146:	e00b      	b.n	8005160 <HAL_RCC_OscConfig+0xd4>
 8005148:	4b6b      	ldr	r3, [pc, #428]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a6a      	ldr	r2, [pc, #424]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 800514e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005152:	6013      	str	r3, [r2, #0]
 8005154:	4b68      	ldr	r3, [pc, #416]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a67      	ldr	r2, [pc, #412]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 800515a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800515e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d013      	beq.n	8005190 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005168:	f7fd fbbe 	bl	80028e8 <HAL_GetTick>
 800516c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800516e:	e008      	b.n	8005182 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005170:	f7fd fbba 	bl	80028e8 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	2b64      	cmp	r3, #100	; 0x64
 800517c:	d901      	bls.n	8005182 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e200      	b.n	8005584 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005182:	4b5d      	ldr	r3, [pc, #372]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d0f0      	beq.n	8005170 <HAL_RCC_OscConfig+0xe4>
 800518e:	e014      	b.n	80051ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005190:	f7fd fbaa 	bl	80028e8 <HAL_GetTick>
 8005194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005196:	e008      	b.n	80051aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005198:	f7fd fba6 	bl	80028e8 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	2b64      	cmp	r3, #100	; 0x64
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e1ec      	b.n	8005584 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051aa:	4b53      	ldr	r3, [pc, #332]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1f0      	bne.n	8005198 <HAL_RCC_OscConfig+0x10c>
 80051b6:	e000      	b.n	80051ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d063      	beq.n	800528e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80051c6:	4b4c      	ldr	r3, [pc, #304]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f003 030c 	and.w	r3, r3, #12
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00b      	beq.n	80051ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80051d2:	4b49      	ldr	r3, [pc, #292]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f003 030c 	and.w	r3, r3, #12
 80051da:	2b08      	cmp	r3, #8
 80051dc:	d11c      	bne.n	8005218 <HAL_RCC_OscConfig+0x18c>
 80051de:	4b46      	ldr	r3, [pc, #280]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d116      	bne.n	8005218 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051ea:	4b43      	ldr	r3, [pc, #268]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d005      	beq.n	8005202 <HAL_RCC_OscConfig+0x176>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d001      	beq.n	8005202 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e1c0      	b.n	8005584 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005202:	4b3d      	ldr	r3, [pc, #244]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	4939      	ldr	r1, [pc, #228]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 8005212:	4313      	orrs	r3, r2
 8005214:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005216:	e03a      	b.n	800528e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d020      	beq.n	8005262 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005220:	4b36      	ldr	r3, [pc, #216]	; (80052fc <HAL_RCC_OscConfig+0x270>)
 8005222:	2201      	movs	r2, #1
 8005224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005226:	f7fd fb5f 	bl	80028e8 <HAL_GetTick>
 800522a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800522c:	e008      	b.n	8005240 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800522e:	f7fd fb5b 	bl	80028e8 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d901      	bls.n	8005240 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e1a1      	b.n	8005584 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005240:	4b2d      	ldr	r3, [pc, #180]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d0f0      	beq.n	800522e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800524c:	4b2a      	ldr	r3, [pc, #168]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	4927      	ldr	r1, [pc, #156]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 800525c:	4313      	orrs	r3, r2
 800525e:	600b      	str	r3, [r1, #0]
 8005260:	e015      	b.n	800528e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005262:	4b26      	ldr	r3, [pc, #152]	; (80052fc <HAL_RCC_OscConfig+0x270>)
 8005264:	2200      	movs	r2, #0
 8005266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005268:	f7fd fb3e 	bl	80028e8 <HAL_GetTick>
 800526c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800526e:	e008      	b.n	8005282 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005270:	f7fd fb3a 	bl	80028e8 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b02      	cmp	r3, #2
 800527c:	d901      	bls.n	8005282 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e180      	b.n	8005584 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005282:	4b1d      	ldr	r3, [pc, #116]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1f0      	bne.n	8005270 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0308 	and.w	r3, r3, #8
 8005296:	2b00      	cmp	r3, #0
 8005298:	d03a      	beq.n	8005310 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d019      	beq.n	80052d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052a2:	4b17      	ldr	r3, [pc, #92]	; (8005300 <HAL_RCC_OscConfig+0x274>)
 80052a4:	2201      	movs	r2, #1
 80052a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052a8:	f7fd fb1e 	bl	80028e8 <HAL_GetTick>
 80052ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052ae:	e008      	b.n	80052c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052b0:	f7fd fb1a 	bl	80028e8 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e160      	b.n	8005584 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052c2:	4b0d      	ldr	r3, [pc, #52]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 80052c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d0f0      	beq.n	80052b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80052ce:	2001      	movs	r0, #1
 80052d0:	f000 face 	bl	8005870 <RCC_Delay>
 80052d4:	e01c      	b.n	8005310 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052d6:	4b0a      	ldr	r3, [pc, #40]	; (8005300 <HAL_RCC_OscConfig+0x274>)
 80052d8:	2200      	movs	r2, #0
 80052da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052dc:	f7fd fb04 	bl	80028e8 <HAL_GetTick>
 80052e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052e2:	e00f      	b.n	8005304 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052e4:	f7fd fb00 	bl	80028e8 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d908      	bls.n	8005304 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e146      	b.n	8005584 <HAL_RCC_OscConfig+0x4f8>
 80052f6:	bf00      	nop
 80052f8:	40021000 	.word	0x40021000
 80052fc:	42420000 	.word	0x42420000
 8005300:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005304:	4b92      	ldr	r3, [pc, #584]	; (8005550 <HAL_RCC_OscConfig+0x4c4>)
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1e9      	bne.n	80052e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 80a6 	beq.w	800546a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800531e:	2300      	movs	r3, #0
 8005320:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005322:	4b8b      	ldr	r3, [pc, #556]	; (8005550 <HAL_RCC_OscConfig+0x4c4>)
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10d      	bne.n	800534a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800532e:	4b88      	ldr	r3, [pc, #544]	; (8005550 <HAL_RCC_OscConfig+0x4c4>)
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	4a87      	ldr	r2, [pc, #540]	; (8005550 <HAL_RCC_OscConfig+0x4c4>)
 8005334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005338:	61d3      	str	r3, [r2, #28]
 800533a:	4b85      	ldr	r3, [pc, #532]	; (8005550 <HAL_RCC_OscConfig+0x4c4>)
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005342:	60bb      	str	r3, [r7, #8]
 8005344:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005346:	2301      	movs	r3, #1
 8005348:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800534a:	4b82      	ldr	r3, [pc, #520]	; (8005554 <HAL_RCC_OscConfig+0x4c8>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005352:	2b00      	cmp	r3, #0
 8005354:	d118      	bne.n	8005388 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005356:	4b7f      	ldr	r3, [pc, #508]	; (8005554 <HAL_RCC_OscConfig+0x4c8>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a7e      	ldr	r2, [pc, #504]	; (8005554 <HAL_RCC_OscConfig+0x4c8>)
 800535c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005360:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005362:	f7fd fac1 	bl	80028e8 <HAL_GetTick>
 8005366:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005368:	e008      	b.n	800537c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800536a:	f7fd fabd 	bl	80028e8 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	2b64      	cmp	r3, #100	; 0x64
 8005376:	d901      	bls.n	800537c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e103      	b.n	8005584 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800537c:	4b75      	ldr	r3, [pc, #468]	; (8005554 <HAL_RCC_OscConfig+0x4c8>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005384:	2b00      	cmp	r3, #0
 8005386:	d0f0      	beq.n	800536a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d106      	bne.n	800539e <HAL_RCC_OscConfig+0x312>
 8005390:	4b6f      	ldr	r3, [pc, #444]	; (8005550 <HAL_RCC_OscConfig+0x4c4>)
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	4a6e      	ldr	r2, [pc, #440]	; (8005550 <HAL_RCC_OscConfig+0x4c4>)
 8005396:	f043 0301 	orr.w	r3, r3, #1
 800539a:	6213      	str	r3, [r2, #32]
 800539c:	e02d      	b.n	80053fa <HAL_RCC_OscConfig+0x36e>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10c      	bne.n	80053c0 <HAL_RCC_OscConfig+0x334>
 80053a6:	4b6a      	ldr	r3, [pc, #424]	; (8005550 <HAL_RCC_OscConfig+0x4c4>)
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	4a69      	ldr	r2, [pc, #420]	; (8005550 <HAL_RCC_OscConfig+0x4c4>)
 80053ac:	f023 0301 	bic.w	r3, r3, #1
 80053b0:	6213      	str	r3, [r2, #32]
 80053b2:	4b67      	ldr	r3, [pc, #412]	; (8005550 <HAL_RCC_OscConfig+0x4c4>)
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	4a66      	ldr	r2, [pc, #408]	; (8005550 <HAL_RCC_OscConfig+0x4c4>)
 80053b8:	f023 0304 	bic.w	r3, r3, #4
 80053bc:	6213      	str	r3, [r2, #32]
 80053be:	e01c      	b.n	80053fa <HAL_RCC_OscConfig+0x36e>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	2b05      	cmp	r3, #5
 80053c6:	d10c      	bne.n	80053e2 <HAL_RCC_OscConfig+0x356>
 80053c8:	4b61      	ldr	r3, [pc, #388]	; (8005550 <HAL_RCC_OscConfig+0x4c4>)
 80053ca:	6a1b      	ldr	r3, [r3, #32]
 80053cc:	4a60      	ldr	r2, [pc, #384]	; (8005550 <HAL_RCC_OscConfig+0x4c4>)
 80053ce:	f043 0304 	orr.w	r3, r3, #4
 80053d2:	6213      	str	r3, [r2, #32]
 80053d4:	4b5e      	ldr	r3, [pc, #376]	; (8005550 <HAL_RCC_OscConfig+0x4c4>)
 80053d6:	6a1b      	ldr	r3, [r3, #32]
 80053d8:	4a5d      	ldr	r2, [pc, #372]	; (8005550 <HAL_RCC_OscConfig+0x4c4>)
 80053da:	f043 0301 	orr.w	r3, r3, #1
 80053de:	6213      	str	r3, [r2, #32]
 80053e0:	e00b      	b.n	80053fa <HAL_RCC_OscConfig+0x36e>
 80053e2:	4b5b      	ldr	r3, [pc, #364]	; (8005550 <HAL_RCC_OscConfig+0x4c4>)
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	4a5a      	ldr	r2, [pc, #360]	; (8005550 <HAL_RCC_OscConfig+0x4c4>)
 80053e8:	f023 0301 	bic.w	r3, r3, #1
 80053ec:	6213      	str	r3, [r2, #32]
 80053ee:	4b58      	ldr	r3, [pc, #352]	; (8005550 <HAL_RCC_OscConfig+0x4c4>)
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	4a57      	ldr	r2, [pc, #348]	; (8005550 <HAL_RCC_OscConfig+0x4c4>)
 80053f4:	f023 0304 	bic.w	r3, r3, #4
 80053f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d015      	beq.n	800542e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005402:	f7fd fa71 	bl	80028e8 <HAL_GetTick>
 8005406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005408:	e00a      	b.n	8005420 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800540a:	f7fd fa6d 	bl	80028e8 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	f241 3288 	movw	r2, #5000	; 0x1388
 8005418:	4293      	cmp	r3, r2
 800541a:	d901      	bls.n	8005420 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e0b1      	b.n	8005584 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005420:	4b4b      	ldr	r3, [pc, #300]	; (8005550 <HAL_RCC_OscConfig+0x4c4>)
 8005422:	6a1b      	ldr	r3, [r3, #32]
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d0ee      	beq.n	800540a <HAL_RCC_OscConfig+0x37e>
 800542c:	e014      	b.n	8005458 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800542e:	f7fd fa5b 	bl	80028e8 <HAL_GetTick>
 8005432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005434:	e00a      	b.n	800544c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005436:	f7fd fa57 	bl	80028e8 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	f241 3288 	movw	r2, #5000	; 0x1388
 8005444:	4293      	cmp	r3, r2
 8005446:	d901      	bls.n	800544c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e09b      	b.n	8005584 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800544c:	4b40      	ldr	r3, [pc, #256]	; (8005550 <HAL_RCC_OscConfig+0x4c4>)
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1ee      	bne.n	8005436 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005458:	7dfb      	ldrb	r3, [r7, #23]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d105      	bne.n	800546a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800545e:	4b3c      	ldr	r3, [pc, #240]	; (8005550 <HAL_RCC_OscConfig+0x4c4>)
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	4a3b      	ldr	r2, [pc, #236]	; (8005550 <HAL_RCC_OscConfig+0x4c4>)
 8005464:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005468:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	69db      	ldr	r3, [r3, #28]
 800546e:	2b00      	cmp	r3, #0
 8005470:	f000 8087 	beq.w	8005582 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005474:	4b36      	ldr	r3, [pc, #216]	; (8005550 <HAL_RCC_OscConfig+0x4c4>)
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f003 030c 	and.w	r3, r3, #12
 800547c:	2b08      	cmp	r3, #8
 800547e:	d061      	beq.n	8005544 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	69db      	ldr	r3, [r3, #28]
 8005484:	2b02      	cmp	r3, #2
 8005486:	d146      	bne.n	8005516 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005488:	4b33      	ldr	r3, [pc, #204]	; (8005558 <HAL_RCC_OscConfig+0x4cc>)
 800548a:	2200      	movs	r2, #0
 800548c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800548e:	f7fd fa2b 	bl	80028e8 <HAL_GetTick>
 8005492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005494:	e008      	b.n	80054a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005496:	f7fd fa27 	bl	80028e8 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d901      	bls.n	80054a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e06d      	b.n	8005584 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054a8:	4b29      	ldr	r3, [pc, #164]	; (8005550 <HAL_RCC_OscConfig+0x4c4>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1f0      	bne.n	8005496 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054bc:	d108      	bne.n	80054d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80054be:	4b24      	ldr	r3, [pc, #144]	; (8005550 <HAL_RCC_OscConfig+0x4c4>)
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	4921      	ldr	r1, [pc, #132]	; (8005550 <HAL_RCC_OscConfig+0x4c4>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054d0:	4b1f      	ldr	r3, [pc, #124]	; (8005550 <HAL_RCC_OscConfig+0x4c4>)
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a19      	ldr	r1, [r3, #32]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e0:	430b      	orrs	r3, r1
 80054e2:	491b      	ldr	r1, [pc, #108]	; (8005550 <HAL_RCC_OscConfig+0x4c4>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054e8:	4b1b      	ldr	r3, [pc, #108]	; (8005558 <HAL_RCC_OscConfig+0x4cc>)
 80054ea:	2201      	movs	r2, #1
 80054ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ee:	f7fd f9fb 	bl	80028e8 <HAL_GetTick>
 80054f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054f4:	e008      	b.n	8005508 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054f6:	f7fd f9f7 	bl	80028e8 <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	2b02      	cmp	r3, #2
 8005502:	d901      	bls.n	8005508 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e03d      	b.n	8005584 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005508:	4b11      	ldr	r3, [pc, #68]	; (8005550 <HAL_RCC_OscConfig+0x4c4>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d0f0      	beq.n	80054f6 <HAL_RCC_OscConfig+0x46a>
 8005514:	e035      	b.n	8005582 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005516:	4b10      	ldr	r3, [pc, #64]	; (8005558 <HAL_RCC_OscConfig+0x4cc>)
 8005518:	2200      	movs	r2, #0
 800551a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800551c:	f7fd f9e4 	bl	80028e8 <HAL_GetTick>
 8005520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005522:	e008      	b.n	8005536 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005524:	f7fd f9e0 	bl	80028e8 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b02      	cmp	r3, #2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e026      	b.n	8005584 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005536:	4b06      	ldr	r3, [pc, #24]	; (8005550 <HAL_RCC_OscConfig+0x4c4>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1f0      	bne.n	8005524 <HAL_RCC_OscConfig+0x498>
 8005542:	e01e      	b.n	8005582 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d107      	bne.n	800555c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e019      	b.n	8005584 <HAL_RCC_OscConfig+0x4f8>
 8005550:	40021000 	.word	0x40021000
 8005554:	40007000 	.word	0x40007000
 8005558:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800555c:	4b0b      	ldr	r3, [pc, #44]	; (800558c <HAL_RCC_OscConfig+0x500>)
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	429a      	cmp	r2, r3
 800556e:	d106      	bne.n	800557e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800557a:	429a      	cmp	r2, r3
 800557c:	d001      	beq.n	8005582 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e000      	b.n	8005584 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3718      	adds	r7, #24
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	40021000 	.word	0x40021000

08005590 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e0d0      	b.n	8005746 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055a4:	4b6a      	ldr	r3, [pc, #424]	; (8005750 <HAL_RCC_ClockConfig+0x1c0>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0307 	and.w	r3, r3, #7
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d910      	bls.n	80055d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055b2:	4b67      	ldr	r3, [pc, #412]	; (8005750 <HAL_RCC_ClockConfig+0x1c0>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f023 0207 	bic.w	r2, r3, #7
 80055ba:	4965      	ldr	r1, [pc, #404]	; (8005750 <HAL_RCC_ClockConfig+0x1c0>)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	4313      	orrs	r3, r2
 80055c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055c2:	4b63      	ldr	r3, [pc, #396]	; (8005750 <HAL_RCC_ClockConfig+0x1c0>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0307 	and.w	r3, r3, #7
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d001      	beq.n	80055d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e0b8      	b.n	8005746 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d020      	beq.n	8005622 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0304 	and.w	r3, r3, #4
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d005      	beq.n	80055f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055ec:	4b59      	ldr	r3, [pc, #356]	; (8005754 <HAL_RCC_ClockConfig+0x1c4>)
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	4a58      	ldr	r2, [pc, #352]	; (8005754 <HAL_RCC_ClockConfig+0x1c4>)
 80055f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80055f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0308 	and.w	r3, r3, #8
 8005600:	2b00      	cmp	r3, #0
 8005602:	d005      	beq.n	8005610 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005604:	4b53      	ldr	r3, [pc, #332]	; (8005754 <HAL_RCC_ClockConfig+0x1c4>)
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	4a52      	ldr	r2, [pc, #328]	; (8005754 <HAL_RCC_ClockConfig+0x1c4>)
 800560a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800560e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005610:	4b50      	ldr	r3, [pc, #320]	; (8005754 <HAL_RCC_ClockConfig+0x1c4>)
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	494d      	ldr	r1, [pc, #308]	; (8005754 <HAL_RCC_ClockConfig+0x1c4>)
 800561e:	4313      	orrs	r3, r2
 8005620:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	2b00      	cmp	r3, #0
 800562c:	d040      	beq.n	80056b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d107      	bne.n	8005646 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005636:	4b47      	ldr	r3, [pc, #284]	; (8005754 <HAL_RCC_ClockConfig+0x1c4>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d115      	bne.n	800566e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e07f      	b.n	8005746 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	2b02      	cmp	r3, #2
 800564c:	d107      	bne.n	800565e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800564e:	4b41      	ldr	r3, [pc, #260]	; (8005754 <HAL_RCC_ClockConfig+0x1c4>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d109      	bne.n	800566e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e073      	b.n	8005746 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800565e:	4b3d      	ldr	r3, [pc, #244]	; (8005754 <HAL_RCC_ClockConfig+0x1c4>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d101      	bne.n	800566e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e06b      	b.n	8005746 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800566e:	4b39      	ldr	r3, [pc, #228]	; (8005754 <HAL_RCC_ClockConfig+0x1c4>)
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f023 0203 	bic.w	r2, r3, #3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	4936      	ldr	r1, [pc, #216]	; (8005754 <HAL_RCC_ClockConfig+0x1c4>)
 800567c:	4313      	orrs	r3, r2
 800567e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005680:	f7fd f932 	bl	80028e8 <HAL_GetTick>
 8005684:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005686:	e00a      	b.n	800569e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005688:	f7fd f92e 	bl	80028e8 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	f241 3288 	movw	r2, #5000	; 0x1388
 8005696:	4293      	cmp	r3, r2
 8005698:	d901      	bls.n	800569e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e053      	b.n	8005746 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800569e:	4b2d      	ldr	r3, [pc, #180]	; (8005754 <HAL_RCC_ClockConfig+0x1c4>)
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f003 020c 	and.w	r2, r3, #12
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d1eb      	bne.n	8005688 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056b0:	4b27      	ldr	r3, [pc, #156]	; (8005750 <HAL_RCC_ClockConfig+0x1c0>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d210      	bcs.n	80056e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056be:	4b24      	ldr	r3, [pc, #144]	; (8005750 <HAL_RCC_ClockConfig+0x1c0>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f023 0207 	bic.w	r2, r3, #7
 80056c6:	4922      	ldr	r1, [pc, #136]	; (8005750 <HAL_RCC_ClockConfig+0x1c0>)
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ce:	4b20      	ldr	r3, [pc, #128]	; (8005750 <HAL_RCC_ClockConfig+0x1c0>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0307 	and.w	r3, r3, #7
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d001      	beq.n	80056e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e032      	b.n	8005746 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0304 	and.w	r3, r3, #4
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d008      	beq.n	80056fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056ec:	4b19      	ldr	r3, [pc, #100]	; (8005754 <HAL_RCC_ClockConfig+0x1c4>)
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	4916      	ldr	r1, [pc, #88]	; (8005754 <HAL_RCC_ClockConfig+0x1c4>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0308 	and.w	r3, r3, #8
 8005706:	2b00      	cmp	r3, #0
 8005708:	d009      	beq.n	800571e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800570a:	4b12      	ldr	r3, [pc, #72]	; (8005754 <HAL_RCC_ClockConfig+0x1c4>)
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	00db      	lsls	r3, r3, #3
 8005718:	490e      	ldr	r1, [pc, #56]	; (8005754 <HAL_RCC_ClockConfig+0x1c4>)
 800571a:	4313      	orrs	r3, r2
 800571c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800571e:	f000 f821 	bl	8005764 <HAL_RCC_GetSysClockFreq>
 8005722:	4602      	mov	r2, r0
 8005724:	4b0b      	ldr	r3, [pc, #44]	; (8005754 <HAL_RCC_ClockConfig+0x1c4>)
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	091b      	lsrs	r3, r3, #4
 800572a:	f003 030f 	and.w	r3, r3, #15
 800572e:	490a      	ldr	r1, [pc, #40]	; (8005758 <HAL_RCC_ClockConfig+0x1c8>)
 8005730:	5ccb      	ldrb	r3, [r1, r3]
 8005732:	fa22 f303 	lsr.w	r3, r2, r3
 8005736:	4a09      	ldr	r2, [pc, #36]	; (800575c <HAL_RCC_ClockConfig+0x1cc>)
 8005738:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800573a:	4b09      	ldr	r3, [pc, #36]	; (8005760 <HAL_RCC_ClockConfig+0x1d0>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4618      	mov	r0, r3
 8005740:	f7fd f890 	bl	8002864 <HAL_InitTick>

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	40022000 	.word	0x40022000
 8005754:	40021000 	.word	0x40021000
 8005758:	0800a4dc 	.word	0x0800a4dc
 800575c:	20000000 	.word	0x20000000
 8005760:	20000014 	.word	0x20000014

08005764 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005764:	b480      	push	{r7}
 8005766:	b087      	sub	sp, #28
 8005768:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800576a:	2300      	movs	r3, #0
 800576c:	60fb      	str	r3, [r7, #12]
 800576e:	2300      	movs	r3, #0
 8005770:	60bb      	str	r3, [r7, #8]
 8005772:	2300      	movs	r3, #0
 8005774:	617b      	str	r3, [r7, #20]
 8005776:	2300      	movs	r3, #0
 8005778:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800577a:	2300      	movs	r3, #0
 800577c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800577e:	4b1e      	ldr	r3, [pc, #120]	; (80057f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f003 030c 	and.w	r3, r3, #12
 800578a:	2b04      	cmp	r3, #4
 800578c:	d002      	beq.n	8005794 <HAL_RCC_GetSysClockFreq+0x30>
 800578e:	2b08      	cmp	r3, #8
 8005790:	d003      	beq.n	800579a <HAL_RCC_GetSysClockFreq+0x36>
 8005792:	e027      	b.n	80057e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005794:	4b19      	ldr	r3, [pc, #100]	; (80057fc <HAL_RCC_GetSysClockFreq+0x98>)
 8005796:	613b      	str	r3, [r7, #16]
      break;
 8005798:	e027      	b.n	80057ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	0c9b      	lsrs	r3, r3, #18
 800579e:	f003 030f 	and.w	r3, r3, #15
 80057a2:	4a17      	ldr	r2, [pc, #92]	; (8005800 <HAL_RCC_GetSysClockFreq+0x9c>)
 80057a4:	5cd3      	ldrb	r3, [r2, r3]
 80057a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d010      	beq.n	80057d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80057b2:	4b11      	ldr	r3, [pc, #68]	; (80057f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	0c5b      	lsrs	r3, r3, #17
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	4a11      	ldr	r2, [pc, #68]	; (8005804 <HAL_RCC_GetSysClockFreq+0xa0>)
 80057be:	5cd3      	ldrb	r3, [r2, r3]
 80057c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a0d      	ldr	r2, [pc, #52]	; (80057fc <HAL_RCC_GetSysClockFreq+0x98>)
 80057c6:	fb03 f202 	mul.w	r2, r3, r2
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d0:	617b      	str	r3, [r7, #20]
 80057d2:	e004      	b.n	80057de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a0c      	ldr	r2, [pc, #48]	; (8005808 <HAL_RCC_GetSysClockFreq+0xa4>)
 80057d8:	fb02 f303 	mul.w	r3, r2, r3
 80057dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	613b      	str	r3, [r7, #16]
      break;
 80057e2:	e002      	b.n	80057ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80057e4:	4b05      	ldr	r3, [pc, #20]	; (80057fc <HAL_RCC_GetSysClockFreq+0x98>)
 80057e6:	613b      	str	r3, [r7, #16]
      break;
 80057e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057ea:	693b      	ldr	r3, [r7, #16]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	371c      	adds	r7, #28
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bc80      	pop	{r7}
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	40021000 	.word	0x40021000
 80057fc:	007a1200 	.word	0x007a1200
 8005800:	0800b9bc 	.word	0x0800b9bc
 8005804:	0800b9cc 	.word	0x0800b9cc
 8005808:	003d0900 	.word	0x003d0900

0800580c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800580c:	b480      	push	{r7}
 800580e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005810:	4b02      	ldr	r3, [pc, #8]	; (800581c <HAL_RCC_GetHCLKFreq+0x10>)
 8005812:	681b      	ldr	r3, [r3, #0]
}
 8005814:	4618      	mov	r0, r3
 8005816:	46bd      	mov	sp, r7
 8005818:	bc80      	pop	{r7}
 800581a:	4770      	bx	lr
 800581c:	20000000 	.word	0x20000000

08005820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005824:	f7ff fff2 	bl	800580c <HAL_RCC_GetHCLKFreq>
 8005828:	4602      	mov	r2, r0
 800582a:	4b05      	ldr	r3, [pc, #20]	; (8005840 <HAL_RCC_GetPCLK1Freq+0x20>)
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	0a1b      	lsrs	r3, r3, #8
 8005830:	f003 0307 	and.w	r3, r3, #7
 8005834:	4903      	ldr	r1, [pc, #12]	; (8005844 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005836:	5ccb      	ldrb	r3, [r1, r3]
 8005838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800583c:	4618      	mov	r0, r3
 800583e:	bd80      	pop	{r7, pc}
 8005840:	40021000 	.word	0x40021000
 8005844:	0800a4ec 	.word	0x0800a4ec

08005848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800584c:	f7ff ffde 	bl	800580c <HAL_RCC_GetHCLKFreq>
 8005850:	4602      	mov	r2, r0
 8005852:	4b05      	ldr	r3, [pc, #20]	; (8005868 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	0adb      	lsrs	r3, r3, #11
 8005858:	f003 0307 	and.w	r3, r3, #7
 800585c:	4903      	ldr	r1, [pc, #12]	; (800586c <HAL_RCC_GetPCLK2Freq+0x24>)
 800585e:	5ccb      	ldrb	r3, [r1, r3]
 8005860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005864:	4618      	mov	r0, r3
 8005866:	bd80      	pop	{r7, pc}
 8005868:	40021000 	.word	0x40021000
 800586c:	0800a4ec 	.word	0x0800a4ec

08005870 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005878:	4b0a      	ldr	r3, [pc, #40]	; (80058a4 <RCC_Delay+0x34>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a0a      	ldr	r2, [pc, #40]	; (80058a8 <RCC_Delay+0x38>)
 800587e:	fba2 2303 	umull	r2, r3, r2, r3
 8005882:	0a5b      	lsrs	r3, r3, #9
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	fb02 f303 	mul.w	r3, r2, r3
 800588a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800588c:	bf00      	nop
  }
  while (Delay --);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	1e5a      	subs	r2, r3, #1
 8005892:	60fa      	str	r2, [r7, #12]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1f9      	bne.n	800588c <RCC_Delay+0x1c>
}
 8005898:	bf00      	nop
 800589a:	bf00      	nop
 800589c:	3714      	adds	r7, #20
 800589e:	46bd      	mov	sp, r7
 80058a0:	bc80      	pop	{r7}
 80058a2:	4770      	bx	lr
 80058a4:	20000000 	.word	0x20000000
 80058a8:	10624dd3 	.word	0x10624dd3

080058ac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80058b4:	2300      	movs	r3, #0
 80058b6:	613b      	str	r3, [r7, #16]
 80058b8:	2300      	movs	r3, #0
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d07d      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80058c8:	2300      	movs	r3, #0
 80058ca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058cc:	4b4f      	ldr	r3, [pc, #316]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10d      	bne.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058d8:	4b4c      	ldr	r3, [pc, #304]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058da:	69db      	ldr	r3, [r3, #28]
 80058dc:	4a4b      	ldr	r2, [pc, #300]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058e2:	61d3      	str	r3, [r2, #28]
 80058e4:	4b49      	ldr	r3, [pc, #292]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058e6:	69db      	ldr	r3, [r3, #28]
 80058e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ec:	60bb      	str	r3, [r7, #8]
 80058ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058f0:	2301      	movs	r3, #1
 80058f2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058f4:	4b46      	ldr	r3, [pc, #280]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d118      	bne.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005900:	4b43      	ldr	r3, [pc, #268]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a42      	ldr	r2, [pc, #264]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800590a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800590c:	f7fc ffec 	bl	80028e8 <HAL_GetTick>
 8005910:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005912:	e008      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005914:	f7fc ffe8 	bl	80028e8 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	2b64      	cmp	r3, #100	; 0x64
 8005920:	d901      	bls.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e06d      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005926:	4b3a      	ldr	r3, [pc, #232]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592e:	2b00      	cmp	r3, #0
 8005930:	d0f0      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005932:	4b36      	ldr	r3, [pc, #216]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800593a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d02e      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	429a      	cmp	r2, r3
 800594e:	d027      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005950:	4b2e      	ldr	r3, [pc, #184]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005952:	6a1b      	ldr	r3, [r3, #32]
 8005954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005958:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800595a:	4b2e      	ldr	r3, [pc, #184]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800595c:	2201      	movs	r2, #1
 800595e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005960:	4b2c      	ldr	r3, [pc, #176]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005962:	2200      	movs	r2, #0
 8005964:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005966:	4a29      	ldr	r2, [pc, #164]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	d014      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005976:	f7fc ffb7 	bl	80028e8 <HAL_GetTick>
 800597a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800597c:	e00a      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800597e:	f7fc ffb3 	bl	80028e8 <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	f241 3288 	movw	r2, #5000	; 0x1388
 800598c:	4293      	cmp	r3, r2
 800598e:	d901      	bls.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e036      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005994:	4b1d      	ldr	r3, [pc, #116]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005996:	6a1b      	ldr	r3, [r3, #32]
 8005998:	f003 0302 	and.w	r3, r3, #2
 800599c:	2b00      	cmp	r3, #0
 800599e:	d0ee      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059a0:	4b1a      	ldr	r3, [pc, #104]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	4917      	ldr	r1, [pc, #92]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80059b2:	7dfb      	ldrb	r3, [r7, #23]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d105      	bne.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059b8:	4b14      	ldr	r3, [pc, #80]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059ba:	69db      	ldr	r3, [r3, #28]
 80059bc:	4a13      	ldr	r2, [pc, #76]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d008      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80059d0:	4b0e      	ldr	r3, [pc, #56]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	490b      	ldr	r1, [pc, #44]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0310 	and.w	r3, r3, #16
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d008      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059ee:	4b07      	ldr	r3, [pc, #28]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	4904      	ldr	r1, [pc, #16]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3718      	adds	r7, #24
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	40021000 	.word	0x40021000
 8005a10:	40007000 	.word	0x40007000
 8005a14:	42420440 	.word	0x42420440

08005a18 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b088      	sub	sp, #32
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005a20:	2300      	movs	r3, #0
 8005a22:	617b      	str	r3, [r7, #20]
 8005a24:	2300      	movs	r3, #0
 8005a26:	61fb      	str	r3, [r7, #28]
 8005a28:	2300      	movs	r3, #0
 8005a2a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	60fb      	str	r3, [r7, #12]
 8005a30:	2300      	movs	r3, #0
 8005a32:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b10      	cmp	r3, #16
 8005a38:	d00a      	beq.n	8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2b10      	cmp	r3, #16
 8005a3e:	f200 808a 	bhi.w	8005b56 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d045      	beq.n	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d075      	beq.n	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005a4e:	e082      	b.n	8005b56 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005a50:	4b46      	ldr	r3, [pc, #280]	; (8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005a56:	4b45      	ldr	r3, [pc, #276]	; (8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d07b      	beq.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	0c9b      	lsrs	r3, r3, #18
 8005a66:	f003 030f 	and.w	r3, r3, #15
 8005a6a:	4a41      	ldr	r2, [pc, #260]	; (8005b70 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005a6c:	5cd3      	ldrb	r3, [r2, r3]
 8005a6e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d015      	beq.n	8005aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005a7a:	4b3c      	ldr	r3, [pc, #240]	; (8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	0c5b      	lsrs	r3, r3, #17
 8005a80:	f003 0301 	and.w	r3, r3, #1
 8005a84:	4a3b      	ldr	r2, [pc, #236]	; (8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005a86:	5cd3      	ldrb	r3, [r2, r3]
 8005a88:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00d      	beq.n	8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005a94:	4a38      	ldr	r2, [pc, #224]	; (8005b78 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	fb02 f303 	mul.w	r3, r2, r3
 8005aa2:	61fb      	str	r3, [r7, #28]
 8005aa4:	e004      	b.n	8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	4a34      	ldr	r2, [pc, #208]	; (8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005aaa:	fb02 f303 	mul.w	r3, r2, r3
 8005aae:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005ab0:	4b2e      	ldr	r3, [pc, #184]	; (8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ab8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005abc:	d102      	bne.n	8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	61bb      	str	r3, [r7, #24]
      break;
 8005ac2:	e04a      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	005b      	lsls	r3, r3, #1
 8005ac8:	4a2d      	ldr	r2, [pc, #180]	; (8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005aca:	fba2 2303 	umull	r2, r3, r2, r3
 8005ace:	085b      	lsrs	r3, r3, #1
 8005ad0:	61bb      	str	r3, [r7, #24]
      break;
 8005ad2:	e042      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005ad4:	4b25      	ldr	r3, [pc, #148]	; (8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005ad6:	6a1b      	ldr	r3, [r3, #32]
 8005ad8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ae4:	d108      	bne.n	8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f003 0302 	and.w	r3, r3, #2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d003      	beq.n	8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005af0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005af4:	61bb      	str	r3, [r7, #24]
 8005af6:	e01f      	b.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005afe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b02:	d109      	bne.n	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005b04:	4b19      	ldr	r3, [pc, #100]	; (8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	f003 0302 	and.w	r3, r3, #2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d003      	beq.n	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005b10:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005b14:	61bb      	str	r3, [r7, #24]
 8005b16:	e00f      	b.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b22:	d11c      	bne.n	8005b5e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005b24:	4b11      	ldr	r3, [pc, #68]	; (8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d016      	beq.n	8005b5e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005b30:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005b34:	61bb      	str	r3, [r7, #24]
      break;
 8005b36:	e012      	b.n	8005b5e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005b38:	e011      	b.n	8005b5e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005b3a:	f7ff fe85 	bl	8005848 <HAL_RCC_GetPCLK2Freq>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	4b0a      	ldr	r3, [pc, #40]	; (8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	0b9b      	lsrs	r3, r3, #14
 8005b46:	f003 0303 	and.w	r3, r3, #3
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	005b      	lsls	r3, r3, #1
 8005b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b52:	61bb      	str	r3, [r7, #24]
      break;
 8005b54:	e004      	b.n	8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005b56:	bf00      	nop
 8005b58:	e002      	b.n	8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005b5a:	bf00      	nop
 8005b5c:	e000      	b.n	8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005b5e:	bf00      	nop
    }
  }
  return (frequency);
 8005b60:	69bb      	ldr	r3, [r7, #24]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3720      	adds	r7, #32
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	40021000 	.word	0x40021000
 8005b70:	0800b9d0 	.word	0x0800b9d0
 8005b74:	0800b9e0 	.word	0x0800b9e0
 8005b78:	007a1200 	.word	0x007a1200
 8005b7c:	003d0900 	.word	0x003d0900
 8005b80:	aaaaaaab 	.word	0xaaaaaaab

08005b84 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d101      	bne.n	8005b9a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e07a      	b.n	8005c90 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	7c5b      	ldrb	r3, [r3, #17]
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d105      	bne.n	8005bb0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f7fb ff5c 	bl	8001a68 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 faea 	bl	8006190 <HAL_RTC_WaitForSynchro>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d004      	beq.n	8005bcc <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2204      	movs	r2, #4
 8005bc6:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e061      	b.n	8005c90 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 fba3 	bl	8006318 <RTC_EnterInitMode>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d004      	beq.n	8005be2 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2204      	movs	r2, #4
 8005bdc:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e056      	b.n	8005c90 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 0207 	bic.w	r2, r2, #7
 8005bf0:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d005      	beq.n	8005c06 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8005bfa:	4b27      	ldr	r3, [pc, #156]	; (8005c98 <HAL_RTC_Init+0x114>)
 8005bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bfe:	4a26      	ldr	r2, [pc, #152]	; (8005c98 <HAL_RTC_Init+0x114>)
 8005c00:	f023 0301 	bic.w	r3, r3, #1
 8005c04:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8005c06:	4b24      	ldr	r3, [pc, #144]	; (8005c98 <HAL_RTC_Init+0x114>)
 8005c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	4921      	ldr	r1, [pc, #132]	; (8005c98 <HAL_RTC_Init+0x114>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c20:	d003      	beq.n	8005c2a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	60fb      	str	r3, [r7, #12]
 8005c28:	e00e      	b.n	8005c48 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8005c2a:	2001      	movs	r0, #1
 8005c2c:	f7ff fef4 	bl	8005a18 <HAL_RCCEx_GetPeriphCLKFreq>
 8005c30:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d104      	bne.n	8005c42 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2204      	movs	r2, #4
 8005c3c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e026      	b.n	8005c90 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	3b01      	subs	r3, #1
 8005c46:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	0c1a      	lsrs	r2, r3, #16
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f002 020f 	and.w	r2, r2, #15
 8005c54:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	b292      	uxth	r2, r2
 8005c5e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 fb81 	bl	8006368 <RTC_ExitInitMode>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d004      	beq.n	8005c76 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2204      	movs	r2, #4
 8005c70:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e00c      	b.n	8005c90 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
  }
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	40006c00 	.word	0x40006c00

08005c9c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005c9c:	b590      	push	{r4, r7, lr}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	617b      	str	r3, [r7, #20]
 8005cac:	2300      	movs	r3, #0
 8005cae:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d002      	beq.n	8005cbc <HAL_RTC_SetTime+0x20>
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d101      	bne.n	8005cc0 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e080      	b.n	8005dc2 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	7c1b      	ldrb	r3, [r3, #16]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d101      	bne.n	8005ccc <HAL_RTC_SetTime+0x30>
 8005cc8:	2302      	movs	r3, #2
 8005cca:	e07a      	b.n	8005dc2 <HAL_RTC_SetTime+0x126>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2202      	movs	r2, #2
 8005cd6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d113      	bne.n	8005d06 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005ce8:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	785b      	ldrb	r3, [r3, #1]
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	011b      	lsls	r3, r3, #4
 8005cf6:	1a5b      	subs	r3, r3, r1
 8005cf8:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005cfa:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8005cfc:	68ba      	ldr	r2, [r7, #8]
 8005cfe:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005d00:	4413      	add	r3, r2
 8005d02:	617b      	str	r3, [r7, #20]
 8005d04:	e01e      	b.n	8005d44 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f000 fb71 	bl	80063f2 <RTC_Bcd2ToByte>
 8005d10:	4603      	mov	r3, r0
 8005d12:	461a      	mov	r2, r3
 8005d14:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005d18:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	785b      	ldrb	r3, [r3, #1]
 8005d20:	4618      	mov	r0, r3
 8005d22:	f000 fb66 	bl	80063f2 <RTC_Bcd2ToByte>
 8005d26:	4603      	mov	r3, r0
 8005d28:	461a      	mov	r2, r3
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	011b      	lsls	r3, r3, #4
 8005d2e:	1a9b      	subs	r3, r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005d32:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	789b      	ldrb	r3, [r3, #2]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f000 fb5a 	bl	80063f2 <RTC_Bcd2ToByte>
 8005d3e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005d40:	4423      	add	r3, r4
 8005d42:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005d44:	6979      	ldr	r1, [r7, #20]
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 fa7f 	bl	800624a <RTC_WriteTimeCounter>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d007      	beq.n	8005d62 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2204      	movs	r2, #4
 8005d56:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e02f      	b.n	8005dc2 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f022 0205 	bic.w	r2, r2, #5
 8005d70:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f000 fa90 	bl	8006298 <RTC_ReadAlarmCounter>
 8005d78:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d80:	d018      	beq.n	8005db4 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d214      	bcs.n	8005db4 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005d90:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005d94:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005d96:	6939      	ldr	r1, [r7, #16]
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f000 fa96 	bl	80062ca <RTC_WriteAlarmCounter>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d007      	beq.n	8005db4 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2204      	movs	r2, #4
 8005da8:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e006      	b.n	8005dc2 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2201      	movs	r2, #1
 8005db8:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
  }
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	371c      	adds	r7, #28
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd90      	pop	{r4, r7, pc}
	...

08005dcc <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b088      	sub	sp, #32
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	61bb      	str	r3, [r7, #24]
 8005ddc:	2300      	movs	r3, #0
 8005dde:	61fb      	str	r3, [r7, #28]
 8005de0:	2300      	movs	r3, #0
 8005de2:	617b      	str	r3, [r7, #20]
 8005de4:	2300      	movs	r3, #0
 8005de6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d002      	beq.n	8005df4 <HAL_RTC_GetTime+0x28>
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d101      	bne.n	8005df8 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e0b5      	b.n	8005f64 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f003 0304 	and.w	r3, r3, #4
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e0ac      	b.n	8005f64 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f000 f9ed 	bl	80061ea <RTC_ReadTimeCounter>
 8005e10:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	4a55      	ldr	r2, [pc, #340]	; (8005f6c <HAL_RTC_GetTime+0x1a0>)
 8005e16:	fba2 2303 	umull	r2, r3, r2, r3
 8005e1a:	0adb      	lsrs	r3, r3, #11
 8005e1c:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8005e1e:	69ba      	ldr	r2, [r7, #24]
 8005e20:	4b52      	ldr	r3, [pc, #328]	; (8005f6c <HAL_RTC_GetTime+0x1a0>)
 8005e22:	fba3 1302 	umull	r1, r3, r3, r2
 8005e26:	0adb      	lsrs	r3, r3, #11
 8005e28:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005e2c:	fb01 f303 	mul.w	r3, r1, r3
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	4a4f      	ldr	r2, [pc, #316]	; (8005f70 <HAL_RTC_GetTime+0x1a4>)
 8005e34:	fba2 2303 	umull	r2, r3, r2, r3
 8005e38:	095b      	lsrs	r3, r3, #5
 8005e3a:	b2da      	uxtb	r2, r3
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	4a4a      	ldr	r2, [pc, #296]	; (8005f6c <HAL_RTC_GetTime+0x1a0>)
 8005e44:	fba2 1203 	umull	r1, r2, r2, r3
 8005e48:	0ad2      	lsrs	r2, r2, #11
 8005e4a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005e4e:	fb01 f202 	mul.w	r2, r1, r2
 8005e52:	1a9a      	subs	r2, r3, r2
 8005e54:	4b46      	ldr	r3, [pc, #280]	; (8005f70 <HAL_RTC_GetTime+0x1a4>)
 8005e56:	fba3 1302 	umull	r1, r3, r3, r2
 8005e5a:	0959      	lsrs	r1, r3, #5
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	011b      	lsls	r3, r3, #4
 8005e60:	1a5b      	subs	r3, r3, r1
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	1ad1      	subs	r1, r2, r3
 8005e66:	b2ca      	uxtb	r2, r1
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	2b17      	cmp	r3, #23
 8005e70:	d955      	bls.n	8005f1e <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	4a3f      	ldr	r2, [pc, #252]	; (8005f74 <HAL_RTC_GetTime+0x1a8>)
 8005e76:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7a:	091b      	lsrs	r3, r3, #4
 8005e7c:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8005e7e:	6939      	ldr	r1, [r7, #16]
 8005e80:	4b3c      	ldr	r3, [pc, #240]	; (8005f74 <HAL_RTC_GetTime+0x1a8>)
 8005e82:	fba3 2301 	umull	r2, r3, r3, r1
 8005e86:	091a      	lsrs	r2, r3, #4
 8005e88:	4613      	mov	r3, r2
 8005e8a:	005b      	lsls	r3, r3, #1
 8005e8c:	4413      	add	r3, r2
 8005e8e:	00db      	lsls	r3, r3, #3
 8005e90:	1aca      	subs	r2, r1, r3
 8005e92:	b2d2      	uxtb	r2, r2
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f000 f9fd 	bl	8006298 <RTC_ReadAlarmCounter>
 8005e9e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ea6:	d008      	beq.n	8005eba <HAL_RTC_GetTime+0xee>
 8005ea8:	69fa      	ldr	r2, [r7, #28]
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d904      	bls.n	8005eba <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8005eb0:	69fa      	ldr	r2, [r7, #28]
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	61fb      	str	r3, [r7, #28]
 8005eb8:	e002      	b.n	8005ec0 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8005eba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ebe:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	4a2d      	ldr	r2, [pc, #180]	; (8005f78 <HAL_RTC_GetTime+0x1ac>)
 8005ec4:	fb02 f303 	mul.w	r3, r2, r3
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005ece:	69b9      	ldr	r1, [r7, #24]
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f000 f9ba 	bl	800624a <RTC_WriteTimeCounter>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d001      	beq.n	8005ee0 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e041      	b.n	8005f64 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ee6:	d00c      	beq.n	8005f02 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8005ee8:	69fa      	ldr	r2, [r7, #28]
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	4413      	add	r3, r2
 8005eee:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005ef0:	69f9      	ldr	r1, [r7, #28]
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f000 f9e9 	bl	80062ca <RTC_WriteAlarmCounter>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00a      	beq.n	8005f14 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e030      	b.n	8005f64 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005f02:	69f9      	ldr	r1, [r7, #28]
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f000 f9e0 	bl	80062ca <RTC_WriteAlarmCounter>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d001      	beq.n	8005f14 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e027      	b.n	8005f64 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8005f14:	6979      	ldr	r1, [r7, #20]
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	f000 fa88 	bl	800642c <RTC_DateUpdate>
 8005f1c:	e003      	b.n	8005f26 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d01a      	beq.n	8005f62 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	4618      	mov	r0, r3
 8005f32:	f000 fa41 	bl	80063b8 <RTC_ByteToBcd2>
 8005f36:	4603      	mov	r3, r0
 8005f38:	461a      	mov	r2, r3
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	785b      	ldrb	r3, [r3, #1]
 8005f42:	4618      	mov	r0, r3
 8005f44:	f000 fa38 	bl	80063b8 <RTC_ByteToBcd2>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	789b      	ldrb	r3, [r3, #2]
 8005f54:	4618      	mov	r0, r3
 8005f56:	f000 fa2f 	bl	80063b8 <RTC_ByteToBcd2>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3720      	adds	r7, #32
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	91a2b3c5 	.word	0x91a2b3c5
 8005f70:	88888889 	.word	0x88888889
 8005f74:	aaaaaaab 	.word	0xaaaaaaab
 8005f78:	00015180 	.word	0x00015180

08005f7c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b088      	sub	sp, #32
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	61fb      	str	r3, [r7, #28]
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	61bb      	str	r3, [r7, #24]
 8005f90:	2300      	movs	r3, #0
 8005f92:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d002      	beq.n	8005fa0 <HAL_RTC_SetDate+0x24>
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e097      	b.n	80060d4 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	7c1b      	ldrb	r3, [r3, #16]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d101      	bne.n	8005fb0 <HAL_RTC_SetDate+0x34>
 8005fac:	2302      	movs	r3, #2
 8005fae:	e091      	b.n	80060d4 <HAL_RTC_SetDate+0x158>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2202      	movs	r2, #2
 8005fba:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d10c      	bne.n	8005fdc <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	78da      	ldrb	r2, [r3, #3]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	785a      	ldrb	r2, [r3, #1]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	789a      	ldrb	r2, [r3, #2]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	739a      	strb	r2, [r3, #14]
 8005fda:	e01a      	b.n	8006012 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	78db      	ldrb	r3, [r3, #3]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 fa06 	bl	80063f2 <RTC_Bcd2ToByte>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	461a      	mov	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	785b      	ldrb	r3, [r3, #1]
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 f9fd 	bl	80063f2 <RTC_Bcd2ToByte>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	789b      	ldrb	r3, [r3, #2]
 8006004:	4618      	mov	r0, r3
 8006006:	f000 f9f4 	bl	80063f2 <RTC_Bcd2ToByte>
 800600a:	4603      	mov	r3, r0
 800600c:	461a      	mov	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	7bdb      	ldrb	r3, [r3, #15]
 8006016:	4618      	mov	r0, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	7b59      	ldrb	r1, [r3, #13]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	7b9b      	ldrb	r3, [r3, #14]
 8006020:	461a      	mov	r2, r3
 8006022:	f000 fadf 	bl	80065e4 <RTC_WeekDayNum>
 8006026:	4603      	mov	r3, r0
 8006028:	461a      	mov	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	7b1a      	ldrb	r2, [r3, #12]
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f000 f8d7 	bl	80061ea <RTC_ReadTimeCounter>
 800603c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	4a26      	ldr	r2, [pc, #152]	; (80060dc <HAL_RTC_SetDate+0x160>)
 8006042:	fba2 2303 	umull	r2, r3, r2, r3
 8006046:	0adb      	lsrs	r3, r3, #11
 8006048:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	2b18      	cmp	r3, #24
 800604e:	d93a      	bls.n	80060c6 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	4a23      	ldr	r2, [pc, #140]	; (80060e0 <HAL_RTC_SetDate+0x164>)
 8006054:	fba2 2303 	umull	r2, r3, r2, r3
 8006058:	091b      	lsrs	r3, r3, #4
 800605a:	4a22      	ldr	r2, [pc, #136]	; (80060e4 <HAL_RTC_SetDate+0x168>)
 800605c:	fb02 f303 	mul.w	r3, r2, r3
 8006060:	69fa      	ldr	r2, [r7, #28]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006066:	69f9      	ldr	r1, [r7, #28]
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f000 f8ee 	bl	800624a <RTC_WriteTimeCounter>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d007      	beq.n	8006084 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2204      	movs	r2, #4
 8006078:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e027      	b.n	80060d4 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f000 f907 	bl	8006298 <RTC_ReadAlarmCounter>
 800608a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006092:	d018      	beq.n	80060c6 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8006094:	69ba      	ldr	r2, [r7, #24]
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	429a      	cmp	r2, r3
 800609a:	d214      	bcs.n	80060c6 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80060a2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80060a6:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80060a8:	69b9      	ldr	r1, [r7, #24]
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f000 f90d 	bl	80062ca <RTC_WriteAlarmCounter>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d007      	beq.n	80060c6 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2204      	movs	r2, #4
 80060ba:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e006      	b.n	80060d4 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2201      	movs	r2, #1
 80060ca:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3720      	adds	r7, #32
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	91a2b3c5 	.word	0x91a2b3c5
 80060e0:	aaaaaaab 	.word	0xaaaaaaab
 80060e4:	00015180 	.word	0x00015180

080060e8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 80060f4:	f107 0314 	add.w	r3, r7, #20
 80060f8:	2100      	movs	r1, #0
 80060fa:	460a      	mov	r2, r1
 80060fc:	801a      	strh	r2, [r3, #0]
 80060fe:	460a      	mov	r2, r1
 8006100:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d002      	beq.n	800610e <HAL_RTC_GetDate+0x26>
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e03a      	b.n	8006188 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8006112:	f107 0314 	add.w	r3, r7, #20
 8006116:	2200      	movs	r2, #0
 8006118:	4619      	mov	r1, r3
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f7ff fe56 	bl	8005dcc <HAL_RTC_GetTime>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d001      	beq.n	800612a <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e02e      	b.n	8006188 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	7b1a      	ldrb	r2, [r3, #12]
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	7bda      	ldrb	r2, [r3, #15]
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	7b5a      	ldrb	r2, [r3, #13]
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	7b9a      	ldrb	r2, [r3, #14]
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d01a      	beq.n	8006186 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	78db      	ldrb	r3, [r3, #3]
 8006154:	4618      	mov	r0, r3
 8006156:	f000 f92f 	bl	80063b8 <RTC_ByteToBcd2>
 800615a:	4603      	mov	r3, r0
 800615c:	461a      	mov	r2, r3
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	785b      	ldrb	r3, [r3, #1]
 8006166:	4618      	mov	r0, r3
 8006168:	f000 f926 	bl	80063b8 <RTC_ByteToBcd2>
 800616c:	4603      	mov	r3, r0
 800616e:	461a      	mov	r2, r3
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	789b      	ldrb	r3, [r3, #2]
 8006178:	4618      	mov	r0, r3
 800617a:	f000 f91d 	bl	80063b8 <RTC_ByteToBcd2>
 800617e:	4603      	mov	r3, r0
 8006180:	461a      	mov	r2, r3
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3718      	adds	r7, #24
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006198:	2300      	movs	r3, #0
 800619a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d101      	bne.n	80061a6 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e01d      	b.n	80061e2 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	685a      	ldr	r2, [r3, #4]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 0208 	bic.w	r2, r2, #8
 80061b4:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80061b6:	f7fc fb97 	bl	80028e8 <HAL_GetTick>
 80061ba:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80061bc:	e009      	b.n	80061d2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80061be:	f7fc fb93 	bl	80028e8 <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061cc:	d901      	bls.n	80061d2 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e007      	b.n	80061e2 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f003 0308 	and.w	r3, r3, #8
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d0ee      	beq.n	80061be <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b087      	sub	sp, #28
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80061f2:	2300      	movs	r3, #0
 80061f4:	827b      	strh	r3, [r7, #18]
 80061f6:	2300      	movs	r3, #0
 80061f8:	823b      	strh	r3, [r7, #16]
 80061fa:	2300      	movs	r3, #0
 80061fc:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80061fe:	2300      	movs	r3, #0
 8006200:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	69db      	ldr	r3, [r3, #28]
 8006210:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800621a:	8a7a      	ldrh	r2, [r7, #18]
 800621c:	8a3b      	ldrh	r3, [r7, #16]
 800621e:	429a      	cmp	r2, r3
 8006220:	d008      	beq.n	8006234 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8006222:	8a3b      	ldrh	r3, [r7, #16]
 8006224:	041a      	lsls	r2, r3, #16
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	69db      	ldr	r3, [r3, #28]
 800622c:	b29b      	uxth	r3, r3
 800622e:	4313      	orrs	r3, r2
 8006230:	617b      	str	r3, [r7, #20]
 8006232:	e004      	b.n	800623e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8006234:	8a7b      	ldrh	r3, [r7, #18]
 8006236:	041a      	lsls	r2, r3, #16
 8006238:	89fb      	ldrh	r3, [r7, #14]
 800623a:	4313      	orrs	r3, r2
 800623c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800623e:	697b      	ldr	r3, [r7, #20]
}
 8006240:	4618      	mov	r0, r3
 8006242:	371c      	adds	r7, #28
 8006244:	46bd      	mov	sp, r7
 8006246:	bc80      	pop	{r7}
 8006248:	4770      	bx	lr

0800624a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800624a:	b580      	push	{r7, lr}
 800624c:	b084      	sub	sp, #16
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
 8006252:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006254:	2300      	movs	r3, #0
 8006256:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 f85d 	bl	8006318 <RTC_EnterInitMode>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d002      	beq.n	800626a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	73fb      	strb	r3, [r7, #15]
 8006268:	e011      	b.n	800628e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	0c12      	lsrs	r2, r2, #16
 8006272:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	683a      	ldr	r2, [r7, #0]
 800627a:	b292      	uxth	r2, r2
 800627c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f872 	bl	8006368 <RTC_ExitInitMode>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d001      	beq.n	800628e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800628e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006290:	4618      	mov	r0, r3
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80062a0:	2300      	movs	r3, #0
 80062a2:	81fb      	strh	r3, [r7, #14]
 80062a4:	2300      	movs	r3, #0
 80062a6:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b6:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80062b8:	89fb      	ldrh	r3, [r7, #14]
 80062ba:	041a      	lsls	r2, r3, #16
 80062bc:	89bb      	ldrh	r3, [r7, #12]
 80062be:	4313      	orrs	r3, r2
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3714      	adds	r7, #20
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bc80      	pop	{r7}
 80062c8:	4770      	bx	lr

080062ca <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b084      	sub	sp, #16
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
 80062d2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062d4:	2300      	movs	r3, #0
 80062d6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f81d 	bl	8006318 <RTC_EnterInitMode>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d002      	beq.n	80062ea <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	73fb      	strb	r3, [r7, #15]
 80062e8:	e011      	b.n	800630e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	683a      	ldr	r2, [r7, #0]
 80062f0:	0c12      	lsrs	r2, r2, #16
 80062f2:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	683a      	ldr	r2, [r7, #0]
 80062fa:	b292      	uxth	r2, r2
 80062fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f832 	bl	8006368 <RTC_ExitInitMode>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800630e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006310:	4618      	mov	r0, r3
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006320:	2300      	movs	r3, #0
 8006322:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8006324:	f7fc fae0 	bl	80028e8 <HAL_GetTick>
 8006328:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800632a:	e009      	b.n	8006340 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800632c:	f7fc fadc 	bl	80028e8 <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800633a:	d901      	bls.n	8006340 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e00f      	b.n	8006360 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	f003 0320 	and.w	r3, r3, #32
 800634a:	2b00      	cmp	r3, #0
 800634c:	d0ee      	beq.n	800632c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f042 0210 	orr.w	r2, r2, #16
 800635c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006370:	2300      	movs	r3, #0
 8006372:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685a      	ldr	r2, [r3, #4]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f022 0210 	bic.w	r2, r2, #16
 8006382:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006384:	f7fc fab0 	bl	80028e8 <HAL_GetTick>
 8006388:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800638a:	e009      	b.n	80063a0 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800638c:	f7fc faac 	bl	80028e8 <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800639a:	d901      	bls.n	80063a0 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e007      	b.n	80063b0 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f003 0320 	and.w	r3, r3, #32
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d0ee      	beq.n	800638c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	4603      	mov	r3, r0
 80063c0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80063c2:	2300      	movs	r3, #0
 80063c4:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80063c6:	e005      	b.n	80063d4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	3301      	adds	r3, #1
 80063cc:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80063ce:	79fb      	ldrb	r3, [r7, #7]
 80063d0:	3b0a      	subs	r3, #10
 80063d2:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80063d4:	79fb      	ldrb	r3, [r7, #7]
 80063d6:	2b09      	cmp	r3, #9
 80063d8:	d8f6      	bhi.n	80063c8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	011b      	lsls	r3, r3, #4
 80063e0:	b2da      	uxtb	r2, r3
 80063e2:	79fb      	ldrb	r3, [r7, #7]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	b2db      	uxtb	r3, r3
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3714      	adds	r7, #20
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bc80      	pop	{r7}
 80063f0:	4770      	bx	lr

080063f2 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80063f2:	b480      	push	{r7}
 80063f4:	b085      	sub	sp, #20
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	4603      	mov	r3, r0
 80063fa:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80063fc:	2300      	movs	r3, #0
 80063fe:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8006400:	79fb      	ldrb	r3, [r7, #7]
 8006402:	091b      	lsrs	r3, r3, #4
 8006404:	b2db      	uxtb	r3, r3
 8006406:	461a      	mov	r2, r3
 8006408:	4613      	mov	r3, r2
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	4413      	add	r3, r2
 800640e:	005b      	lsls	r3, r3, #1
 8006410:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8006412:	79fb      	ldrb	r3, [r7, #7]
 8006414:	f003 030f 	and.w	r3, r3, #15
 8006418:	b2da      	uxtb	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	b2db      	uxtb	r3, r3
 800641e:	4413      	add	r3, r2
 8006420:	b2db      	uxtb	r3, r3
}
 8006422:	4618      	mov	r0, r3
 8006424:	3714      	adds	r7, #20
 8006426:	46bd      	mov	sp, r7
 8006428:	bc80      	pop	{r7}
 800642a:	4770      	bx	lr

0800642c <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8006436:	2300      	movs	r3, #0
 8006438:	617b      	str	r3, [r7, #20]
 800643a:	2300      	movs	r3, #0
 800643c:	613b      	str	r3, [r7, #16]
 800643e:	2300      	movs	r3, #0
 8006440:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8006442:	2300      	movs	r3, #0
 8006444:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	7bdb      	ldrb	r3, [r3, #15]
 800644a:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	7b5b      	ldrb	r3, [r3, #13]
 8006450:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	7b9b      	ldrb	r3, [r3, #14]
 8006456:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8006458:	2300      	movs	r3, #0
 800645a:	60bb      	str	r3, [r7, #8]
 800645c:	e06f      	b.n	800653e <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d011      	beq.n	8006488 <RTC_DateUpdate+0x5c>
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	2b03      	cmp	r3, #3
 8006468:	d00e      	beq.n	8006488 <RTC_DateUpdate+0x5c>
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	2b05      	cmp	r3, #5
 800646e:	d00b      	beq.n	8006488 <RTC_DateUpdate+0x5c>
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	2b07      	cmp	r3, #7
 8006474:	d008      	beq.n	8006488 <RTC_DateUpdate+0x5c>
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	2b08      	cmp	r3, #8
 800647a:	d005      	beq.n	8006488 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	2b0a      	cmp	r3, #10
 8006480:	d002      	beq.n	8006488 <RTC_DateUpdate+0x5c>
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	2b0c      	cmp	r3, #12
 8006486:	d117      	bne.n	80064b8 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2b1e      	cmp	r3, #30
 800648c:	d803      	bhi.n	8006496 <RTC_DateUpdate+0x6a>
      {
        day++;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	3301      	adds	r3, #1
 8006492:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8006494:	e050      	b.n	8006538 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	2b0c      	cmp	r3, #12
 800649a:	d005      	beq.n	80064a8 <RTC_DateUpdate+0x7c>
        {
          month++;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	3301      	adds	r3, #1
 80064a0:	613b      	str	r3, [r7, #16]
          day = 1U;
 80064a2:	2301      	movs	r3, #1
 80064a4:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80064a6:	e047      	b.n	8006538 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80064a8:	2301      	movs	r3, #1
 80064aa:	613b      	str	r3, [r7, #16]
          day = 1U;
 80064ac:	2301      	movs	r3, #1
 80064ae:	60fb      	str	r3, [r7, #12]
          year++;
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	3301      	adds	r3, #1
 80064b4:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80064b6:	e03f      	b.n	8006538 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	2b04      	cmp	r3, #4
 80064bc:	d008      	beq.n	80064d0 <RTC_DateUpdate+0xa4>
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	2b06      	cmp	r3, #6
 80064c2:	d005      	beq.n	80064d0 <RTC_DateUpdate+0xa4>
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	2b09      	cmp	r3, #9
 80064c8:	d002      	beq.n	80064d0 <RTC_DateUpdate+0xa4>
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	2b0b      	cmp	r3, #11
 80064ce:	d10c      	bne.n	80064ea <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2b1d      	cmp	r3, #29
 80064d4:	d803      	bhi.n	80064de <RTC_DateUpdate+0xb2>
      {
        day++;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	3301      	adds	r3, #1
 80064da:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80064dc:	e02c      	b.n	8006538 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	3301      	adds	r3, #1
 80064e2:	613b      	str	r3, [r7, #16]
        day = 1U;
 80064e4:	2301      	movs	r3, #1
 80064e6:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80064e8:	e026      	b.n	8006538 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d123      	bne.n	8006538 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2b1b      	cmp	r3, #27
 80064f4:	d803      	bhi.n	80064fe <RTC_DateUpdate+0xd2>
      {
        day++;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	3301      	adds	r3, #1
 80064fa:	60fb      	str	r3, [r7, #12]
 80064fc:	e01c      	b.n	8006538 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2b1c      	cmp	r3, #28
 8006502:	d111      	bne.n	8006528 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	b29b      	uxth	r3, r3
 8006508:	4618      	mov	r0, r3
 800650a:	f000 f839 	bl	8006580 <RTC_IsLeapYear>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d003      	beq.n	800651c <RTC_DateUpdate+0xf0>
        {
          day++;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	3301      	adds	r3, #1
 8006518:	60fb      	str	r3, [r7, #12]
 800651a:	e00d      	b.n	8006538 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	3301      	adds	r3, #1
 8006520:	613b      	str	r3, [r7, #16]
          day = 1U;
 8006522:	2301      	movs	r3, #1
 8006524:	60fb      	str	r3, [r7, #12]
 8006526:	e007      	b.n	8006538 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2b1d      	cmp	r3, #29
 800652c:	d104      	bne.n	8006538 <RTC_DateUpdate+0x10c>
      {
        month++;
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	3301      	adds	r3, #1
 8006532:	613b      	str	r3, [r7, #16]
        day = 1U;
 8006534:	2301      	movs	r3, #1
 8006536:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	3301      	adds	r3, #1
 800653c:	60bb      	str	r3, [r7, #8]
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	429a      	cmp	r2, r3
 8006544:	d38b      	bcc.n	800645e <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	b2da      	uxtb	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	b2da      	uxtb	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	b2da      	uxtb	r2, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	b2db      	uxtb	r3, r3
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	b2d2      	uxtb	r2, r2
 8006566:	4619      	mov	r1, r3
 8006568:	6978      	ldr	r0, [r7, #20]
 800656a:	f000 f83b 	bl	80065e4 <RTC_WeekDayNum>
 800656e:	4603      	mov	r3, r0
 8006570:	461a      	mov	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	731a      	strb	r2, [r3, #12]
}
 8006576:	bf00      	nop
 8006578:	3718      	adds	r7, #24
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
	...

08006580 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	4603      	mov	r3, r0
 8006588:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800658a:	88fb      	ldrh	r3, [r7, #6]
 800658c:	f003 0303 	and.w	r3, r3, #3
 8006590:	b29b      	uxth	r3, r3
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8006596:	2300      	movs	r3, #0
 8006598:	e01d      	b.n	80065d6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800659a:	88fb      	ldrh	r3, [r7, #6]
 800659c:	4a10      	ldr	r2, [pc, #64]	; (80065e0 <RTC_IsLeapYear+0x60>)
 800659e:	fba2 1203 	umull	r1, r2, r2, r3
 80065a2:	0952      	lsrs	r2, r2, #5
 80065a4:	2164      	movs	r1, #100	; 0x64
 80065a6:	fb01 f202 	mul.w	r2, r1, r2
 80065aa:	1a9b      	subs	r3, r3, r2
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d001      	beq.n	80065b6 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e00f      	b.n	80065d6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80065b6:	88fb      	ldrh	r3, [r7, #6]
 80065b8:	4a09      	ldr	r2, [pc, #36]	; (80065e0 <RTC_IsLeapYear+0x60>)
 80065ba:	fba2 1203 	umull	r1, r2, r2, r3
 80065be:	09d2      	lsrs	r2, r2, #7
 80065c0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80065c4:	fb01 f202 	mul.w	r2, r1, r2
 80065c8:	1a9b      	subs	r3, r3, r2
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d101      	bne.n	80065d4 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e000      	b.n	80065d6 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80065d4:	2300      	movs	r3, #0
  }
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	370c      	adds	r7, #12
 80065da:	46bd      	mov	sp, r7
 80065dc:	bc80      	pop	{r7}
 80065de:	4770      	bx	lr
 80065e0:	51eb851f 	.word	0x51eb851f

080065e4 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	460b      	mov	r3, r1
 80065ee:	70fb      	strb	r3, [r7, #3]
 80065f0:	4613      	mov	r3, r2
 80065f2:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80065f4:	2300      	movs	r3, #0
 80065f6:	60bb      	str	r3, [r7, #8]
 80065f8:	2300      	movs	r3, #0
 80065fa:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8006602:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8006604:	78fb      	ldrb	r3, [r7, #3]
 8006606:	2b02      	cmp	r3, #2
 8006608:	d82d      	bhi.n	8006666 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800660a:	78fa      	ldrb	r2, [r7, #3]
 800660c:	4613      	mov	r3, r2
 800660e:	005b      	lsls	r3, r3, #1
 8006610:	4413      	add	r3, r2
 8006612:	00db      	lsls	r3, r3, #3
 8006614:	1a9b      	subs	r3, r3, r2
 8006616:	4a2c      	ldr	r2, [pc, #176]	; (80066c8 <RTC_WeekDayNum+0xe4>)
 8006618:	fba2 2303 	umull	r2, r3, r2, r3
 800661c:	085a      	lsrs	r2, r3, #1
 800661e:	78bb      	ldrb	r3, [r7, #2]
 8006620:	441a      	add	r2, r3
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	441a      	add	r2, r3
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	3b01      	subs	r3, #1
 800662a:	089b      	lsrs	r3, r3, #2
 800662c:	441a      	add	r2, r3
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	3b01      	subs	r3, #1
 8006632:	4926      	ldr	r1, [pc, #152]	; (80066cc <RTC_WeekDayNum+0xe8>)
 8006634:	fba1 1303 	umull	r1, r3, r1, r3
 8006638:	095b      	lsrs	r3, r3, #5
 800663a:	1ad2      	subs	r2, r2, r3
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	3b01      	subs	r3, #1
 8006640:	4922      	ldr	r1, [pc, #136]	; (80066cc <RTC_WeekDayNum+0xe8>)
 8006642:	fba1 1303 	umull	r1, r3, r1, r3
 8006646:	09db      	lsrs	r3, r3, #7
 8006648:	4413      	add	r3, r2
 800664a:	1d1a      	adds	r2, r3, #4
 800664c:	4b20      	ldr	r3, [pc, #128]	; (80066d0 <RTC_WeekDayNum+0xec>)
 800664e:	fba3 1302 	umull	r1, r3, r3, r2
 8006652:	1ad1      	subs	r1, r2, r3
 8006654:	0849      	lsrs	r1, r1, #1
 8006656:	440b      	add	r3, r1
 8006658:	0899      	lsrs	r1, r3, #2
 800665a:	460b      	mov	r3, r1
 800665c:	00db      	lsls	r3, r3, #3
 800665e:	1a5b      	subs	r3, r3, r1
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	60fb      	str	r3, [r7, #12]
 8006664:	e029      	b.n	80066ba <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8006666:	78fa      	ldrb	r2, [r7, #3]
 8006668:	4613      	mov	r3, r2
 800666a:	005b      	lsls	r3, r3, #1
 800666c:	4413      	add	r3, r2
 800666e:	00db      	lsls	r3, r3, #3
 8006670:	1a9b      	subs	r3, r3, r2
 8006672:	4a15      	ldr	r2, [pc, #84]	; (80066c8 <RTC_WeekDayNum+0xe4>)
 8006674:	fba2 2303 	umull	r2, r3, r2, r3
 8006678:	085a      	lsrs	r2, r3, #1
 800667a:	78bb      	ldrb	r3, [r7, #2]
 800667c:	441a      	add	r2, r3
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	441a      	add	r2, r3
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	089b      	lsrs	r3, r3, #2
 8006686:	441a      	add	r2, r3
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	4910      	ldr	r1, [pc, #64]	; (80066cc <RTC_WeekDayNum+0xe8>)
 800668c:	fba1 1303 	umull	r1, r3, r1, r3
 8006690:	095b      	lsrs	r3, r3, #5
 8006692:	1ad2      	subs	r2, r2, r3
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	490d      	ldr	r1, [pc, #52]	; (80066cc <RTC_WeekDayNum+0xe8>)
 8006698:	fba1 1303 	umull	r1, r3, r1, r3
 800669c:	09db      	lsrs	r3, r3, #7
 800669e:	4413      	add	r3, r2
 80066a0:	1c9a      	adds	r2, r3, #2
 80066a2:	4b0b      	ldr	r3, [pc, #44]	; (80066d0 <RTC_WeekDayNum+0xec>)
 80066a4:	fba3 1302 	umull	r1, r3, r3, r2
 80066a8:	1ad1      	subs	r1, r2, r3
 80066aa:	0849      	lsrs	r1, r1, #1
 80066ac:	440b      	add	r3, r1
 80066ae:	0899      	lsrs	r1, r3, #2
 80066b0:	460b      	mov	r3, r1
 80066b2:	00db      	lsls	r3, r3, #3
 80066b4:	1a5b      	subs	r3, r3, r1
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	b2db      	uxtb	r3, r3
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bc80      	pop	{r7}
 80066c6:	4770      	bx	lr
 80066c8:	38e38e39 	.word	0x38e38e39
 80066cc:	51eb851f 	.word	0x51eb851f
 80066d0:	24924925 	.word	0x24924925

080066d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e076      	b.n	80067d4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d108      	bne.n	8006700 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066f6:	d009      	beq.n	800670c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	61da      	str	r2, [r3, #28]
 80066fe:	e005      	b.n	800670c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	d106      	bne.n	800672c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f7fb f9c2 	bl	8001ab0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2202      	movs	r2, #2
 8006730:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006742:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006754:	431a      	orrs	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800675e:	431a      	orrs	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	f003 0302 	and.w	r3, r3, #2
 8006768:	431a      	orrs	r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	431a      	orrs	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800677c:	431a      	orrs	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	69db      	ldr	r3, [r3, #28]
 8006782:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006786:	431a      	orrs	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a1b      	ldr	r3, [r3, #32]
 800678c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006790:	ea42 0103 	orr.w	r1, r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006798:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	430a      	orrs	r2, r1
 80067a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	0c1a      	lsrs	r2, r3, #16
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f002 0204 	and.w	r2, r2, #4
 80067b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	69da      	ldr	r2, [r3, #28]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2201      	movs	r2, #1
 80067ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3708      	adds	r7, #8
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b088      	sub	sp, #32
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	603b      	str	r3, [r7, #0]
 80067e8:	4613      	mov	r3, r2
 80067ea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80067ec:	2300      	movs	r3, #0
 80067ee:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d101      	bne.n	80067fe <HAL_SPI_Transmit+0x22>
 80067fa:	2302      	movs	r3, #2
 80067fc:	e12d      	b.n	8006a5a <HAL_SPI_Transmit+0x27e>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006806:	f7fc f86f 	bl	80028e8 <HAL_GetTick>
 800680a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800680c:	88fb      	ldrh	r3, [r7, #6]
 800680e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006816:	b2db      	uxtb	r3, r3
 8006818:	2b01      	cmp	r3, #1
 800681a:	d002      	beq.n	8006822 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800681c:	2302      	movs	r3, #2
 800681e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006820:	e116      	b.n	8006a50 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d002      	beq.n	800682e <HAL_SPI_Transmit+0x52>
 8006828:	88fb      	ldrh	r3, [r7, #6]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d102      	bne.n	8006834 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006832:	e10d      	b.n	8006a50 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2203      	movs	r2, #3
 8006838:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	88fa      	ldrh	r2, [r7, #6]
 800684c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	88fa      	ldrh	r2, [r7, #6]
 8006852:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2200      	movs	r2, #0
 8006864:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800687a:	d10f      	bne.n	800689c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800688a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800689a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a6:	2b40      	cmp	r3, #64	; 0x40
 80068a8:	d007      	beq.n	80068ba <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068c2:	d14f      	bne.n	8006964 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d002      	beq.n	80068d2 <HAL_SPI_Transmit+0xf6>
 80068cc:	8afb      	ldrh	r3, [r7, #22]
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d142      	bne.n	8006958 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d6:	881a      	ldrh	r2, [r3, #0]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e2:	1c9a      	adds	r2, r3, #2
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	3b01      	subs	r3, #1
 80068f0:	b29a      	uxth	r2, r3
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80068f6:	e02f      	b.n	8006958 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f003 0302 	and.w	r3, r3, #2
 8006902:	2b02      	cmp	r3, #2
 8006904:	d112      	bne.n	800692c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690a:	881a      	ldrh	r2, [r3, #0]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006916:	1c9a      	adds	r2, r3, #2
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006920:	b29b      	uxth	r3, r3
 8006922:	3b01      	subs	r3, #1
 8006924:	b29a      	uxth	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	86da      	strh	r2, [r3, #54]	; 0x36
 800692a:	e015      	b.n	8006958 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800692c:	f7fb ffdc 	bl	80028e8 <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	683a      	ldr	r2, [r7, #0]
 8006938:	429a      	cmp	r2, r3
 800693a:	d803      	bhi.n	8006944 <HAL_SPI_Transmit+0x168>
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006942:	d102      	bne.n	800694a <HAL_SPI_Transmit+0x16e>
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d106      	bne.n	8006958 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006956:	e07b      	b.n	8006a50 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800695c:	b29b      	uxth	r3, r3
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1ca      	bne.n	80068f8 <HAL_SPI_Transmit+0x11c>
 8006962:	e050      	b.n	8006a06 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d002      	beq.n	8006972 <HAL_SPI_Transmit+0x196>
 800696c:	8afb      	ldrh	r3, [r7, #22]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d144      	bne.n	80069fc <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	330c      	adds	r3, #12
 800697c:	7812      	ldrb	r2, [r2, #0]
 800697e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006984:	1c5a      	adds	r2, r3, #1
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800698e:	b29b      	uxth	r3, r3
 8006990:	3b01      	subs	r3, #1
 8006992:	b29a      	uxth	r2, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006998:	e030      	b.n	80069fc <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f003 0302 	and.w	r3, r3, #2
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d113      	bne.n	80069d0 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	330c      	adds	r3, #12
 80069b2:	7812      	ldrb	r2, [r2, #0]
 80069b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ba:	1c5a      	adds	r2, r3, #1
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	3b01      	subs	r3, #1
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	86da      	strh	r2, [r3, #54]	; 0x36
 80069ce:	e015      	b.n	80069fc <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069d0:	f7fb ff8a 	bl	80028e8 <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d803      	bhi.n	80069e8 <HAL_SPI_Transmit+0x20c>
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069e6:	d102      	bne.n	80069ee <HAL_SPI_Transmit+0x212>
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d106      	bne.n	80069fc <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80069fa:	e029      	b.n	8006a50 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1c9      	bne.n	800699a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a06:	69ba      	ldr	r2, [r7, #24]
 8006a08:	6839      	ldr	r1, [r7, #0]
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 f8b2 	bl	8006b74 <SPI_EndRxTxTransaction>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d002      	beq.n	8006a1c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2220      	movs	r2, #32
 8006a1a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10a      	bne.n	8006a3a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a24:	2300      	movs	r3, #0
 8006a26:	613b      	str	r3, [r7, #16]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	613b      	str	r3, [r7, #16]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	613b      	str	r3, [r7, #16]
 8006a38:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d002      	beq.n	8006a48 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	77fb      	strb	r3, [r7, #31]
 8006a46:	e003      	b.n	8006a50 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a58:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3720      	adds	r7, #32
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
	...

08006a64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b088      	sub	sp, #32
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	603b      	str	r3, [r7, #0]
 8006a70:	4613      	mov	r3, r2
 8006a72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a74:	f7fb ff38 	bl	80028e8 <HAL_GetTick>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7c:	1a9b      	subs	r3, r3, r2
 8006a7e:	683a      	ldr	r2, [r7, #0]
 8006a80:	4413      	add	r3, r2
 8006a82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006a84:	f7fb ff30 	bl	80028e8 <HAL_GetTick>
 8006a88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a8a:	4b39      	ldr	r3, [pc, #228]	; (8006b70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	015b      	lsls	r3, r3, #5
 8006a90:	0d1b      	lsrs	r3, r3, #20
 8006a92:	69fa      	ldr	r2, [r7, #28]
 8006a94:	fb02 f303 	mul.w	r3, r2, r3
 8006a98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a9a:	e054      	b.n	8006b46 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006aa2:	d050      	beq.n	8006b46 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006aa4:	f7fb ff20 	bl	80028e8 <HAL_GetTick>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	69fa      	ldr	r2, [r7, #28]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d902      	bls.n	8006aba <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d13d      	bne.n	8006b36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	685a      	ldr	r2, [r3, #4]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ac8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ad2:	d111      	bne.n	8006af8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006adc:	d004      	beq.n	8006ae8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ae6:	d107      	bne.n	8006af8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006af6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006afc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b00:	d10f      	bne.n	8006b22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b10:	601a      	str	r2, [r3, #0]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2201      	movs	r2, #1
 8006b26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e017      	b.n	8006b66 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d101      	bne.n	8006b40 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	3b01      	subs	r3, #1
 8006b44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	689a      	ldr	r2, [r3, #8]
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	4013      	ands	r3, r2
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	bf0c      	ite	eq
 8006b56:	2301      	moveq	r3, #1
 8006b58:	2300      	movne	r3, #0
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	79fb      	ldrb	r3, [r7, #7]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d19b      	bne.n	8006a9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3720      	adds	r7, #32
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	20000000 	.word	0x20000000

08006b74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b086      	sub	sp, #24
 8006b78:	af02      	add	r7, sp, #8
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	9300      	str	r3, [sp, #0]
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	2200      	movs	r2, #0
 8006b88:	2180      	movs	r1, #128	; 0x80
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f7ff ff6a 	bl	8006a64 <SPI_WaitFlagStateUntilTimeout>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d007      	beq.n	8006ba6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b9a:	f043 0220 	orr.w	r2, r3, #32
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	e000      	b.n	8006ba8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3710      	adds	r7, #16
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d101      	bne.n	8006bc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e041      	b.n	8006c46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d106      	bne.n	8006bdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7fa ffb6 	bl	8001b48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2202      	movs	r2, #2
 8006be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	3304      	adds	r3, #4
 8006bec:	4619      	mov	r1, r3
 8006bee:	4610      	mov	r0, r2
 8006bf0:	f000 fa74 	bl	80070dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3708      	adds	r7, #8
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
	...

08006c50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d001      	beq.n	8006c68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e03a      	b.n	8006cde <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68da      	ldr	r2, [r3, #12]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f042 0201 	orr.w	r2, r2, #1
 8006c7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a18      	ldr	r2, [pc, #96]	; (8006ce8 <HAL_TIM_Base_Start_IT+0x98>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d00e      	beq.n	8006ca8 <HAL_TIM_Base_Start_IT+0x58>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c92:	d009      	beq.n	8006ca8 <HAL_TIM_Base_Start_IT+0x58>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a14      	ldr	r2, [pc, #80]	; (8006cec <HAL_TIM_Base_Start_IT+0x9c>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d004      	beq.n	8006ca8 <HAL_TIM_Base_Start_IT+0x58>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a13      	ldr	r2, [pc, #76]	; (8006cf0 <HAL_TIM_Base_Start_IT+0xa0>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d111      	bne.n	8006ccc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f003 0307 	and.w	r3, r3, #7
 8006cb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2b06      	cmp	r3, #6
 8006cb8:	d010      	beq.n	8006cdc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f042 0201 	orr.w	r2, r2, #1
 8006cc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cca:	e007      	b.n	8006cdc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f042 0201 	orr.w	r2, r2, #1
 8006cda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3714      	adds	r7, #20
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bc80      	pop	{r7}
 8006ce6:	4770      	bx	lr
 8006ce8:	40012c00 	.word	0x40012c00
 8006cec:	40000400 	.word	0x40000400
 8006cf0:	40000800 	.word	0x40000800

08006cf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	f003 0302 	and.w	r3, r3, #2
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d122      	bne.n	8006d50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	f003 0302 	and.w	r3, r3, #2
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d11b      	bne.n	8006d50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f06f 0202 	mvn.w	r2, #2
 8006d20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2201      	movs	r2, #1
 8006d26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	699b      	ldr	r3, [r3, #24]
 8006d2e:	f003 0303 	and.w	r3, r3, #3
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d003      	beq.n	8006d3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f9b4 	bl	80070a4 <HAL_TIM_IC_CaptureCallback>
 8006d3c:	e005      	b.n	8006d4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 f9a7 	bl	8007092 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 f9b6 	bl	80070b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	f003 0304 	and.w	r3, r3, #4
 8006d5a:	2b04      	cmp	r3, #4
 8006d5c:	d122      	bne.n	8006da4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	f003 0304 	and.w	r3, r3, #4
 8006d68:	2b04      	cmp	r3, #4
 8006d6a:	d11b      	bne.n	8006da4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f06f 0204 	mvn.w	r2, #4
 8006d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2202      	movs	r2, #2
 8006d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d003      	beq.n	8006d92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f98a 	bl	80070a4 <HAL_TIM_IC_CaptureCallback>
 8006d90:	e005      	b.n	8006d9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 f97d 	bl	8007092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 f98c 	bl	80070b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	f003 0308 	and.w	r3, r3, #8
 8006dae:	2b08      	cmp	r3, #8
 8006db0:	d122      	bne.n	8006df8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	f003 0308 	and.w	r3, r3, #8
 8006dbc:	2b08      	cmp	r3, #8
 8006dbe:	d11b      	bne.n	8006df8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f06f 0208 	mvn.w	r2, #8
 8006dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2204      	movs	r2, #4
 8006dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	69db      	ldr	r3, [r3, #28]
 8006dd6:	f003 0303 	and.w	r3, r3, #3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d003      	beq.n	8006de6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f960 	bl	80070a4 <HAL_TIM_IC_CaptureCallback>
 8006de4:	e005      	b.n	8006df2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f953 	bl	8007092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 f962 	bl	80070b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	f003 0310 	and.w	r3, r3, #16
 8006e02:	2b10      	cmp	r3, #16
 8006e04:	d122      	bne.n	8006e4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	f003 0310 	and.w	r3, r3, #16
 8006e10:	2b10      	cmp	r3, #16
 8006e12:	d11b      	bne.n	8006e4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f06f 0210 	mvn.w	r2, #16
 8006e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2208      	movs	r2, #8
 8006e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	69db      	ldr	r3, [r3, #28]
 8006e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d003      	beq.n	8006e3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f936 	bl	80070a4 <HAL_TIM_IC_CaptureCallback>
 8006e38:	e005      	b.n	8006e46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 f929 	bl	8007092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 f938 	bl	80070b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d10e      	bne.n	8006e78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	f003 0301 	and.w	r3, r3, #1
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d107      	bne.n	8006e78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f06f 0201 	mvn.w	r2, #1
 8006e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f7fa f8ee 	bl	8001054 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e82:	2b80      	cmp	r3, #128	; 0x80
 8006e84:	d10e      	bne.n	8006ea4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e90:	2b80      	cmp	r3, #128	; 0x80
 8006e92:	d107      	bne.n	8006ea4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 fa7b 	bl	800739a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eae:	2b40      	cmp	r3, #64	; 0x40
 8006eb0:	d10e      	bne.n	8006ed0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ebc:	2b40      	cmp	r3, #64	; 0x40
 8006ebe:	d107      	bne.n	8006ed0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f8fc 	bl	80070c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	f003 0320 	and.w	r3, r3, #32
 8006eda:	2b20      	cmp	r3, #32
 8006edc:	d10e      	bne.n	8006efc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	f003 0320 	and.w	r3, r3, #32
 8006ee8:	2b20      	cmp	r3, #32
 8006eea:	d107      	bne.n	8006efc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f06f 0220 	mvn.w	r2, #32
 8006ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fa46 	bl	8007388 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006efc:	bf00      	nop
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d101      	bne.n	8006f20 <HAL_TIM_ConfigClockSource+0x1c>
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	e0b4      	b.n	800708a <HAL_TIM_ConfigClockSource+0x186>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f58:	d03e      	beq.n	8006fd8 <HAL_TIM_ConfigClockSource+0xd4>
 8006f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f5e:	f200 8087 	bhi.w	8007070 <HAL_TIM_ConfigClockSource+0x16c>
 8006f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f66:	f000 8086 	beq.w	8007076 <HAL_TIM_ConfigClockSource+0x172>
 8006f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f6e:	d87f      	bhi.n	8007070 <HAL_TIM_ConfigClockSource+0x16c>
 8006f70:	2b70      	cmp	r3, #112	; 0x70
 8006f72:	d01a      	beq.n	8006faa <HAL_TIM_ConfigClockSource+0xa6>
 8006f74:	2b70      	cmp	r3, #112	; 0x70
 8006f76:	d87b      	bhi.n	8007070 <HAL_TIM_ConfigClockSource+0x16c>
 8006f78:	2b60      	cmp	r3, #96	; 0x60
 8006f7a:	d050      	beq.n	800701e <HAL_TIM_ConfigClockSource+0x11a>
 8006f7c:	2b60      	cmp	r3, #96	; 0x60
 8006f7e:	d877      	bhi.n	8007070 <HAL_TIM_ConfigClockSource+0x16c>
 8006f80:	2b50      	cmp	r3, #80	; 0x50
 8006f82:	d03c      	beq.n	8006ffe <HAL_TIM_ConfigClockSource+0xfa>
 8006f84:	2b50      	cmp	r3, #80	; 0x50
 8006f86:	d873      	bhi.n	8007070 <HAL_TIM_ConfigClockSource+0x16c>
 8006f88:	2b40      	cmp	r3, #64	; 0x40
 8006f8a:	d058      	beq.n	800703e <HAL_TIM_ConfigClockSource+0x13a>
 8006f8c:	2b40      	cmp	r3, #64	; 0x40
 8006f8e:	d86f      	bhi.n	8007070 <HAL_TIM_ConfigClockSource+0x16c>
 8006f90:	2b30      	cmp	r3, #48	; 0x30
 8006f92:	d064      	beq.n	800705e <HAL_TIM_ConfigClockSource+0x15a>
 8006f94:	2b30      	cmp	r3, #48	; 0x30
 8006f96:	d86b      	bhi.n	8007070 <HAL_TIM_ConfigClockSource+0x16c>
 8006f98:	2b20      	cmp	r3, #32
 8006f9a:	d060      	beq.n	800705e <HAL_TIM_ConfigClockSource+0x15a>
 8006f9c:	2b20      	cmp	r3, #32
 8006f9e:	d867      	bhi.n	8007070 <HAL_TIM_ConfigClockSource+0x16c>
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d05c      	beq.n	800705e <HAL_TIM_ConfigClockSource+0x15a>
 8006fa4:	2b10      	cmp	r3, #16
 8006fa6:	d05a      	beq.n	800705e <HAL_TIM_ConfigClockSource+0x15a>
 8006fa8:	e062      	b.n	8007070 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6818      	ldr	r0, [r3, #0]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	6899      	ldr	r1, [r3, #8]
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	685a      	ldr	r2, [r3, #4]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	f000 f968 	bl	800728e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006fcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	609a      	str	r2, [r3, #8]
      break;
 8006fd6:	e04f      	b.n	8007078 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6818      	ldr	r0, [r3, #0]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	6899      	ldr	r1, [r3, #8]
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	685a      	ldr	r2, [r3, #4]
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	f000 f951 	bl	800728e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	689a      	ldr	r2, [r3, #8]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ffa:	609a      	str	r2, [r3, #8]
      break;
 8006ffc:	e03c      	b.n	8007078 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6818      	ldr	r0, [r3, #0]
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	6859      	ldr	r1, [r3, #4]
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	461a      	mov	r2, r3
 800700c:	f000 f8c8 	bl	80071a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2150      	movs	r1, #80	; 0x50
 8007016:	4618      	mov	r0, r3
 8007018:	f000 f91f 	bl	800725a <TIM_ITRx_SetConfig>
      break;
 800701c:	e02c      	b.n	8007078 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6818      	ldr	r0, [r3, #0]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	6859      	ldr	r1, [r3, #4]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	461a      	mov	r2, r3
 800702c:	f000 f8e6 	bl	80071fc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2160      	movs	r1, #96	; 0x60
 8007036:	4618      	mov	r0, r3
 8007038:	f000 f90f 	bl	800725a <TIM_ITRx_SetConfig>
      break;
 800703c:	e01c      	b.n	8007078 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6818      	ldr	r0, [r3, #0]
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	6859      	ldr	r1, [r3, #4]
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	461a      	mov	r2, r3
 800704c:	f000 f8a8 	bl	80071a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2140      	movs	r1, #64	; 0x40
 8007056:	4618      	mov	r0, r3
 8007058:	f000 f8ff 	bl	800725a <TIM_ITRx_SetConfig>
      break;
 800705c:	e00c      	b.n	8007078 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4619      	mov	r1, r3
 8007068:	4610      	mov	r0, r2
 800706a:	f000 f8f6 	bl	800725a <TIM_ITRx_SetConfig>
      break;
 800706e:	e003      	b.n	8007078 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	73fb      	strb	r3, [r7, #15]
      break;
 8007074:	e000      	b.n	8007078 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007076:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007088:	7bfb      	ldrb	r3, [r7, #15]
}
 800708a:	4618      	mov	r0, r3
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007092:	b480      	push	{r7}
 8007094:	b083      	sub	sp, #12
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800709a:	bf00      	nop
 800709c:	370c      	adds	r7, #12
 800709e:	46bd      	mov	sp, r7
 80070a0:	bc80      	pop	{r7}
 80070a2:	4770      	bx	lr

080070a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bc80      	pop	{r7}
 80070b4:	4770      	bx	lr

080070b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070b6:	b480      	push	{r7}
 80070b8:	b083      	sub	sp, #12
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070be:	bf00      	nop
 80070c0:	370c      	adds	r7, #12
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bc80      	pop	{r7}
 80070c6:	4770      	bx	lr

080070c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070d0:	bf00      	nop
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bc80      	pop	{r7}
 80070d8:	4770      	bx	lr
	...

080070dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a29      	ldr	r2, [pc, #164]	; (8007194 <TIM_Base_SetConfig+0xb8>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d00b      	beq.n	800710c <TIM_Base_SetConfig+0x30>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070fa:	d007      	beq.n	800710c <TIM_Base_SetConfig+0x30>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a26      	ldr	r2, [pc, #152]	; (8007198 <TIM_Base_SetConfig+0xbc>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d003      	beq.n	800710c <TIM_Base_SetConfig+0x30>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a25      	ldr	r2, [pc, #148]	; (800719c <TIM_Base_SetConfig+0xc0>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d108      	bne.n	800711e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007112:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	4313      	orrs	r3, r2
 800711c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a1c      	ldr	r2, [pc, #112]	; (8007194 <TIM_Base_SetConfig+0xb8>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d00b      	beq.n	800713e <TIM_Base_SetConfig+0x62>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800712c:	d007      	beq.n	800713e <TIM_Base_SetConfig+0x62>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a19      	ldr	r2, [pc, #100]	; (8007198 <TIM_Base_SetConfig+0xbc>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d003      	beq.n	800713e <TIM_Base_SetConfig+0x62>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a18      	ldr	r2, [pc, #96]	; (800719c <TIM_Base_SetConfig+0xc0>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d108      	bne.n	8007150 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007144:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	4313      	orrs	r3, r2
 800714e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	695b      	ldr	r3, [r3, #20]
 800715a:	4313      	orrs	r3, r2
 800715c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	689a      	ldr	r2, [r3, #8]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a07      	ldr	r2, [pc, #28]	; (8007194 <TIM_Base_SetConfig+0xb8>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d103      	bne.n	8007184 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	691a      	ldr	r2, [r3, #16]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	615a      	str	r2, [r3, #20]
}
 800718a:	bf00      	nop
 800718c:	3714      	adds	r7, #20
 800718e:	46bd      	mov	sp, r7
 8007190:	bc80      	pop	{r7}
 8007192:	4770      	bx	lr
 8007194:	40012c00 	.word	0x40012c00
 8007198:	40000400 	.word	0x40000400
 800719c:	40000800 	.word	0x40000800

080071a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b087      	sub	sp, #28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6a1b      	ldr	r3, [r3, #32]
 80071b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	f023 0201 	bic.w	r2, r3, #1
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	011b      	lsls	r3, r3, #4
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	f023 030a 	bic.w	r3, r3, #10
 80071dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	621a      	str	r2, [r3, #32]
}
 80071f2:	bf00      	nop
 80071f4:	371c      	adds	r7, #28
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bc80      	pop	{r7}
 80071fa:	4770      	bx	lr

080071fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b087      	sub	sp, #28
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6a1b      	ldr	r3, [r3, #32]
 800720c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	f023 0210 	bic.w	r2, r3, #16
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007226:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	031b      	lsls	r3, r3, #12
 800722c:	693a      	ldr	r2, [r7, #16]
 800722e:	4313      	orrs	r3, r2
 8007230:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007238:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	011b      	lsls	r3, r3, #4
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	4313      	orrs	r3, r2
 8007242:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	693a      	ldr	r2, [r7, #16]
 8007248:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	697a      	ldr	r2, [r7, #20]
 800724e:	621a      	str	r2, [r3, #32]
}
 8007250:	bf00      	nop
 8007252:	371c      	adds	r7, #28
 8007254:	46bd      	mov	sp, r7
 8007256:	bc80      	pop	{r7}
 8007258:	4770      	bx	lr

0800725a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800725a:	b480      	push	{r7}
 800725c:	b085      	sub	sp, #20
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
 8007262:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007270:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007272:	683a      	ldr	r2, [r7, #0]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	4313      	orrs	r3, r2
 8007278:	f043 0307 	orr.w	r3, r3, #7
 800727c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	609a      	str	r2, [r3, #8]
}
 8007284:	bf00      	nop
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	bc80      	pop	{r7}
 800728c:	4770      	bx	lr

0800728e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800728e:	b480      	push	{r7}
 8007290:	b087      	sub	sp, #28
 8007292:	af00      	add	r7, sp, #0
 8007294:	60f8      	str	r0, [r7, #12]
 8007296:	60b9      	str	r1, [r7, #8]
 8007298:	607a      	str	r2, [r7, #4]
 800729a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	021a      	lsls	r2, r3, #8
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	431a      	orrs	r2, r3
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	609a      	str	r2, [r3, #8]
}
 80072c2:	bf00      	nop
 80072c4:	371c      	adds	r7, #28
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bc80      	pop	{r7}
 80072ca:	4770      	bx	lr

080072cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d101      	bne.n	80072e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072e0:	2302      	movs	r3, #2
 80072e2:	e046      	b.n	8007372 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2202      	movs	r2, #2
 80072f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800730a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	4313      	orrs	r3, r2
 8007314:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a16      	ldr	r2, [pc, #88]	; (800737c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d00e      	beq.n	8007346 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007330:	d009      	beq.n	8007346 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a12      	ldr	r2, [pc, #72]	; (8007380 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d004      	beq.n	8007346 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a10      	ldr	r2, [pc, #64]	; (8007384 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d10c      	bne.n	8007360 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800734c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	68ba      	ldr	r2, [r7, #8]
 8007354:	4313      	orrs	r3, r2
 8007356:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3714      	adds	r7, #20
 8007376:	46bd      	mov	sp, r7
 8007378:	bc80      	pop	{r7}
 800737a:	4770      	bx	lr
 800737c:	40012c00 	.word	0x40012c00
 8007380:	40000400 	.word	0x40000400
 8007384:	40000800 	.word	0x40000800

08007388 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	bc80      	pop	{r7}
 8007398:	4770      	bx	lr

0800739a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800739a:	b480      	push	{r7}
 800739c:	b083      	sub	sp, #12
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073a2:	bf00      	nop
 80073a4:	370c      	adds	r7, #12
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bc80      	pop	{r7}
 80073aa:	4770      	bx	lr

080073ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d101      	bne.n	80073be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	e042      	b.n	8007444 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d106      	bne.n	80073d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f7fa fbf0 	bl	8001bb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2224      	movs	r2, #36	; 0x24
 80073dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68da      	ldr	r2, [r3, #12]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 f82b 	bl	800744c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	691a      	ldr	r2, [r3, #16]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007404:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	695a      	ldr	r2, [r3, #20]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007414:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68da      	ldr	r2, [r3, #12]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007424:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2220      	movs	r2, #32
 8007430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2220      	movs	r2, #32
 8007438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007442:	2300      	movs	r3, #0
}
 8007444:	4618      	mov	r0, r3
 8007446:	3708      	adds	r7, #8
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	68da      	ldr	r2, [r3, #12]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	430a      	orrs	r2, r1
 8007468:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	689a      	ldr	r2, [r3, #8]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	431a      	orrs	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	695b      	ldr	r3, [r3, #20]
 8007478:	4313      	orrs	r3, r2
 800747a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007486:	f023 030c 	bic.w	r3, r3, #12
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	6812      	ldr	r2, [r2, #0]
 800748e:	68b9      	ldr	r1, [r7, #8]
 8007490:	430b      	orrs	r3, r1
 8007492:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	695b      	ldr	r3, [r3, #20]
 800749a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	699a      	ldr	r2, [r3, #24]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	430a      	orrs	r2, r1
 80074a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a2c      	ldr	r2, [pc, #176]	; (8007560 <UART_SetConfig+0x114>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d103      	bne.n	80074bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80074b4:	f7fe f9c8 	bl	8005848 <HAL_RCC_GetPCLK2Freq>
 80074b8:	60f8      	str	r0, [r7, #12]
 80074ba:	e002      	b.n	80074c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80074bc:	f7fe f9b0 	bl	8005820 <HAL_RCC_GetPCLK1Freq>
 80074c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	4613      	mov	r3, r2
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	4413      	add	r3, r2
 80074ca:	009a      	lsls	r2, r3, #2
 80074cc:	441a      	add	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80074d8:	4a22      	ldr	r2, [pc, #136]	; (8007564 <UART_SetConfig+0x118>)
 80074da:	fba2 2303 	umull	r2, r3, r2, r3
 80074de:	095b      	lsrs	r3, r3, #5
 80074e0:	0119      	lsls	r1, r3, #4
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	4613      	mov	r3, r2
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	4413      	add	r3, r2
 80074ea:	009a      	lsls	r2, r3, #2
 80074ec:	441a      	add	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80074f8:	4b1a      	ldr	r3, [pc, #104]	; (8007564 <UART_SetConfig+0x118>)
 80074fa:	fba3 0302 	umull	r0, r3, r3, r2
 80074fe:	095b      	lsrs	r3, r3, #5
 8007500:	2064      	movs	r0, #100	; 0x64
 8007502:	fb00 f303 	mul.w	r3, r0, r3
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	011b      	lsls	r3, r3, #4
 800750a:	3332      	adds	r3, #50	; 0x32
 800750c:	4a15      	ldr	r2, [pc, #84]	; (8007564 <UART_SetConfig+0x118>)
 800750e:	fba2 2303 	umull	r2, r3, r2, r3
 8007512:	095b      	lsrs	r3, r3, #5
 8007514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007518:	4419      	add	r1, r3
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	4613      	mov	r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4413      	add	r3, r2
 8007522:	009a      	lsls	r2, r3, #2
 8007524:	441a      	add	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007530:	4b0c      	ldr	r3, [pc, #48]	; (8007564 <UART_SetConfig+0x118>)
 8007532:	fba3 0302 	umull	r0, r3, r3, r2
 8007536:	095b      	lsrs	r3, r3, #5
 8007538:	2064      	movs	r0, #100	; 0x64
 800753a:	fb00 f303 	mul.w	r3, r0, r3
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	011b      	lsls	r3, r3, #4
 8007542:	3332      	adds	r3, #50	; 0x32
 8007544:	4a07      	ldr	r2, [pc, #28]	; (8007564 <UART_SetConfig+0x118>)
 8007546:	fba2 2303 	umull	r2, r3, r2, r3
 800754a:	095b      	lsrs	r3, r3, #5
 800754c:	f003 020f 	and.w	r2, r3, #15
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	440a      	add	r2, r1
 8007556:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007558:	bf00      	nop
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	40013800 	.word	0x40013800
 8007564:	51eb851f 	.word	0x51eb851f

08007568 <__errno>:
 8007568:	4b01      	ldr	r3, [pc, #4]	; (8007570 <__errno+0x8>)
 800756a:	6818      	ldr	r0, [r3, #0]
 800756c:	4770      	bx	lr
 800756e:	bf00      	nop
 8007570:	2000001c 	.word	0x2000001c

08007574 <__libc_init_array>:
 8007574:	b570      	push	{r4, r5, r6, lr}
 8007576:	2600      	movs	r6, #0
 8007578:	4d0c      	ldr	r5, [pc, #48]	; (80075ac <__libc_init_array+0x38>)
 800757a:	4c0d      	ldr	r4, [pc, #52]	; (80075b0 <__libc_init_array+0x3c>)
 800757c:	1b64      	subs	r4, r4, r5
 800757e:	10a4      	asrs	r4, r4, #2
 8007580:	42a6      	cmp	r6, r4
 8007582:	d109      	bne.n	8007598 <__libc_init_array+0x24>
 8007584:	f002 ff42 	bl	800a40c <_init>
 8007588:	2600      	movs	r6, #0
 800758a:	4d0a      	ldr	r5, [pc, #40]	; (80075b4 <__libc_init_array+0x40>)
 800758c:	4c0a      	ldr	r4, [pc, #40]	; (80075b8 <__libc_init_array+0x44>)
 800758e:	1b64      	subs	r4, r4, r5
 8007590:	10a4      	asrs	r4, r4, #2
 8007592:	42a6      	cmp	r6, r4
 8007594:	d105      	bne.n	80075a2 <__libc_init_array+0x2e>
 8007596:	bd70      	pop	{r4, r5, r6, pc}
 8007598:	f855 3b04 	ldr.w	r3, [r5], #4
 800759c:	4798      	blx	r3
 800759e:	3601      	adds	r6, #1
 80075a0:	e7ee      	b.n	8007580 <__libc_init_array+0xc>
 80075a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80075a6:	4798      	blx	r3
 80075a8:	3601      	adds	r6, #1
 80075aa:	e7f2      	b.n	8007592 <__libc_init_array+0x1e>
 80075ac:	0800bdbc 	.word	0x0800bdbc
 80075b0:	0800bdbc 	.word	0x0800bdbc
 80075b4:	0800bdbc 	.word	0x0800bdbc
 80075b8:	0800bdc0 	.word	0x0800bdc0

080075bc <malloc>:
 80075bc:	4b02      	ldr	r3, [pc, #8]	; (80075c8 <malloc+0xc>)
 80075be:	4601      	mov	r1, r0
 80075c0:	6818      	ldr	r0, [r3, #0]
 80075c2:	f000 b881 	b.w	80076c8 <_malloc_r>
 80075c6:	bf00      	nop
 80075c8:	2000001c 	.word	0x2000001c

080075cc <memcpy>:
 80075cc:	440a      	add	r2, r1
 80075ce:	4291      	cmp	r1, r2
 80075d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80075d4:	d100      	bne.n	80075d8 <memcpy+0xc>
 80075d6:	4770      	bx	lr
 80075d8:	b510      	push	{r4, lr}
 80075da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075de:	4291      	cmp	r1, r2
 80075e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075e4:	d1f9      	bne.n	80075da <memcpy+0xe>
 80075e6:	bd10      	pop	{r4, pc}

080075e8 <memset>:
 80075e8:	4603      	mov	r3, r0
 80075ea:	4402      	add	r2, r0
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d100      	bne.n	80075f2 <memset+0xa>
 80075f0:	4770      	bx	lr
 80075f2:	f803 1b01 	strb.w	r1, [r3], #1
 80075f6:	e7f9      	b.n	80075ec <memset+0x4>

080075f8 <_free_r>:
 80075f8:	b538      	push	{r3, r4, r5, lr}
 80075fa:	4605      	mov	r5, r0
 80075fc:	2900      	cmp	r1, #0
 80075fe:	d040      	beq.n	8007682 <_free_r+0x8a>
 8007600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007604:	1f0c      	subs	r4, r1, #4
 8007606:	2b00      	cmp	r3, #0
 8007608:	bfb8      	it	lt
 800760a:	18e4      	addlt	r4, r4, r3
 800760c:	f001 fbec 	bl	8008de8 <__malloc_lock>
 8007610:	4a1c      	ldr	r2, [pc, #112]	; (8007684 <_free_r+0x8c>)
 8007612:	6813      	ldr	r3, [r2, #0]
 8007614:	b933      	cbnz	r3, 8007624 <_free_r+0x2c>
 8007616:	6063      	str	r3, [r4, #4]
 8007618:	6014      	str	r4, [r2, #0]
 800761a:	4628      	mov	r0, r5
 800761c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007620:	f001 bbe8 	b.w	8008df4 <__malloc_unlock>
 8007624:	42a3      	cmp	r3, r4
 8007626:	d908      	bls.n	800763a <_free_r+0x42>
 8007628:	6820      	ldr	r0, [r4, #0]
 800762a:	1821      	adds	r1, r4, r0
 800762c:	428b      	cmp	r3, r1
 800762e:	bf01      	itttt	eq
 8007630:	6819      	ldreq	r1, [r3, #0]
 8007632:	685b      	ldreq	r3, [r3, #4]
 8007634:	1809      	addeq	r1, r1, r0
 8007636:	6021      	streq	r1, [r4, #0]
 8007638:	e7ed      	b.n	8007616 <_free_r+0x1e>
 800763a:	461a      	mov	r2, r3
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	b10b      	cbz	r3, 8007644 <_free_r+0x4c>
 8007640:	42a3      	cmp	r3, r4
 8007642:	d9fa      	bls.n	800763a <_free_r+0x42>
 8007644:	6811      	ldr	r1, [r2, #0]
 8007646:	1850      	adds	r0, r2, r1
 8007648:	42a0      	cmp	r0, r4
 800764a:	d10b      	bne.n	8007664 <_free_r+0x6c>
 800764c:	6820      	ldr	r0, [r4, #0]
 800764e:	4401      	add	r1, r0
 8007650:	1850      	adds	r0, r2, r1
 8007652:	4283      	cmp	r3, r0
 8007654:	6011      	str	r1, [r2, #0]
 8007656:	d1e0      	bne.n	800761a <_free_r+0x22>
 8007658:	6818      	ldr	r0, [r3, #0]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	4401      	add	r1, r0
 800765e:	6011      	str	r1, [r2, #0]
 8007660:	6053      	str	r3, [r2, #4]
 8007662:	e7da      	b.n	800761a <_free_r+0x22>
 8007664:	d902      	bls.n	800766c <_free_r+0x74>
 8007666:	230c      	movs	r3, #12
 8007668:	602b      	str	r3, [r5, #0]
 800766a:	e7d6      	b.n	800761a <_free_r+0x22>
 800766c:	6820      	ldr	r0, [r4, #0]
 800766e:	1821      	adds	r1, r4, r0
 8007670:	428b      	cmp	r3, r1
 8007672:	bf01      	itttt	eq
 8007674:	6819      	ldreq	r1, [r3, #0]
 8007676:	685b      	ldreq	r3, [r3, #4]
 8007678:	1809      	addeq	r1, r1, r0
 800767a:	6021      	streq	r1, [r4, #0]
 800767c:	6063      	str	r3, [r4, #4]
 800767e:	6054      	str	r4, [r2, #4]
 8007680:	e7cb      	b.n	800761a <_free_r+0x22>
 8007682:	bd38      	pop	{r3, r4, r5, pc}
 8007684:	20000418 	.word	0x20000418

08007688 <sbrk_aligned>:
 8007688:	b570      	push	{r4, r5, r6, lr}
 800768a:	4e0e      	ldr	r6, [pc, #56]	; (80076c4 <sbrk_aligned+0x3c>)
 800768c:	460c      	mov	r4, r1
 800768e:	6831      	ldr	r1, [r6, #0]
 8007690:	4605      	mov	r5, r0
 8007692:	b911      	cbnz	r1, 800769a <sbrk_aligned+0x12>
 8007694:	f000 fcec 	bl	8008070 <_sbrk_r>
 8007698:	6030      	str	r0, [r6, #0]
 800769a:	4621      	mov	r1, r4
 800769c:	4628      	mov	r0, r5
 800769e:	f000 fce7 	bl	8008070 <_sbrk_r>
 80076a2:	1c43      	adds	r3, r0, #1
 80076a4:	d00a      	beq.n	80076bc <sbrk_aligned+0x34>
 80076a6:	1cc4      	adds	r4, r0, #3
 80076a8:	f024 0403 	bic.w	r4, r4, #3
 80076ac:	42a0      	cmp	r0, r4
 80076ae:	d007      	beq.n	80076c0 <sbrk_aligned+0x38>
 80076b0:	1a21      	subs	r1, r4, r0
 80076b2:	4628      	mov	r0, r5
 80076b4:	f000 fcdc 	bl	8008070 <_sbrk_r>
 80076b8:	3001      	adds	r0, #1
 80076ba:	d101      	bne.n	80076c0 <sbrk_aligned+0x38>
 80076bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80076c0:	4620      	mov	r0, r4
 80076c2:	bd70      	pop	{r4, r5, r6, pc}
 80076c4:	2000041c 	.word	0x2000041c

080076c8 <_malloc_r>:
 80076c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076cc:	1ccd      	adds	r5, r1, #3
 80076ce:	f025 0503 	bic.w	r5, r5, #3
 80076d2:	3508      	adds	r5, #8
 80076d4:	2d0c      	cmp	r5, #12
 80076d6:	bf38      	it	cc
 80076d8:	250c      	movcc	r5, #12
 80076da:	2d00      	cmp	r5, #0
 80076dc:	4607      	mov	r7, r0
 80076de:	db01      	blt.n	80076e4 <_malloc_r+0x1c>
 80076e0:	42a9      	cmp	r1, r5
 80076e2:	d905      	bls.n	80076f0 <_malloc_r+0x28>
 80076e4:	230c      	movs	r3, #12
 80076e6:	2600      	movs	r6, #0
 80076e8:	603b      	str	r3, [r7, #0]
 80076ea:	4630      	mov	r0, r6
 80076ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076f0:	4e2e      	ldr	r6, [pc, #184]	; (80077ac <_malloc_r+0xe4>)
 80076f2:	f001 fb79 	bl	8008de8 <__malloc_lock>
 80076f6:	6833      	ldr	r3, [r6, #0]
 80076f8:	461c      	mov	r4, r3
 80076fa:	bb34      	cbnz	r4, 800774a <_malloc_r+0x82>
 80076fc:	4629      	mov	r1, r5
 80076fe:	4638      	mov	r0, r7
 8007700:	f7ff ffc2 	bl	8007688 <sbrk_aligned>
 8007704:	1c43      	adds	r3, r0, #1
 8007706:	4604      	mov	r4, r0
 8007708:	d14d      	bne.n	80077a6 <_malloc_r+0xde>
 800770a:	6834      	ldr	r4, [r6, #0]
 800770c:	4626      	mov	r6, r4
 800770e:	2e00      	cmp	r6, #0
 8007710:	d140      	bne.n	8007794 <_malloc_r+0xcc>
 8007712:	6823      	ldr	r3, [r4, #0]
 8007714:	4631      	mov	r1, r6
 8007716:	4638      	mov	r0, r7
 8007718:	eb04 0803 	add.w	r8, r4, r3
 800771c:	f000 fca8 	bl	8008070 <_sbrk_r>
 8007720:	4580      	cmp	r8, r0
 8007722:	d13a      	bne.n	800779a <_malloc_r+0xd2>
 8007724:	6821      	ldr	r1, [r4, #0]
 8007726:	3503      	adds	r5, #3
 8007728:	1a6d      	subs	r5, r5, r1
 800772a:	f025 0503 	bic.w	r5, r5, #3
 800772e:	3508      	adds	r5, #8
 8007730:	2d0c      	cmp	r5, #12
 8007732:	bf38      	it	cc
 8007734:	250c      	movcc	r5, #12
 8007736:	4638      	mov	r0, r7
 8007738:	4629      	mov	r1, r5
 800773a:	f7ff ffa5 	bl	8007688 <sbrk_aligned>
 800773e:	3001      	adds	r0, #1
 8007740:	d02b      	beq.n	800779a <_malloc_r+0xd2>
 8007742:	6823      	ldr	r3, [r4, #0]
 8007744:	442b      	add	r3, r5
 8007746:	6023      	str	r3, [r4, #0]
 8007748:	e00e      	b.n	8007768 <_malloc_r+0xa0>
 800774a:	6822      	ldr	r2, [r4, #0]
 800774c:	1b52      	subs	r2, r2, r5
 800774e:	d41e      	bmi.n	800778e <_malloc_r+0xc6>
 8007750:	2a0b      	cmp	r2, #11
 8007752:	d916      	bls.n	8007782 <_malloc_r+0xba>
 8007754:	1961      	adds	r1, r4, r5
 8007756:	42a3      	cmp	r3, r4
 8007758:	6025      	str	r5, [r4, #0]
 800775a:	bf18      	it	ne
 800775c:	6059      	strne	r1, [r3, #4]
 800775e:	6863      	ldr	r3, [r4, #4]
 8007760:	bf08      	it	eq
 8007762:	6031      	streq	r1, [r6, #0]
 8007764:	5162      	str	r2, [r4, r5]
 8007766:	604b      	str	r3, [r1, #4]
 8007768:	4638      	mov	r0, r7
 800776a:	f104 060b 	add.w	r6, r4, #11
 800776e:	f001 fb41 	bl	8008df4 <__malloc_unlock>
 8007772:	f026 0607 	bic.w	r6, r6, #7
 8007776:	1d23      	adds	r3, r4, #4
 8007778:	1af2      	subs	r2, r6, r3
 800777a:	d0b6      	beq.n	80076ea <_malloc_r+0x22>
 800777c:	1b9b      	subs	r3, r3, r6
 800777e:	50a3      	str	r3, [r4, r2]
 8007780:	e7b3      	b.n	80076ea <_malloc_r+0x22>
 8007782:	6862      	ldr	r2, [r4, #4]
 8007784:	42a3      	cmp	r3, r4
 8007786:	bf0c      	ite	eq
 8007788:	6032      	streq	r2, [r6, #0]
 800778a:	605a      	strne	r2, [r3, #4]
 800778c:	e7ec      	b.n	8007768 <_malloc_r+0xa0>
 800778e:	4623      	mov	r3, r4
 8007790:	6864      	ldr	r4, [r4, #4]
 8007792:	e7b2      	b.n	80076fa <_malloc_r+0x32>
 8007794:	4634      	mov	r4, r6
 8007796:	6876      	ldr	r6, [r6, #4]
 8007798:	e7b9      	b.n	800770e <_malloc_r+0x46>
 800779a:	230c      	movs	r3, #12
 800779c:	4638      	mov	r0, r7
 800779e:	603b      	str	r3, [r7, #0]
 80077a0:	f001 fb28 	bl	8008df4 <__malloc_unlock>
 80077a4:	e7a1      	b.n	80076ea <_malloc_r+0x22>
 80077a6:	6025      	str	r5, [r4, #0]
 80077a8:	e7de      	b.n	8007768 <_malloc_r+0xa0>
 80077aa:	bf00      	nop
 80077ac:	20000418 	.word	0x20000418

080077b0 <__cvt>:
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077b6:	461f      	mov	r7, r3
 80077b8:	bfbb      	ittet	lt
 80077ba:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80077be:	461f      	movlt	r7, r3
 80077c0:	2300      	movge	r3, #0
 80077c2:	232d      	movlt	r3, #45	; 0x2d
 80077c4:	b088      	sub	sp, #32
 80077c6:	4614      	mov	r4, r2
 80077c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80077ca:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80077cc:	7013      	strb	r3, [r2, #0]
 80077ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80077d0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80077d4:	f023 0820 	bic.w	r8, r3, #32
 80077d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80077dc:	d005      	beq.n	80077ea <__cvt+0x3a>
 80077de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80077e2:	d100      	bne.n	80077e6 <__cvt+0x36>
 80077e4:	3501      	adds	r5, #1
 80077e6:	2302      	movs	r3, #2
 80077e8:	e000      	b.n	80077ec <__cvt+0x3c>
 80077ea:	2303      	movs	r3, #3
 80077ec:	aa07      	add	r2, sp, #28
 80077ee:	9204      	str	r2, [sp, #16]
 80077f0:	aa06      	add	r2, sp, #24
 80077f2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80077f6:	e9cd 3500 	strd	r3, r5, [sp]
 80077fa:	4622      	mov	r2, r4
 80077fc:	463b      	mov	r3, r7
 80077fe:	f000 fcf3 	bl	80081e8 <_dtoa_r>
 8007802:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007806:	4606      	mov	r6, r0
 8007808:	d102      	bne.n	8007810 <__cvt+0x60>
 800780a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800780c:	07db      	lsls	r3, r3, #31
 800780e:	d522      	bpl.n	8007856 <__cvt+0xa6>
 8007810:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007814:	eb06 0905 	add.w	r9, r6, r5
 8007818:	d110      	bne.n	800783c <__cvt+0x8c>
 800781a:	7833      	ldrb	r3, [r6, #0]
 800781c:	2b30      	cmp	r3, #48	; 0x30
 800781e:	d10a      	bne.n	8007836 <__cvt+0x86>
 8007820:	2200      	movs	r2, #0
 8007822:	2300      	movs	r3, #0
 8007824:	4620      	mov	r0, r4
 8007826:	4639      	mov	r1, r7
 8007828:	f7f9 f8be 	bl	80009a8 <__aeabi_dcmpeq>
 800782c:	b918      	cbnz	r0, 8007836 <__cvt+0x86>
 800782e:	f1c5 0501 	rsb	r5, r5, #1
 8007832:	f8ca 5000 	str.w	r5, [sl]
 8007836:	f8da 3000 	ldr.w	r3, [sl]
 800783a:	4499      	add	r9, r3
 800783c:	2200      	movs	r2, #0
 800783e:	2300      	movs	r3, #0
 8007840:	4620      	mov	r0, r4
 8007842:	4639      	mov	r1, r7
 8007844:	f7f9 f8b0 	bl	80009a8 <__aeabi_dcmpeq>
 8007848:	b108      	cbz	r0, 800784e <__cvt+0x9e>
 800784a:	f8cd 901c 	str.w	r9, [sp, #28]
 800784e:	2230      	movs	r2, #48	; 0x30
 8007850:	9b07      	ldr	r3, [sp, #28]
 8007852:	454b      	cmp	r3, r9
 8007854:	d307      	bcc.n	8007866 <__cvt+0xb6>
 8007856:	4630      	mov	r0, r6
 8007858:	9b07      	ldr	r3, [sp, #28]
 800785a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800785c:	1b9b      	subs	r3, r3, r6
 800785e:	6013      	str	r3, [r2, #0]
 8007860:	b008      	add	sp, #32
 8007862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007866:	1c59      	adds	r1, r3, #1
 8007868:	9107      	str	r1, [sp, #28]
 800786a:	701a      	strb	r2, [r3, #0]
 800786c:	e7f0      	b.n	8007850 <__cvt+0xa0>

0800786e <__exponent>:
 800786e:	4603      	mov	r3, r0
 8007870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007872:	2900      	cmp	r1, #0
 8007874:	f803 2b02 	strb.w	r2, [r3], #2
 8007878:	bfb6      	itet	lt
 800787a:	222d      	movlt	r2, #45	; 0x2d
 800787c:	222b      	movge	r2, #43	; 0x2b
 800787e:	4249      	neglt	r1, r1
 8007880:	2909      	cmp	r1, #9
 8007882:	7042      	strb	r2, [r0, #1]
 8007884:	dd2b      	ble.n	80078de <__exponent+0x70>
 8007886:	f10d 0407 	add.w	r4, sp, #7
 800788a:	46a4      	mov	ip, r4
 800788c:	270a      	movs	r7, #10
 800788e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007892:	460a      	mov	r2, r1
 8007894:	46a6      	mov	lr, r4
 8007896:	fb07 1516 	mls	r5, r7, r6, r1
 800789a:	2a63      	cmp	r2, #99	; 0x63
 800789c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80078a0:	4631      	mov	r1, r6
 80078a2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80078a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80078aa:	dcf0      	bgt.n	800788e <__exponent+0x20>
 80078ac:	3130      	adds	r1, #48	; 0x30
 80078ae:	f1ae 0502 	sub.w	r5, lr, #2
 80078b2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80078b6:	4629      	mov	r1, r5
 80078b8:	1c44      	adds	r4, r0, #1
 80078ba:	4561      	cmp	r1, ip
 80078bc:	d30a      	bcc.n	80078d4 <__exponent+0x66>
 80078be:	f10d 0209 	add.w	r2, sp, #9
 80078c2:	eba2 020e 	sub.w	r2, r2, lr
 80078c6:	4565      	cmp	r5, ip
 80078c8:	bf88      	it	hi
 80078ca:	2200      	movhi	r2, #0
 80078cc:	4413      	add	r3, r2
 80078ce:	1a18      	subs	r0, r3, r0
 80078d0:	b003      	add	sp, #12
 80078d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078d8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80078dc:	e7ed      	b.n	80078ba <__exponent+0x4c>
 80078de:	2330      	movs	r3, #48	; 0x30
 80078e0:	3130      	adds	r1, #48	; 0x30
 80078e2:	7083      	strb	r3, [r0, #2]
 80078e4:	70c1      	strb	r1, [r0, #3]
 80078e6:	1d03      	adds	r3, r0, #4
 80078e8:	e7f1      	b.n	80078ce <__exponent+0x60>
	...

080078ec <_printf_float>:
 80078ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f0:	b091      	sub	sp, #68	; 0x44
 80078f2:	460c      	mov	r4, r1
 80078f4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80078f8:	4616      	mov	r6, r2
 80078fa:	461f      	mov	r7, r3
 80078fc:	4605      	mov	r5, r0
 80078fe:	f001 fa61 	bl	8008dc4 <_localeconv_r>
 8007902:	6803      	ldr	r3, [r0, #0]
 8007904:	4618      	mov	r0, r3
 8007906:	9309      	str	r3, [sp, #36]	; 0x24
 8007908:	f7f8 fc22 	bl	8000150 <strlen>
 800790c:	2300      	movs	r3, #0
 800790e:	930e      	str	r3, [sp, #56]	; 0x38
 8007910:	f8d8 3000 	ldr.w	r3, [r8]
 8007914:	900a      	str	r0, [sp, #40]	; 0x28
 8007916:	3307      	adds	r3, #7
 8007918:	f023 0307 	bic.w	r3, r3, #7
 800791c:	f103 0208 	add.w	r2, r3, #8
 8007920:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007924:	f8d4 b000 	ldr.w	fp, [r4]
 8007928:	f8c8 2000 	str.w	r2, [r8]
 800792c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007930:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007934:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007938:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800793c:	930b      	str	r3, [sp, #44]	; 0x2c
 800793e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007942:	4640      	mov	r0, r8
 8007944:	4b9c      	ldr	r3, [pc, #624]	; (8007bb8 <_printf_float+0x2cc>)
 8007946:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007948:	f7f9 f860 	bl	8000a0c <__aeabi_dcmpun>
 800794c:	bb70      	cbnz	r0, 80079ac <_printf_float+0xc0>
 800794e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007952:	4640      	mov	r0, r8
 8007954:	4b98      	ldr	r3, [pc, #608]	; (8007bb8 <_printf_float+0x2cc>)
 8007956:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007958:	f7f9 f83a 	bl	80009d0 <__aeabi_dcmple>
 800795c:	bb30      	cbnz	r0, 80079ac <_printf_float+0xc0>
 800795e:	2200      	movs	r2, #0
 8007960:	2300      	movs	r3, #0
 8007962:	4640      	mov	r0, r8
 8007964:	4651      	mov	r1, sl
 8007966:	f7f9 f829 	bl	80009bc <__aeabi_dcmplt>
 800796a:	b110      	cbz	r0, 8007972 <_printf_float+0x86>
 800796c:	232d      	movs	r3, #45	; 0x2d
 800796e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007972:	4b92      	ldr	r3, [pc, #584]	; (8007bbc <_printf_float+0x2d0>)
 8007974:	4892      	ldr	r0, [pc, #584]	; (8007bc0 <_printf_float+0x2d4>)
 8007976:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800797a:	bf94      	ite	ls
 800797c:	4698      	movls	r8, r3
 800797e:	4680      	movhi	r8, r0
 8007980:	2303      	movs	r3, #3
 8007982:	f04f 0a00 	mov.w	sl, #0
 8007986:	6123      	str	r3, [r4, #16]
 8007988:	f02b 0304 	bic.w	r3, fp, #4
 800798c:	6023      	str	r3, [r4, #0]
 800798e:	4633      	mov	r3, r6
 8007990:	4621      	mov	r1, r4
 8007992:	4628      	mov	r0, r5
 8007994:	9700      	str	r7, [sp, #0]
 8007996:	aa0f      	add	r2, sp, #60	; 0x3c
 8007998:	f000 f9d4 	bl	8007d44 <_printf_common>
 800799c:	3001      	adds	r0, #1
 800799e:	f040 8090 	bne.w	8007ac2 <_printf_float+0x1d6>
 80079a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079a6:	b011      	add	sp, #68	; 0x44
 80079a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ac:	4642      	mov	r2, r8
 80079ae:	4653      	mov	r3, sl
 80079b0:	4640      	mov	r0, r8
 80079b2:	4651      	mov	r1, sl
 80079b4:	f7f9 f82a 	bl	8000a0c <__aeabi_dcmpun>
 80079b8:	b148      	cbz	r0, 80079ce <_printf_float+0xe2>
 80079ba:	f1ba 0f00 	cmp.w	sl, #0
 80079be:	bfb8      	it	lt
 80079c0:	232d      	movlt	r3, #45	; 0x2d
 80079c2:	4880      	ldr	r0, [pc, #512]	; (8007bc4 <_printf_float+0x2d8>)
 80079c4:	bfb8      	it	lt
 80079c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80079ca:	4b7f      	ldr	r3, [pc, #508]	; (8007bc8 <_printf_float+0x2dc>)
 80079cc:	e7d3      	b.n	8007976 <_printf_float+0x8a>
 80079ce:	6863      	ldr	r3, [r4, #4]
 80079d0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80079d4:	1c5a      	adds	r2, r3, #1
 80079d6:	d142      	bne.n	8007a5e <_printf_float+0x172>
 80079d8:	2306      	movs	r3, #6
 80079da:	6063      	str	r3, [r4, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	9206      	str	r2, [sp, #24]
 80079e0:	aa0e      	add	r2, sp, #56	; 0x38
 80079e2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80079e6:	aa0d      	add	r2, sp, #52	; 0x34
 80079e8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80079ec:	9203      	str	r2, [sp, #12]
 80079ee:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80079f2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80079f6:	6023      	str	r3, [r4, #0]
 80079f8:	6863      	ldr	r3, [r4, #4]
 80079fa:	4642      	mov	r2, r8
 80079fc:	9300      	str	r3, [sp, #0]
 80079fe:	4628      	mov	r0, r5
 8007a00:	4653      	mov	r3, sl
 8007a02:	910b      	str	r1, [sp, #44]	; 0x2c
 8007a04:	f7ff fed4 	bl	80077b0 <__cvt>
 8007a08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a0a:	4680      	mov	r8, r0
 8007a0c:	2947      	cmp	r1, #71	; 0x47
 8007a0e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007a10:	d108      	bne.n	8007a24 <_printf_float+0x138>
 8007a12:	1cc8      	adds	r0, r1, #3
 8007a14:	db02      	blt.n	8007a1c <_printf_float+0x130>
 8007a16:	6863      	ldr	r3, [r4, #4]
 8007a18:	4299      	cmp	r1, r3
 8007a1a:	dd40      	ble.n	8007a9e <_printf_float+0x1b2>
 8007a1c:	f1a9 0902 	sub.w	r9, r9, #2
 8007a20:	fa5f f989 	uxtb.w	r9, r9
 8007a24:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007a28:	d81f      	bhi.n	8007a6a <_printf_float+0x17e>
 8007a2a:	464a      	mov	r2, r9
 8007a2c:	3901      	subs	r1, #1
 8007a2e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007a32:	910d      	str	r1, [sp, #52]	; 0x34
 8007a34:	f7ff ff1b 	bl	800786e <__exponent>
 8007a38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a3a:	4682      	mov	sl, r0
 8007a3c:	1813      	adds	r3, r2, r0
 8007a3e:	2a01      	cmp	r2, #1
 8007a40:	6123      	str	r3, [r4, #16]
 8007a42:	dc02      	bgt.n	8007a4a <_printf_float+0x15e>
 8007a44:	6822      	ldr	r2, [r4, #0]
 8007a46:	07d2      	lsls	r2, r2, #31
 8007a48:	d501      	bpl.n	8007a4e <_printf_float+0x162>
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	6123      	str	r3, [r4, #16]
 8007a4e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d09b      	beq.n	800798e <_printf_float+0xa2>
 8007a56:	232d      	movs	r3, #45	; 0x2d
 8007a58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a5c:	e797      	b.n	800798e <_printf_float+0xa2>
 8007a5e:	2947      	cmp	r1, #71	; 0x47
 8007a60:	d1bc      	bne.n	80079dc <_printf_float+0xf0>
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1ba      	bne.n	80079dc <_printf_float+0xf0>
 8007a66:	2301      	movs	r3, #1
 8007a68:	e7b7      	b.n	80079da <_printf_float+0xee>
 8007a6a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007a6e:	d118      	bne.n	8007aa2 <_printf_float+0x1b6>
 8007a70:	2900      	cmp	r1, #0
 8007a72:	6863      	ldr	r3, [r4, #4]
 8007a74:	dd0b      	ble.n	8007a8e <_printf_float+0x1a2>
 8007a76:	6121      	str	r1, [r4, #16]
 8007a78:	b913      	cbnz	r3, 8007a80 <_printf_float+0x194>
 8007a7a:	6822      	ldr	r2, [r4, #0]
 8007a7c:	07d0      	lsls	r0, r2, #31
 8007a7e:	d502      	bpl.n	8007a86 <_printf_float+0x19a>
 8007a80:	3301      	adds	r3, #1
 8007a82:	440b      	add	r3, r1
 8007a84:	6123      	str	r3, [r4, #16]
 8007a86:	f04f 0a00 	mov.w	sl, #0
 8007a8a:	65a1      	str	r1, [r4, #88]	; 0x58
 8007a8c:	e7df      	b.n	8007a4e <_printf_float+0x162>
 8007a8e:	b913      	cbnz	r3, 8007a96 <_printf_float+0x1aa>
 8007a90:	6822      	ldr	r2, [r4, #0]
 8007a92:	07d2      	lsls	r2, r2, #31
 8007a94:	d501      	bpl.n	8007a9a <_printf_float+0x1ae>
 8007a96:	3302      	adds	r3, #2
 8007a98:	e7f4      	b.n	8007a84 <_printf_float+0x198>
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e7f2      	b.n	8007a84 <_printf_float+0x198>
 8007a9e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007aa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007aa4:	4299      	cmp	r1, r3
 8007aa6:	db05      	blt.n	8007ab4 <_printf_float+0x1c8>
 8007aa8:	6823      	ldr	r3, [r4, #0]
 8007aaa:	6121      	str	r1, [r4, #16]
 8007aac:	07d8      	lsls	r0, r3, #31
 8007aae:	d5ea      	bpl.n	8007a86 <_printf_float+0x19a>
 8007ab0:	1c4b      	adds	r3, r1, #1
 8007ab2:	e7e7      	b.n	8007a84 <_printf_float+0x198>
 8007ab4:	2900      	cmp	r1, #0
 8007ab6:	bfcc      	ite	gt
 8007ab8:	2201      	movgt	r2, #1
 8007aba:	f1c1 0202 	rsble	r2, r1, #2
 8007abe:	4413      	add	r3, r2
 8007ac0:	e7e0      	b.n	8007a84 <_printf_float+0x198>
 8007ac2:	6823      	ldr	r3, [r4, #0]
 8007ac4:	055a      	lsls	r2, r3, #21
 8007ac6:	d407      	bmi.n	8007ad8 <_printf_float+0x1ec>
 8007ac8:	6923      	ldr	r3, [r4, #16]
 8007aca:	4642      	mov	r2, r8
 8007acc:	4631      	mov	r1, r6
 8007ace:	4628      	mov	r0, r5
 8007ad0:	47b8      	blx	r7
 8007ad2:	3001      	adds	r0, #1
 8007ad4:	d12b      	bne.n	8007b2e <_printf_float+0x242>
 8007ad6:	e764      	b.n	80079a2 <_printf_float+0xb6>
 8007ad8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007adc:	f240 80dd 	bls.w	8007c9a <_printf_float+0x3ae>
 8007ae0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	f7f8 ff5e 	bl	80009a8 <__aeabi_dcmpeq>
 8007aec:	2800      	cmp	r0, #0
 8007aee:	d033      	beq.n	8007b58 <_printf_float+0x26c>
 8007af0:	2301      	movs	r3, #1
 8007af2:	4631      	mov	r1, r6
 8007af4:	4628      	mov	r0, r5
 8007af6:	4a35      	ldr	r2, [pc, #212]	; (8007bcc <_printf_float+0x2e0>)
 8007af8:	47b8      	blx	r7
 8007afa:	3001      	adds	r0, #1
 8007afc:	f43f af51 	beq.w	80079a2 <_printf_float+0xb6>
 8007b00:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007b04:	429a      	cmp	r2, r3
 8007b06:	db02      	blt.n	8007b0e <_printf_float+0x222>
 8007b08:	6823      	ldr	r3, [r4, #0]
 8007b0a:	07d8      	lsls	r0, r3, #31
 8007b0c:	d50f      	bpl.n	8007b2e <_printf_float+0x242>
 8007b0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b12:	4631      	mov	r1, r6
 8007b14:	4628      	mov	r0, r5
 8007b16:	47b8      	blx	r7
 8007b18:	3001      	adds	r0, #1
 8007b1a:	f43f af42 	beq.w	80079a2 <_printf_float+0xb6>
 8007b1e:	f04f 0800 	mov.w	r8, #0
 8007b22:	f104 091a 	add.w	r9, r4, #26
 8007b26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	4543      	cmp	r3, r8
 8007b2c:	dc09      	bgt.n	8007b42 <_printf_float+0x256>
 8007b2e:	6823      	ldr	r3, [r4, #0]
 8007b30:	079b      	lsls	r3, r3, #30
 8007b32:	f100 8102 	bmi.w	8007d3a <_printf_float+0x44e>
 8007b36:	68e0      	ldr	r0, [r4, #12]
 8007b38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b3a:	4298      	cmp	r0, r3
 8007b3c:	bfb8      	it	lt
 8007b3e:	4618      	movlt	r0, r3
 8007b40:	e731      	b.n	80079a6 <_printf_float+0xba>
 8007b42:	2301      	movs	r3, #1
 8007b44:	464a      	mov	r2, r9
 8007b46:	4631      	mov	r1, r6
 8007b48:	4628      	mov	r0, r5
 8007b4a:	47b8      	blx	r7
 8007b4c:	3001      	adds	r0, #1
 8007b4e:	f43f af28 	beq.w	80079a2 <_printf_float+0xb6>
 8007b52:	f108 0801 	add.w	r8, r8, #1
 8007b56:	e7e6      	b.n	8007b26 <_printf_float+0x23a>
 8007b58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	dc38      	bgt.n	8007bd0 <_printf_float+0x2e4>
 8007b5e:	2301      	movs	r3, #1
 8007b60:	4631      	mov	r1, r6
 8007b62:	4628      	mov	r0, r5
 8007b64:	4a19      	ldr	r2, [pc, #100]	; (8007bcc <_printf_float+0x2e0>)
 8007b66:	47b8      	blx	r7
 8007b68:	3001      	adds	r0, #1
 8007b6a:	f43f af1a 	beq.w	80079a2 <_printf_float+0xb6>
 8007b6e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007b72:	4313      	orrs	r3, r2
 8007b74:	d102      	bne.n	8007b7c <_printf_float+0x290>
 8007b76:	6823      	ldr	r3, [r4, #0]
 8007b78:	07d9      	lsls	r1, r3, #31
 8007b7a:	d5d8      	bpl.n	8007b2e <_printf_float+0x242>
 8007b7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b80:	4631      	mov	r1, r6
 8007b82:	4628      	mov	r0, r5
 8007b84:	47b8      	blx	r7
 8007b86:	3001      	adds	r0, #1
 8007b88:	f43f af0b 	beq.w	80079a2 <_printf_float+0xb6>
 8007b8c:	f04f 0900 	mov.w	r9, #0
 8007b90:	f104 0a1a 	add.w	sl, r4, #26
 8007b94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b96:	425b      	negs	r3, r3
 8007b98:	454b      	cmp	r3, r9
 8007b9a:	dc01      	bgt.n	8007ba0 <_printf_float+0x2b4>
 8007b9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b9e:	e794      	b.n	8007aca <_printf_float+0x1de>
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	4652      	mov	r2, sl
 8007ba4:	4631      	mov	r1, r6
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	47b8      	blx	r7
 8007baa:	3001      	adds	r0, #1
 8007bac:	f43f aef9 	beq.w	80079a2 <_printf_float+0xb6>
 8007bb0:	f109 0901 	add.w	r9, r9, #1
 8007bb4:	e7ee      	b.n	8007b94 <_printf_float+0x2a8>
 8007bb6:	bf00      	nop
 8007bb8:	7fefffff 	.word	0x7fefffff
 8007bbc:	0800b9e8 	.word	0x0800b9e8
 8007bc0:	0800b9ec 	.word	0x0800b9ec
 8007bc4:	0800b9f4 	.word	0x0800b9f4
 8007bc8:	0800b9f0 	.word	0x0800b9f0
 8007bcc:	0800b9f8 	.word	0x0800b9f8
 8007bd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	bfa8      	it	ge
 8007bd8:	461a      	movge	r2, r3
 8007bda:	2a00      	cmp	r2, #0
 8007bdc:	4691      	mov	r9, r2
 8007bde:	dc37      	bgt.n	8007c50 <_printf_float+0x364>
 8007be0:	f04f 0b00 	mov.w	fp, #0
 8007be4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007be8:	f104 021a 	add.w	r2, r4, #26
 8007bec:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007bf0:	ebaa 0309 	sub.w	r3, sl, r9
 8007bf4:	455b      	cmp	r3, fp
 8007bf6:	dc33      	bgt.n	8007c60 <_printf_float+0x374>
 8007bf8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	db3b      	blt.n	8007c78 <_printf_float+0x38c>
 8007c00:	6823      	ldr	r3, [r4, #0]
 8007c02:	07da      	lsls	r2, r3, #31
 8007c04:	d438      	bmi.n	8007c78 <_printf_float+0x38c>
 8007c06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c08:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007c0a:	eba3 020a 	sub.w	r2, r3, sl
 8007c0e:	eba3 0901 	sub.w	r9, r3, r1
 8007c12:	4591      	cmp	r9, r2
 8007c14:	bfa8      	it	ge
 8007c16:	4691      	movge	r9, r2
 8007c18:	f1b9 0f00 	cmp.w	r9, #0
 8007c1c:	dc34      	bgt.n	8007c88 <_printf_float+0x39c>
 8007c1e:	f04f 0800 	mov.w	r8, #0
 8007c22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c26:	f104 0a1a 	add.w	sl, r4, #26
 8007c2a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007c2e:	1a9b      	subs	r3, r3, r2
 8007c30:	eba3 0309 	sub.w	r3, r3, r9
 8007c34:	4543      	cmp	r3, r8
 8007c36:	f77f af7a 	ble.w	8007b2e <_printf_float+0x242>
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	4652      	mov	r2, sl
 8007c3e:	4631      	mov	r1, r6
 8007c40:	4628      	mov	r0, r5
 8007c42:	47b8      	blx	r7
 8007c44:	3001      	adds	r0, #1
 8007c46:	f43f aeac 	beq.w	80079a2 <_printf_float+0xb6>
 8007c4a:	f108 0801 	add.w	r8, r8, #1
 8007c4e:	e7ec      	b.n	8007c2a <_printf_float+0x33e>
 8007c50:	4613      	mov	r3, r2
 8007c52:	4631      	mov	r1, r6
 8007c54:	4642      	mov	r2, r8
 8007c56:	4628      	mov	r0, r5
 8007c58:	47b8      	blx	r7
 8007c5a:	3001      	adds	r0, #1
 8007c5c:	d1c0      	bne.n	8007be0 <_printf_float+0x2f4>
 8007c5e:	e6a0      	b.n	80079a2 <_printf_float+0xb6>
 8007c60:	2301      	movs	r3, #1
 8007c62:	4631      	mov	r1, r6
 8007c64:	4628      	mov	r0, r5
 8007c66:	920b      	str	r2, [sp, #44]	; 0x2c
 8007c68:	47b8      	blx	r7
 8007c6a:	3001      	adds	r0, #1
 8007c6c:	f43f ae99 	beq.w	80079a2 <_printf_float+0xb6>
 8007c70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c72:	f10b 0b01 	add.w	fp, fp, #1
 8007c76:	e7b9      	b.n	8007bec <_printf_float+0x300>
 8007c78:	4631      	mov	r1, r6
 8007c7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c7e:	4628      	mov	r0, r5
 8007c80:	47b8      	blx	r7
 8007c82:	3001      	adds	r0, #1
 8007c84:	d1bf      	bne.n	8007c06 <_printf_float+0x31a>
 8007c86:	e68c      	b.n	80079a2 <_printf_float+0xb6>
 8007c88:	464b      	mov	r3, r9
 8007c8a:	4631      	mov	r1, r6
 8007c8c:	4628      	mov	r0, r5
 8007c8e:	eb08 020a 	add.w	r2, r8, sl
 8007c92:	47b8      	blx	r7
 8007c94:	3001      	adds	r0, #1
 8007c96:	d1c2      	bne.n	8007c1e <_printf_float+0x332>
 8007c98:	e683      	b.n	80079a2 <_printf_float+0xb6>
 8007c9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c9c:	2a01      	cmp	r2, #1
 8007c9e:	dc01      	bgt.n	8007ca4 <_printf_float+0x3b8>
 8007ca0:	07db      	lsls	r3, r3, #31
 8007ca2:	d537      	bpl.n	8007d14 <_printf_float+0x428>
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	4642      	mov	r2, r8
 8007ca8:	4631      	mov	r1, r6
 8007caa:	4628      	mov	r0, r5
 8007cac:	47b8      	blx	r7
 8007cae:	3001      	adds	r0, #1
 8007cb0:	f43f ae77 	beq.w	80079a2 <_printf_float+0xb6>
 8007cb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cb8:	4631      	mov	r1, r6
 8007cba:	4628      	mov	r0, r5
 8007cbc:	47b8      	blx	r7
 8007cbe:	3001      	adds	r0, #1
 8007cc0:	f43f ae6f 	beq.w	80079a2 <_printf_float+0xb6>
 8007cc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007cc8:	2200      	movs	r2, #0
 8007cca:	2300      	movs	r3, #0
 8007ccc:	f7f8 fe6c 	bl	80009a8 <__aeabi_dcmpeq>
 8007cd0:	b9d8      	cbnz	r0, 8007d0a <_printf_float+0x41e>
 8007cd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cd4:	f108 0201 	add.w	r2, r8, #1
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	4631      	mov	r1, r6
 8007cdc:	4628      	mov	r0, r5
 8007cde:	47b8      	blx	r7
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	d10e      	bne.n	8007d02 <_printf_float+0x416>
 8007ce4:	e65d      	b.n	80079a2 <_printf_float+0xb6>
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	464a      	mov	r2, r9
 8007cea:	4631      	mov	r1, r6
 8007cec:	4628      	mov	r0, r5
 8007cee:	47b8      	blx	r7
 8007cf0:	3001      	adds	r0, #1
 8007cf2:	f43f ae56 	beq.w	80079a2 <_printf_float+0xb6>
 8007cf6:	f108 0801 	add.w	r8, r8, #1
 8007cfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	4543      	cmp	r3, r8
 8007d00:	dcf1      	bgt.n	8007ce6 <_printf_float+0x3fa>
 8007d02:	4653      	mov	r3, sl
 8007d04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007d08:	e6e0      	b.n	8007acc <_printf_float+0x1e0>
 8007d0a:	f04f 0800 	mov.w	r8, #0
 8007d0e:	f104 091a 	add.w	r9, r4, #26
 8007d12:	e7f2      	b.n	8007cfa <_printf_float+0x40e>
 8007d14:	2301      	movs	r3, #1
 8007d16:	4642      	mov	r2, r8
 8007d18:	e7df      	b.n	8007cda <_printf_float+0x3ee>
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	464a      	mov	r2, r9
 8007d1e:	4631      	mov	r1, r6
 8007d20:	4628      	mov	r0, r5
 8007d22:	47b8      	blx	r7
 8007d24:	3001      	adds	r0, #1
 8007d26:	f43f ae3c 	beq.w	80079a2 <_printf_float+0xb6>
 8007d2a:	f108 0801 	add.w	r8, r8, #1
 8007d2e:	68e3      	ldr	r3, [r4, #12]
 8007d30:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007d32:	1a5b      	subs	r3, r3, r1
 8007d34:	4543      	cmp	r3, r8
 8007d36:	dcf0      	bgt.n	8007d1a <_printf_float+0x42e>
 8007d38:	e6fd      	b.n	8007b36 <_printf_float+0x24a>
 8007d3a:	f04f 0800 	mov.w	r8, #0
 8007d3e:	f104 0919 	add.w	r9, r4, #25
 8007d42:	e7f4      	b.n	8007d2e <_printf_float+0x442>

08007d44 <_printf_common>:
 8007d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d48:	4616      	mov	r6, r2
 8007d4a:	4699      	mov	r9, r3
 8007d4c:	688a      	ldr	r2, [r1, #8]
 8007d4e:	690b      	ldr	r3, [r1, #16]
 8007d50:	4607      	mov	r7, r0
 8007d52:	4293      	cmp	r3, r2
 8007d54:	bfb8      	it	lt
 8007d56:	4613      	movlt	r3, r2
 8007d58:	6033      	str	r3, [r6, #0]
 8007d5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d5e:	460c      	mov	r4, r1
 8007d60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d64:	b10a      	cbz	r2, 8007d6a <_printf_common+0x26>
 8007d66:	3301      	adds	r3, #1
 8007d68:	6033      	str	r3, [r6, #0]
 8007d6a:	6823      	ldr	r3, [r4, #0]
 8007d6c:	0699      	lsls	r1, r3, #26
 8007d6e:	bf42      	ittt	mi
 8007d70:	6833      	ldrmi	r3, [r6, #0]
 8007d72:	3302      	addmi	r3, #2
 8007d74:	6033      	strmi	r3, [r6, #0]
 8007d76:	6825      	ldr	r5, [r4, #0]
 8007d78:	f015 0506 	ands.w	r5, r5, #6
 8007d7c:	d106      	bne.n	8007d8c <_printf_common+0x48>
 8007d7e:	f104 0a19 	add.w	sl, r4, #25
 8007d82:	68e3      	ldr	r3, [r4, #12]
 8007d84:	6832      	ldr	r2, [r6, #0]
 8007d86:	1a9b      	subs	r3, r3, r2
 8007d88:	42ab      	cmp	r3, r5
 8007d8a:	dc28      	bgt.n	8007dde <_printf_common+0x9a>
 8007d8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d90:	1e13      	subs	r3, r2, #0
 8007d92:	6822      	ldr	r2, [r4, #0]
 8007d94:	bf18      	it	ne
 8007d96:	2301      	movne	r3, #1
 8007d98:	0692      	lsls	r2, r2, #26
 8007d9a:	d42d      	bmi.n	8007df8 <_printf_common+0xb4>
 8007d9c:	4649      	mov	r1, r9
 8007d9e:	4638      	mov	r0, r7
 8007da0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007da4:	47c0      	blx	r8
 8007da6:	3001      	adds	r0, #1
 8007da8:	d020      	beq.n	8007dec <_printf_common+0xa8>
 8007daa:	6823      	ldr	r3, [r4, #0]
 8007dac:	68e5      	ldr	r5, [r4, #12]
 8007dae:	f003 0306 	and.w	r3, r3, #6
 8007db2:	2b04      	cmp	r3, #4
 8007db4:	bf18      	it	ne
 8007db6:	2500      	movne	r5, #0
 8007db8:	6832      	ldr	r2, [r6, #0]
 8007dba:	f04f 0600 	mov.w	r6, #0
 8007dbe:	68a3      	ldr	r3, [r4, #8]
 8007dc0:	bf08      	it	eq
 8007dc2:	1aad      	subeq	r5, r5, r2
 8007dc4:	6922      	ldr	r2, [r4, #16]
 8007dc6:	bf08      	it	eq
 8007dc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	bfc4      	itt	gt
 8007dd0:	1a9b      	subgt	r3, r3, r2
 8007dd2:	18ed      	addgt	r5, r5, r3
 8007dd4:	341a      	adds	r4, #26
 8007dd6:	42b5      	cmp	r5, r6
 8007dd8:	d11a      	bne.n	8007e10 <_printf_common+0xcc>
 8007dda:	2000      	movs	r0, #0
 8007ddc:	e008      	b.n	8007df0 <_printf_common+0xac>
 8007dde:	2301      	movs	r3, #1
 8007de0:	4652      	mov	r2, sl
 8007de2:	4649      	mov	r1, r9
 8007de4:	4638      	mov	r0, r7
 8007de6:	47c0      	blx	r8
 8007de8:	3001      	adds	r0, #1
 8007dea:	d103      	bne.n	8007df4 <_printf_common+0xb0>
 8007dec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007df4:	3501      	adds	r5, #1
 8007df6:	e7c4      	b.n	8007d82 <_printf_common+0x3e>
 8007df8:	2030      	movs	r0, #48	; 0x30
 8007dfa:	18e1      	adds	r1, r4, r3
 8007dfc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e00:	1c5a      	adds	r2, r3, #1
 8007e02:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e06:	4422      	add	r2, r4
 8007e08:	3302      	adds	r3, #2
 8007e0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e0e:	e7c5      	b.n	8007d9c <_printf_common+0x58>
 8007e10:	2301      	movs	r3, #1
 8007e12:	4622      	mov	r2, r4
 8007e14:	4649      	mov	r1, r9
 8007e16:	4638      	mov	r0, r7
 8007e18:	47c0      	blx	r8
 8007e1a:	3001      	adds	r0, #1
 8007e1c:	d0e6      	beq.n	8007dec <_printf_common+0xa8>
 8007e1e:	3601      	adds	r6, #1
 8007e20:	e7d9      	b.n	8007dd6 <_printf_common+0x92>
	...

08007e24 <_printf_i>:
 8007e24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e28:	7e0f      	ldrb	r7, [r1, #24]
 8007e2a:	4691      	mov	r9, r2
 8007e2c:	2f78      	cmp	r7, #120	; 0x78
 8007e2e:	4680      	mov	r8, r0
 8007e30:	460c      	mov	r4, r1
 8007e32:	469a      	mov	sl, r3
 8007e34:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007e3a:	d807      	bhi.n	8007e4c <_printf_i+0x28>
 8007e3c:	2f62      	cmp	r7, #98	; 0x62
 8007e3e:	d80a      	bhi.n	8007e56 <_printf_i+0x32>
 8007e40:	2f00      	cmp	r7, #0
 8007e42:	f000 80d9 	beq.w	8007ff8 <_printf_i+0x1d4>
 8007e46:	2f58      	cmp	r7, #88	; 0x58
 8007e48:	f000 80a4 	beq.w	8007f94 <_printf_i+0x170>
 8007e4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e54:	e03a      	b.n	8007ecc <_printf_i+0xa8>
 8007e56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e5a:	2b15      	cmp	r3, #21
 8007e5c:	d8f6      	bhi.n	8007e4c <_printf_i+0x28>
 8007e5e:	a101      	add	r1, pc, #4	; (adr r1, 8007e64 <_printf_i+0x40>)
 8007e60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e64:	08007ebd 	.word	0x08007ebd
 8007e68:	08007ed1 	.word	0x08007ed1
 8007e6c:	08007e4d 	.word	0x08007e4d
 8007e70:	08007e4d 	.word	0x08007e4d
 8007e74:	08007e4d 	.word	0x08007e4d
 8007e78:	08007e4d 	.word	0x08007e4d
 8007e7c:	08007ed1 	.word	0x08007ed1
 8007e80:	08007e4d 	.word	0x08007e4d
 8007e84:	08007e4d 	.word	0x08007e4d
 8007e88:	08007e4d 	.word	0x08007e4d
 8007e8c:	08007e4d 	.word	0x08007e4d
 8007e90:	08007fdf 	.word	0x08007fdf
 8007e94:	08007f01 	.word	0x08007f01
 8007e98:	08007fc1 	.word	0x08007fc1
 8007e9c:	08007e4d 	.word	0x08007e4d
 8007ea0:	08007e4d 	.word	0x08007e4d
 8007ea4:	08008001 	.word	0x08008001
 8007ea8:	08007e4d 	.word	0x08007e4d
 8007eac:	08007f01 	.word	0x08007f01
 8007eb0:	08007e4d 	.word	0x08007e4d
 8007eb4:	08007e4d 	.word	0x08007e4d
 8007eb8:	08007fc9 	.word	0x08007fc9
 8007ebc:	682b      	ldr	r3, [r5, #0]
 8007ebe:	1d1a      	adds	r2, r3, #4
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	602a      	str	r2, [r5, #0]
 8007ec4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ec8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e0a4      	b.n	800801a <_printf_i+0x1f6>
 8007ed0:	6820      	ldr	r0, [r4, #0]
 8007ed2:	6829      	ldr	r1, [r5, #0]
 8007ed4:	0606      	lsls	r6, r0, #24
 8007ed6:	f101 0304 	add.w	r3, r1, #4
 8007eda:	d50a      	bpl.n	8007ef2 <_printf_i+0xce>
 8007edc:	680e      	ldr	r6, [r1, #0]
 8007ede:	602b      	str	r3, [r5, #0]
 8007ee0:	2e00      	cmp	r6, #0
 8007ee2:	da03      	bge.n	8007eec <_printf_i+0xc8>
 8007ee4:	232d      	movs	r3, #45	; 0x2d
 8007ee6:	4276      	negs	r6, r6
 8007ee8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007eec:	230a      	movs	r3, #10
 8007eee:	485e      	ldr	r0, [pc, #376]	; (8008068 <_printf_i+0x244>)
 8007ef0:	e019      	b.n	8007f26 <_printf_i+0x102>
 8007ef2:	680e      	ldr	r6, [r1, #0]
 8007ef4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ef8:	602b      	str	r3, [r5, #0]
 8007efa:	bf18      	it	ne
 8007efc:	b236      	sxthne	r6, r6
 8007efe:	e7ef      	b.n	8007ee0 <_printf_i+0xbc>
 8007f00:	682b      	ldr	r3, [r5, #0]
 8007f02:	6820      	ldr	r0, [r4, #0]
 8007f04:	1d19      	adds	r1, r3, #4
 8007f06:	6029      	str	r1, [r5, #0]
 8007f08:	0601      	lsls	r1, r0, #24
 8007f0a:	d501      	bpl.n	8007f10 <_printf_i+0xec>
 8007f0c:	681e      	ldr	r6, [r3, #0]
 8007f0e:	e002      	b.n	8007f16 <_printf_i+0xf2>
 8007f10:	0646      	lsls	r6, r0, #25
 8007f12:	d5fb      	bpl.n	8007f0c <_printf_i+0xe8>
 8007f14:	881e      	ldrh	r6, [r3, #0]
 8007f16:	2f6f      	cmp	r7, #111	; 0x6f
 8007f18:	bf0c      	ite	eq
 8007f1a:	2308      	moveq	r3, #8
 8007f1c:	230a      	movne	r3, #10
 8007f1e:	4852      	ldr	r0, [pc, #328]	; (8008068 <_printf_i+0x244>)
 8007f20:	2100      	movs	r1, #0
 8007f22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f26:	6865      	ldr	r5, [r4, #4]
 8007f28:	2d00      	cmp	r5, #0
 8007f2a:	bfa8      	it	ge
 8007f2c:	6821      	ldrge	r1, [r4, #0]
 8007f2e:	60a5      	str	r5, [r4, #8]
 8007f30:	bfa4      	itt	ge
 8007f32:	f021 0104 	bicge.w	r1, r1, #4
 8007f36:	6021      	strge	r1, [r4, #0]
 8007f38:	b90e      	cbnz	r6, 8007f3e <_printf_i+0x11a>
 8007f3a:	2d00      	cmp	r5, #0
 8007f3c:	d04d      	beq.n	8007fda <_printf_i+0x1b6>
 8007f3e:	4615      	mov	r5, r2
 8007f40:	fbb6 f1f3 	udiv	r1, r6, r3
 8007f44:	fb03 6711 	mls	r7, r3, r1, r6
 8007f48:	5dc7      	ldrb	r7, [r0, r7]
 8007f4a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007f4e:	4637      	mov	r7, r6
 8007f50:	42bb      	cmp	r3, r7
 8007f52:	460e      	mov	r6, r1
 8007f54:	d9f4      	bls.n	8007f40 <_printf_i+0x11c>
 8007f56:	2b08      	cmp	r3, #8
 8007f58:	d10b      	bne.n	8007f72 <_printf_i+0x14e>
 8007f5a:	6823      	ldr	r3, [r4, #0]
 8007f5c:	07de      	lsls	r6, r3, #31
 8007f5e:	d508      	bpl.n	8007f72 <_printf_i+0x14e>
 8007f60:	6923      	ldr	r3, [r4, #16]
 8007f62:	6861      	ldr	r1, [r4, #4]
 8007f64:	4299      	cmp	r1, r3
 8007f66:	bfde      	ittt	le
 8007f68:	2330      	movle	r3, #48	; 0x30
 8007f6a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f6e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007f72:	1b52      	subs	r2, r2, r5
 8007f74:	6122      	str	r2, [r4, #16]
 8007f76:	464b      	mov	r3, r9
 8007f78:	4621      	mov	r1, r4
 8007f7a:	4640      	mov	r0, r8
 8007f7c:	f8cd a000 	str.w	sl, [sp]
 8007f80:	aa03      	add	r2, sp, #12
 8007f82:	f7ff fedf 	bl	8007d44 <_printf_common>
 8007f86:	3001      	adds	r0, #1
 8007f88:	d14c      	bne.n	8008024 <_printf_i+0x200>
 8007f8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f8e:	b004      	add	sp, #16
 8007f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f94:	4834      	ldr	r0, [pc, #208]	; (8008068 <_printf_i+0x244>)
 8007f96:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007f9a:	6829      	ldr	r1, [r5, #0]
 8007f9c:	6823      	ldr	r3, [r4, #0]
 8007f9e:	f851 6b04 	ldr.w	r6, [r1], #4
 8007fa2:	6029      	str	r1, [r5, #0]
 8007fa4:	061d      	lsls	r5, r3, #24
 8007fa6:	d514      	bpl.n	8007fd2 <_printf_i+0x1ae>
 8007fa8:	07df      	lsls	r7, r3, #31
 8007faa:	bf44      	itt	mi
 8007fac:	f043 0320 	orrmi.w	r3, r3, #32
 8007fb0:	6023      	strmi	r3, [r4, #0]
 8007fb2:	b91e      	cbnz	r6, 8007fbc <_printf_i+0x198>
 8007fb4:	6823      	ldr	r3, [r4, #0]
 8007fb6:	f023 0320 	bic.w	r3, r3, #32
 8007fba:	6023      	str	r3, [r4, #0]
 8007fbc:	2310      	movs	r3, #16
 8007fbe:	e7af      	b.n	8007f20 <_printf_i+0xfc>
 8007fc0:	6823      	ldr	r3, [r4, #0]
 8007fc2:	f043 0320 	orr.w	r3, r3, #32
 8007fc6:	6023      	str	r3, [r4, #0]
 8007fc8:	2378      	movs	r3, #120	; 0x78
 8007fca:	4828      	ldr	r0, [pc, #160]	; (800806c <_printf_i+0x248>)
 8007fcc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007fd0:	e7e3      	b.n	8007f9a <_printf_i+0x176>
 8007fd2:	0659      	lsls	r1, r3, #25
 8007fd4:	bf48      	it	mi
 8007fd6:	b2b6      	uxthmi	r6, r6
 8007fd8:	e7e6      	b.n	8007fa8 <_printf_i+0x184>
 8007fda:	4615      	mov	r5, r2
 8007fdc:	e7bb      	b.n	8007f56 <_printf_i+0x132>
 8007fde:	682b      	ldr	r3, [r5, #0]
 8007fe0:	6826      	ldr	r6, [r4, #0]
 8007fe2:	1d18      	adds	r0, r3, #4
 8007fe4:	6961      	ldr	r1, [r4, #20]
 8007fe6:	6028      	str	r0, [r5, #0]
 8007fe8:	0635      	lsls	r5, r6, #24
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	d501      	bpl.n	8007ff2 <_printf_i+0x1ce>
 8007fee:	6019      	str	r1, [r3, #0]
 8007ff0:	e002      	b.n	8007ff8 <_printf_i+0x1d4>
 8007ff2:	0670      	lsls	r0, r6, #25
 8007ff4:	d5fb      	bpl.n	8007fee <_printf_i+0x1ca>
 8007ff6:	8019      	strh	r1, [r3, #0]
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	4615      	mov	r5, r2
 8007ffc:	6123      	str	r3, [r4, #16]
 8007ffe:	e7ba      	b.n	8007f76 <_printf_i+0x152>
 8008000:	682b      	ldr	r3, [r5, #0]
 8008002:	2100      	movs	r1, #0
 8008004:	1d1a      	adds	r2, r3, #4
 8008006:	602a      	str	r2, [r5, #0]
 8008008:	681d      	ldr	r5, [r3, #0]
 800800a:	6862      	ldr	r2, [r4, #4]
 800800c:	4628      	mov	r0, r5
 800800e:	f000 fedd 	bl	8008dcc <memchr>
 8008012:	b108      	cbz	r0, 8008018 <_printf_i+0x1f4>
 8008014:	1b40      	subs	r0, r0, r5
 8008016:	6060      	str	r0, [r4, #4]
 8008018:	6863      	ldr	r3, [r4, #4]
 800801a:	6123      	str	r3, [r4, #16]
 800801c:	2300      	movs	r3, #0
 800801e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008022:	e7a8      	b.n	8007f76 <_printf_i+0x152>
 8008024:	462a      	mov	r2, r5
 8008026:	4649      	mov	r1, r9
 8008028:	4640      	mov	r0, r8
 800802a:	6923      	ldr	r3, [r4, #16]
 800802c:	47d0      	blx	sl
 800802e:	3001      	adds	r0, #1
 8008030:	d0ab      	beq.n	8007f8a <_printf_i+0x166>
 8008032:	6823      	ldr	r3, [r4, #0]
 8008034:	079b      	lsls	r3, r3, #30
 8008036:	d413      	bmi.n	8008060 <_printf_i+0x23c>
 8008038:	68e0      	ldr	r0, [r4, #12]
 800803a:	9b03      	ldr	r3, [sp, #12]
 800803c:	4298      	cmp	r0, r3
 800803e:	bfb8      	it	lt
 8008040:	4618      	movlt	r0, r3
 8008042:	e7a4      	b.n	8007f8e <_printf_i+0x16a>
 8008044:	2301      	movs	r3, #1
 8008046:	4632      	mov	r2, r6
 8008048:	4649      	mov	r1, r9
 800804a:	4640      	mov	r0, r8
 800804c:	47d0      	blx	sl
 800804e:	3001      	adds	r0, #1
 8008050:	d09b      	beq.n	8007f8a <_printf_i+0x166>
 8008052:	3501      	adds	r5, #1
 8008054:	68e3      	ldr	r3, [r4, #12]
 8008056:	9903      	ldr	r1, [sp, #12]
 8008058:	1a5b      	subs	r3, r3, r1
 800805a:	42ab      	cmp	r3, r5
 800805c:	dcf2      	bgt.n	8008044 <_printf_i+0x220>
 800805e:	e7eb      	b.n	8008038 <_printf_i+0x214>
 8008060:	2500      	movs	r5, #0
 8008062:	f104 0619 	add.w	r6, r4, #25
 8008066:	e7f5      	b.n	8008054 <_printf_i+0x230>
 8008068:	0800b9fa 	.word	0x0800b9fa
 800806c:	0800ba0b 	.word	0x0800ba0b

08008070 <_sbrk_r>:
 8008070:	b538      	push	{r3, r4, r5, lr}
 8008072:	2300      	movs	r3, #0
 8008074:	4d05      	ldr	r5, [pc, #20]	; (800808c <_sbrk_r+0x1c>)
 8008076:	4604      	mov	r4, r0
 8008078:	4608      	mov	r0, r1
 800807a:	602b      	str	r3, [r5, #0]
 800807c:	f7f9 feb8 	bl	8001df0 <_sbrk>
 8008080:	1c43      	adds	r3, r0, #1
 8008082:	d102      	bne.n	800808a <_sbrk_r+0x1a>
 8008084:	682b      	ldr	r3, [r5, #0]
 8008086:	b103      	cbz	r3, 800808a <_sbrk_r+0x1a>
 8008088:	6023      	str	r3, [r4, #0]
 800808a:	bd38      	pop	{r3, r4, r5, pc}
 800808c:	20000420 	.word	0x20000420

08008090 <siprintf>:
 8008090:	b40e      	push	{r1, r2, r3}
 8008092:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008096:	b500      	push	{lr}
 8008098:	b09c      	sub	sp, #112	; 0x70
 800809a:	ab1d      	add	r3, sp, #116	; 0x74
 800809c:	9002      	str	r0, [sp, #8]
 800809e:	9006      	str	r0, [sp, #24]
 80080a0:	9107      	str	r1, [sp, #28]
 80080a2:	9104      	str	r1, [sp, #16]
 80080a4:	4808      	ldr	r0, [pc, #32]	; (80080c8 <siprintf+0x38>)
 80080a6:	4909      	ldr	r1, [pc, #36]	; (80080cc <siprintf+0x3c>)
 80080a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80080ac:	9105      	str	r1, [sp, #20]
 80080ae:	6800      	ldr	r0, [r0, #0]
 80080b0:	a902      	add	r1, sp, #8
 80080b2:	9301      	str	r3, [sp, #4]
 80080b4:	f001 fa96 	bl	80095e4 <_svfiprintf_r>
 80080b8:	2200      	movs	r2, #0
 80080ba:	9b02      	ldr	r3, [sp, #8]
 80080bc:	701a      	strb	r2, [r3, #0]
 80080be:	b01c      	add	sp, #112	; 0x70
 80080c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80080c4:	b003      	add	sp, #12
 80080c6:	4770      	bx	lr
 80080c8:	2000001c 	.word	0x2000001c
 80080cc:	ffff0208 	.word	0xffff0208

080080d0 <quorem>:
 80080d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d4:	6903      	ldr	r3, [r0, #16]
 80080d6:	690c      	ldr	r4, [r1, #16]
 80080d8:	4607      	mov	r7, r0
 80080da:	42a3      	cmp	r3, r4
 80080dc:	f2c0 8082 	blt.w	80081e4 <quorem+0x114>
 80080e0:	3c01      	subs	r4, #1
 80080e2:	f100 0514 	add.w	r5, r0, #20
 80080e6:	f101 0814 	add.w	r8, r1, #20
 80080ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080ee:	9301      	str	r3, [sp, #4]
 80080f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80080f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080f8:	3301      	adds	r3, #1
 80080fa:	429a      	cmp	r2, r3
 80080fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8008100:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008104:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008108:	d331      	bcc.n	800816e <quorem+0x9e>
 800810a:	f04f 0e00 	mov.w	lr, #0
 800810e:	4640      	mov	r0, r8
 8008110:	46ac      	mov	ip, r5
 8008112:	46f2      	mov	sl, lr
 8008114:	f850 2b04 	ldr.w	r2, [r0], #4
 8008118:	b293      	uxth	r3, r2
 800811a:	fb06 e303 	mla	r3, r6, r3, lr
 800811e:	0c12      	lsrs	r2, r2, #16
 8008120:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008124:	b29b      	uxth	r3, r3
 8008126:	fb06 e202 	mla	r2, r6, r2, lr
 800812a:	ebaa 0303 	sub.w	r3, sl, r3
 800812e:	f8dc a000 	ldr.w	sl, [ip]
 8008132:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008136:	fa1f fa8a 	uxth.w	sl, sl
 800813a:	4453      	add	r3, sl
 800813c:	f8dc a000 	ldr.w	sl, [ip]
 8008140:	b292      	uxth	r2, r2
 8008142:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008146:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800814a:	b29b      	uxth	r3, r3
 800814c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008150:	4581      	cmp	r9, r0
 8008152:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008156:	f84c 3b04 	str.w	r3, [ip], #4
 800815a:	d2db      	bcs.n	8008114 <quorem+0x44>
 800815c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008160:	b92b      	cbnz	r3, 800816e <quorem+0x9e>
 8008162:	9b01      	ldr	r3, [sp, #4]
 8008164:	3b04      	subs	r3, #4
 8008166:	429d      	cmp	r5, r3
 8008168:	461a      	mov	r2, r3
 800816a:	d32f      	bcc.n	80081cc <quorem+0xfc>
 800816c:	613c      	str	r4, [r7, #16]
 800816e:	4638      	mov	r0, r7
 8008170:	f001 f8c4 	bl	80092fc <__mcmp>
 8008174:	2800      	cmp	r0, #0
 8008176:	db25      	blt.n	80081c4 <quorem+0xf4>
 8008178:	4628      	mov	r0, r5
 800817a:	f04f 0c00 	mov.w	ip, #0
 800817e:	3601      	adds	r6, #1
 8008180:	f858 1b04 	ldr.w	r1, [r8], #4
 8008184:	f8d0 e000 	ldr.w	lr, [r0]
 8008188:	b28b      	uxth	r3, r1
 800818a:	ebac 0303 	sub.w	r3, ip, r3
 800818e:	fa1f f28e 	uxth.w	r2, lr
 8008192:	4413      	add	r3, r2
 8008194:	0c0a      	lsrs	r2, r1, #16
 8008196:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800819a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800819e:	b29b      	uxth	r3, r3
 80081a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081a4:	45c1      	cmp	r9, r8
 80081a6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80081aa:	f840 3b04 	str.w	r3, [r0], #4
 80081ae:	d2e7      	bcs.n	8008180 <quorem+0xb0>
 80081b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081b8:	b922      	cbnz	r2, 80081c4 <quorem+0xf4>
 80081ba:	3b04      	subs	r3, #4
 80081bc:	429d      	cmp	r5, r3
 80081be:	461a      	mov	r2, r3
 80081c0:	d30a      	bcc.n	80081d8 <quorem+0x108>
 80081c2:	613c      	str	r4, [r7, #16]
 80081c4:	4630      	mov	r0, r6
 80081c6:	b003      	add	sp, #12
 80081c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081cc:	6812      	ldr	r2, [r2, #0]
 80081ce:	3b04      	subs	r3, #4
 80081d0:	2a00      	cmp	r2, #0
 80081d2:	d1cb      	bne.n	800816c <quorem+0x9c>
 80081d4:	3c01      	subs	r4, #1
 80081d6:	e7c6      	b.n	8008166 <quorem+0x96>
 80081d8:	6812      	ldr	r2, [r2, #0]
 80081da:	3b04      	subs	r3, #4
 80081dc:	2a00      	cmp	r2, #0
 80081de:	d1f0      	bne.n	80081c2 <quorem+0xf2>
 80081e0:	3c01      	subs	r4, #1
 80081e2:	e7eb      	b.n	80081bc <quorem+0xec>
 80081e4:	2000      	movs	r0, #0
 80081e6:	e7ee      	b.n	80081c6 <quorem+0xf6>

080081e8 <_dtoa_r>:
 80081e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ec:	4616      	mov	r6, r2
 80081ee:	461f      	mov	r7, r3
 80081f0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80081f2:	b099      	sub	sp, #100	; 0x64
 80081f4:	4605      	mov	r5, r0
 80081f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80081fa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80081fe:	b974      	cbnz	r4, 800821e <_dtoa_r+0x36>
 8008200:	2010      	movs	r0, #16
 8008202:	f7ff f9db 	bl	80075bc <malloc>
 8008206:	4602      	mov	r2, r0
 8008208:	6268      	str	r0, [r5, #36]	; 0x24
 800820a:	b920      	cbnz	r0, 8008216 <_dtoa_r+0x2e>
 800820c:	21ea      	movs	r1, #234	; 0xea
 800820e:	4ba8      	ldr	r3, [pc, #672]	; (80084b0 <_dtoa_r+0x2c8>)
 8008210:	48a8      	ldr	r0, [pc, #672]	; (80084b4 <_dtoa_r+0x2cc>)
 8008212:	f001 fae7 	bl	80097e4 <__assert_func>
 8008216:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800821a:	6004      	str	r4, [r0, #0]
 800821c:	60c4      	str	r4, [r0, #12]
 800821e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008220:	6819      	ldr	r1, [r3, #0]
 8008222:	b151      	cbz	r1, 800823a <_dtoa_r+0x52>
 8008224:	685a      	ldr	r2, [r3, #4]
 8008226:	2301      	movs	r3, #1
 8008228:	4093      	lsls	r3, r2
 800822a:	604a      	str	r2, [r1, #4]
 800822c:	608b      	str	r3, [r1, #8]
 800822e:	4628      	mov	r0, r5
 8008230:	f000 fe26 	bl	8008e80 <_Bfree>
 8008234:	2200      	movs	r2, #0
 8008236:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008238:	601a      	str	r2, [r3, #0]
 800823a:	1e3b      	subs	r3, r7, #0
 800823c:	bfaf      	iteee	ge
 800823e:	2300      	movge	r3, #0
 8008240:	2201      	movlt	r2, #1
 8008242:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008246:	9305      	strlt	r3, [sp, #20]
 8008248:	bfa8      	it	ge
 800824a:	f8c8 3000 	strge.w	r3, [r8]
 800824e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008252:	4b99      	ldr	r3, [pc, #612]	; (80084b8 <_dtoa_r+0x2d0>)
 8008254:	bfb8      	it	lt
 8008256:	f8c8 2000 	strlt.w	r2, [r8]
 800825a:	ea33 0309 	bics.w	r3, r3, r9
 800825e:	d119      	bne.n	8008294 <_dtoa_r+0xac>
 8008260:	f242 730f 	movw	r3, #9999	; 0x270f
 8008264:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008266:	6013      	str	r3, [r2, #0]
 8008268:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800826c:	4333      	orrs	r3, r6
 800826e:	f000 857f 	beq.w	8008d70 <_dtoa_r+0xb88>
 8008272:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008274:	b953      	cbnz	r3, 800828c <_dtoa_r+0xa4>
 8008276:	4b91      	ldr	r3, [pc, #580]	; (80084bc <_dtoa_r+0x2d4>)
 8008278:	e022      	b.n	80082c0 <_dtoa_r+0xd8>
 800827a:	4b91      	ldr	r3, [pc, #580]	; (80084c0 <_dtoa_r+0x2d8>)
 800827c:	9303      	str	r3, [sp, #12]
 800827e:	3308      	adds	r3, #8
 8008280:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008282:	6013      	str	r3, [r2, #0]
 8008284:	9803      	ldr	r0, [sp, #12]
 8008286:	b019      	add	sp, #100	; 0x64
 8008288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800828c:	4b8b      	ldr	r3, [pc, #556]	; (80084bc <_dtoa_r+0x2d4>)
 800828e:	9303      	str	r3, [sp, #12]
 8008290:	3303      	adds	r3, #3
 8008292:	e7f5      	b.n	8008280 <_dtoa_r+0x98>
 8008294:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008298:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800829c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80082a0:	2200      	movs	r2, #0
 80082a2:	2300      	movs	r3, #0
 80082a4:	f7f8 fb80 	bl	80009a8 <__aeabi_dcmpeq>
 80082a8:	4680      	mov	r8, r0
 80082aa:	b158      	cbz	r0, 80082c4 <_dtoa_r+0xdc>
 80082ac:	2301      	movs	r3, #1
 80082ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80082b0:	6013      	str	r3, [r2, #0]
 80082b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f000 8558 	beq.w	8008d6a <_dtoa_r+0xb82>
 80082ba:	4882      	ldr	r0, [pc, #520]	; (80084c4 <_dtoa_r+0x2dc>)
 80082bc:	6018      	str	r0, [r3, #0]
 80082be:	1e43      	subs	r3, r0, #1
 80082c0:	9303      	str	r3, [sp, #12]
 80082c2:	e7df      	b.n	8008284 <_dtoa_r+0x9c>
 80082c4:	ab16      	add	r3, sp, #88	; 0x58
 80082c6:	9301      	str	r3, [sp, #4]
 80082c8:	ab17      	add	r3, sp, #92	; 0x5c
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	4628      	mov	r0, r5
 80082ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80082d2:	f001 f8bb 	bl	800944c <__d2b>
 80082d6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80082da:	4683      	mov	fp, r0
 80082dc:	2c00      	cmp	r4, #0
 80082de:	d07f      	beq.n	80083e0 <_dtoa_r+0x1f8>
 80082e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80082e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082e6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80082ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082ee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80082f2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80082f6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80082fa:	2200      	movs	r2, #0
 80082fc:	4b72      	ldr	r3, [pc, #456]	; (80084c8 <_dtoa_r+0x2e0>)
 80082fe:	f7f7 ff33 	bl	8000168 <__aeabi_dsub>
 8008302:	a365      	add	r3, pc, #404	; (adr r3, 8008498 <_dtoa_r+0x2b0>)
 8008304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008308:	f7f8 f8e6 	bl	80004d8 <__aeabi_dmul>
 800830c:	a364      	add	r3, pc, #400	; (adr r3, 80084a0 <_dtoa_r+0x2b8>)
 800830e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008312:	f7f7 ff2b 	bl	800016c <__adddf3>
 8008316:	4606      	mov	r6, r0
 8008318:	4620      	mov	r0, r4
 800831a:	460f      	mov	r7, r1
 800831c:	f7f8 f872 	bl	8000404 <__aeabi_i2d>
 8008320:	a361      	add	r3, pc, #388	; (adr r3, 80084a8 <_dtoa_r+0x2c0>)
 8008322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008326:	f7f8 f8d7 	bl	80004d8 <__aeabi_dmul>
 800832a:	4602      	mov	r2, r0
 800832c:	460b      	mov	r3, r1
 800832e:	4630      	mov	r0, r6
 8008330:	4639      	mov	r1, r7
 8008332:	f7f7 ff1b 	bl	800016c <__adddf3>
 8008336:	4606      	mov	r6, r0
 8008338:	460f      	mov	r7, r1
 800833a:	f7f8 fb7d 	bl	8000a38 <__aeabi_d2iz>
 800833e:	2200      	movs	r2, #0
 8008340:	4682      	mov	sl, r0
 8008342:	2300      	movs	r3, #0
 8008344:	4630      	mov	r0, r6
 8008346:	4639      	mov	r1, r7
 8008348:	f7f8 fb38 	bl	80009bc <__aeabi_dcmplt>
 800834c:	b148      	cbz	r0, 8008362 <_dtoa_r+0x17a>
 800834e:	4650      	mov	r0, sl
 8008350:	f7f8 f858 	bl	8000404 <__aeabi_i2d>
 8008354:	4632      	mov	r2, r6
 8008356:	463b      	mov	r3, r7
 8008358:	f7f8 fb26 	bl	80009a8 <__aeabi_dcmpeq>
 800835c:	b908      	cbnz	r0, 8008362 <_dtoa_r+0x17a>
 800835e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008362:	f1ba 0f16 	cmp.w	sl, #22
 8008366:	d858      	bhi.n	800841a <_dtoa_r+0x232>
 8008368:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800836c:	4b57      	ldr	r3, [pc, #348]	; (80084cc <_dtoa_r+0x2e4>)
 800836e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008376:	f7f8 fb21 	bl	80009bc <__aeabi_dcmplt>
 800837a:	2800      	cmp	r0, #0
 800837c:	d04f      	beq.n	800841e <_dtoa_r+0x236>
 800837e:	2300      	movs	r3, #0
 8008380:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008384:	930f      	str	r3, [sp, #60]	; 0x3c
 8008386:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008388:	1b1c      	subs	r4, r3, r4
 800838a:	1e63      	subs	r3, r4, #1
 800838c:	9309      	str	r3, [sp, #36]	; 0x24
 800838e:	bf49      	itett	mi
 8008390:	f1c4 0301 	rsbmi	r3, r4, #1
 8008394:	2300      	movpl	r3, #0
 8008396:	9306      	strmi	r3, [sp, #24]
 8008398:	2300      	movmi	r3, #0
 800839a:	bf54      	ite	pl
 800839c:	9306      	strpl	r3, [sp, #24]
 800839e:	9309      	strmi	r3, [sp, #36]	; 0x24
 80083a0:	f1ba 0f00 	cmp.w	sl, #0
 80083a4:	db3d      	blt.n	8008422 <_dtoa_r+0x23a>
 80083a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083a8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80083ac:	4453      	add	r3, sl
 80083ae:	9309      	str	r3, [sp, #36]	; 0x24
 80083b0:	2300      	movs	r3, #0
 80083b2:	930a      	str	r3, [sp, #40]	; 0x28
 80083b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083b6:	2b09      	cmp	r3, #9
 80083b8:	f200 808c 	bhi.w	80084d4 <_dtoa_r+0x2ec>
 80083bc:	2b05      	cmp	r3, #5
 80083be:	bfc4      	itt	gt
 80083c0:	3b04      	subgt	r3, #4
 80083c2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80083c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083c6:	bfc8      	it	gt
 80083c8:	2400      	movgt	r4, #0
 80083ca:	f1a3 0302 	sub.w	r3, r3, #2
 80083ce:	bfd8      	it	le
 80083d0:	2401      	movle	r4, #1
 80083d2:	2b03      	cmp	r3, #3
 80083d4:	f200 808a 	bhi.w	80084ec <_dtoa_r+0x304>
 80083d8:	e8df f003 	tbb	[pc, r3]
 80083dc:	5b4d4f2d 	.word	0x5b4d4f2d
 80083e0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80083e4:	441c      	add	r4, r3
 80083e6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80083ea:	2b20      	cmp	r3, #32
 80083ec:	bfc3      	ittte	gt
 80083ee:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80083f2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80083f6:	fa09 f303 	lslgt.w	r3, r9, r3
 80083fa:	f1c3 0320 	rsble	r3, r3, #32
 80083fe:	bfc6      	itte	gt
 8008400:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008404:	4318      	orrgt	r0, r3
 8008406:	fa06 f003 	lslle.w	r0, r6, r3
 800840a:	f7f7 ffeb 	bl	80003e4 <__aeabi_ui2d>
 800840e:	2301      	movs	r3, #1
 8008410:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008414:	3c01      	subs	r4, #1
 8008416:	9313      	str	r3, [sp, #76]	; 0x4c
 8008418:	e76f      	b.n	80082fa <_dtoa_r+0x112>
 800841a:	2301      	movs	r3, #1
 800841c:	e7b2      	b.n	8008384 <_dtoa_r+0x19c>
 800841e:	900f      	str	r0, [sp, #60]	; 0x3c
 8008420:	e7b1      	b.n	8008386 <_dtoa_r+0x19e>
 8008422:	9b06      	ldr	r3, [sp, #24]
 8008424:	eba3 030a 	sub.w	r3, r3, sl
 8008428:	9306      	str	r3, [sp, #24]
 800842a:	f1ca 0300 	rsb	r3, sl, #0
 800842e:	930a      	str	r3, [sp, #40]	; 0x28
 8008430:	2300      	movs	r3, #0
 8008432:	930e      	str	r3, [sp, #56]	; 0x38
 8008434:	e7be      	b.n	80083b4 <_dtoa_r+0x1cc>
 8008436:	2300      	movs	r3, #0
 8008438:	930b      	str	r3, [sp, #44]	; 0x2c
 800843a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800843c:	2b00      	cmp	r3, #0
 800843e:	dc58      	bgt.n	80084f2 <_dtoa_r+0x30a>
 8008440:	f04f 0901 	mov.w	r9, #1
 8008444:	464b      	mov	r3, r9
 8008446:	f8cd 9020 	str.w	r9, [sp, #32]
 800844a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800844e:	2200      	movs	r2, #0
 8008450:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008452:	6042      	str	r2, [r0, #4]
 8008454:	2204      	movs	r2, #4
 8008456:	f102 0614 	add.w	r6, r2, #20
 800845a:	429e      	cmp	r6, r3
 800845c:	6841      	ldr	r1, [r0, #4]
 800845e:	d94e      	bls.n	80084fe <_dtoa_r+0x316>
 8008460:	4628      	mov	r0, r5
 8008462:	f000 fccd 	bl	8008e00 <_Balloc>
 8008466:	9003      	str	r0, [sp, #12]
 8008468:	2800      	cmp	r0, #0
 800846a:	d14c      	bne.n	8008506 <_dtoa_r+0x31e>
 800846c:	4602      	mov	r2, r0
 800846e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008472:	4b17      	ldr	r3, [pc, #92]	; (80084d0 <_dtoa_r+0x2e8>)
 8008474:	e6cc      	b.n	8008210 <_dtoa_r+0x28>
 8008476:	2301      	movs	r3, #1
 8008478:	e7de      	b.n	8008438 <_dtoa_r+0x250>
 800847a:	2300      	movs	r3, #0
 800847c:	930b      	str	r3, [sp, #44]	; 0x2c
 800847e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008480:	eb0a 0903 	add.w	r9, sl, r3
 8008484:	f109 0301 	add.w	r3, r9, #1
 8008488:	2b01      	cmp	r3, #1
 800848a:	9308      	str	r3, [sp, #32]
 800848c:	bfb8      	it	lt
 800848e:	2301      	movlt	r3, #1
 8008490:	e7dd      	b.n	800844e <_dtoa_r+0x266>
 8008492:	2301      	movs	r3, #1
 8008494:	e7f2      	b.n	800847c <_dtoa_r+0x294>
 8008496:	bf00      	nop
 8008498:	636f4361 	.word	0x636f4361
 800849c:	3fd287a7 	.word	0x3fd287a7
 80084a0:	8b60c8b3 	.word	0x8b60c8b3
 80084a4:	3fc68a28 	.word	0x3fc68a28
 80084a8:	509f79fb 	.word	0x509f79fb
 80084ac:	3fd34413 	.word	0x3fd34413
 80084b0:	0800ba29 	.word	0x0800ba29
 80084b4:	0800ba40 	.word	0x0800ba40
 80084b8:	7ff00000 	.word	0x7ff00000
 80084bc:	0800ba25 	.word	0x0800ba25
 80084c0:	0800ba1c 	.word	0x0800ba1c
 80084c4:	0800b9f9 	.word	0x0800b9f9
 80084c8:	3ff80000 	.word	0x3ff80000
 80084cc:	0800bb30 	.word	0x0800bb30
 80084d0:	0800ba9b 	.word	0x0800ba9b
 80084d4:	2401      	movs	r4, #1
 80084d6:	2300      	movs	r3, #0
 80084d8:	940b      	str	r4, [sp, #44]	; 0x2c
 80084da:	9322      	str	r3, [sp, #136]	; 0x88
 80084dc:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80084e0:	2200      	movs	r2, #0
 80084e2:	2312      	movs	r3, #18
 80084e4:	f8cd 9020 	str.w	r9, [sp, #32]
 80084e8:	9223      	str	r2, [sp, #140]	; 0x8c
 80084ea:	e7b0      	b.n	800844e <_dtoa_r+0x266>
 80084ec:	2301      	movs	r3, #1
 80084ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80084f0:	e7f4      	b.n	80084dc <_dtoa_r+0x2f4>
 80084f2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80084f6:	464b      	mov	r3, r9
 80084f8:	f8cd 9020 	str.w	r9, [sp, #32]
 80084fc:	e7a7      	b.n	800844e <_dtoa_r+0x266>
 80084fe:	3101      	adds	r1, #1
 8008500:	6041      	str	r1, [r0, #4]
 8008502:	0052      	lsls	r2, r2, #1
 8008504:	e7a7      	b.n	8008456 <_dtoa_r+0x26e>
 8008506:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008508:	9a03      	ldr	r2, [sp, #12]
 800850a:	601a      	str	r2, [r3, #0]
 800850c:	9b08      	ldr	r3, [sp, #32]
 800850e:	2b0e      	cmp	r3, #14
 8008510:	f200 80a8 	bhi.w	8008664 <_dtoa_r+0x47c>
 8008514:	2c00      	cmp	r4, #0
 8008516:	f000 80a5 	beq.w	8008664 <_dtoa_r+0x47c>
 800851a:	f1ba 0f00 	cmp.w	sl, #0
 800851e:	dd34      	ble.n	800858a <_dtoa_r+0x3a2>
 8008520:	4a9a      	ldr	r2, [pc, #616]	; (800878c <_dtoa_r+0x5a4>)
 8008522:	f00a 030f 	and.w	r3, sl, #15
 8008526:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800852a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800852e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008532:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008536:	ea4f 142a 	mov.w	r4, sl, asr #4
 800853a:	d016      	beq.n	800856a <_dtoa_r+0x382>
 800853c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008540:	4b93      	ldr	r3, [pc, #588]	; (8008790 <_dtoa_r+0x5a8>)
 8008542:	2703      	movs	r7, #3
 8008544:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008548:	f7f8 f8f0 	bl	800072c <__aeabi_ddiv>
 800854c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008550:	f004 040f 	and.w	r4, r4, #15
 8008554:	4e8e      	ldr	r6, [pc, #568]	; (8008790 <_dtoa_r+0x5a8>)
 8008556:	b954      	cbnz	r4, 800856e <_dtoa_r+0x386>
 8008558:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800855c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008560:	f7f8 f8e4 	bl	800072c <__aeabi_ddiv>
 8008564:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008568:	e029      	b.n	80085be <_dtoa_r+0x3d6>
 800856a:	2702      	movs	r7, #2
 800856c:	e7f2      	b.n	8008554 <_dtoa_r+0x36c>
 800856e:	07e1      	lsls	r1, r4, #31
 8008570:	d508      	bpl.n	8008584 <_dtoa_r+0x39c>
 8008572:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008576:	e9d6 2300 	ldrd	r2, r3, [r6]
 800857a:	f7f7 ffad 	bl	80004d8 <__aeabi_dmul>
 800857e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008582:	3701      	adds	r7, #1
 8008584:	1064      	asrs	r4, r4, #1
 8008586:	3608      	adds	r6, #8
 8008588:	e7e5      	b.n	8008556 <_dtoa_r+0x36e>
 800858a:	f000 80a5 	beq.w	80086d8 <_dtoa_r+0x4f0>
 800858e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008592:	f1ca 0400 	rsb	r4, sl, #0
 8008596:	4b7d      	ldr	r3, [pc, #500]	; (800878c <_dtoa_r+0x5a4>)
 8008598:	f004 020f 	and.w	r2, r4, #15
 800859c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a4:	f7f7 ff98 	bl	80004d8 <__aeabi_dmul>
 80085a8:	2702      	movs	r7, #2
 80085aa:	2300      	movs	r3, #0
 80085ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80085b0:	4e77      	ldr	r6, [pc, #476]	; (8008790 <_dtoa_r+0x5a8>)
 80085b2:	1124      	asrs	r4, r4, #4
 80085b4:	2c00      	cmp	r4, #0
 80085b6:	f040 8084 	bne.w	80086c2 <_dtoa_r+0x4da>
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1d2      	bne.n	8008564 <_dtoa_r+0x37c>
 80085be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	f000 808b 	beq.w	80086dc <_dtoa_r+0x4f4>
 80085c6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80085ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80085ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80085d2:	2200      	movs	r2, #0
 80085d4:	4b6f      	ldr	r3, [pc, #444]	; (8008794 <_dtoa_r+0x5ac>)
 80085d6:	f7f8 f9f1 	bl	80009bc <__aeabi_dcmplt>
 80085da:	2800      	cmp	r0, #0
 80085dc:	d07e      	beq.n	80086dc <_dtoa_r+0x4f4>
 80085de:	9b08      	ldr	r3, [sp, #32]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d07b      	beq.n	80086dc <_dtoa_r+0x4f4>
 80085e4:	f1b9 0f00 	cmp.w	r9, #0
 80085e8:	dd38      	ble.n	800865c <_dtoa_r+0x474>
 80085ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80085ee:	2200      	movs	r2, #0
 80085f0:	4b69      	ldr	r3, [pc, #420]	; (8008798 <_dtoa_r+0x5b0>)
 80085f2:	f7f7 ff71 	bl	80004d8 <__aeabi_dmul>
 80085f6:	464c      	mov	r4, r9
 80085f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80085fc:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8008600:	3701      	adds	r7, #1
 8008602:	4638      	mov	r0, r7
 8008604:	f7f7 fefe 	bl	8000404 <__aeabi_i2d>
 8008608:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800860c:	f7f7 ff64 	bl	80004d8 <__aeabi_dmul>
 8008610:	2200      	movs	r2, #0
 8008612:	4b62      	ldr	r3, [pc, #392]	; (800879c <_dtoa_r+0x5b4>)
 8008614:	f7f7 fdaa 	bl	800016c <__adddf3>
 8008618:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800861c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008620:	9611      	str	r6, [sp, #68]	; 0x44
 8008622:	2c00      	cmp	r4, #0
 8008624:	d15d      	bne.n	80086e2 <_dtoa_r+0x4fa>
 8008626:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800862a:	2200      	movs	r2, #0
 800862c:	4b5c      	ldr	r3, [pc, #368]	; (80087a0 <_dtoa_r+0x5b8>)
 800862e:	f7f7 fd9b 	bl	8000168 <__aeabi_dsub>
 8008632:	4602      	mov	r2, r0
 8008634:	460b      	mov	r3, r1
 8008636:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800863a:	4633      	mov	r3, r6
 800863c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800863e:	f7f8 f9db 	bl	80009f8 <__aeabi_dcmpgt>
 8008642:	2800      	cmp	r0, #0
 8008644:	f040 829c 	bne.w	8008b80 <_dtoa_r+0x998>
 8008648:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800864c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800864e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008652:	f7f8 f9b3 	bl	80009bc <__aeabi_dcmplt>
 8008656:	2800      	cmp	r0, #0
 8008658:	f040 8290 	bne.w	8008b7c <_dtoa_r+0x994>
 800865c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008660:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008664:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008666:	2b00      	cmp	r3, #0
 8008668:	f2c0 8152 	blt.w	8008910 <_dtoa_r+0x728>
 800866c:	f1ba 0f0e 	cmp.w	sl, #14
 8008670:	f300 814e 	bgt.w	8008910 <_dtoa_r+0x728>
 8008674:	4b45      	ldr	r3, [pc, #276]	; (800878c <_dtoa_r+0x5a4>)
 8008676:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800867a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800867e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008682:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008684:	2b00      	cmp	r3, #0
 8008686:	f280 80db 	bge.w	8008840 <_dtoa_r+0x658>
 800868a:	9b08      	ldr	r3, [sp, #32]
 800868c:	2b00      	cmp	r3, #0
 800868e:	f300 80d7 	bgt.w	8008840 <_dtoa_r+0x658>
 8008692:	f040 8272 	bne.w	8008b7a <_dtoa_r+0x992>
 8008696:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800869a:	2200      	movs	r2, #0
 800869c:	4b40      	ldr	r3, [pc, #256]	; (80087a0 <_dtoa_r+0x5b8>)
 800869e:	f7f7 ff1b 	bl	80004d8 <__aeabi_dmul>
 80086a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086a6:	f7f8 f99d 	bl	80009e4 <__aeabi_dcmpge>
 80086aa:	9c08      	ldr	r4, [sp, #32]
 80086ac:	4626      	mov	r6, r4
 80086ae:	2800      	cmp	r0, #0
 80086b0:	f040 8248 	bne.w	8008b44 <_dtoa_r+0x95c>
 80086b4:	2331      	movs	r3, #49	; 0x31
 80086b6:	9f03      	ldr	r7, [sp, #12]
 80086b8:	f10a 0a01 	add.w	sl, sl, #1
 80086bc:	f807 3b01 	strb.w	r3, [r7], #1
 80086c0:	e244      	b.n	8008b4c <_dtoa_r+0x964>
 80086c2:	07e2      	lsls	r2, r4, #31
 80086c4:	d505      	bpl.n	80086d2 <_dtoa_r+0x4ea>
 80086c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80086ca:	f7f7 ff05 	bl	80004d8 <__aeabi_dmul>
 80086ce:	2301      	movs	r3, #1
 80086d0:	3701      	adds	r7, #1
 80086d2:	1064      	asrs	r4, r4, #1
 80086d4:	3608      	adds	r6, #8
 80086d6:	e76d      	b.n	80085b4 <_dtoa_r+0x3cc>
 80086d8:	2702      	movs	r7, #2
 80086da:	e770      	b.n	80085be <_dtoa_r+0x3d6>
 80086dc:	46d0      	mov	r8, sl
 80086de:	9c08      	ldr	r4, [sp, #32]
 80086e0:	e78f      	b.n	8008602 <_dtoa_r+0x41a>
 80086e2:	9903      	ldr	r1, [sp, #12]
 80086e4:	4b29      	ldr	r3, [pc, #164]	; (800878c <_dtoa_r+0x5a4>)
 80086e6:	4421      	add	r1, r4
 80086e8:	9112      	str	r1, [sp, #72]	; 0x48
 80086ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80086ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80086f0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80086f4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80086f8:	2900      	cmp	r1, #0
 80086fa:	d055      	beq.n	80087a8 <_dtoa_r+0x5c0>
 80086fc:	2000      	movs	r0, #0
 80086fe:	4929      	ldr	r1, [pc, #164]	; (80087a4 <_dtoa_r+0x5bc>)
 8008700:	f7f8 f814 	bl	800072c <__aeabi_ddiv>
 8008704:	463b      	mov	r3, r7
 8008706:	4632      	mov	r2, r6
 8008708:	f7f7 fd2e 	bl	8000168 <__aeabi_dsub>
 800870c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008710:	9f03      	ldr	r7, [sp, #12]
 8008712:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008716:	f7f8 f98f 	bl	8000a38 <__aeabi_d2iz>
 800871a:	4604      	mov	r4, r0
 800871c:	f7f7 fe72 	bl	8000404 <__aeabi_i2d>
 8008720:	4602      	mov	r2, r0
 8008722:	460b      	mov	r3, r1
 8008724:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008728:	f7f7 fd1e 	bl	8000168 <__aeabi_dsub>
 800872c:	4602      	mov	r2, r0
 800872e:	460b      	mov	r3, r1
 8008730:	3430      	adds	r4, #48	; 0x30
 8008732:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008736:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800873a:	f807 4b01 	strb.w	r4, [r7], #1
 800873e:	f7f8 f93d 	bl	80009bc <__aeabi_dcmplt>
 8008742:	2800      	cmp	r0, #0
 8008744:	d174      	bne.n	8008830 <_dtoa_r+0x648>
 8008746:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800874a:	2000      	movs	r0, #0
 800874c:	4911      	ldr	r1, [pc, #68]	; (8008794 <_dtoa_r+0x5ac>)
 800874e:	f7f7 fd0b 	bl	8000168 <__aeabi_dsub>
 8008752:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008756:	f7f8 f931 	bl	80009bc <__aeabi_dcmplt>
 800875a:	2800      	cmp	r0, #0
 800875c:	f040 80b7 	bne.w	80088ce <_dtoa_r+0x6e6>
 8008760:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008762:	429f      	cmp	r7, r3
 8008764:	f43f af7a 	beq.w	800865c <_dtoa_r+0x474>
 8008768:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800876c:	2200      	movs	r2, #0
 800876e:	4b0a      	ldr	r3, [pc, #40]	; (8008798 <_dtoa_r+0x5b0>)
 8008770:	f7f7 feb2 	bl	80004d8 <__aeabi_dmul>
 8008774:	2200      	movs	r2, #0
 8008776:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800877a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800877e:	4b06      	ldr	r3, [pc, #24]	; (8008798 <_dtoa_r+0x5b0>)
 8008780:	f7f7 feaa 	bl	80004d8 <__aeabi_dmul>
 8008784:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008788:	e7c3      	b.n	8008712 <_dtoa_r+0x52a>
 800878a:	bf00      	nop
 800878c:	0800bb30 	.word	0x0800bb30
 8008790:	0800bb08 	.word	0x0800bb08
 8008794:	3ff00000 	.word	0x3ff00000
 8008798:	40240000 	.word	0x40240000
 800879c:	401c0000 	.word	0x401c0000
 80087a0:	40140000 	.word	0x40140000
 80087a4:	3fe00000 	.word	0x3fe00000
 80087a8:	4630      	mov	r0, r6
 80087aa:	4639      	mov	r1, r7
 80087ac:	f7f7 fe94 	bl	80004d8 <__aeabi_dmul>
 80087b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80087b6:	9c03      	ldr	r4, [sp, #12]
 80087b8:	9314      	str	r3, [sp, #80]	; 0x50
 80087ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087be:	f7f8 f93b 	bl	8000a38 <__aeabi_d2iz>
 80087c2:	9015      	str	r0, [sp, #84]	; 0x54
 80087c4:	f7f7 fe1e 	bl	8000404 <__aeabi_i2d>
 80087c8:	4602      	mov	r2, r0
 80087ca:	460b      	mov	r3, r1
 80087cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087d0:	f7f7 fcca 	bl	8000168 <__aeabi_dsub>
 80087d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087d6:	4606      	mov	r6, r0
 80087d8:	3330      	adds	r3, #48	; 0x30
 80087da:	f804 3b01 	strb.w	r3, [r4], #1
 80087de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087e0:	460f      	mov	r7, r1
 80087e2:	429c      	cmp	r4, r3
 80087e4:	f04f 0200 	mov.w	r2, #0
 80087e8:	d124      	bne.n	8008834 <_dtoa_r+0x64c>
 80087ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80087ee:	4bb0      	ldr	r3, [pc, #704]	; (8008ab0 <_dtoa_r+0x8c8>)
 80087f0:	f7f7 fcbc 	bl	800016c <__adddf3>
 80087f4:	4602      	mov	r2, r0
 80087f6:	460b      	mov	r3, r1
 80087f8:	4630      	mov	r0, r6
 80087fa:	4639      	mov	r1, r7
 80087fc:	f7f8 f8fc 	bl	80009f8 <__aeabi_dcmpgt>
 8008800:	2800      	cmp	r0, #0
 8008802:	d163      	bne.n	80088cc <_dtoa_r+0x6e4>
 8008804:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008808:	2000      	movs	r0, #0
 800880a:	49a9      	ldr	r1, [pc, #676]	; (8008ab0 <_dtoa_r+0x8c8>)
 800880c:	f7f7 fcac 	bl	8000168 <__aeabi_dsub>
 8008810:	4602      	mov	r2, r0
 8008812:	460b      	mov	r3, r1
 8008814:	4630      	mov	r0, r6
 8008816:	4639      	mov	r1, r7
 8008818:	f7f8 f8d0 	bl	80009bc <__aeabi_dcmplt>
 800881c:	2800      	cmp	r0, #0
 800881e:	f43f af1d 	beq.w	800865c <_dtoa_r+0x474>
 8008822:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008824:	1e7b      	subs	r3, r7, #1
 8008826:	9314      	str	r3, [sp, #80]	; 0x50
 8008828:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800882c:	2b30      	cmp	r3, #48	; 0x30
 800882e:	d0f8      	beq.n	8008822 <_dtoa_r+0x63a>
 8008830:	46c2      	mov	sl, r8
 8008832:	e03b      	b.n	80088ac <_dtoa_r+0x6c4>
 8008834:	4b9f      	ldr	r3, [pc, #636]	; (8008ab4 <_dtoa_r+0x8cc>)
 8008836:	f7f7 fe4f 	bl	80004d8 <__aeabi_dmul>
 800883a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800883e:	e7bc      	b.n	80087ba <_dtoa_r+0x5d2>
 8008840:	9f03      	ldr	r7, [sp, #12]
 8008842:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008846:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800884a:	4640      	mov	r0, r8
 800884c:	4649      	mov	r1, r9
 800884e:	f7f7 ff6d 	bl	800072c <__aeabi_ddiv>
 8008852:	f7f8 f8f1 	bl	8000a38 <__aeabi_d2iz>
 8008856:	4604      	mov	r4, r0
 8008858:	f7f7 fdd4 	bl	8000404 <__aeabi_i2d>
 800885c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008860:	f7f7 fe3a 	bl	80004d8 <__aeabi_dmul>
 8008864:	4602      	mov	r2, r0
 8008866:	460b      	mov	r3, r1
 8008868:	4640      	mov	r0, r8
 800886a:	4649      	mov	r1, r9
 800886c:	f7f7 fc7c 	bl	8000168 <__aeabi_dsub>
 8008870:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008874:	f807 6b01 	strb.w	r6, [r7], #1
 8008878:	9e03      	ldr	r6, [sp, #12]
 800887a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800887e:	1bbe      	subs	r6, r7, r6
 8008880:	45b4      	cmp	ip, r6
 8008882:	4602      	mov	r2, r0
 8008884:	460b      	mov	r3, r1
 8008886:	d136      	bne.n	80088f6 <_dtoa_r+0x70e>
 8008888:	f7f7 fc70 	bl	800016c <__adddf3>
 800888c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008890:	4680      	mov	r8, r0
 8008892:	4689      	mov	r9, r1
 8008894:	f7f8 f8b0 	bl	80009f8 <__aeabi_dcmpgt>
 8008898:	bb58      	cbnz	r0, 80088f2 <_dtoa_r+0x70a>
 800889a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800889e:	4640      	mov	r0, r8
 80088a0:	4649      	mov	r1, r9
 80088a2:	f7f8 f881 	bl	80009a8 <__aeabi_dcmpeq>
 80088a6:	b108      	cbz	r0, 80088ac <_dtoa_r+0x6c4>
 80088a8:	07e1      	lsls	r1, r4, #31
 80088aa:	d422      	bmi.n	80088f2 <_dtoa_r+0x70a>
 80088ac:	4628      	mov	r0, r5
 80088ae:	4659      	mov	r1, fp
 80088b0:	f000 fae6 	bl	8008e80 <_Bfree>
 80088b4:	2300      	movs	r3, #0
 80088b6:	703b      	strb	r3, [r7, #0]
 80088b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80088ba:	f10a 0001 	add.w	r0, sl, #1
 80088be:	6018      	str	r0, [r3, #0]
 80088c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	f43f acde 	beq.w	8008284 <_dtoa_r+0x9c>
 80088c8:	601f      	str	r7, [r3, #0]
 80088ca:	e4db      	b.n	8008284 <_dtoa_r+0x9c>
 80088cc:	4627      	mov	r7, r4
 80088ce:	463b      	mov	r3, r7
 80088d0:	461f      	mov	r7, r3
 80088d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088d6:	2a39      	cmp	r2, #57	; 0x39
 80088d8:	d107      	bne.n	80088ea <_dtoa_r+0x702>
 80088da:	9a03      	ldr	r2, [sp, #12]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d1f7      	bne.n	80088d0 <_dtoa_r+0x6e8>
 80088e0:	2230      	movs	r2, #48	; 0x30
 80088e2:	9903      	ldr	r1, [sp, #12]
 80088e4:	f108 0801 	add.w	r8, r8, #1
 80088e8:	700a      	strb	r2, [r1, #0]
 80088ea:	781a      	ldrb	r2, [r3, #0]
 80088ec:	3201      	adds	r2, #1
 80088ee:	701a      	strb	r2, [r3, #0]
 80088f0:	e79e      	b.n	8008830 <_dtoa_r+0x648>
 80088f2:	46d0      	mov	r8, sl
 80088f4:	e7eb      	b.n	80088ce <_dtoa_r+0x6e6>
 80088f6:	2200      	movs	r2, #0
 80088f8:	4b6e      	ldr	r3, [pc, #440]	; (8008ab4 <_dtoa_r+0x8cc>)
 80088fa:	f7f7 fded 	bl	80004d8 <__aeabi_dmul>
 80088fe:	2200      	movs	r2, #0
 8008900:	2300      	movs	r3, #0
 8008902:	4680      	mov	r8, r0
 8008904:	4689      	mov	r9, r1
 8008906:	f7f8 f84f 	bl	80009a8 <__aeabi_dcmpeq>
 800890a:	2800      	cmp	r0, #0
 800890c:	d09b      	beq.n	8008846 <_dtoa_r+0x65e>
 800890e:	e7cd      	b.n	80088ac <_dtoa_r+0x6c4>
 8008910:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008912:	2a00      	cmp	r2, #0
 8008914:	f000 80d0 	beq.w	8008ab8 <_dtoa_r+0x8d0>
 8008918:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800891a:	2a01      	cmp	r2, #1
 800891c:	f300 80ae 	bgt.w	8008a7c <_dtoa_r+0x894>
 8008920:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008922:	2a00      	cmp	r2, #0
 8008924:	f000 80a6 	beq.w	8008a74 <_dtoa_r+0x88c>
 8008928:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800892c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800892e:	9f06      	ldr	r7, [sp, #24]
 8008930:	9a06      	ldr	r2, [sp, #24]
 8008932:	2101      	movs	r1, #1
 8008934:	441a      	add	r2, r3
 8008936:	9206      	str	r2, [sp, #24]
 8008938:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800893a:	4628      	mov	r0, r5
 800893c:	441a      	add	r2, r3
 800893e:	9209      	str	r2, [sp, #36]	; 0x24
 8008940:	f000 fb54 	bl	8008fec <__i2b>
 8008944:	4606      	mov	r6, r0
 8008946:	2f00      	cmp	r7, #0
 8008948:	dd0c      	ble.n	8008964 <_dtoa_r+0x77c>
 800894a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800894c:	2b00      	cmp	r3, #0
 800894e:	dd09      	ble.n	8008964 <_dtoa_r+0x77c>
 8008950:	42bb      	cmp	r3, r7
 8008952:	bfa8      	it	ge
 8008954:	463b      	movge	r3, r7
 8008956:	9a06      	ldr	r2, [sp, #24]
 8008958:	1aff      	subs	r7, r7, r3
 800895a:	1ad2      	subs	r2, r2, r3
 800895c:	9206      	str	r2, [sp, #24]
 800895e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008960:	1ad3      	subs	r3, r2, r3
 8008962:	9309      	str	r3, [sp, #36]	; 0x24
 8008964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008966:	b1f3      	cbz	r3, 80089a6 <_dtoa_r+0x7be>
 8008968:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800896a:	2b00      	cmp	r3, #0
 800896c:	f000 80a8 	beq.w	8008ac0 <_dtoa_r+0x8d8>
 8008970:	2c00      	cmp	r4, #0
 8008972:	dd10      	ble.n	8008996 <_dtoa_r+0x7ae>
 8008974:	4631      	mov	r1, r6
 8008976:	4622      	mov	r2, r4
 8008978:	4628      	mov	r0, r5
 800897a:	f000 fbf5 	bl	8009168 <__pow5mult>
 800897e:	465a      	mov	r2, fp
 8008980:	4601      	mov	r1, r0
 8008982:	4606      	mov	r6, r0
 8008984:	4628      	mov	r0, r5
 8008986:	f000 fb47 	bl	8009018 <__multiply>
 800898a:	4680      	mov	r8, r0
 800898c:	4659      	mov	r1, fp
 800898e:	4628      	mov	r0, r5
 8008990:	f000 fa76 	bl	8008e80 <_Bfree>
 8008994:	46c3      	mov	fp, r8
 8008996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008998:	1b1a      	subs	r2, r3, r4
 800899a:	d004      	beq.n	80089a6 <_dtoa_r+0x7be>
 800899c:	4659      	mov	r1, fp
 800899e:	4628      	mov	r0, r5
 80089a0:	f000 fbe2 	bl	8009168 <__pow5mult>
 80089a4:	4683      	mov	fp, r0
 80089a6:	2101      	movs	r1, #1
 80089a8:	4628      	mov	r0, r5
 80089aa:	f000 fb1f 	bl	8008fec <__i2b>
 80089ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089b0:	4604      	mov	r4, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	f340 8086 	ble.w	8008ac4 <_dtoa_r+0x8dc>
 80089b8:	461a      	mov	r2, r3
 80089ba:	4601      	mov	r1, r0
 80089bc:	4628      	mov	r0, r5
 80089be:	f000 fbd3 	bl	8009168 <__pow5mult>
 80089c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80089c4:	4604      	mov	r4, r0
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	dd7f      	ble.n	8008aca <_dtoa_r+0x8e2>
 80089ca:	f04f 0800 	mov.w	r8, #0
 80089ce:	6923      	ldr	r3, [r4, #16]
 80089d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80089d4:	6918      	ldr	r0, [r3, #16]
 80089d6:	f000 fabb 	bl	8008f50 <__hi0bits>
 80089da:	f1c0 0020 	rsb	r0, r0, #32
 80089de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089e0:	4418      	add	r0, r3
 80089e2:	f010 001f 	ands.w	r0, r0, #31
 80089e6:	f000 8092 	beq.w	8008b0e <_dtoa_r+0x926>
 80089ea:	f1c0 0320 	rsb	r3, r0, #32
 80089ee:	2b04      	cmp	r3, #4
 80089f0:	f340 808a 	ble.w	8008b08 <_dtoa_r+0x920>
 80089f4:	f1c0 001c 	rsb	r0, r0, #28
 80089f8:	9b06      	ldr	r3, [sp, #24]
 80089fa:	4407      	add	r7, r0
 80089fc:	4403      	add	r3, r0
 80089fe:	9306      	str	r3, [sp, #24]
 8008a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a02:	4403      	add	r3, r0
 8008a04:	9309      	str	r3, [sp, #36]	; 0x24
 8008a06:	9b06      	ldr	r3, [sp, #24]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	dd05      	ble.n	8008a18 <_dtoa_r+0x830>
 8008a0c:	4659      	mov	r1, fp
 8008a0e:	461a      	mov	r2, r3
 8008a10:	4628      	mov	r0, r5
 8008a12:	f000 fc03 	bl	800921c <__lshift>
 8008a16:	4683      	mov	fp, r0
 8008a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	dd05      	ble.n	8008a2a <_dtoa_r+0x842>
 8008a1e:	4621      	mov	r1, r4
 8008a20:	461a      	mov	r2, r3
 8008a22:	4628      	mov	r0, r5
 8008a24:	f000 fbfa 	bl	800921c <__lshift>
 8008a28:	4604      	mov	r4, r0
 8008a2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d070      	beq.n	8008b12 <_dtoa_r+0x92a>
 8008a30:	4621      	mov	r1, r4
 8008a32:	4658      	mov	r0, fp
 8008a34:	f000 fc62 	bl	80092fc <__mcmp>
 8008a38:	2800      	cmp	r0, #0
 8008a3a:	da6a      	bge.n	8008b12 <_dtoa_r+0x92a>
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	4659      	mov	r1, fp
 8008a40:	220a      	movs	r2, #10
 8008a42:	4628      	mov	r0, r5
 8008a44:	f000 fa3e 	bl	8008ec4 <__multadd>
 8008a48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a4a:	4683      	mov	fp, r0
 8008a4c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	f000 8194 	beq.w	8008d7e <_dtoa_r+0xb96>
 8008a56:	4631      	mov	r1, r6
 8008a58:	2300      	movs	r3, #0
 8008a5a:	220a      	movs	r2, #10
 8008a5c:	4628      	mov	r0, r5
 8008a5e:	f000 fa31 	bl	8008ec4 <__multadd>
 8008a62:	f1b9 0f00 	cmp.w	r9, #0
 8008a66:	4606      	mov	r6, r0
 8008a68:	f300 8093 	bgt.w	8008b92 <_dtoa_r+0x9aa>
 8008a6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	dc57      	bgt.n	8008b22 <_dtoa_r+0x93a>
 8008a72:	e08e      	b.n	8008b92 <_dtoa_r+0x9aa>
 8008a74:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008a76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008a7a:	e757      	b.n	800892c <_dtoa_r+0x744>
 8008a7c:	9b08      	ldr	r3, [sp, #32]
 8008a7e:	1e5c      	subs	r4, r3, #1
 8008a80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a82:	42a3      	cmp	r3, r4
 8008a84:	bfb7      	itett	lt
 8008a86:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008a88:	1b1c      	subge	r4, r3, r4
 8008a8a:	1ae2      	sublt	r2, r4, r3
 8008a8c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008a8e:	bfbe      	ittt	lt
 8008a90:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008a92:	189b      	addlt	r3, r3, r2
 8008a94:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008a96:	9b08      	ldr	r3, [sp, #32]
 8008a98:	bfb8      	it	lt
 8008a9a:	2400      	movlt	r4, #0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	bfbb      	ittet	lt
 8008aa0:	9b06      	ldrlt	r3, [sp, #24]
 8008aa2:	9a08      	ldrlt	r2, [sp, #32]
 8008aa4:	9f06      	ldrge	r7, [sp, #24]
 8008aa6:	1a9f      	sublt	r7, r3, r2
 8008aa8:	bfac      	ite	ge
 8008aaa:	9b08      	ldrge	r3, [sp, #32]
 8008aac:	2300      	movlt	r3, #0
 8008aae:	e73f      	b.n	8008930 <_dtoa_r+0x748>
 8008ab0:	3fe00000 	.word	0x3fe00000
 8008ab4:	40240000 	.word	0x40240000
 8008ab8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008aba:	9f06      	ldr	r7, [sp, #24]
 8008abc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008abe:	e742      	b.n	8008946 <_dtoa_r+0x75e>
 8008ac0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ac2:	e76b      	b.n	800899c <_dtoa_r+0x7b4>
 8008ac4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	dc19      	bgt.n	8008afe <_dtoa_r+0x916>
 8008aca:	9b04      	ldr	r3, [sp, #16]
 8008acc:	b9bb      	cbnz	r3, 8008afe <_dtoa_r+0x916>
 8008ace:	9b05      	ldr	r3, [sp, #20]
 8008ad0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ad4:	b99b      	cbnz	r3, 8008afe <_dtoa_r+0x916>
 8008ad6:	9b05      	ldr	r3, [sp, #20]
 8008ad8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008adc:	0d1b      	lsrs	r3, r3, #20
 8008ade:	051b      	lsls	r3, r3, #20
 8008ae0:	b183      	cbz	r3, 8008b04 <_dtoa_r+0x91c>
 8008ae2:	f04f 0801 	mov.w	r8, #1
 8008ae6:	9b06      	ldr	r3, [sp, #24]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	9306      	str	r3, [sp, #24]
 8008aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aee:	3301      	adds	r3, #1
 8008af0:	9309      	str	r3, [sp, #36]	; 0x24
 8008af2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	f47f af6a 	bne.w	80089ce <_dtoa_r+0x7e6>
 8008afa:	2001      	movs	r0, #1
 8008afc:	e76f      	b.n	80089de <_dtoa_r+0x7f6>
 8008afe:	f04f 0800 	mov.w	r8, #0
 8008b02:	e7f6      	b.n	8008af2 <_dtoa_r+0x90a>
 8008b04:	4698      	mov	r8, r3
 8008b06:	e7f4      	b.n	8008af2 <_dtoa_r+0x90a>
 8008b08:	f43f af7d 	beq.w	8008a06 <_dtoa_r+0x81e>
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	301c      	adds	r0, #28
 8008b10:	e772      	b.n	80089f8 <_dtoa_r+0x810>
 8008b12:	9b08      	ldr	r3, [sp, #32]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	dc36      	bgt.n	8008b86 <_dtoa_r+0x99e>
 8008b18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b1a:	2b02      	cmp	r3, #2
 8008b1c:	dd33      	ble.n	8008b86 <_dtoa_r+0x99e>
 8008b1e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b22:	f1b9 0f00 	cmp.w	r9, #0
 8008b26:	d10d      	bne.n	8008b44 <_dtoa_r+0x95c>
 8008b28:	4621      	mov	r1, r4
 8008b2a:	464b      	mov	r3, r9
 8008b2c:	2205      	movs	r2, #5
 8008b2e:	4628      	mov	r0, r5
 8008b30:	f000 f9c8 	bl	8008ec4 <__multadd>
 8008b34:	4601      	mov	r1, r0
 8008b36:	4604      	mov	r4, r0
 8008b38:	4658      	mov	r0, fp
 8008b3a:	f000 fbdf 	bl	80092fc <__mcmp>
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	f73f adb8 	bgt.w	80086b4 <_dtoa_r+0x4cc>
 8008b44:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008b46:	9f03      	ldr	r7, [sp, #12]
 8008b48:	ea6f 0a03 	mvn.w	sl, r3
 8008b4c:	f04f 0800 	mov.w	r8, #0
 8008b50:	4621      	mov	r1, r4
 8008b52:	4628      	mov	r0, r5
 8008b54:	f000 f994 	bl	8008e80 <_Bfree>
 8008b58:	2e00      	cmp	r6, #0
 8008b5a:	f43f aea7 	beq.w	80088ac <_dtoa_r+0x6c4>
 8008b5e:	f1b8 0f00 	cmp.w	r8, #0
 8008b62:	d005      	beq.n	8008b70 <_dtoa_r+0x988>
 8008b64:	45b0      	cmp	r8, r6
 8008b66:	d003      	beq.n	8008b70 <_dtoa_r+0x988>
 8008b68:	4641      	mov	r1, r8
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	f000 f988 	bl	8008e80 <_Bfree>
 8008b70:	4631      	mov	r1, r6
 8008b72:	4628      	mov	r0, r5
 8008b74:	f000 f984 	bl	8008e80 <_Bfree>
 8008b78:	e698      	b.n	80088ac <_dtoa_r+0x6c4>
 8008b7a:	2400      	movs	r4, #0
 8008b7c:	4626      	mov	r6, r4
 8008b7e:	e7e1      	b.n	8008b44 <_dtoa_r+0x95c>
 8008b80:	46c2      	mov	sl, r8
 8008b82:	4626      	mov	r6, r4
 8008b84:	e596      	b.n	80086b4 <_dtoa_r+0x4cc>
 8008b86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	f000 80fd 	beq.w	8008d8c <_dtoa_r+0xba4>
 8008b92:	2f00      	cmp	r7, #0
 8008b94:	dd05      	ble.n	8008ba2 <_dtoa_r+0x9ba>
 8008b96:	4631      	mov	r1, r6
 8008b98:	463a      	mov	r2, r7
 8008b9a:	4628      	mov	r0, r5
 8008b9c:	f000 fb3e 	bl	800921c <__lshift>
 8008ba0:	4606      	mov	r6, r0
 8008ba2:	f1b8 0f00 	cmp.w	r8, #0
 8008ba6:	d05c      	beq.n	8008c62 <_dtoa_r+0xa7a>
 8008ba8:	4628      	mov	r0, r5
 8008baa:	6871      	ldr	r1, [r6, #4]
 8008bac:	f000 f928 	bl	8008e00 <_Balloc>
 8008bb0:	4607      	mov	r7, r0
 8008bb2:	b928      	cbnz	r0, 8008bc0 <_dtoa_r+0x9d8>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008bba:	4b7f      	ldr	r3, [pc, #508]	; (8008db8 <_dtoa_r+0xbd0>)
 8008bbc:	f7ff bb28 	b.w	8008210 <_dtoa_r+0x28>
 8008bc0:	6932      	ldr	r2, [r6, #16]
 8008bc2:	f106 010c 	add.w	r1, r6, #12
 8008bc6:	3202      	adds	r2, #2
 8008bc8:	0092      	lsls	r2, r2, #2
 8008bca:	300c      	adds	r0, #12
 8008bcc:	f7fe fcfe 	bl	80075cc <memcpy>
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	4639      	mov	r1, r7
 8008bd4:	4628      	mov	r0, r5
 8008bd6:	f000 fb21 	bl	800921c <__lshift>
 8008bda:	46b0      	mov	r8, r6
 8008bdc:	4606      	mov	r6, r0
 8008bde:	9b03      	ldr	r3, [sp, #12]
 8008be0:	3301      	adds	r3, #1
 8008be2:	9308      	str	r3, [sp, #32]
 8008be4:	9b03      	ldr	r3, [sp, #12]
 8008be6:	444b      	add	r3, r9
 8008be8:	930a      	str	r3, [sp, #40]	; 0x28
 8008bea:	9b04      	ldr	r3, [sp, #16]
 8008bec:	f003 0301 	and.w	r3, r3, #1
 8008bf0:	9309      	str	r3, [sp, #36]	; 0x24
 8008bf2:	9b08      	ldr	r3, [sp, #32]
 8008bf4:	4621      	mov	r1, r4
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	4658      	mov	r0, fp
 8008bfa:	9304      	str	r3, [sp, #16]
 8008bfc:	f7ff fa68 	bl	80080d0 <quorem>
 8008c00:	4603      	mov	r3, r0
 8008c02:	4641      	mov	r1, r8
 8008c04:	3330      	adds	r3, #48	; 0x30
 8008c06:	9006      	str	r0, [sp, #24]
 8008c08:	4658      	mov	r0, fp
 8008c0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c0c:	f000 fb76 	bl	80092fc <__mcmp>
 8008c10:	4632      	mov	r2, r6
 8008c12:	4681      	mov	r9, r0
 8008c14:	4621      	mov	r1, r4
 8008c16:	4628      	mov	r0, r5
 8008c18:	f000 fb8c 	bl	8009334 <__mdiff>
 8008c1c:	68c2      	ldr	r2, [r0, #12]
 8008c1e:	4607      	mov	r7, r0
 8008c20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c22:	bb02      	cbnz	r2, 8008c66 <_dtoa_r+0xa7e>
 8008c24:	4601      	mov	r1, r0
 8008c26:	4658      	mov	r0, fp
 8008c28:	f000 fb68 	bl	80092fc <__mcmp>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c30:	4639      	mov	r1, r7
 8008c32:	4628      	mov	r0, r5
 8008c34:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008c38:	f000 f922 	bl	8008e80 <_Bfree>
 8008c3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c40:	9f08      	ldr	r7, [sp, #32]
 8008c42:	ea43 0102 	orr.w	r1, r3, r2
 8008c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c48:	430b      	orrs	r3, r1
 8008c4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c4c:	d10d      	bne.n	8008c6a <_dtoa_r+0xa82>
 8008c4e:	2b39      	cmp	r3, #57	; 0x39
 8008c50:	d029      	beq.n	8008ca6 <_dtoa_r+0xabe>
 8008c52:	f1b9 0f00 	cmp.w	r9, #0
 8008c56:	dd01      	ble.n	8008c5c <_dtoa_r+0xa74>
 8008c58:	9b06      	ldr	r3, [sp, #24]
 8008c5a:	3331      	adds	r3, #49	; 0x31
 8008c5c:	9a04      	ldr	r2, [sp, #16]
 8008c5e:	7013      	strb	r3, [r2, #0]
 8008c60:	e776      	b.n	8008b50 <_dtoa_r+0x968>
 8008c62:	4630      	mov	r0, r6
 8008c64:	e7b9      	b.n	8008bda <_dtoa_r+0x9f2>
 8008c66:	2201      	movs	r2, #1
 8008c68:	e7e2      	b.n	8008c30 <_dtoa_r+0xa48>
 8008c6a:	f1b9 0f00 	cmp.w	r9, #0
 8008c6e:	db06      	blt.n	8008c7e <_dtoa_r+0xa96>
 8008c70:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008c72:	ea41 0909 	orr.w	r9, r1, r9
 8008c76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c78:	ea59 0101 	orrs.w	r1, r9, r1
 8008c7c:	d120      	bne.n	8008cc0 <_dtoa_r+0xad8>
 8008c7e:	2a00      	cmp	r2, #0
 8008c80:	ddec      	ble.n	8008c5c <_dtoa_r+0xa74>
 8008c82:	4659      	mov	r1, fp
 8008c84:	2201      	movs	r2, #1
 8008c86:	4628      	mov	r0, r5
 8008c88:	9308      	str	r3, [sp, #32]
 8008c8a:	f000 fac7 	bl	800921c <__lshift>
 8008c8e:	4621      	mov	r1, r4
 8008c90:	4683      	mov	fp, r0
 8008c92:	f000 fb33 	bl	80092fc <__mcmp>
 8008c96:	2800      	cmp	r0, #0
 8008c98:	9b08      	ldr	r3, [sp, #32]
 8008c9a:	dc02      	bgt.n	8008ca2 <_dtoa_r+0xaba>
 8008c9c:	d1de      	bne.n	8008c5c <_dtoa_r+0xa74>
 8008c9e:	07da      	lsls	r2, r3, #31
 8008ca0:	d5dc      	bpl.n	8008c5c <_dtoa_r+0xa74>
 8008ca2:	2b39      	cmp	r3, #57	; 0x39
 8008ca4:	d1d8      	bne.n	8008c58 <_dtoa_r+0xa70>
 8008ca6:	2339      	movs	r3, #57	; 0x39
 8008ca8:	9a04      	ldr	r2, [sp, #16]
 8008caa:	7013      	strb	r3, [r2, #0]
 8008cac:	463b      	mov	r3, r7
 8008cae:	461f      	mov	r7, r3
 8008cb0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008cb4:	3b01      	subs	r3, #1
 8008cb6:	2a39      	cmp	r2, #57	; 0x39
 8008cb8:	d050      	beq.n	8008d5c <_dtoa_r+0xb74>
 8008cba:	3201      	adds	r2, #1
 8008cbc:	701a      	strb	r2, [r3, #0]
 8008cbe:	e747      	b.n	8008b50 <_dtoa_r+0x968>
 8008cc0:	2a00      	cmp	r2, #0
 8008cc2:	dd03      	ble.n	8008ccc <_dtoa_r+0xae4>
 8008cc4:	2b39      	cmp	r3, #57	; 0x39
 8008cc6:	d0ee      	beq.n	8008ca6 <_dtoa_r+0xabe>
 8008cc8:	3301      	adds	r3, #1
 8008cca:	e7c7      	b.n	8008c5c <_dtoa_r+0xa74>
 8008ccc:	9a08      	ldr	r2, [sp, #32]
 8008cce:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008cd0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008cd4:	428a      	cmp	r2, r1
 8008cd6:	d02a      	beq.n	8008d2e <_dtoa_r+0xb46>
 8008cd8:	4659      	mov	r1, fp
 8008cda:	2300      	movs	r3, #0
 8008cdc:	220a      	movs	r2, #10
 8008cde:	4628      	mov	r0, r5
 8008ce0:	f000 f8f0 	bl	8008ec4 <__multadd>
 8008ce4:	45b0      	cmp	r8, r6
 8008ce6:	4683      	mov	fp, r0
 8008ce8:	f04f 0300 	mov.w	r3, #0
 8008cec:	f04f 020a 	mov.w	r2, #10
 8008cf0:	4641      	mov	r1, r8
 8008cf2:	4628      	mov	r0, r5
 8008cf4:	d107      	bne.n	8008d06 <_dtoa_r+0xb1e>
 8008cf6:	f000 f8e5 	bl	8008ec4 <__multadd>
 8008cfa:	4680      	mov	r8, r0
 8008cfc:	4606      	mov	r6, r0
 8008cfe:	9b08      	ldr	r3, [sp, #32]
 8008d00:	3301      	adds	r3, #1
 8008d02:	9308      	str	r3, [sp, #32]
 8008d04:	e775      	b.n	8008bf2 <_dtoa_r+0xa0a>
 8008d06:	f000 f8dd 	bl	8008ec4 <__multadd>
 8008d0a:	4631      	mov	r1, r6
 8008d0c:	4680      	mov	r8, r0
 8008d0e:	2300      	movs	r3, #0
 8008d10:	220a      	movs	r2, #10
 8008d12:	4628      	mov	r0, r5
 8008d14:	f000 f8d6 	bl	8008ec4 <__multadd>
 8008d18:	4606      	mov	r6, r0
 8008d1a:	e7f0      	b.n	8008cfe <_dtoa_r+0xb16>
 8008d1c:	f1b9 0f00 	cmp.w	r9, #0
 8008d20:	bfcc      	ite	gt
 8008d22:	464f      	movgt	r7, r9
 8008d24:	2701      	movle	r7, #1
 8008d26:	f04f 0800 	mov.w	r8, #0
 8008d2a:	9a03      	ldr	r2, [sp, #12]
 8008d2c:	4417      	add	r7, r2
 8008d2e:	4659      	mov	r1, fp
 8008d30:	2201      	movs	r2, #1
 8008d32:	4628      	mov	r0, r5
 8008d34:	9308      	str	r3, [sp, #32]
 8008d36:	f000 fa71 	bl	800921c <__lshift>
 8008d3a:	4621      	mov	r1, r4
 8008d3c:	4683      	mov	fp, r0
 8008d3e:	f000 fadd 	bl	80092fc <__mcmp>
 8008d42:	2800      	cmp	r0, #0
 8008d44:	dcb2      	bgt.n	8008cac <_dtoa_r+0xac4>
 8008d46:	d102      	bne.n	8008d4e <_dtoa_r+0xb66>
 8008d48:	9b08      	ldr	r3, [sp, #32]
 8008d4a:	07db      	lsls	r3, r3, #31
 8008d4c:	d4ae      	bmi.n	8008cac <_dtoa_r+0xac4>
 8008d4e:	463b      	mov	r3, r7
 8008d50:	461f      	mov	r7, r3
 8008d52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d56:	2a30      	cmp	r2, #48	; 0x30
 8008d58:	d0fa      	beq.n	8008d50 <_dtoa_r+0xb68>
 8008d5a:	e6f9      	b.n	8008b50 <_dtoa_r+0x968>
 8008d5c:	9a03      	ldr	r2, [sp, #12]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d1a5      	bne.n	8008cae <_dtoa_r+0xac6>
 8008d62:	2331      	movs	r3, #49	; 0x31
 8008d64:	f10a 0a01 	add.w	sl, sl, #1
 8008d68:	e779      	b.n	8008c5e <_dtoa_r+0xa76>
 8008d6a:	4b14      	ldr	r3, [pc, #80]	; (8008dbc <_dtoa_r+0xbd4>)
 8008d6c:	f7ff baa8 	b.w	80082c0 <_dtoa_r+0xd8>
 8008d70:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	f47f aa81 	bne.w	800827a <_dtoa_r+0x92>
 8008d78:	4b11      	ldr	r3, [pc, #68]	; (8008dc0 <_dtoa_r+0xbd8>)
 8008d7a:	f7ff baa1 	b.w	80082c0 <_dtoa_r+0xd8>
 8008d7e:	f1b9 0f00 	cmp.w	r9, #0
 8008d82:	dc03      	bgt.n	8008d8c <_dtoa_r+0xba4>
 8008d84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d86:	2b02      	cmp	r3, #2
 8008d88:	f73f aecb 	bgt.w	8008b22 <_dtoa_r+0x93a>
 8008d8c:	9f03      	ldr	r7, [sp, #12]
 8008d8e:	4621      	mov	r1, r4
 8008d90:	4658      	mov	r0, fp
 8008d92:	f7ff f99d 	bl	80080d0 <quorem>
 8008d96:	9a03      	ldr	r2, [sp, #12]
 8008d98:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008d9c:	f807 3b01 	strb.w	r3, [r7], #1
 8008da0:	1aba      	subs	r2, r7, r2
 8008da2:	4591      	cmp	r9, r2
 8008da4:	ddba      	ble.n	8008d1c <_dtoa_r+0xb34>
 8008da6:	4659      	mov	r1, fp
 8008da8:	2300      	movs	r3, #0
 8008daa:	220a      	movs	r2, #10
 8008dac:	4628      	mov	r0, r5
 8008dae:	f000 f889 	bl	8008ec4 <__multadd>
 8008db2:	4683      	mov	fp, r0
 8008db4:	e7eb      	b.n	8008d8e <_dtoa_r+0xba6>
 8008db6:	bf00      	nop
 8008db8:	0800ba9b 	.word	0x0800ba9b
 8008dbc:	0800b9f8 	.word	0x0800b9f8
 8008dc0:	0800ba1c 	.word	0x0800ba1c

08008dc4 <_localeconv_r>:
 8008dc4:	4800      	ldr	r0, [pc, #0]	; (8008dc8 <_localeconv_r+0x4>)
 8008dc6:	4770      	bx	lr
 8008dc8:	20000170 	.word	0x20000170

08008dcc <memchr>:
 8008dcc:	4603      	mov	r3, r0
 8008dce:	b510      	push	{r4, lr}
 8008dd0:	b2c9      	uxtb	r1, r1
 8008dd2:	4402      	add	r2, r0
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	d101      	bne.n	8008dde <memchr+0x12>
 8008dda:	2000      	movs	r0, #0
 8008ddc:	e003      	b.n	8008de6 <memchr+0x1a>
 8008dde:	7804      	ldrb	r4, [r0, #0]
 8008de0:	3301      	adds	r3, #1
 8008de2:	428c      	cmp	r4, r1
 8008de4:	d1f6      	bne.n	8008dd4 <memchr+0x8>
 8008de6:	bd10      	pop	{r4, pc}

08008de8 <__malloc_lock>:
 8008de8:	4801      	ldr	r0, [pc, #4]	; (8008df0 <__malloc_lock+0x8>)
 8008dea:	f000 bd2c 	b.w	8009846 <__retarget_lock_acquire_recursive>
 8008dee:	bf00      	nop
 8008df0:	20000424 	.word	0x20000424

08008df4 <__malloc_unlock>:
 8008df4:	4801      	ldr	r0, [pc, #4]	; (8008dfc <__malloc_unlock+0x8>)
 8008df6:	f000 bd27 	b.w	8009848 <__retarget_lock_release_recursive>
 8008dfa:	bf00      	nop
 8008dfc:	20000424 	.word	0x20000424

08008e00 <_Balloc>:
 8008e00:	b570      	push	{r4, r5, r6, lr}
 8008e02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e04:	4604      	mov	r4, r0
 8008e06:	460d      	mov	r5, r1
 8008e08:	b976      	cbnz	r6, 8008e28 <_Balloc+0x28>
 8008e0a:	2010      	movs	r0, #16
 8008e0c:	f7fe fbd6 	bl	80075bc <malloc>
 8008e10:	4602      	mov	r2, r0
 8008e12:	6260      	str	r0, [r4, #36]	; 0x24
 8008e14:	b920      	cbnz	r0, 8008e20 <_Balloc+0x20>
 8008e16:	2166      	movs	r1, #102	; 0x66
 8008e18:	4b17      	ldr	r3, [pc, #92]	; (8008e78 <_Balloc+0x78>)
 8008e1a:	4818      	ldr	r0, [pc, #96]	; (8008e7c <_Balloc+0x7c>)
 8008e1c:	f000 fce2 	bl	80097e4 <__assert_func>
 8008e20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e24:	6006      	str	r6, [r0, #0]
 8008e26:	60c6      	str	r6, [r0, #12]
 8008e28:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008e2a:	68f3      	ldr	r3, [r6, #12]
 8008e2c:	b183      	cbz	r3, 8008e50 <_Balloc+0x50>
 8008e2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e36:	b9b8      	cbnz	r0, 8008e68 <_Balloc+0x68>
 8008e38:	2101      	movs	r1, #1
 8008e3a:	fa01 f605 	lsl.w	r6, r1, r5
 8008e3e:	1d72      	adds	r2, r6, #5
 8008e40:	4620      	mov	r0, r4
 8008e42:	0092      	lsls	r2, r2, #2
 8008e44:	f000 fb5e 	bl	8009504 <_calloc_r>
 8008e48:	b160      	cbz	r0, 8008e64 <_Balloc+0x64>
 8008e4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e4e:	e00e      	b.n	8008e6e <_Balloc+0x6e>
 8008e50:	2221      	movs	r2, #33	; 0x21
 8008e52:	2104      	movs	r1, #4
 8008e54:	4620      	mov	r0, r4
 8008e56:	f000 fb55 	bl	8009504 <_calloc_r>
 8008e5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e5c:	60f0      	str	r0, [r6, #12]
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d1e4      	bne.n	8008e2e <_Balloc+0x2e>
 8008e64:	2000      	movs	r0, #0
 8008e66:	bd70      	pop	{r4, r5, r6, pc}
 8008e68:	6802      	ldr	r2, [r0, #0]
 8008e6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e6e:	2300      	movs	r3, #0
 8008e70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e74:	e7f7      	b.n	8008e66 <_Balloc+0x66>
 8008e76:	bf00      	nop
 8008e78:	0800ba29 	.word	0x0800ba29
 8008e7c:	0800baac 	.word	0x0800baac

08008e80 <_Bfree>:
 8008e80:	b570      	push	{r4, r5, r6, lr}
 8008e82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e84:	4605      	mov	r5, r0
 8008e86:	460c      	mov	r4, r1
 8008e88:	b976      	cbnz	r6, 8008ea8 <_Bfree+0x28>
 8008e8a:	2010      	movs	r0, #16
 8008e8c:	f7fe fb96 	bl	80075bc <malloc>
 8008e90:	4602      	mov	r2, r0
 8008e92:	6268      	str	r0, [r5, #36]	; 0x24
 8008e94:	b920      	cbnz	r0, 8008ea0 <_Bfree+0x20>
 8008e96:	218a      	movs	r1, #138	; 0x8a
 8008e98:	4b08      	ldr	r3, [pc, #32]	; (8008ebc <_Bfree+0x3c>)
 8008e9a:	4809      	ldr	r0, [pc, #36]	; (8008ec0 <_Bfree+0x40>)
 8008e9c:	f000 fca2 	bl	80097e4 <__assert_func>
 8008ea0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ea4:	6006      	str	r6, [r0, #0]
 8008ea6:	60c6      	str	r6, [r0, #12]
 8008ea8:	b13c      	cbz	r4, 8008eba <_Bfree+0x3a>
 8008eaa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008eac:	6862      	ldr	r2, [r4, #4]
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008eb4:	6021      	str	r1, [r4, #0]
 8008eb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008eba:	bd70      	pop	{r4, r5, r6, pc}
 8008ebc:	0800ba29 	.word	0x0800ba29
 8008ec0:	0800baac 	.word	0x0800baac

08008ec4 <__multadd>:
 8008ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ec8:	4607      	mov	r7, r0
 8008eca:	460c      	mov	r4, r1
 8008ecc:	461e      	mov	r6, r3
 8008ece:	2000      	movs	r0, #0
 8008ed0:	690d      	ldr	r5, [r1, #16]
 8008ed2:	f101 0c14 	add.w	ip, r1, #20
 8008ed6:	f8dc 3000 	ldr.w	r3, [ip]
 8008eda:	3001      	adds	r0, #1
 8008edc:	b299      	uxth	r1, r3
 8008ede:	fb02 6101 	mla	r1, r2, r1, r6
 8008ee2:	0c1e      	lsrs	r6, r3, #16
 8008ee4:	0c0b      	lsrs	r3, r1, #16
 8008ee6:	fb02 3306 	mla	r3, r2, r6, r3
 8008eea:	b289      	uxth	r1, r1
 8008eec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ef0:	4285      	cmp	r5, r0
 8008ef2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008ef6:	f84c 1b04 	str.w	r1, [ip], #4
 8008efa:	dcec      	bgt.n	8008ed6 <__multadd+0x12>
 8008efc:	b30e      	cbz	r6, 8008f42 <__multadd+0x7e>
 8008efe:	68a3      	ldr	r3, [r4, #8]
 8008f00:	42ab      	cmp	r3, r5
 8008f02:	dc19      	bgt.n	8008f38 <__multadd+0x74>
 8008f04:	6861      	ldr	r1, [r4, #4]
 8008f06:	4638      	mov	r0, r7
 8008f08:	3101      	adds	r1, #1
 8008f0a:	f7ff ff79 	bl	8008e00 <_Balloc>
 8008f0e:	4680      	mov	r8, r0
 8008f10:	b928      	cbnz	r0, 8008f1e <__multadd+0x5a>
 8008f12:	4602      	mov	r2, r0
 8008f14:	21b5      	movs	r1, #181	; 0xb5
 8008f16:	4b0c      	ldr	r3, [pc, #48]	; (8008f48 <__multadd+0x84>)
 8008f18:	480c      	ldr	r0, [pc, #48]	; (8008f4c <__multadd+0x88>)
 8008f1a:	f000 fc63 	bl	80097e4 <__assert_func>
 8008f1e:	6922      	ldr	r2, [r4, #16]
 8008f20:	f104 010c 	add.w	r1, r4, #12
 8008f24:	3202      	adds	r2, #2
 8008f26:	0092      	lsls	r2, r2, #2
 8008f28:	300c      	adds	r0, #12
 8008f2a:	f7fe fb4f 	bl	80075cc <memcpy>
 8008f2e:	4621      	mov	r1, r4
 8008f30:	4638      	mov	r0, r7
 8008f32:	f7ff ffa5 	bl	8008e80 <_Bfree>
 8008f36:	4644      	mov	r4, r8
 8008f38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f3c:	3501      	adds	r5, #1
 8008f3e:	615e      	str	r6, [r3, #20]
 8008f40:	6125      	str	r5, [r4, #16]
 8008f42:	4620      	mov	r0, r4
 8008f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f48:	0800ba9b 	.word	0x0800ba9b
 8008f4c:	0800baac 	.word	0x0800baac

08008f50 <__hi0bits>:
 8008f50:	0c02      	lsrs	r2, r0, #16
 8008f52:	0412      	lsls	r2, r2, #16
 8008f54:	4603      	mov	r3, r0
 8008f56:	b9ca      	cbnz	r2, 8008f8c <__hi0bits+0x3c>
 8008f58:	0403      	lsls	r3, r0, #16
 8008f5a:	2010      	movs	r0, #16
 8008f5c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008f60:	bf04      	itt	eq
 8008f62:	021b      	lsleq	r3, r3, #8
 8008f64:	3008      	addeq	r0, #8
 8008f66:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008f6a:	bf04      	itt	eq
 8008f6c:	011b      	lsleq	r3, r3, #4
 8008f6e:	3004      	addeq	r0, #4
 8008f70:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008f74:	bf04      	itt	eq
 8008f76:	009b      	lsleq	r3, r3, #2
 8008f78:	3002      	addeq	r0, #2
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	db05      	blt.n	8008f8a <__hi0bits+0x3a>
 8008f7e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008f82:	f100 0001 	add.w	r0, r0, #1
 8008f86:	bf08      	it	eq
 8008f88:	2020      	moveq	r0, #32
 8008f8a:	4770      	bx	lr
 8008f8c:	2000      	movs	r0, #0
 8008f8e:	e7e5      	b.n	8008f5c <__hi0bits+0xc>

08008f90 <__lo0bits>:
 8008f90:	6803      	ldr	r3, [r0, #0]
 8008f92:	4602      	mov	r2, r0
 8008f94:	f013 0007 	ands.w	r0, r3, #7
 8008f98:	d00b      	beq.n	8008fb2 <__lo0bits+0x22>
 8008f9a:	07d9      	lsls	r1, r3, #31
 8008f9c:	d421      	bmi.n	8008fe2 <__lo0bits+0x52>
 8008f9e:	0798      	lsls	r0, r3, #30
 8008fa0:	bf49      	itett	mi
 8008fa2:	085b      	lsrmi	r3, r3, #1
 8008fa4:	089b      	lsrpl	r3, r3, #2
 8008fa6:	2001      	movmi	r0, #1
 8008fa8:	6013      	strmi	r3, [r2, #0]
 8008faa:	bf5c      	itt	pl
 8008fac:	2002      	movpl	r0, #2
 8008fae:	6013      	strpl	r3, [r2, #0]
 8008fb0:	4770      	bx	lr
 8008fb2:	b299      	uxth	r1, r3
 8008fb4:	b909      	cbnz	r1, 8008fba <__lo0bits+0x2a>
 8008fb6:	2010      	movs	r0, #16
 8008fb8:	0c1b      	lsrs	r3, r3, #16
 8008fba:	b2d9      	uxtb	r1, r3
 8008fbc:	b909      	cbnz	r1, 8008fc2 <__lo0bits+0x32>
 8008fbe:	3008      	adds	r0, #8
 8008fc0:	0a1b      	lsrs	r3, r3, #8
 8008fc2:	0719      	lsls	r1, r3, #28
 8008fc4:	bf04      	itt	eq
 8008fc6:	091b      	lsreq	r3, r3, #4
 8008fc8:	3004      	addeq	r0, #4
 8008fca:	0799      	lsls	r1, r3, #30
 8008fcc:	bf04      	itt	eq
 8008fce:	089b      	lsreq	r3, r3, #2
 8008fd0:	3002      	addeq	r0, #2
 8008fd2:	07d9      	lsls	r1, r3, #31
 8008fd4:	d403      	bmi.n	8008fde <__lo0bits+0x4e>
 8008fd6:	085b      	lsrs	r3, r3, #1
 8008fd8:	f100 0001 	add.w	r0, r0, #1
 8008fdc:	d003      	beq.n	8008fe6 <__lo0bits+0x56>
 8008fde:	6013      	str	r3, [r2, #0]
 8008fe0:	4770      	bx	lr
 8008fe2:	2000      	movs	r0, #0
 8008fe4:	4770      	bx	lr
 8008fe6:	2020      	movs	r0, #32
 8008fe8:	4770      	bx	lr
	...

08008fec <__i2b>:
 8008fec:	b510      	push	{r4, lr}
 8008fee:	460c      	mov	r4, r1
 8008ff0:	2101      	movs	r1, #1
 8008ff2:	f7ff ff05 	bl	8008e00 <_Balloc>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	b928      	cbnz	r0, 8009006 <__i2b+0x1a>
 8008ffa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008ffe:	4b04      	ldr	r3, [pc, #16]	; (8009010 <__i2b+0x24>)
 8009000:	4804      	ldr	r0, [pc, #16]	; (8009014 <__i2b+0x28>)
 8009002:	f000 fbef 	bl	80097e4 <__assert_func>
 8009006:	2301      	movs	r3, #1
 8009008:	6144      	str	r4, [r0, #20]
 800900a:	6103      	str	r3, [r0, #16]
 800900c:	bd10      	pop	{r4, pc}
 800900e:	bf00      	nop
 8009010:	0800ba9b 	.word	0x0800ba9b
 8009014:	0800baac 	.word	0x0800baac

08009018 <__multiply>:
 8009018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800901c:	4691      	mov	r9, r2
 800901e:	690a      	ldr	r2, [r1, #16]
 8009020:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009024:	460c      	mov	r4, r1
 8009026:	429a      	cmp	r2, r3
 8009028:	bfbe      	ittt	lt
 800902a:	460b      	movlt	r3, r1
 800902c:	464c      	movlt	r4, r9
 800902e:	4699      	movlt	r9, r3
 8009030:	6927      	ldr	r7, [r4, #16]
 8009032:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009036:	68a3      	ldr	r3, [r4, #8]
 8009038:	6861      	ldr	r1, [r4, #4]
 800903a:	eb07 060a 	add.w	r6, r7, sl
 800903e:	42b3      	cmp	r3, r6
 8009040:	b085      	sub	sp, #20
 8009042:	bfb8      	it	lt
 8009044:	3101      	addlt	r1, #1
 8009046:	f7ff fedb 	bl	8008e00 <_Balloc>
 800904a:	b930      	cbnz	r0, 800905a <__multiply+0x42>
 800904c:	4602      	mov	r2, r0
 800904e:	f240 115d 	movw	r1, #349	; 0x15d
 8009052:	4b43      	ldr	r3, [pc, #268]	; (8009160 <__multiply+0x148>)
 8009054:	4843      	ldr	r0, [pc, #268]	; (8009164 <__multiply+0x14c>)
 8009056:	f000 fbc5 	bl	80097e4 <__assert_func>
 800905a:	f100 0514 	add.w	r5, r0, #20
 800905e:	462b      	mov	r3, r5
 8009060:	2200      	movs	r2, #0
 8009062:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009066:	4543      	cmp	r3, r8
 8009068:	d321      	bcc.n	80090ae <__multiply+0x96>
 800906a:	f104 0314 	add.w	r3, r4, #20
 800906e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009072:	f109 0314 	add.w	r3, r9, #20
 8009076:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800907a:	9202      	str	r2, [sp, #8]
 800907c:	1b3a      	subs	r2, r7, r4
 800907e:	3a15      	subs	r2, #21
 8009080:	f022 0203 	bic.w	r2, r2, #3
 8009084:	3204      	adds	r2, #4
 8009086:	f104 0115 	add.w	r1, r4, #21
 800908a:	428f      	cmp	r7, r1
 800908c:	bf38      	it	cc
 800908e:	2204      	movcc	r2, #4
 8009090:	9201      	str	r2, [sp, #4]
 8009092:	9a02      	ldr	r2, [sp, #8]
 8009094:	9303      	str	r3, [sp, #12]
 8009096:	429a      	cmp	r2, r3
 8009098:	d80c      	bhi.n	80090b4 <__multiply+0x9c>
 800909a:	2e00      	cmp	r6, #0
 800909c:	dd03      	ble.n	80090a6 <__multiply+0x8e>
 800909e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d059      	beq.n	800915a <__multiply+0x142>
 80090a6:	6106      	str	r6, [r0, #16]
 80090a8:	b005      	add	sp, #20
 80090aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ae:	f843 2b04 	str.w	r2, [r3], #4
 80090b2:	e7d8      	b.n	8009066 <__multiply+0x4e>
 80090b4:	f8b3 a000 	ldrh.w	sl, [r3]
 80090b8:	f1ba 0f00 	cmp.w	sl, #0
 80090bc:	d023      	beq.n	8009106 <__multiply+0xee>
 80090be:	46a9      	mov	r9, r5
 80090c0:	f04f 0c00 	mov.w	ip, #0
 80090c4:	f104 0e14 	add.w	lr, r4, #20
 80090c8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80090cc:	f8d9 1000 	ldr.w	r1, [r9]
 80090d0:	fa1f fb82 	uxth.w	fp, r2
 80090d4:	b289      	uxth	r1, r1
 80090d6:	fb0a 110b 	mla	r1, sl, fp, r1
 80090da:	4461      	add	r1, ip
 80090dc:	f8d9 c000 	ldr.w	ip, [r9]
 80090e0:	0c12      	lsrs	r2, r2, #16
 80090e2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80090e6:	fb0a c202 	mla	r2, sl, r2, ip
 80090ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80090ee:	b289      	uxth	r1, r1
 80090f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80090f4:	4577      	cmp	r7, lr
 80090f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80090fa:	f849 1b04 	str.w	r1, [r9], #4
 80090fe:	d8e3      	bhi.n	80090c8 <__multiply+0xb0>
 8009100:	9a01      	ldr	r2, [sp, #4]
 8009102:	f845 c002 	str.w	ip, [r5, r2]
 8009106:	9a03      	ldr	r2, [sp, #12]
 8009108:	3304      	adds	r3, #4
 800910a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800910e:	f1b9 0f00 	cmp.w	r9, #0
 8009112:	d020      	beq.n	8009156 <__multiply+0x13e>
 8009114:	46ae      	mov	lr, r5
 8009116:	f04f 0a00 	mov.w	sl, #0
 800911a:	6829      	ldr	r1, [r5, #0]
 800911c:	f104 0c14 	add.w	ip, r4, #20
 8009120:	f8bc b000 	ldrh.w	fp, [ip]
 8009124:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009128:	b289      	uxth	r1, r1
 800912a:	fb09 220b 	mla	r2, r9, fp, r2
 800912e:	4492      	add	sl, r2
 8009130:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009134:	f84e 1b04 	str.w	r1, [lr], #4
 8009138:	f85c 2b04 	ldr.w	r2, [ip], #4
 800913c:	f8be 1000 	ldrh.w	r1, [lr]
 8009140:	0c12      	lsrs	r2, r2, #16
 8009142:	fb09 1102 	mla	r1, r9, r2, r1
 8009146:	4567      	cmp	r7, ip
 8009148:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800914c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009150:	d8e6      	bhi.n	8009120 <__multiply+0x108>
 8009152:	9a01      	ldr	r2, [sp, #4]
 8009154:	50a9      	str	r1, [r5, r2]
 8009156:	3504      	adds	r5, #4
 8009158:	e79b      	b.n	8009092 <__multiply+0x7a>
 800915a:	3e01      	subs	r6, #1
 800915c:	e79d      	b.n	800909a <__multiply+0x82>
 800915e:	bf00      	nop
 8009160:	0800ba9b 	.word	0x0800ba9b
 8009164:	0800baac 	.word	0x0800baac

08009168 <__pow5mult>:
 8009168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800916c:	4615      	mov	r5, r2
 800916e:	f012 0203 	ands.w	r2, r2, #3
 8009172:	4606      	mov	r6, r0
 8009174:	460f      	mov	r7, r1
 8009176:	d007      	beq.n	8009188 <__pow5mult+0x20>
 8009178:	4c25      	ldr	r4, [pc, #148]	; (8009210 <__pow5mult+0xa8>)
 800917a:	3a01      	subs	r2, #1
 800917c:	2300      	movs	r3, #0
 800917e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009182:	f7ff fe9f 	bl	8008ec4 <__multadd>
 8009186:	4607      	mov	r7, r0
 8009188:	10ad      	asrs	r5, r5, #2
 800918a:	d03d      	beq.n	8009208 <__pow5mult+0xa0>
 800918c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800918e:	b97c      	cbnz	r4, 80091b0 <__pow5mult+0x48>
 8009190:	2010      	movs	r0, #16
 8009192:	f7fe fa13 	bl	80075bc <malloc>
 8009196:	4602      	mov	r2, r0
 8009198:	6270      	str	r0, [r6, #36]	; 0x24
 800919a:	b928      	cbnz	r0, 80091a8 <__pow5mult+0x40>
 800919c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80091a0:	4b1c      	ldr	r3, [pc, #112]	; (8009214 <__pow5mult+0xac>)
 80091a2:	481d      	ldr	r0, [pc, #116]	; (8009218 <__pow5mult+0xb0>)
 80091a4:	f000 fb1e 	bl	80097e4 <__assert_func>
 80091a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80091ac:	6004      	str	r4, [r0, #0]
 80091ae:	60c4      	str	r4, [r0, #12]
 80091b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80091b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80091b8:	b94c      	cbnz	r4, 80091ce <__pow5mult+0x66>
 80091ba:	f240 2171 	movw	r1, #625	; 0x271
 80091be:	4630      	mov	r0, r6
 80091c0:	f7ff ff14 	bl	8008fec <__i2b>
 80091c4:	2300      	movs	r3, #0
 80091c6:	4604      	mov	r4, r0
 80091c8:	f8c8 0008 	str.w	r0, [r8, #8]
 80091cc:	6003      	str	r3, [r0, #0]
 80091ce:	f04f 0900 	mov.w	r9, #0
 80091d2:	07eb      	lsls	r3, r5, #31
 80091d4:	d50a      	bpl.n	80091ec <__pow5mult+0x84>
 80091d6:	4639      	mov	r1, r7
 80091d8:	4622      	mov	r2, r4
 80091da:	4630      	mov	r0, r6
 80091dc:	f7ff ff1c 	bl	8009018 <__multiply>
 80091e0:	4680      	mov	r8, r0
 80091e2:	4639      	mov	r1, r7
 80091e4:	4630      	mov	r0, r6
 80091e6:	f7ff fe4b 	bl	8008e80 <_Bfree>
 80091ea:	4647      	mov	r7, r8
 80091ec:	106d      	asrs	r5, r5, #1
 80091ee:	d00b      	beq.n	8009208 <__pow5mult+0xa0>
 80091f0:	6820      	ldr	r0, [r4, #0]
 80091f2:	b938      	cbnz	r0, 8009204 <__pow5mult+0x9c>
 80091f4:	4622      	mov	r2, r4
 80091f6:	4621      	mov	r1, r4
 80091f8:	4630      	mov	r0, r6
 80091fa:	f7ff ff0d 	bl	8009018 <__multiply>
 80091fe:	6020      	str	r0, [r4, #0]
 8009200:	f8c0 9000 	str.w	r9, [r0]
 8009204:	4604      	mov	r4, r0
 8009206:	e7e4      	b.n	80091d2 <__pow5mult+0x6a>
 8009208:	4638      	mov	r0, r7
 800920a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800920e:	bf00      	nop
 8009210:	0800bbf8 	.word	0x0800bbf8
 8009214:	0800ba29 	.word	0x0800ba29
 8009218:	0800baac 	.word	0x0800baac

0800921c <__lshift>:
 800921c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009220:	460c      	mov	r4, r1
 8009222:	4607      	mov	r7, r0
 8009224:	4691      	mov	r9, r2
 8009226:	6923      	ldr	r3, [r4, #16]
 8009228:	6849      	ldr	r1, [r1, #4]
 800922a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800922e:	68a3      	ldr	r3, [r4, #8]
 8009230:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009234:	f108 0601 	add.w	r6, r8, #1
 8009238:	42b3      	cmp	r3, r6
 800923a:	db0b      	blt.n	8009254 <__lshift+0x38>
 800923c:	4638      	mov	r0, r7
 800923e:	f7ff fddf 	bl	8008e00 <_Balloc>
 8009242:	4605      	mov	r5, r0
 8009244:	b948      	cbnz	r0, 800925a <__lshift+0x3e>
 8009246:	4602      	mov	r2, r0
 8009248:	f240 11d9 	movw	r1, #473	; 0x1d9
 800924c:	4b29      	ldr	r3, [pc, #164]	; (80092f4 <__lshift+0xd8>)
 800924e:	482a      	ldr	r0, [pc, #168]	; (80092f8 <__lshift+0xdc>)
 8009250:	f000 fac8 	bl	80097e4 <__assert_func>
 8009254:	3101      	adds	r1, #1
 8009256:	005b      	lsls	r3, r3, #1
 8009258:	e7ee      	b.n	8009238 <__lshift+0x1c>
 800925a:	2300      	movs	r3, #0
 800925c:	f100 0114 	add.w	r1, r0, #20
 8009260:	f100 0210 	add.w	r2, r0, #16
 8009264:	4618      	mov	r0, r3
 8009266:	4553      	cmp	r3, sl
 8009268:	db37      	blt.n	80092da <__lshift+0xbe>
 800926a:	6920      	ldr	r0, [r4, #16]
 800926c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009270:	f104 0314 	add.w	r3, r4, #20
 8009274:	f019 091f 	ands.w	r9, r9, #31
 8009278:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800927c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009280:	d02f      	beq.n	80092e2 <__lshift+0xc6>
 8009282:	468a      	mov	sl, r1
 8009284:	f04f 0c00 	mov.w	ip, #0
 8009288:	f1c9 0e20 	rsb	lr, r9, #32
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	fa02 f209 	lsl.w	r2, r2, r9
 8009292:	ea42 020c 	orr.w	r2, r2, ip
 8009296:	f84a 2b04 	str.w	r2, [sl], #4
 800929a:	f853 2b04 	ldr.w	r2, [r3], #4
 800929e:	4298      	cmp	r0, r3
 80092a0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80092a4:	d8f2      	bhi.n	800928c <__lshift+0x70>
 80092a6:	1b03      	subs	r3, r0, r4
 80092a8:	3b15      	subs	r3, #21
 80092aa:	f023 0303 	bic.w	r3, r3, #3
 80092ae:	3304      	adds	r3, #4
 80092b0:	f104 0215 	add.w	r2, r4, #21
 80092b4:	4290      	cmp	r0, r2
 80092b6:	bf38      	it	cc
 80092b8:	2304      	movcc	r3, #4
 80092ba:	f841 c003 	str.w	ip, [r1, r3]
 80092be:	f1bc 0f00 	cmp.w	ip, #0
 80092c2:	d001      	beq.n	80092c8 <__lshift+0xac>
 80092c4:	f108 0602 	add.w	r6, r8, #2
 80092c8:	3e01      	subs	r6, #1
 80092ca:	4638      	mov	r0, r7
 80092cc:	4621      	mov	r1, r4
 80092ce:	612e      	str	r6, [r5, #16]
 80092d0:	f7ff fdd6 	bl	8008e80 <_Bfree>
 80092d4:	4628      	mov	r0, r5
 80092d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092da:	f842 0f04 	str.w	r0, [r2, #4]!
 80092de:	3301      	adds	r3, #1
 80092e0:	e7c1      	b.n	8009266 <__lshift+0x4a>
 80092e2:	3904      	subs	r1, #4
 80092e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80092e8:	4298      	cmp	r0, r3
 80092ea:	f841 2f04 	str.w	r2, [r1, #4]!
 80092ee:	d8f9      	bhi.n	80092e4 <__lshift+0xc8>
 80092f0:	e7ea      	b.n	80092c8 <__lshift+0xac>
 80092f2:	bf00      	nop
 80092f4:	0800ba9b 	.word	0x0800ba9b
 80092f8:	0800baac 	.word	0x0800baac

080092fc <__mcmp>:
 80092fc:	4603      	mov	r3, r0
 80092fe:	690a      	ldr	r2, [r1, #16]
 8009300:	6900      	ldr	r0, [r0, #16]
 8009302:	b530      	push	{r4, r5, lr}
 8009304:	1a80      	subs	r0, r0, r2
 8009306:	d10d      	bne.n	8009324 <__mcmp+0x28>
 8009308:	3314      	adds	r3, #20
 800930a:	3114      	adds	r1, #20
 800930c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009310:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009314:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009318:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800931c:	4295      	cmp	r5, r2
 800931e:	d002      	beq.n	8009326 <__mcmp+0x2a>
 8009320:	d304      	bcc.n	800932c <__mcmp+0x30>
 8009322:	2001      	movs	r0, #1
 8009324:	bd30      	pop	{r4, r5, pc}
 8009326:	42a3      	cmp	r3, r4
 8009328:	d3f4      	bcc.n	8009314 <__mcmp+0x18>
 800932a:	e7fb      	b.n	8009324 <__mcmp+0x28>
 800932c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009330:	e7f8      	b.n	8009324 <__mcmp+0x28>
	...

08009334 <__mdiff>:
 8009334:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009338:	460d      	mov	r5, r1
 800933a:	4607      	mov	r7, r0
 800933c:	4611      	mov	r1, r2
 800933e:	4628      	mov	r0, r5
 8009340:	4614      	mov	r4, r2
 8009342:	f7ff ffdb 	bl	80092fc <__mcmp>
 8009346:	1e06      	subs	r6, r0, #0
 8009348:	d111      	bne.n	800936e <__mdiff+0x3a>
 800934a:	4631      	mov	r1, r6
 800934c:	4638      	mov	r0, r7
 800934e:	f7ff fd57 	bl	8008e00 <_Balloc>
 8009352:	4602      	mov	r2, r0
 8009354:	b928      	cbnz	r0, 8009362 <__mdiff+0x2e>
 8009356:	f240 2132 	movw	r1, #562	; 0x232
 800935a:	4b3a      	ldr	r3, [pc, #232]	; (8009444 <__mdiff+0x110>)
 800935c:	483a      	ldr	r0, [pc, #232]	; (8009448 <__mdiff+0x114>)
 800935e:	f000 fa41 	bl	80097e4 <__assert_func>
 8009362:	2301      	movs	r3, #1
 8009364:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009368:	4610      	mov	r0, r2
 800936a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800936e:	bfa4      	itt	ge
 8009370:	4623      	movge	r3, r4
 8009372:	462c      	movge	r4, r5
 8009374:	4638      	mov	r0, r7
 8009376:	6861      	ldr	r1, [r4, #4]
 8009378:	bfa6      	itte	ge
 800937a:	461d      	movge	r5, r3
 800937c:	2600      	movge	r6, #0
 800937e:	2601      	movlt	r6, #1
 8009380:	f7ff fd3e 	bl	8008e00 <_Balloc>
 8009384:	4602      	mov	r2, r0
 8009386:	b918      	cbnz	r0, 8009390 <__mdiff+0x5c>
 8009388:	f44f 7110 	mov.w	r1, #576	; 0x240
 800938c:	4b2d      	ldr	r3, [pc, #180]	; (8009444 <__mdiff+0x110>)
 800938e:	e7e5      	b.n	800935c <__mdiff+0x28>
 8009390:	f102 0814 	add.w	r8, r2, #20
 8009394:	46c2      	mov	sl, r8
 8009396:	f04f 0c00 	mov.w	ip, #0
 800939a:	6927      	ldr	r7, [r4, #16]
 800939c:	60c6      	str	r6, [r0, #12]
 800939e:	692e      	ldr	r6, [r5, #16]
 80093a0:	f104 0014 	add.w	r0, r4, #20
 80093a4:	f105 0914 	add.w	r9, r5, #20
 80093a8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80093ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80093b0:	3410      	adds	r4, #16
 80093b2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80093b6:	f859 3b04 	ldr.w	r3, [r9], #4
 80093ba:	fa1f f18b 	uxth.w	r1, fp
 80093be:	448c      	add	ip, r1
 80093c0:	b299      	uxth	r1, r3
 80093c2:	0c1b      	lsrs	r3, r3, #16
 80093c4:	ebac 0101 	sub.w	r1, ip, r1
 80093c8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80093cc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80093d0:	b289      	uxth	r1, r1
 80093d2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80093d6:	454e      	cmp	r6, r9
 80093d8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80093dc:	f84a 3b04 	str.w	r3, [sl], #4
 80093e0:	d8e7      	bhi.n	80093b2 <__mdiff+0x7e>
 80093e2:	1b73      	subs	r3, r6, r5
 80093e4:	3b15      	subs	r3, #21
 80093e6:	f023 0303 	bic.w	r3, r3, #3
 80093ea:	3515      	adds	r5, #21
 80093ec:	3304      	adds	r3, #4
 80093ee:	42ae      	cmp	r6, r5
 80093f0:	bf38      	it	cc
 80093f2:	2304      	movcc	r3, #4
 80093f4:	4418      	add	r0, r3
 80093f6:	4443      	add	r3, r8
 80093f8:	461e      	mov	r6, r3
 80093fa:	4605      	mov	r5, r0
 80093fc:	4575      	cmp	r5, lr
 80093fe:	d30e      	bcc.n	800941e <__mdiff+0xea>
 8009400:	f10e 0103 	add.w	r1, lr, #3
 8009404:	1a09      	subs	r1, r1, r0
 8009406:	f021 0103 	bic.w	r1, r1, #3
 800940a:	3803      	subs	r0, #3
 800940c:	4586      	cmp	lr, r0
 800940e:	bf38      	it	cc
 8009410:	2100      	movcc	r1, #0
 8009412:	4419      	add	r1, r3
 8009414:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009418:	b18b      	cbz	r3, 800943e <__mdiff+0x10a>
 800941a:	6117      	str	r7, [r2, #16]
 800941c:	e7a4      	b.n	8009368 <__mdiff+0x34>
 800941e:	f855 8b04 	ldr.w	r8, [r5], #4
 8009422:	fa1f f188 	uxth.w	r1, r8
 8009426:	4461      	add	r1, ip
 8009428:	140c      	asrs	r4, r1, #16
 800942a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800942e:	b289      	uxth	r1, r1
 8009430:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009434:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009438:	f846 1b04 	str.w	r1, [r6], #4
 800943c:	e7de      	b.n	80093fc <__mdiff+0xc8>
 800943e:	3f01      	subs	r7, #1
 8009440:	e7e8      	b.n	8009414 <__mdiff+0xe0>
 8009442:	bf00      	nop
 8009444:	0800ba9b 	.word	0x0800ba9b
 8009448:	0800baac 	.word	0x0800baac

0800944c <__d2b>:
 800944c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009450:	2101      	movs	r1, #1
 8009452:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009456:	4690      	mov	r8, r2
 8009458:	461d      	mov	r5, r3
 800945a:	f7ff fcd1 	bl	8008e00 <_Balloc>
 800945e:	4604      	mov	r4, r0
 8009460:	b930      	cbnz	r0, 8009470 <__d2b+0x24>
 8009462:	4602      	mov	r2, r0
 8009464:	f240 310a 	movw	r1, #778	; 0x30a
 8009468:	4b24      	ldr	r3, [pc, #144]	; (80094fc <__d2b+0xb0>)
 800946a:	4825      	ldr	r0, [pc, #148]	; (8009500 <__d2b+0xb4>)
 800946c:	f000 f9ba 	bl	80097e4 <__assert_func>
 8009470:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009474:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009478:	bb2d      	cbnz	r5, 80094c6 <__d2b+0x7a>
 800947a:	9301      	str	r3, [sp, #4]
 800947c:	f1b8 0300 	subs.w	r3, r8, #0
 8009480:	d026      	beq.n	80094d0 <__d2b+0x84>
 8009482:	4668      	mov	r0, sp
 8009484:	9300      	str	r3, [sp, #0]
 8009486:	f7ff fd83 	bl	8008f90 <__lo0bits>
 800948a:	9900      	ldr	r1, [sp, #0]
 800948c:	b1f0      	cbz	r0, 80094cc <__d2b+0x80>
 800948e:	9a01      	ldr	r2, [sp, #4]
 8009490:	f1c0 0320 	rsb	r3, r0, #32
 8009494:	fa02 f303 	lsl.w	r3, r2, r3
 8009498:	430b      	orrs	r3, r1
 800949a:	40c2      	lsrs	r2, r0
 800949c:	6163      	str	r3, [r4, #20]
 800949e:	9201      	str	r2, [sp, #4]
 80094a0:	9b01      	ldr	r3, [sp, #4]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	bf14      	ite	ne
 80094a6:	2102      	movne	r1, #2
 80094a8:	2101      	moveq	r1, #1
 80094aa:	61a3      	str	r3, [r4, #24]
 80094ac:	6121      	str	r1, [r4, #16]
 80094ae:	b1c5      	cbz	r5, 80094e2 <__d2b+0x96>
 80094b0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80094b4:	4405      	add	r5, r0
 80094b6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80094ba:	603d      	str	r5, [r7, #0]
 80094bc:	6030      	str	r0, [r6, #0]
 80094be:	4620      	mov	r0, r4
 80094c0:	b002      	add	sp, #8
 80094c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80094ca:	e7d6      	b.n	800947a <__d2b+0x2e>
 80094cc:	6161      	str	r1, [r4, #20]
 80094ce:	e7e7      	b.n	80094a0 <__d2b+0x54>
 80094d0:	a801      	add	r0, sp, #4
 80094d2:	f7ff fd5d 	bl	8008f90 <__lo0bits>
 80094d6:	2101      	movs	r1, #1
 80094d8:	9b01      	ldr	r3, [sp, #4]
 80094da:	6121      	str	r1, [r4, #16]
 80094dc:	6163      	str	r3, [r4, #20]
 80094de:	3020      	adds	r0, #32
 80094e0:	e7e5      	b.n	80094ae <__d2b+0x62>
 80094e2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80094e6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80094ea:	6038      	str	r0, [r7, #0]
 80094ec:	6918      	ldr	r0, [r3, #16]
 80094ee:	f7ff fd2f 	bl	8008f50 <__hi0bits>
 80094f2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80094f6:	6031      	str	r1, [r6, #0]
 80094f8:	e7e1      	b.n	80094be <__d2b+0x72>
 80094fa:	bf00      	nop
 80094fc:	0800ba9b 	.word	0x0800ba9b
 8009500:	0800baac 	.word	0x0800baac

08009504 <_calloc_r>:
 8009504:	b570      	push	{r4, r5, r6, lr}
 8009506:	fba1 5402 	umull	r5, r4, r1, r2
 800950a:	b934      	cbnz	r4, 800951a <_calloc_r+0x16>
 800950c:	4629      	mov	r1, r5
 800950e:	f7fe f8db 	bl	80076c8 <_malloc_r>
 8009512:	4606      	mov	r6, r0
 8009514:	b928      	cbnz	r0, 8009522 <_calloc_r+0x1e>
 8009516:	4630      	mov	r0, r6
 8009518:	bd70      	pop	{r4, r5, r6, pc}
 800951a:	220c      	movs	r2, #12
 800951c:	2600      	movs	r6, #0
 800951e:	6002      	str	r2, [r0, #0]
 8009520:	e7f9      	b.n	8009516 <_calloc_r+0x12>
 8009522:	462a      	mov	r2, r5
 8009524:	4621      	mov	r1, r4
 8009526:	f7fe f85f 	bl	80075e8 <memset>
 800952a:	e7f4      	b.n	8009516 <_calloc_r+0x12>

0800952c <__ssputs_r>:
 800952c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009530:	688e      	ldr	r6, [r1, #8]
 8009532:	4682      	mov	sl, r0
 8009534:	429e      	cmp	r6, r3
 8009536:	460c      	mov	r4, r1
 8009538:	4690      	mov	r8, r2
 800953a:	461f      	mov	r7, r3
 800953c:	d838      	bhi.n	80095b0 <__ssputs_r+0x84>
 800953e:	898a      	ldrh	r2, [r1, #12]
 8009540:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009544:	d032      	beq.n	80095ac <__ssputs_r+0x80>
 8009546:	6825      	ldr	r5, [r4, #0]
 8009548:	6909      	ldr	r1, [r1, #16]
 800954a:	3301      	adds	r3, #1
 800954c:	eba5 0901 	sub.w	r9, r5, r1
 8009550:	6965      	ldr	r5, [r4, #20]
 8009552:	444b      	add	r3, r9
 8009554:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009558:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800955c:	106d      	asrs	r5, r5, #1
 800955e:	429d      	cmp	r5, r3
 8009560:	bf38      	it	cc
 8009562:	461d      	movcc	r5, r3
 8009564:	0553      	lsls	r3, r2, #21
 8009566:	d531      	bpl.n	80095cc <__ssputs_r+0xa0>
 8009568:	4629      	mov	r1, r5
 800956a:	f7fe f8ad 	bl	80076c8 <_malloc_r>
 800956e:	4606      	mov	r6, r0
 8009570:	b950      	cbnz	r0, 8009588 <__ssputs_r+0x5c>
 8009572:	230c      	movs	r3, #12
 8009574:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009578:	f8ca 3000 	str.w	r3, [sl]
 800957c:	89a3      	ldrh	r3, [r4, #12]
 800957e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009582:	81a3      	strh	r3, [r4, #12]
 8009584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009588:	464a      	mov	r2, r9
 800958a:	6921      	ldr	r1, [r4, #16]
 800958c:	f7fe f81e 	bl	80075cc <memcpy>
 8009590:	89a3      	ldrh	r3, [r4, #12]
 8009592:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800959a:	81a3      	strh	r3, [r4, #12]
 800959c:	6126      	str	r6, [r4, #16]
 800959e:	444e      	add	r6, r9
 80095a0:	6026      	str	r6, [r4, #0]
 80095a2:	463e      	mov	r6, r7
 80095a4:	6165      	str	r5, [r4, #20]
 80095a6:	eba5 0509 	sub.w	r5, r5, r9
 80095aa:	60a5      	str	r5, [r4, #8]
 80095ac:	42be      	cmp	r6, r7
 80095ae:	d900      	bls.n	80095b2 <__ssputs_r+0x86>
 80095b0:	463e      	mov	r6, r7
 80095b2:	4632      	mov	r2, r6
 80095b4:	4641      	mov	r1, r8
 80095b6:	6820      	ldr	r0, [r4, #0]
 80095b8:	f000 f959 	bl	800986e <memmove>
 80095bc:	68a3      	ldr	r3, [r4, #8]
 80095be:	2000      	movs	r0, #0
 80095c0:	1b9b      	subs	r3, r3, r6
 80095c2:	60a3      	str	r3, [r4, #8]
 80095c4:	6823      	ldr	r3, [r4, #0]
 80095c6:	4433      	add	r3, r6
 80095c8:	6023      	str	r3, [r4, #0]
 80095ca:	e7db      	b.n	8009584 <__ssputs_r+0x58>
 80095cc:	462a      	mov	r2, r5
 80095ce:	f000 f968 	bl	80098a2 <_realloc_r>
 80095d2:	4606      	mov	r6, r0
 80095d4:	2800      	cmp	r0, #0
 80095d6:	d1e1      	bne.n	800959c <__ssputs_r+0x70>
 80095d8:	4650      	mov	r0, sl
 80095da:	6921      	ldr	r1, [r4, #16]
 80095dc:	f7fe f80c 	bl	80075f8 <_free_r>
 80095e0:	e7c7      	b.n	8009572 <__ssputs_r+0x46>
	...

080095e4 <_svfiprintf_r>:
 80095e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e8:	4698      	mov	r8, r3
 80095ea:	898b      	ldrh	r3, [r1, #12]
 80095ec:	4607      	mov	r7, r0
 80095ee:	061b      	lsls	r3, r3, #24
 80095f0:	460d      	mov	r5, r1
 80095f2:	4614      	mov	r4, r2
 80095f4:	b09d      	sub	sp, #116	; 0x74
 80095f6:	d50e      	bpl.n	8009616 <_svfiprintf_r+0x32>
 80095f8:	690b      	ldr	r3, [r1, #16]
 80095fa:	b963      	cbnz	r3, 8009616 <_svfiprintf_r+0x32>
 80095fc:	2140      	movs	r1, #64	; 0x40
 80095fe:	f7fe f863 	bl	80076c8 <_malloc_r>
 8009602:	6028      	str	r0, [r5, #0]
 8009604:	6128      	str	r0, [r5, #16]
 8009606:	b920      	cbnz	r0, 8009612 <_svfiprintf_r+0x2e>
 8009608:	230c      	movs	r3, #12
 800960a:	603b      	str	r3, [r7, #0]
 800960c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009610:	e0d1      	b.n	80097b6 <_svfiprintf_r+0x1d2>
 8009612:	2340      	movs	r3, #64	; 0x40
 8009614:	616b      	str	r3, [r5, #20]
 8009616:	2300      	movs	r3, #0
 8009618:	9309      	str	r3, [sp, #36]	; 0x24
 800961a:	2320      	movs	r3, #32
 800961c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009620:	2330      	movs	r3, #48	; 0x30
 8009622:	f04f 0901 	mov.w	r9, #1
 8009626:	f8cd 800c 	str.w	r8, [sp, #12]
 800962a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80097d0 <_svfiprintf_r+0x1ec>
 800962e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009632:	4623      	mov	r3, r4
 8009634:	469a      	mov	sl, r3
 8009636:	f813 2b01 	ldrb.w	r2, [r3], #1
 800963a:	b10a      	cbz	r2, 8009640 <_svfiprintf_r+0x5c>
 800963c:	2a25      	cmp	r2, #37	; 0x25
 800963e:	d1f9      	bne.n	8009634 <_svfiprintf_r+0x50>
 8009640:	ebba 0b04 	subs.w	fp, sl, r4
 8009644:	d00b      	beq.n	800965e <_svfiprintf_r+0x7a>
 8009646:	465b      	mov	r3, fp
 8009648:	4622      	mov	r2, r4
 800964a:	4629      	mov	r1, r5
 800964c:	4638      	mov	r0, r7
 800964e:	f7ff ff6d 	bl	800952c <__ssputs_r>
 8009652:	3001      	adds	r0, #1
 8009654:	f000 80aa 	beq.w	80097ac <_svfiprintf_r+0x1c8>
 8009658:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800965a:	445a      	add	r2, fp
 800965c:	9209      	str	r2, [sp, #36]	; 0x24
 800965e:	f89a 3000 	ldrb.w	r3, [sl]
 8009662:	2b00      	cmp	r3, #0
 8009664:	f000 80a2 	beq.w	80097ac <_svfiprintf_r+0x1c8>
 8009668:	2300      	movs	r3, #0
 800966a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800966e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009672:	f10a 0a01 	add.w	sl, sl, #1
 8009676:	9304      	str	r3, [sp, #16]
 8009678:	9307      	str	r3, [sp, #28]
 800967a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800967e:	931a      	str	r3, [sp, #104]	; 0x68
 8009680:	4654      	mov	r4, sl
 8009682:	2205      	movs	r2, #5
 8009684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009688:	4851      	ldr	r0, [pc, #324]	; (80097d0 <_svfiprintf_r+0x1ec>)
 800968a:	f7ff fb9f 	bl	8008dcc <memchr>
 800968e:	9a04      	ldr	r2, [sp, #16]
 8009690:	b9d8      	cbnz	r0, 80096ca <_svfiprintf_r+0xe6>
 8009692:	06d0      	lsls	r0, r2, #27
 8009694:	bf44      	itt	mi
 8009696:	2320      	movmi	r3, #32
 8009698:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800969c:	0711      	lsls	r1, r2, #28
 800969e:	bf44      	itt	mi
 80096a0:	232b      	movmi	r3, #43	; 0x2b
 80096a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096a6:	f89a 3000 	ldrb.w	r3, [sl]
 80096aa:	2b2a      	cmp	r3, #42	; 0x2a
 80096ac:	d015      	beq.n	80096da <_svfiprintf_r+0xf6>
 80096ae:	4654      	mov	r4, sl
 80096b0:	2000      	movs	r0, #0
 80096b2:	f04f 0c0a 	mov.w	ip, #10
 80096b6:	9a07      	ldr	r2, [sp, #28]
 80096b8:	4621      	mov	r1, r4
 80096ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096be:	3b30      	subs	r3, #48	; 0x30
 80096c0:	2b09      	cmp	r3, #9
 80096c2:	d94e      	bls.n	8009762 <_svfiprintf_r+0x17e>
 80096c4:	b1b0      	cbz	r0, 80096f4 <_svfiprintf_r+0x110>
 80096c6:	9207      	str	r2, [sp, #28]
 80096c8:	e014      	b.n	80096f4 <_svfiprintf_r+0x110>
 80096ca:	eba0 0308 	sub.w	r3, r0, r8
 80096ce:	fa09 f303 	lsl.w	r3, r9, r3
 80096d2:	4313      	orrs	r3, r2
 80096d4:	46a2      	mov	sl, r4
 80096d6:	9304      	str	r3, [sp, #16]
 80096d8:	e7d2      	b.n	8009680 <_svfiprintf_r+0x9c>
 80096da:	9b03      	ldr	r3, [sp, #12]
 80096dc:	1d19      	adds	r1, r3, #4
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	9103      	str	r1, [sp, #12]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	bfbb      	ittet	lt
 80096e6:	425b      	neglt	r3, r3
 80096e8:	f042 0202 	orrlt.w	r2, r2, #2
 80096ec:	9307      	strge	r3, [sp, #28]
 80096ee:	9307      	strlt	r3, [sp, #28]
 80096f0:	bfb8      	it	lt
 80096f2:	9204      	strlt	r2, [sp, #16]
 80096f4:	7823      	ldrb	r3, [r4, #0]
 80096f6:	2b2e      	cmp	r3, #46	; 0x2e
 80096f8:	d10c      	bne.n	8009714 <_svfiprintf_r+0x130>
 80096fa:	7863      	ldrb	r3, [r4, #1]
 80096fc:	2b2a      	cmp	r3, #42	; 0x2a
 80096fe:	d135      	bne.n	800976c <_svfiprintf_r+0x188>
 8009700:	9b03      	ldr	r3, [sp, #12]
 8009702:	3402      	adds	r4, #2
 8009704:	1d1a      	adds	r2, r3, #4
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	9203      	str	r2, [sp, #12]
 800970a:	2b00      	cmp	r3, #0
 800970c:	bfb8      	it	lt
 800970e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009712:	9305      	str	r3, [sp, #20]
 8009714:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80097d4 <_svfiprintf_r+0x1f0>
 8009718:	2203      	movs	r2, #3
 800971a:	4650      	mov	r0, sl
 800971c:	7821      	ldrb	r1, [r4, #0]
 800971e:	f7ff fb55 	bl	8008dcc <memchr>
 8009722:	b140      	cbz	r0, 8009736 <_svfiprintf_r+0x152>
 8009724:	2340      	movs	r3, #64	; 0x40
 8009726:	eba0 000a 	sub.w	r0, r0, sl
 800972a:	fa03 f000 	lsl.w	r0, r3, r0
 800972e:	9b04      	ldr	r3, [sp, #16]
 8009730:	3401      	adds	r4, #1
 8009732:	4303      	orrs	r3, r0
 8009734:	9304      	str	r3, [sp, #16]
 8009736:	f814 1b01 	ldrb.w	r1, [r4], #1
 800973a:	2206      	movs	r2, #6
 800973c:	4826      	ldr	r0, [pc, #152]	; (80097d8 <_svfiprintf_r+0x1f4>)
 800973e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009742:	f7ff fb43 	bl	8008dcc <memchr>
 8009746:	2800      	cmp	r0, #0
 8009748:	d038      	beq.n	80097bc <_svfiprintf_r+0x1d8>
 800974a:	4b24      	ldr	r3, [pc, #144]	; (80097dc <_svfiprintf_r+0x1f8>)
 800974c:	bb1b      	cbnz	r3, 8009796 <_svfiprintf_r+0x1b2>
 800974e:	9b03      	ldr	r3, [sp, #12]
 8009750:	3307      	adds	r3, #7
 8009752:	f023 0307 	bic.w	r3, r3, #7
 8009756:	3308      	adds	r3, #8
 8009758:	9303      	str	r3, [sp, #12]
 800975a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800975c:	4433      	add	r3, r6
 800975e:	9309      	str	r3, [sp, #36]	; 0x24
 8009760:	e767      	b.n	8009632 <_svfiprintf_r+0x4e>
 8009762:	460c      	mov	r4, r1
 8009764:	2001      	movs	r0, #1
 8009766:	fb0c 3202 	mla	r2, ip, r2, r3
 800976a:	e7a5      	b.n	80096b8 <_svfiprintf_r+0xd4>
 800976c:	2300      	movs	r3, #0
 800976e:	f04f 0c0a 	mov.w	ip, #10
 8009772:	4619      	mov	r1, r3
 8009774:	3401      	adds	r4, #1
 8009776:	9305      	str	r3, [sp, #20]
 8009778:	4620      	mov	r0, r4
 800977a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800977e:	3a30      	subs	r2, #48	; 0x30
 8009780:	2a09      	cmp	r2, #9
 8009782:	d903      	bls.n	800978c <_svfiprintf_r+0x1a8>
 8009784:	2b00      	cmp	r3, #0
 8009786:	d0c5      	beq.n	8009714 <_svfiprintf_r+0x130>
 8009788:	9105      	str	r1, [sp, #20]
 800978a:	e7c3      	b.n	8009714 <_svfiprintf_r+0x130>
 800978c:	4604      	mov	r4, r0
 800978e:	2301      	movs	r3, #1
 8009790:	fb0c 2101 	mla	r1, ip, r1, r2
 8009794:	e7f0      	b.n	8009778 <_svfiprintf_r+0x194>
 8009796:	ab03      	add	r3, sp, #12
 8009798:	9300      	str	r3, [sp, #0]
 800979a:	462a      	mov	r2, r5
 800979c:	4638      	mov	r0, r7
 800979e:	4b10      	ldr	r3, [pc, #64]	; (80097e0 <_svfiprintf_r+0x1fc>)
 80097a0:	a904      	add	r1, sp, #16
 80097a2:	f7fe f8a3 	bl	80078ec <_printf_float>
 80097a6:	1c42      	adds	r2, r0, #1
 80097a8:	4606      	mov	r6, r0
 80097aa:	d1d6      	bne.n	800975a <_svfiprintf_r+0x176>
 80097ac:	89ab      	ldrh	r3, [r5, #12]
 80097ae:	065b      	lsls	r3, r3, #25
 80097b0:	f53f af2c 	bmi.w	800960c <_svfiprintf_r+0x28>
 80097b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097b6:	b01d      	add	sp, #116	; 0x74
 80097b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097bc:	ab03      	add	r3, sp, #12
 80097be:	9300      	str	r3, [sp, #0]
 80097c0:	462a      	mov	r2, r5
 80097c2:	4638      	mov	r0, r7
 80097c4:	4b06      	ldr	r3, [pc, #24]	; (80097e0 <_svfiprintf_r+0x1fc>)
 80097c6:	a904      	add	r1, sp, #16
 80097c8:	f7fe fb2c 	bl	8007e24 <_printf_i>
 80097cc:	e7eb      	b.n	80097a6 <_svfiprintf_r+0x1c2>
 80097ce:	bf00      	nop
 80097d0:	0800bc04 	.word	0x0800bc04
 80097d4:	0800bc0a 	.word	0x0800bc0a
 80097d8:	0800bc0e 	.word	0x0800bc0e
 80097dc:	080078ed 	.word	0x080078ed
 80097e0:	0800952d 	.word	0x0800952d

080097e4 <__assert_func>:
 80097e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80097e6:	4614      	mov	r4, r2
 80097e8:	461a      	mov	r2, r3
 80097ea:	4b09      	ldr	r3, [pc, #36]	; (8009810 <__assert_func+0x2c>)
 80097ec:	4605      	mov	r5, r0
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	68d8      	ldr	r0, [r3, #12]
 80097f2:	b14c      	cbz	r4, 8009808 <__assert_func+0x24>
 80097f4:	4b07      	ldr	r3, [pc, #28]	; (8009814 <__assert_func+0x30>)
 80097f6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80097fa:	9100      	str	r1, [sp, #0]
 80097fc:	462b      	mov	r3, r5
 80097fe:	4906      	ldr	r1, [pc, #24]	; (8009818 <__assert_func+0x34>)
 8009800:	f000 f80e 	bl	8009820 <fiprintf>
 8009804:	f000 faa2 	bl	8009d4c <abort>
 8009808:	4b04      	ldr	r3, [pc, #16]	; (800981c <__assert_func+0x38>)
 800980a:	461c      	mov	r4, r3
 800980c:	e7f3      	b.n	80097f6 <__assert_func+0x12>
 800980e:	bf00      	nop
 8009810:	2000001c 	.word	0x2000001c
 8009814:	0800bc15 	.word	0x0800bc15
 8009818:	0800bc22 	.word	0x0800bc22
 800981c:	0800bc50 	.word	0x0800bc50

08009820 <fiprintf>:
 8009820:	b40e      	push	{r1, r2, r3}
 8009822:	b503      	push	{r0, r1, lr}
 8009824:	4601      	mov	r1, r0
 8009826:	ab03      	add	r3, sp, #12
 8009828:	4805      	ldr	r0, [pc, #20]	; (8009840 <fiprintf+0x20>)
 800982a:	f853 2b04 	ldr.w	r2, [r3], #4
 800982e:	6800      	ldr	r0, [r0, #0]
 8009830:	9301      	str	r3, [sp, #4]
 8009832:	f000 f88d 	bl	8009950 <_vfiprintf_r>
 8009836:	b002      	add	sp, #8
 8009838:	f85d eb04 	ldr.w	lr, [sp], #4
 800983c:	b003      	add	sp, #12
 800983e:	4770      	bx	lr
 8009840:	2000001c 	.word	0x2000001c

08009844 <__retarget_lock_init_recursive>:
 8009844:	4770      	bx	lr

08009846 <__retarget_lock_acquire_recursive>:
 8009846:	4770      	bx	lr

08009848 <__retarget_lock_release_recursive>:
 8009848:	4770      	bx	lr

0800984a <__ascii_mbtowc>:
 800984a:	b082      	sub	sp, #8
 800984c:	b901      	cbnz	r1, 8009850 <__ascii_mbtowc+0x6>
 800984e:	a901      	add	r1, sp, #4
 8009850:	b142      	cbz	r2, 8009864 <__ascii_mbtowc+0x1a>
 8009852:	b14b      	cbz	r3, 8009868 <__ascii_mbtowc+0x1e>
 8009854:	7813      	ldrb	r3, [r2, #0]
 8009856:	600b      	str	r3, [r1, #0]
 8009858:	7812      	ldrb	r2, [r2, #0]
 800985a:	1e10      	subs	r0, r2, #0
 800985c:	bf18      	it	ne
 800985e:	2001      	movne	r0, #1
 8009860:	b002      	add	sp, #8
 8009862:	4770      	bx	lr
 8009864:	4610      	mov	r0, r2
 8009866:	e7fb      	b.n	8009860 <__ascii_mbtowc+0x16>
 8009868:	f06f 0001 	mvn.w	r0, #1
 800986c:	e7f8      	b.n	8009860 <__ascii_mbtowc+0x16>

0800986e <memmove>:
 800986e:	4288      	cmp	r0, r1
 8009870:	b510      	push	{r4, lr}
 8009872:	eb01 0402 	add.w	r4, r1, r2
 8009876:	d902      	bls.n	800987e <memmove+0x10>
 8009878:	4284      	cmp	r4, r0
 800987a:	4623      	mov	r3, r4
 800987c:	d807      	bhi.n	800988e <memmove+0x20>
 800987e:	1e43      	subs	r3, r0, #1
 8009880:	42a1      	cmp	r1, r4
 8009882:	d008      	beq.n	8009896 <memmove+0x28>
 8009884:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009888:	f803 2f01 	strb.w	r2, [r3, #1]!
 800988c:	e7f8      	b.n	8009880 <memmove+0x12>
 800988e:	4601      	mov	r1, r0
 8009890:	4402      	add	r2, r0
 8009892:	428a      	cmp	r2, r1
 8009894:	d100      	bne.n	8009898 <memmove+0x2a>
 8009896:	bd10      	pop	{r4, pc}
 8009898:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800989c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80098a0:	e7f7      	b.n	8009892 <memmove+0x24>

080098a2 <_realloc_r>:
 80098a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098a6:	4680      	mov	r8, r0
 80098a8:	4614      	mov	r4, r2
 80098aa:	460e      	mov	r6, r1
 80098ac:	b921      	cbnz	r1, 80098b8 <_realloc_r+0x16>
 80098ae:	4611      	mov	r1, r2
 80098b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098b4:	f7fd bf08 	b.w	80076c8 <_malloc_r>
 80098b8:	b92a      	cbnz	r2, 80098c6 <_realloc_r+0x24>
 80098ba:	f7fd fe9d 	bl	80075f8 <_free_r>
 80098be:	4625      	mov	r5, r4
 80098c0:	4628      	mov	r0, r5
 80098c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098c6:	f000 fc61 	bl	800a18c <_malloc_usable_size_r>
 80098ca:	4284      	cmp	r4, r0
 80098cc:	4607      	mov	r7, r0
 80098ce:	d802      	bhi.n	80098d6 <_realloc_r+0x34>
 80098d0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80098d4:	d812      	bhi.n	80098fc <_realloc_r+0x5a>
 80098d6:	4621      	mov	r1, r4
 80098d8:	4640      	mov	r0, r8
 80098da:	f7fd fef5 	bl	80076c8 <_malloc_r>
 80098de:	4605      	mov	r5, r0
 80098e0:	2800      	cmp	r0, #0
 80098e2:	d0ed      	beq.n	80098c0 <_realloc_r+0x1e>
 80098e4:	42bc      	cmp	r4, r7
 80098e6:	4622      	mov	r2, r4
 80098e8:	4631      	mov	r1, r6
 80098ea:	bf28      	it	cs
 80098ec:	463a      	movcs	r2, r7
 80098ee:	f7fd fe6d 	bl	80075cc <memcpy>
 80098f2:	4631      	mov	r1, r6
 80098f4:	4640      	mov	r0, r8
 80098f6:	f7fd fe7f 	bl	80075f8 <_free_r>
 80098fa:	e7e1      	b.n	80098c0 <_realloc_r+0x1e>
 80098fc:	4635      	mov	r5, r6
 80098fe:	e7df      	b.n	80098c0 <_realloc_r+0x1e>

08009900 <__sfputc_r>:
 8009900:	6893      	ldr	r3, [r2, #8]
 8009902:	b410      	push	{r4}
 8009904:	3b01      	subs	r3, #1
 8009906:	2b00      	cmp	r3, #0
 8009908:	6093      	str	r3, [r2, #8]
 800990a:	da07      	bge.n	800991c <__sfputc_r+0x1c>
 800990c:	6994      	ldr	r4, [r2, #24]
 800990e:	42a3      	cmp	r3, r4
 8009910:	db01      	blt.n	8009916 <__sfputc_r+0x16>
 8009912:	290a      	cmp	r1, #10
 8009914:	d102      	bne.n	800991c <__sfputc_r+0x1c>
 8009916:	bc10      	pop	{r4}
 8009918:	f000 b94a 	b.w	8009bb0 <__swbuf_r>
 800991c:	6813      	ldr	r3, [r2, #0]
 800991e:	1c58      	adds	r0, r3, #1
 8009920:	6010      	str	r0, [r2, #0]
 8009922:	7019      	strb	r1, [r3, #0]
 8009924:	4608      	mov	r0, r1
 8009926:	bc10      	pop	{r4}
 8009928:	4770      	bx	lr

0800992a <__sfputs_r>:
 800992a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800992c:	4606      	mov	r6, r0
 800992e:	460f      	mov	r7, r1
 8009930:	4614      	mov	r4, r2
 8009932:	18d5      	adds	r5, r2, r3
 8009934:	42ac      	cmp	r4, r5
 8009936:	d101      	bne.n	800993c <__sfputs_r+0x12>
 8009938:	2000      	movs	r0, #0
 800993a:	e007      	b.n	800994c <__sfputs_r+0x22>
 800993c:	463a      	mov	r2, r7
 800993e:	4630      	mov	r0, r6
 8009940:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009944:	f7ff ffdc 	bl	8009900 <__sfputc_r>
 8009948:	1c43      	adds	r3, r0, #1
 800994a:	d1f3      	bne.n	8009934 <__sfputs_r+0xa>
 800994c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009950 <_vfiprintf_r>:
 8009950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009954:	460d      	mov	r5, r1
 8009956:	4614      	mov	r4, r2
 8009958:	4698      	mov	r8, r3
 800995a:	4606      	mov	r6, r0
 800995c:	b09d      	sub	sp, #116	; 0x74
 800995e:	b118      	cbz	r0, 8009968 <_vfiprintf_r+0x18>
 8009960:	6983      	ldr	r3, [r0, #24]
 8009962:	b90b      	cbnz	r3, 8009968 <_vfiprintf_r+0x18>
 8009964:	f000 fb10 	bl	8009f88 <__sinit>
 8009968:	4b89      	ldr	r3, [pc, #548]	; (8009b90 <_vfiprintf_r+0x240>)
 800996a:	429d      	cmp	r5, r3
 800996c:	d11b      	bne.n	80099a6 <_vfiprintf_r+0x56>
 800996e:	6875      	ldr	r5, [r6, #4]
 8009970:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009972:	07d9      	lsls	r1, r3, #31
 8009974:	d405      	bmi.n	8009982 <_vfiprintf_r+0x32>
 8009976:	89ab      	ldrh	r3, [r5, #12]
 8009978:	059a      	lsls	r2, r3, #22
 800997a:	d402      	bmi.n	8009982 <_vfiprintf_r+0x32>
 800997c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800997e:	f7ff ff62 	bl	8009846 <__retarget_lock_acquire_recursive>
 8009982:	89ab      	ldrh	r3, [r5, #12]
 8009984:	071b      	lsls	r3, r3, #28
 8009986:	d501      	bpl.n	800998c <_vfiprintf_r+0x3c>
 8009988:	692b      	ldr	r3, [r5, #16]
 800998a:	b9eb      	cbnz	r3, 80099c8 <_vfiprintf_r+0x78>
 800998c:	4629      	mov	r1, r5
 800998e:	4630      	mov	r0, r6
 8009990:	f000 f96e 	bl	8009c70 <__swsetup_r>
 8009994:	b1c0      	cbz	r0, 80099c8 <_vfiprintf_r+0x78>
 8009996:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009998:	07dc      	lsls	r4, r3, #31
 800999a:	d50e      	bpl.n	80099ba <_vfiprintf_r+0x6a>
 800999c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099a0:	b01d      	add	sp, #116	; 0x74
 80099a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099a6:	4b7b      	ldr	r3, [pc, #492]	; (8009b94 <_vfiprintf_r+0x244>)
 80099a8:	429d      	cmp	r5, r3
 80099aa:	d101      	bne.n	80099b0 <_vfiprintf_r+0x60>
 80099ac:	68b5      	ldr	r5, [r6, #8]
 80099ae:	e7df      	b.n	8009970 <_vfiprintf_r+0x20>
 80099b0:	4b79      	ldr	r3, [pc, #484]	; (8009b98 <_vfiprintf_r+0x248>)
 80099b2:	429d      	cmp	r5, r3
 80099b4:	bf08      	it	eq
 80099b6:	68f5      	ldreq	r5, [r6, #12]
 80099b8:	e7da      	b.n	8009970 <_vfiprintf_r+0x20>
 80099ba:	89ab      	ldrh	r3, [r5, #12]
 80099bc:	0598      	lsls	r0, r3, #22
 80099be:	d4ed      	bmi.n	800999c <_vfiprintf_r+0x4c>
 80099c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099c2:	f7ff ff41 	bl	8009848 <__retarget_lock_release_recursive>
 80099c6:	e7e9      	b.n	800999c <_vfiprintf_r+0x4c>
 80099c8:	2300      	movs	r3, #0
 80099ca:	9309      	str	r3, [sp, #36]	; 0x24
 80099cc:	2320      	movs	r3, #32
 80099ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099d2:	2330      	movs	r3, #48	; 0x30
 80099d4:	f04f 0901 	mov.w	r9, #1
 80099d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80099dc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009b9c <_vfiprintf_r+0x24c>
 80099e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099e4:	4623      	mov	r3, r4
 80099e6:	469a      	mov	sl, r3
 80099e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099ec:	b10a      	cbz	r2, 80099f2 <_vfiprintf_r+0xa2>
 80099ee:	2a25      	cmp	r2, #37	; 0x25
 80099f0:	d1f9      	bne.n	80099e6 <_vfiprintf_r+0x96>
 80099f2:	ebba 0b04 	subs.w	fp, sl, r4
 80099f6:	d00b      	beq.n	8009a10 <_vfiprintf_r+0xc0>
 80099f8:	465b      	mov	r3, fp
 80099fa:	4622      	mov	r2, r4
 80099fc:	4629      	mov	r1, r5
 80099fe:	4630      	mov	r0, r6
 8009a00:	f7ff ff93 	bl	800992a <__sfputs_r>
 8009a04:	3001      	adds	r0, #1
 8009a06:	f000 80aa 	beq.w	8009b5e <_vfiprintf_r+0x20e>
 8009a0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a0c:	445a      	add	r2, fp
 8009a0e:	9209      	str	r2, [sp, #36]	; 0x24
 8009a10:	f89a 3000 	ldrb.w	r3, [sl]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	f000 80a2 	beq.w	8009b5e <_vfiprintf_r+0x20e>
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a24:	f10a 0a01 	add.w	sl, sl, #1
 8009a28:	9304      	str	r3, [sp, #16]
 8009a2a:	9307      	str	r3, [sp, #28]
 8009a2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a30:	931a      	str	r3, [sp, #104]	; 0x68
 8009a32:	4654      	mov	r4, sl
 8009a34:	2205      	movs	r2, #5
 8009a36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a3a:	4858      	ldr	r0, [pc, #352]	; (8009b9c <_vfiprintf_r+0x24c>)
 8009a3c:	f7ff f9c6 	bl	8008dcc <memchr>
 8009a40:	9a04      	ldr	r2, [sp, #16]
 8009a42:	b9d8      	cbnz	r0, 8009a7c <_vfiprintf_r+0x12c>
 8009a44:	06d1      	lsls	r1, r2, #27
 8009a46:	bf44      	itt	mi
 8009a48:	2320      	movmi	r3, #32
 8009a4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a4e:	0713      	lsls	r3, r2, #28
 8009a50:	bf44      	itt	mi
 8009a52:	232b      	movmi	r3, #43	; 0x2b
 8009a54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a58:	f89a 3000 	ldrb.w	r3, [sl]
 8009a5c:	2b2a      	cmp	r3, #42	; 0x2a
 8009a5e:	d015      	beq.n	8009a8c <_vfiprintf_r+0x13c>
 8009a60:	4654      	mov	r4, sl
 8009a62:	2000      	movs	r0, #0
 8009a64:	f04f 0c0a 	mov.w	ip, #10
 8009a68:	9a07      	ldr	r2, [sp, #28]
 8009a6a:	4621      	mov	r1, r4
 8009a6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a70:	3b30      	subs	r3, #48	; 0x30
 8009a72:	2b09      	cmp	r3, #9
 8009a74:	d94e      	bls.n	8009b14 <_vfiprintf_r+0x1c4>
 8009a76:	b1b0      	cbz	r0, 8009aa6 <_vfiprintf_r+0x156>
 8009a78:	9207      	str	r2, [sp, #28]
 8009a7a:	e014      	b.n	8009aa6 <_vfiprintf_r+0x156>
 8009a7c:	eba0 0308 	sub.w	r3, r0, r8
 8009a80:	fa09 f303 	lsl.w	r3, r9, r3
 8009a84:	4313      	orrs	r3, r2
 8009a86:	46a2      	mov	sl, r4
 8009a88:	9304      	str	r3, [sp, #16]
 8009a8a:	e7d2      	b.n	8009a32 <_vfiprintf_r+0xe2>
 8009a8c:	9b03      	ldr	r3, [sp, #12]
 8009a8e:	1d19      	adds	r1, r3, #4
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	9103      	str	r1, [sp, #12]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	bfbb      	ittet	lt
 8009a98:	425b      	neglt	r3, r3
 8009a9a:	f042 0202 	orrlt.w	r2, r2, #2
 8009a9e:	9307      	strge	r3, [sp, #28]
 8009aa0:	9307      	strlt	r3, [sp, #28]
 8009aa2:	bfb8      	it	lt
 8009aa4:	9204      	strlt	r2, [sp, #16]
 8009aa6:	7823      	ldrb	r3, [r4, #0]
 8009aa8:	2b2e      	cmp	r3, #46	; 0x2e
 8009aaa:	d10c      	bne.n	8009ac6 <_vfiprintf_r+0x176>
 8009aac:	7863      	ldrb	r3, [r4, #1]
 8009aae:	2b2a      	cmp	r3, #42	; 0x2a
 8009ab0:	d135      	bne.n	8009b1e <_vfiprintf_r+0x1ce>
 8009ab2:	9b03      	ldr	r3, [sp, #12]
 8009ab4:	3402      	adds	r4, #2
 8009ab6:	1d1a      	adds	r2, r3, #4
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	9203      	str	r2, [sp, #12]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	bfb8      	it	lt
 8009ac0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009ac4:	9305      	str	r3, [sp, #20]
 8009ac6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009ba0 <_vfiprintf_r+0x250>
 8009aca:	2203      	movs	r2, #3
 8009acc:	4650      	mov	r0, sl
 8009ace:	7821      	ldrb	r1, [r4, #0]
 8009ad0:	f7ff f97c 	bl	8008dcc <memchr>
 8009ad4:	b140      	cbz	r0, 8009ae8 <_vfiprintf_r+0x198>
 8009ad6:	2340      	movs	r3, #64	; 0x40
 8009ad8:	eba0 000a 	sub.w	r0, r0, sl
 8009adc:	fa03 f000 	lsl.w	r0, r3, r0
 8009ae0:	9b04      	ldr	r3, [sp, #16]
 8009ae2:	3401      	adds	r4, #1
 8009ae4:	4303      	orrs	r3, r0
 8009ae6:	9304      	str	r3, [sp, #16]
 8009ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aec:	2206      	movs	r2, #6
 8009aee:	482d      	ldr	r0, [pc, #180]	; (8009ba4 <_vfiprintf_r+0x254>)
 8009af0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009af4:	f7ff f96a 	bl	8008dcc <memchr>
 8009af8:	2800      	cmp	r0, #0
 8009afa:	d03f      	beq.n	8009b7c <_vfiprintf_r+0x22c>
 8009afc:	4b2a      	ldr	r3, [pc, #168]	; (8009ba8 <_vfiprintf_r+0x258>)
 8009afe:	bb1b      	cbnz	r3, 8009b48 <_vfiprintf_r+0x1f8>
 8009b00:	9b03      	ldr	r3, [sp, #12]
 8009b02:	3307      	adds	r3, #7
 8009b04:	f023 0307 	bic.w	r3, r3, #7
 8009b08:	3308      	adds	r3, #8
 8009b0a:	9303      	str	r3, [sp, #12]
 8009b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b0e:	443b      	add	r3, r7
 8009b10:	9309      	str	r3, [sp, #36]	; 0x24
 8009b12:	e767      	b.n	80099e4 <_vfiprintf_r+0x94>
 8009b14:	460c      	mov	r4, r1
 8009b16:	2001      	movs	r0, #1
 8009b18:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b1c:	e7a5      	b.n	8009a6a <_vfiprintf_r+0x11a>
 8009b1e:	2300      	movs	r3, #0
 8009b20:	f04f 0c0a 	mov.w	ip, #10
 8009b24:	4619      	mov	r1, r3
 8009b26:	3401      	adds	r4, #1
 8009b28:	9305      	str	r3, [sp, #20]
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b30:	3a30      	subs	r2, #48	; 0x30
 8009b32:	2a09      	cmp	r2, #9
 8009b34:	d903      	bls.n	8009b3e <_vfiprintf_r+0x1ee>
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d0c5      	beq.n	8009ac6 <_vfiprintf_r+0x176>
 8009b3a:	9105      	str	r1, [sp, #20]
 8009b3c:	e7c3      	b.n	8009ac6 <_vfiprintf_r+0x176>
 8009b3e:	4604      	mov	r4, r0
 8009b40:	2301      	movs	r3, #1
 8009b42:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b46:	e7f0      	b.n	8009b2a <_vfiprintf_r+0x1da>
 8009b48:	ab03      	add	r3, sp, #12
 8009b4a:	9300      	str	r3, [sp, #0]
 8009b4c:	462a      	mov	r2, r5
 8009b4e:	4630      	mov	r0, r6
 8009b50:	4b16      	ldr	r3, [pc, #88]	; (8009bac <_vfiprintf_r+0x25c>)
 8009b52:	a904      	add	r1, sp, #16
 8009b54:	f7fd feca 	bl	80078ec <_printf_float>
 8009b58:	4607      	mov	r7, r0
 8009b5a:	1c78      	adds	r0, r7, #1
 8009b5c:	d1d6      	bne.n	8009b0c <_vfiprintf_r+0x1bc>
 8009b5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b60:	07d9      	lsls	r1, r3, #31
 8009b62:	d405      	bmi.n	8009b70 <_vfiprintf_r+0x220>
 8009b64:	89ab      	ldrh	r3, [r5, #12]
 8009b66:	059a      	lsls	r2, r3, #22
 8009b68:	d402      	bmi.n	8009b70 <_vfiprintf_r+0x220>
 8009b6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b6c:	f7ff fe6c 	bl	8009848 <__retarget_lock_release_recursive>
 8009b70:	89ab      	ldrh	r3, [r5, #12]
 8009b72:	065b      	lsls	r3, r3, #25
 8009b74:	f53f af12 	bmi.w	800999c <_vfiprintf_r+0x4c>
 8009b78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b7a:	e711      	b.n	80099a0 <_vfiprintf_r+0x50>
 8009b7c:	ab03      	add	r3, sp, #12
 8009b7e:	9300      	str	r3, [sp, #0]
 8009b80:	462a      	mov	r2, r5
 8009b82:	4630      	mov	r0, r6
 8009b84:	4b09      	ldr	r3, [pc, #36]	; (8009bac <_vfiprintf_r+0x25c>)
 8009b86:	a904      	add	r1, sp, #16
 8009b88:	f7fe f94c 	bl	8007e24 <_printf_i>
 8009b8c:	e7e4      	b.n	8009b58 <_vfiprintf_r+0x208>
 8009b8e:	bf00      	nop
 8009b90:	0800bd7c 	.word	0x0800bd7c
 8009b94:	0800bd9c 	.word	0x0800bd9c
 8009b98:	0800bd5c 	.word	0x0800bd5c
 8009b9c:	0800bc04 	.word	0x0800bc04
 8009ba0:	0800bc0a 	.word	0x0800bc0a
 8009ba4:	0800bc0e 	.word	0x0800bc0e
 8009ba8:	080078ed 	.word	0x080078ed
 8009bac:	0800992b 	.word	0x0800992b

08009bb0 <__swbuf_r>:
 8009bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bb2:	460e      	mov	r6, r1
 8009bb4:	4614      	mov	r4, r2
 8009bb6:	4605      	mov	r5, r0
 8009bb8:	b118      	cbz	r0, 8009bc2 <__swbuf_r+0x12>
 8009bba:	6983      	ldr	r3, [r0, #24]
 8009bbc:	b90b      	cbnz	r3, 8009bc2 <__swbuf_r+0x12>
 8009bbe:	f000 f9e3 	bl	8009f88 <__sinit>
 8009bc2:	4b21      	ldr	r3, [pc, #132]	; (8009c48 <__swbuf_r+0x98>)
 8009bc4:	429c      	cmp	r4, r3
 8009bc6:	d12b      	bne.n	8009c20 <__swbuf_r+0x70>
 8009bc8:	686c      	ldr	r4, [r5, #4]
 8009bca:	69a3      	ldr	r3, [r4, #24]
 8009bcc:	60a3      	str	r3, [r4, #8]
 8009bce:	89a3      	ldrh	r3, [r4, #12]
 8009bd0:	071a      	lsls	r2, r3, #28
 8009bd2:	d52f      	bpl.n	8009c34 <__swbuf_r+0x84>
 8009bd4:	6923      	ldr	r3, [r4, #16]
 8009bd6:	b36b      	cbz	r3, 8009c34 <__swbuf_r+0x84>
 8009bd8:	6923      	ldr	r3, [r4, #16]
 8009bda:	6820      	ldr	r0, [r4, #0]
 8009bdc:	b2f6      	uxtb	r6, r6
 8009bde:	1ac0      	subs	r0, r0, r3
 8009be0:	6963      	ldr	r3, [r4, #20]
 8009be2:	4637      	mov	r7, r6
 8009be4:	4283      	cmp	r3, r0
 8009be6:	dc04      	bgt.n	8009bf2 <__swbuf_r+0x42>
 8009be8:	4621      	mov	r1, r4
 8009bea:	4628      	mov	r0, r5
 8009bec:	f000 f938 	bl	8009e60 <_fflush_r>
 8009bf0:	bb30      	cbnz	r0, 8009c40 <__swbuf_r+0x90>
 8009bf2:	68a3      	ldr	r3, [r4, #8]
 8009bf4:	3001      	adds	r0, #1
 8009bf6:	3b01      	subs	r3, #1
 8009bf8:	60a3      	str	r3, [r4, #8]
 8009bfa:	6823      	ldr	r3, [r4, #0]
 8009bfc:	1c5a      	adds	r2, r3, #1
 8009bfe:	6022      	str	r2, [r4, #0]
 8009c00:	701e      	strb	r6, [r3, #0]
 8009c02:	6963      	ldr	r3, [r4, #20]
 8009c04:	4283      	cmp	r3, r0
 8009c06:	d004      	beq.n	8009c12 <__swbuf_r+0x62>
 8009c08:	89a3      	ldrh	r3, [r4, #12]
 8009c0a:	07db      	lsls	r3, r3, #31
 8009c0c:	d506      	bpl.n	8009c1c <__swbuf_r+0x6c>
 8009c0e:	2e0a      	cmp	r6, #10
 8009c10:	d104      	bne.n	8009c1c <__swbuf_r+0x6c>
 8009c12:	4621      	mov	r1, r4
 8009c14:	4628      	mov	r0, r5
 8009c16:	f000 f923 	bl	8009e60 <_fflush_r>
 8009c1a:	b988      	cbnz	r0, 8009c40 <__swbuf_r+0x90>
 8009c1c:	4638      	mov	r0, r7
 8009c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c20:	4b0a      	ldr	r3, [pc, #40]	; (8009c4c <__swbuf_r+0x9c>)
 8009c22:	429c      	cmp	r4, r3
 8009c24:	d101      	bne.n	8009c2a <__swbuf_r+0x7a>
 8009c26:	68ac      	ldr	r4, [r5, #8]
 8009c28:	e7cf      	b.n	8009bca <__swbuf_r+0x1a>
 8009c2a:	4b09      	ldr	r3, [pc, #36]	; (8009c50 <__swbuf_r+0xa0>)
 8009c2c:	429c      	cmp	r4, r3
 8009c2e:	bf08      	it	eq
 8009c30:	68ec      	ldreq	r4, [r5, #12]
 8009c32:	e7ca      	b.n	8009bca <__swbuf_r+0x1a>
 8009c34:	4621      	mov	r1, r4
 8009c36:	4628      	mov	r0, r5
 8009c38:	f000 f81a 	bl	8009c70 <__swsetup_r>
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	d0cb      	beq.n	8009bd8 <__swbuf_r+0x28>
 8009c40:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009c44:	e7ea      	b.n	8009c1c <__swbuf_r+0x6c>
 8009c46:	bf00      	nop
 8009c48:	0800bd7c 	.word	0x0800bd7c
 8009c4c:	0800bd9c 	.word	0x0800bd9c
 8009c50:	0800bd5c 	.word	0x0800bd5c

08009c54 <__ascii_wctomb>:
 8009c54:	4603      	mov	r3, r0
 8009c56:	4608      	mov	r0, r1
 8009c58:	b141      	cbz	r1, 8009c6c <__ascii_wctomb+0x18>
 8009c5a:	2aff      	cmp	r2, #255	; 0xff
 8009c5c:	d904      	bls.n	8009c68 <__ascii_wctomb+0x14>
 8009c5e:	228a      	movs	r2, #138	; 0x8a
 8009c60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c64:	601a      	str	r2, [r3, #0]
 8009c66:	4770      	bx	lr
 8009c68:	2001      	movs	r0, #1
 8009c6a:	700a      	strb	r2, [r1, #0]
 8009c6c:	4770      	bx	lr
	...

08009c70 <__swsetup_r>:
 8009c70:	4b32      	ldr	r3, [pc, #200]	; (8009d3c <__swsetup_r+0xcc>)
 8009c72:	b570      	push	{r4, r5, r6, lr}
 8009c74:	681d      	ldr	r5, [r3, #0]
 8009c76:	4606      	mov	r6, r0
 8009c78:	460c      	mov	r4, r1
 8009c7a:	b125      	cbz	r5, 8009c86 <__swsetup_r+0x16>
 8009c7c:	69ab      	ldr	r3, [r5, #24]
 8009c7e:	b913      	cbnz	r3, 8009c86 <__swsetup_r+0x16>
 8009c80:	4628      	mov	r0, r5
 8009c82:	f000 f981 	bl	8009f88 <__sinit>
 8009c86:	4b2e      	ldr	r3, [pc, #184]	; (8009d40 <__swsetup_r+0xd0>)
 8009c88:	429c      	cmp	r4, r3
 8009c8a:	d10f      	bne.n	8009cac <__swsetup_r+0x3c>
 8009c8c:	686c      	ldr	r4, [r5, #4]
 8009c8e:	89a3      	ldrh	r3, [r4, #12]
 8009c90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c94:	0719      	lsls	r1, r3, #28
 8009c96:	d42c      	bmi.n	8009cf2 <__swsetup_r+0x82>
 8009c98:	06dd      	lsls	r5, r3, #27
 8009c9a:	d411      	bmi.n	8009cc0 <__swsetup_r+0x50>
 8009c9c:	2309      	movs	r3, #9
 8009c9e:	6033      	str	r3, [r6, #0]
 8009ca0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009ca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ca8:	81a3      	strh	r3, [r4, #12]
 8009caa:	e03e      	b.n	8009d2a <__swsetup_r+0xba>
 8009cac:	4b25      	ldr	r3, [pc, #148]	; (8009d44 <__swsetup_r+0xd4>)
 8009cae:	429c      	cmp	r4, r3
 8009cb0:	d101      	bne.n	8009cb6 <__swsetup_r+0x46>
 8009cb2:	68ac      	ldr	r4, [r5, #8]
 8009cb4:	e7eb      	b.n	8009c8e <__swsetup_r+0x1e>
 8009cb6:	4b24      	ldr	r3, [pc, #144]	; (8009d48 <__swsetup_r+0xd8>)
 8009cb8:	429c      	cmp	r4, r3
 8009cba:	bf08      	it	eq
 8009cbc:	68ec      	ldreq	r4, [r5, #12]
 8009cbe:	e7e6      	b.n	8009c8e <__swsetup_r+0x1e>
 8009cc0:	0758      	lsls	r0, r3, #29
 8009cc2:	d512      	bpl.n	8009cea <__swsetup_r+0x7a>
 8009cc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cc6:	b141      	cbz	r1, 8009cda <__swsetup_r+0x6a>
 8009cc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ccc:	4299      	cmp	r1, r3
 8009cce:	d002      	beq.n	8009cd6 <__swsetup_r+0x66>
 8009cd0:	4630      	mov	r0, r6
 8009cd2:	f7fd fc91 	bl	80075f8 <_free_r>
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	6363      	str	r3, [r4, #52]	; 0x34
 8009cda:	89a3      	ldrh	r3, [r4, #12]
 8009cdc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009ce0:	81a3      	strh	r3, [r4, #12]
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	6063      	str	r3, [r4, #4]
 8009ce6:	6923      	ldr	r3, [r4, #16]
 8009ce8:	6023      	str	r3, [r4, #0]
 8009cea:	89a3      	ldrh	r3, [r4, #12]
 8009cec:	f043 0308 	orr.w	r3, r3, #8
 8009cf0:	81a3      	strh	r3, [r4, #12]
 8009cf2:	6923      	ldr	r3, [r4, #16]
 8009cf4:	b94b      	cbnz	r3, 8009d0a <__swsetup_r+0x9a>
 8009cf6:	89a3      	ldrh	r3, [r4, #12]
 8009cf8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009cfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d00:	d003      	beq.n	8009d0a <__swsetup_r+0x9a>
 8009d02:	4621      	mov	r1, r4
 8009d04:	4630      	mov	r0, r6
 8009d06:	f000 fa01 	bl	800a10c <__smakebuf_r>
 8009d0a:	89a0      	ldrh	r0, [r4, #12]
 8009d0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d10:	f010 0301 	ands.w	r3, r0, #1
 8009d14:	d00a      	beq.n	8009d2c <__swsetup_r+0xbc>
 8009d16:	2300      	movs	r3, #0
 8009d18:	60a3      	str	r3, [r4, #8]
 8009d1a:	6963      	ldr	r3, [r4, #20]
 8009d1c:	425b      	negs	r3, r3
 8009d1e:	61a3      	str	r3, [r4, #24]
 8009d20:	6923      	ldr	r3, [r4, #16]
 8009d22:	b943      	cbnz	r3, 8009d36 <__swsetup_r+0xc6>
 8009d24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d28:	d1ba      	bne.n	8009ca0 <__swsetup_r+0x30>
 8009d2a:	bd70      	pop	{r4, r5, r6, pc}
 8009d2c:	0781      	lsls	r1, r0, #30
 8009d2e:	bf58      	it	pl
 8009d30:	6963      	ldrpl	r3, [r4, #20]
 8009d32:	60a3      	str	r3, [r4, #8]
 8009d34:	e7f4      	b.n	8009d20 <__swsetup_r+0xb0>
 8009d36:	2000      	movs	r0, #0
 8009d38:	e7f7      	b.n	8009d2a <__swsetup_r+0xba>
 8009d3a:	bf00      	nop
 8009d3c:	2000001c 	.word	0x2000001c
 8009d40:	0800bd7c 	.word	0x0800bd7c
 8009d44:	0800bd9c 	.word	0x0800bd9c
 8009d48:	0800bd5c 	.word	0x0800bd5c

08009d4c <abort>:
 8009d4c:	2006      	movs	r0, #6
 8009d4e:	b508      	push	{r3, lr}
 8009d50:	f000 fa4c 	bl	800a1ec <raise>
 8009d54:	2001      	movs	r0, #1
 8009d56:	f7f7 ffd8 	bl	8001d0a <_exit>
	...

08009d5c <__sflush_r>:
 8009d5c:	898a      	ldrh	r2, [r1, #12]
 8009d5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d60:	4605      	mov	r5, r0
 8009d62:	0710      	lsls	r0, r2, #28
 8009d64:	460c      	mov	r4, r1
 8009d66:	d457      	bmi.n	8009e18 <__sflush_r+0xbc>
 8009d68:	684b      	ldr	r3, [r1, #4]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	dc04      	bgt.n	8009d78 <__sflush_r+0x1c>
 8009d6e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	dc01      	bgt.n	8009d78 <__sflush_r+0x1c>
 8009d74:	2000      	movs	r0, #0
 8009d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d7a:	2e00      	cmp	r6, #0
 8009d7c:	d0fa      	beq.n	8009d74 <__sflush_r+0x18>
 8009d7e:	2300      	movs	r3, #0
 8009d80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d84:	682f      	ldr	r7, [r5, #0]
 8009d86:	602b      	str	r3, [r5, #0]
 8009d88:	d032      	beq.n	8009df0 <__sflush_r+0x94>
 8009d8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d8c:	89a3      	ldrh	r3, [r4, #12]
 8009d8e:	075a      	lsls	r2, r3, #29
 8009d90:	d505      	bpl.n	8009d9e <__sflush_r+0x42>
 8009d92:	6863      	ldr	r3, [r4, #4]
 8009d94:	1ac0      	subs	r0, r0, r3
 8009d96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d98:	b10b      	cbz	r3, 8009d9e <__sflush_r+0x42>
 8009d9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d9c:	1ac0      	subs	r0, r0, r3
 8009d9e:	2300      	movs	r3, #0
 8009da0:	4602      	mov	r2, r0
 8009da2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009da4:	4628      	mov	r0, r5
 8009da6:	6a21      	ldr	r1, [r4, #32]
 8009da8:	47b0      	blx	r6
 8009daa:	1c43      	adds	r3, r0, #1
 8009dac:	89a3      	ldrh	r3, [r4, #12]
 8009dae:	d106      	bne.n	8009dbe <__sflush_r+0x62>
 8009db0:	6829      	ldr	r1, [r5, #0]
 8009db2:	291d      	cmp	r1, #29
 8009db4:	d82c      	bhi.n	8009e10 <__sflush_r+0xb4>
 8009db6:	4a29      	ldr	r2, [pc, #164]	; (8009e5c <__sflush_r+0x100>)
 8009db8:	40ca      	lsrs	r2, r1
 8009dba:	07d6      	lsls	r6, r2, #31
 8009dbc:	d528      	bpl.n	8009e10 <__sflush_r+0xb4>
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	6062      	str	r2, [r4, #4]
 8009dc2:	6922      	ldr	r2, [r4, #16]
 8009dc4:	04d9      	lsls	r1, r3, #19
 8009dc6:	6022      	str	r2, [r4, #0]
 8009dc8:	d504      	bpl.n	8009dd4 <__sflush_r+0x78>
 8009dca:	1c42      	adds	r2, r0, #1
 8009dcc:	d101      	bne.n	8009dd2 <__sflush_r+0x76>
 8009dce:	682b      	ldr	r3, [r5, #0]
 8009dd0:	b903      	cbnz	r3, 8009dd4 <__sflush_r+0x78>
 8009dd2:	6560      	str	r0, [r4, #84]	; 0x54
 8009dd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dd6:	602f      	str	r7, [r5, #0]
 8009dd8:	2900      	cmp	r1, #0
 8009dda:	d0cb      	beq.n	8009d74 <__sflush_r+0x18>
 8009ddc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009de0:	4299      	cmp	r1, r3
 8009de2:	d002      	beq.n	8009dea <__sflush_r+0x8e>
 8009de4:	4628      	mov	r0, r5
 8009de6:	f7fd fc07 	bl	80075f8 <_free_r>
 8009dea:	2000      	movs	r0, #0
 8009dec:	6360      	str	r0, [r4, #52]	; 0x34
 8009dee:	e7c2      	b.n	8009d76 <__sflush_r+0x1a>
 8009df0:	6a21      	ldr	r1, [r4, #32]
 8009df2:	2301      	movs	r3, #1
 8009df4:	4628      	mov	r0, r5
 8009df6:	47b0      	blx	r6
 8009df8:	1c41      	adds	r1, r0, #1
 8009dfa:	d1c7      	bne.n	8009d8c <__sflush_r+0x30>
 8009dfc:	682b      	ldr	r3, [r5, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d0c4      	beq.n	8009d8c <__sflush_r+0x30>
 8009e02:	2b1d      	cmp	r3, #29
 8009e04:	d001      	beq.n	8009e0a <__sflush_r+0xae>
 8009e06:	2b16      	cmp	r3, #22
 8009e08:	d101      	bne.n	8009e0e <__sflush_r+0xb2>
 8009e0a:	602f      	str	r7, [r5, #0]
 8009e0c:	e7b2      	b.n	8009d74 <__sflush_r+0x18>
 8009e0e:	89a3      	ldrh	r3, [r4, #12]
 8009e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e14:	81a3      	strh	r3, [r4, #12]
 8009e16:	e7ae      	b.n	8009d76 <__sflush_r+0x1a>
 8009e18:	690f      	ldr	r7, [r1, #16]
 8009e1a:	2f00      	cmp	r7, #0
 8009e1c:	d0aa      	beq.n	8009d74 <__sflush_r+0x18>
 8009e1e:	0793      	lsls	r3, r2, #30
 8009e20:	bf18      	it	ne
 8009e22:	2300      	movne	r3, #0
 8009e24:	680e      	ldr	r6, [r1, #0]
 8009e26:	bf08      	it	eq
 8009e28:	694b      	ldreq	r3, [r1, #20]
 8009e2a:	1bf6      	subs	r6, r6, r7
 8009e2c:	600f      	str	r7, [r1, #0]
 8009e2e:	608b      	str	r3, [r1, #8]
 8009e30:	2e00      	cmp	r6, #0
 8009e32:	dd9f      	ble.n	8009d74 <__sflush_r+0x18>
 8009e34:	4633      	mov	r3, r6
 8009e36:	463a      	mov	r2, r7
 8009e38:	4628      	mov	r0, r5
 8009e3a:	6a21      	ldr	r1, [r4, #32]
 8009e3c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009e40:	47e0      	blx	ip
 8009e42:	2800      	cmp	r0, #0
 8009e44:	dc06      	bgt.n	8009e54 <__sflush_r+0xf8>
 8009e46:	89a3      	ldrh	r3, [r4, #12]
 8009e48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e50:	81a3      	strh	r3, [r4, #12]
 8009e52:	e790      	b.n	8009d76 <__sflush_r+0x1a>
 8009e54:	4407      	add	r7, r0
 8009e56:	1a36      	subs	r6, r6, r0
 8009e58:	e7ea      	b.n	8009e30 <__sflush_r+0xd4>
 8009e5a:	bf00      	nop
 8009e5c:	20400001 	.word	0x20400001

08009e60 <_fflush_r>:
 8009e60:	b538      	push	{r3, r4, r5, lr}
 8009e62:	690b      	ldr	r3, [r1, #16]
 8009e64:	4605      	mov	r5, r0
 8009e66:	460c      	mov	r4, r1
 8009e68:	b913      	cbnz	r3, 8009e70 <_fflush_r+0x10>
 8009e6a:	2500      	movs	r5, #0
 8009e6c:	4628      	mov	r0, r5
 8009e6e:	bd38      	pop	{r3, r4, r5, pc}
 8009e70:	b118      	cbz	r0, 8009e7a <_fflush_r+0x1a>
 8009e72:	6983      	ldr	r3, [r0, #24]
 8009e74:	b90b      	cbnz	r3, 8009e7a <_fflush_r+0x1a>
 8009e76:	f000 f887 	bl	8009f88 <__sinit>
 8009e7a:	4b14      	ldr	r3, [pc, #80]	; (8009ecc <_fflush_r+0x6c>)
 8009e7c:	429c      	cmp	r4, r3
 8009e7e:	d11b      	bne.n	8009eb8 <_fflush_r+0x58>
 8009e80:	686c      	ldr	r4, [r5, #4]
 8009e82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d0ef      	beq.n	8009e6a <_fflush_r+0xa>
 8009e8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e8c:	07d0      	lsls	r0, r2, #31
 8009e8e:	d404      	bmi.n	8009e9a <_fflush_r+0x3a>
 8009e90:	0599      	lsls	r1, r3, #22
 8009e92:	d402      	bmi.n	8009e9a <_fflush_r+0x3a>
 8009e94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e96:	f7ff fcd6 	bl	8009846 <__retarget_lock_acquire_recursive>
 8009e9a:	4628      	mov	r0, r5
 8009e9c:	4621      	mov	r1, r4
 8009e9e:	f7ff ff5d 	bl	8009d5c <__sflush_r>
 8009ea2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ea4:	4605      	mov	r5, r0
 8009ea6:	07da      	lsls	r2, r3, #31
 8009ea8:	d4e0      	bmi.n	8009e6c <_fflush_r+0xc>
 8009eaa:	89a3      	ldrh	r3, [r4, #12]
 8009eac:	059b      	lsls	r3, r3, #22
 8009eae:	d4dd      	bmi.n	8009e6c <_fflush_r+0xc>
 8009eb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009eb2:	f7ff fcc9 	bl	8009848 <__retarget_lock_release_recursive>
 8009eb6:	e7d9      	b.n	8009e6c <_fflush_r+0xc>
 8009eb8:	4b05      	ldr	r3, [pc, #20]	; (8009ed0 <_fflush_r+0x70>)
 8009eba:	429c      	cmp	r4, r3
 8009ebc:	d101      	bne.n	8009ec2 <_fflush_r+0x62>
 8009ebe:	68ac      	ldr	r4, [r5, #8]
 8009ec0:	e7df      	b.n	8009e82 <_fflush_r+0x22>
 8009ec2:	4b04      	ldr	r3, [pc, #16]	; (8009ed4 <_fflush_r+0x74>)
 8009ec4:	429c      	cmp	r4, r3
 8009ec6:	bf08      	it	eq
 8009ec8:	68ec      	ldreq	r4, [r5, #12]
 8009eca:	e7da      	b.n	8009e82 <_fflush_r+0x22>
 8009ecc:	0800bd7c 	.word	0x0800bd7c
 8009ed0:	0800bd9c 	.word	0x0800bd9c
 8009ed4:	0800bd5c 	.word	0x0800bd5c

08009ed8 <std>:
 8009ed8:	2300      	movs	r3, #0
 8009eda:	b510      	push	{r4, lr}
 8009edc:	4604      	mov	r4, r0
 8009ede:	e9c0 3300 	strd	r3, r3, [r0]
 8009ee2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009ee6:	6083      	str	r3, [r0, #8]
 8009ee8:	8181      	strh	r1, [r0, #12]
 8009eea:	6643      	str	r3, [r0, #100]	; 0x64
 8009eec:	81c2      	strh	r2, [r0, #14]
 8009eee:	6183      	str	r3, [r0, #24]
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	2208      	movs	r2, #8
 8009ef4:	305c      	adds	r0, #92	; 0x5c
 8009ef6:	f7fd fb77 	bl	80075e8 <memset>
 8009efa:	4b05      	ldr	r3, [pc, #20]	; (8009f10 <std+0x38>)
 8009efc:	6224      	str	r4, [r4, #32]
 8009efe:	6263      	str	r3, [r4, #36]	; 0x24
 8009f00:	4b04      	ldr	r3, [pc, #16]	; (8009f14 <std+0x3c>)
 8009f02:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f04:	4b04      	ldr	r3, [pc, #16]	; (8009f18 <std+0x40>)
 8009f06:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f08:	4b04      	ldr	r3, [pc, #16]	; (8009f1c <std+0x44>)
 8009f0a:	6323      	str	r3, [r4, #48]	; 0x30
 8009f0c:	bd10      	pop	{r4, pc}
 8009f0e:	bf00      	nop
 8009f10:	0800a225 	.word	0x0800a225
 8009f14:	0800a247 	.word	0x0800a247
 8009f18:	0800a27f 	.word	0x0800a27f
 8009f1c:	0800a2a3 	.word	0x0800a2a3

08009f20 <_cleanup_r>:
 8009f20:	4901      	ldr	r1, [pc, #4]	; (8009f28 <_cleanup_r+0x8>)
 8009f22:	f000 b8af 	b.w	800a084 <_fwalk_reent>
 8009f26:	bf00      	nop
 8009f28:	08009e61 	.word	0x08009e61

08009f2c <__sfmoreglue>:
 8009f2c:	2268      	movs	r2, #104	; 0x68
 8009f2e:	b570      	push	{r4, r5, r6, lr}
 8009f30:	1e4d      	subs	r5, r1, #1
 8009f32:	4355      	muls	r5, r2
 8009f34:	460e      	mov	r6, r1
 8009f36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009f3a:	f7fd fbc5 	bl	80076c8 <_malloc_r>
 8009f3e:	4604      	mov	r4, r0
 8009f40:	b140      	cbz	r0, 8009f54 <__sfmoreglue+0x28>
 8009f42:	2100      	movs	r1, #0
 8009f44:	e9c0 1600 	strd	r1, r6, [r0]
 8009f48:	300c      	adds	r0, #12
 8009f4a:	60a0      	str	r0, [r4, #8]
 8009f4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009f50:	f7fd fb4a 	bl	80075e8 <memset>
 8009f54:	4620      	mov	r0, r4
 8009f56:	bd70      	pop	{r4, r5, r6, pc}

08009f58 <__sfp_lock_acquire>:
 8009f58:	4801      	ldr	r0, [pc, #4]	; (8009f60 <__sfp_lock_acquire+0x8>)
 8009f5a:	f7ff bc74 	b.w	8009846 <__retarget_lock_acquire_recursive>
 8009f5e:	bf00      	nop
 8009f60:	20000425 	.word	0x20000425

08009f64 <__sfp_lock_release>:
 8009f64:	4801      	ldr	r0, [pc, #4]	; (8009f6c <__sfp_lock_release+0x8>)
 8009f66:	f7ff bc6f 	b.w	8009848 <__retarget_lock_release_recursive>
 8009f6a:	bf00      	nop
 8009f6c:	20000425 	.word	0x20000425

08009f70 <__sinit_lock_acquire>:
 8009f70:	4801      	ldr	r0, [pc, #4]	; (8009f78 <__sinit_lock_acquire+0x8>)
 8009f72:	f7ff bc68 	b.w	8009846 <__retarget_lock_acquire_recursive>
 8009f76:	bf00      	nop
 8009f78:	20000426 	.word	0x20000426

08009f7c <__sinit_lock_release>:
 8009f7c:	4801      	ldr	r0, [pc, #4]	; (8009f84 <__sinit_lock_release+0x8>)
 8009f7e:	f7ff bc63 	b.w	8009848 <__retarget_lock_release_recursive>
 8009f82:	bf00      	nop
 8009f84:	20000426 	.word	0x20000426

08009f88 <__sinit>:
 8009f88:	b510      	push	{r4, lr}
 8009f8a:	4604      	mov	r4, r0
 8009f8c:	f7ff fff0 	bl	8009f70 <__sinit_lock_acquire>
 8009f90:	69a3      	ldr	r3, [r4, #24]
 8009f92:	b11b      	cbz	r3, 8009f9c <__sinit+0x14>
 8009f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f98:	f7ff bff0 	b.w	8009f7c <__sinit_lock_release>
 8009f9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009fa0:	6523      	str	r3, [r4, #80]	; 0x50
 8009fa2:	4b13      	ldr	r3, [pc, #76]	; (8009ff0 <__sinit+0x68>)
 8009fa4:	4a13      	ldr	r2, [pc, #76]	; (8009ff4 <__sinit+0x6c>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	62a2      	str	r2, [r4, #40]	; 0x28
 8009faa:	42a3      	cmp	r3, r4
 8009fac:	bf08      	it	eq
 8009fae:	2301      	moveq	r3, #1
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	bf08      	it	eq
 8009fb4:	61a3      	streq	r3, [r4, #24]
 8009fb6:	f000 f81f 	bl	8009ff8 <__sfp>
 8009fba:	6060      	str	r0, [r4, #4]
 8009fbc:	4620      	mov	r0, r4
 8009fbe:	f000 f81b 	bl	8009ff8 <__sfp>
 8009fc2:	60a0      	str	r0, [r4, #8]
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	f000 f817 	bl	8009ff8 <__sfp>
 8009fca:	2200      	movs	r2, #0
 8009fcc:	2104      	movs	r1, #4
 8009fce:	60e0      	str	r0, [r4, #12]
 8009fd0:	6860      	ldr	r0, [r4, #4]
 8009fd2:	f7ff ff81 	bl	8009ed8 <std>
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	2109      	movs	r1, #9
 8009fda:	68a0      	ldr	r0, [r4, #8]
 8009fdc:	f7ff ff7c 	bl	8009ed8 <std>
 8009fe0:	2202      	movs	r2, #2
 8009fe2:	2112      	movs	r1, #18
 8009fe4:	68e0      	ldr	r0, [r4, #12]
 8009fe6:	f7ff ff77 	bl	8009ed8 <std>
 8009fea:	2301      	movs	r3, #1
 8009fec:	61a3      	str	r3, [r4, #24]
 8009fee:	e7d1      	b.n	8009f94 <__sinit+0xc>
 8009ff0:	0800b9e4 	.word	0x0800b9e4
 8009ff4:	08009f21 	.word	0x08009f21

08009ff8 <__sfp>:
 8009ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ffa:	4607      	mov	r7, r0
 8009ffc:	f7ff ffac 	bl	8009f58 <__sfp_lock_acquire>
 800a000:	4b1e      	ldr	r3, [pc, #120]	; (800a07c <__sfp+0x84>)
 800a002:	681e      	ldr	r6, [r3, #0]
 800a004:	69b3      	ldr	r3, [r6, #24]
 800a006:	b913      	cbnz	r3, 800a00e <__sfp+0x16>
 800a008:	4630      	mov	r0, r6
 800a00a:	f7ff ffbd 	bl	8009f88 <__sinit>
 800a00e:	3648      	adds	r6, #72	; 0x48
 800a010:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a014:	3b01      	subs	r3, #1
 800a016:	d503      	bpl.n	800a020 <__sfp+0x28>
 800a018:	6833      	ldr	r3, [r6, #0]
 800a01a:	b30b      	cbz	r3, 800a060 <__sfp+0x68>
 800a01c:	6836      	ldr	r6, [r6, #0]
 800a01e:	e7f7      	b.n	800a010 <__sfp+0x18>
 800a020:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a024:	b9d5      	cbnz	r5, 800a05c <__sfp+0x64>
 800a026:	4b16      	ldr	r3, [pc, #88]	; (800a080 <__sfp+0x88>)
 800a028:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a02c:	60e3      	str	r3, [r4, #12]
 800a02e:	6665      	str	r5, [r4, #100]	; 0x64
 800a030:	f7ff fc08 	bl	8009844 <__retarget_lock_init_recursive>
 800a034:	f7ff ff96 	bl	8009f64 <__sfp_lock_release>
 800a038:	2208      	movs	r2, #8
 800a03a:	4629      	mov	r1, r5
 800a03c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a040:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a044:	6025      	str	r5, [r4, #0]
 800a046:	61a5      	str	r5, [r4, #24]
 800a048:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a04c:	f7fd facc 	bl	80075e8 <memset>
 800a050:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a054:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a058:	4620      	mov	r0, r4
 800a05a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a05c:	3468      	adds	r4, #104	; 0x68
 800a05e:	e7d9      	b.n	800a014 <__sfp+0x1c>
 800a060:	2104      	movs	r1, #4
 800a062:	4638      	mov	r0, r7
 800a064:	f7ff ff62 	bl	8009f2c <__sfmoreglue>
 800a068:	4604      	mov	r4, r0
 800a06a:	6030      	str	r0, [r6, #0]
 800a06c:	2800      	cmp	r0, #0
 800a06e:	d1d5      	bne.n	800a01c <__sfp+0x24>
 800a070:	f7ff ff78 	bl	8009f64 <__sfp_lock_release>
 800a074:	230c      	movs	r3, #12
 800a076:	603b      	str	r3, [r7, #0]
 800a078:	e7ee      	b.n	800a058 <__sfp+0x60>
 800a07a:	bf00      	nop
 800a07c:	0800b9e4 	.word	0x0800b9e4
 800a080:	ffff0001 	.word	0xffff0001

0800a084 <_fwalk_reent>:
 800a084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a088:	4606      	mov	r6, r0
 800a08a:	4688      	mov	r8, r1
 800a08c:	2700      	movs	r7, #0
 800a08e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a092:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a096:	f1b9 0901 	subs.w	r9, r9, #1
 800a09a:	d505      	bpl.n	800a0a8 <_fwalk_reent+0x24>
 800a09c:	6824      	ldr	r4, [r4, #0]
 800a09e:	2c00      	cmp	r4, #0
 800a0a0:	d1f7      	bne.n	800a092 <_fwalk_reent+0xe>
 800a0a2:	4638      	mov	r0, r7
 800a0a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0a8:	89ab      	ldrh	r3, [r5, #12]
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d907      	bls.n	800a0be <_fwalk_reent+0x3a>
 800a0ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	d003      	beq.n	800a0be <_fwalk_reent+0x3a>
 800a0b6:	4629      	mov	r1, r5
 800a0b8:	4630      	mov	r0, r6
 800a0ba:	47c0      	blx	r8
 800a0bc:	4307      	orrs	r7, r0
 800a0be:	3568      	adds	r5, #104	; 0x68
 800a0c0:	e7e9      	b.n	800a096 <_fwalk_reent+0x12>

0800a0c2 <__swhatbuf_r>:
 800a0c2:	b570      	push	{r4, r5, r6, lr}
 800a0c4:	460e      	mov	r6, r1
 800a0c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0ca:	4614      	mov	r4, r2
 800a0cc:	2900      	cmp	r1, #0
 800a0ce:	461d      	mov	r5, r3
 800a0d0:	b096      	sub	sp, #88	; 0x58
 800a0d2:	da08      	bge.n	800a0e6 <__swhatbuf_r+0x24>
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a0da:	602a      	str	r2, [r5, #0]
 800a0dc:	061a      	lsls	r2, r3, #24
 800a0de:	d410      	bmi.n	800a102 <__swhatbuf_r+0x40>
 800a0e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0e4:	e00e      	b.n	800a104 <__swhatbuf_r+0x42>
 800a0e6:	466a      	mov	r2, sp
 800a0e8:	f000 f902 	bl	800a2f0 <_fstat_r>
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	dbf1      	blt.n	800a0d4 <__swhatbuf_r+0x12>
 800a0f0:	9a01      	ldr	r2, [sp, #4]
 800a0f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a0f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a0fa:	425a      	negs	r2, r3
 800a0fc:	415a      	adcs	r2, r3
 800a0fe:	602a      	str	r2, [r5, #0]
 800a100:	e7ee      	b.n	800a0e0 <__swhatbuf_r+0x1e>
 800a102:	2340      	movs	r3, #64	; 0x40
 800a104:	2000      	movs	r0, #0
 800a106:	6023      	str	r3, [r4, #0]
 800a108:	b016      	add	sp, #88	; 0x58
 800a10a:	bd70      	pop	{r4, r5, r6, pc}

0800a10c <__smakebuf_r>:
 800a10c:	898b      	ldrh	r3, [r1, #12]
 800a10e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a110:	079d      	lsls	r5, r3, #30
 800a112:	4606      	mov	r6, r0
 800a114:	460c      	mov	r4, r1
 800a116:	d507      	bpl.n	800a128 <__smakebuf_r+0x1c>
 800a118:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a11c:	6023      	str	r3, [r4, #0]
 800a11e:	6123      	str	r3, [r4, #16]
 800a120:	2301      	movs	r3, #1
 800a122:	6163      	str	r3, [r4, #20]
 800a124:	b002      	add	sp, #8
 800a126:	bd70      	pop	{r4, r5, r6, pc}
 800a128:	466a      	mov	r2, sp
 800a12a:	ab01      	add	r3, sp, #4
 800a12c:	f7ff ffc9 	bl	800a0c2 <__swhatbuf_r>
 800a130:	9900      	ldr	r1, [sp, #0]
 800a132:	4605      	mov	r5, r0
 800a134:	4630      	mov	r0, r6
 800a136:	f7fd fac7 	bl	80076c8 <_malloc_r>
 800a13a:	b948      	cbnz	r0, 800a150 <__smakebuf_r+0x44>
 800a13c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a140:	059a      	lsls	r2, r3, #22
 800a142:	d4ef      	bmi.n	800a124 <__smakebuf_r+0x18>
 800a144:	f023 0303 	bic.w	r3, r3, #3
 800a148:	f043 0302 	orr.w	r3, r3, #2
 800a14c:	81a3      	strh	r3, [r4, #12]
 800a14e:	e7e3      	b.n	800a118 <__smakebuf_r+0xc>
 800a150:	4b0d      	ldr	r3, [pc, #52]	; (800a188 <__smakebuf_r+0x7c>)
 800a152:	62b3      	str	r3, [r6, #40]	; 0x28
 800a154:	89a3      	ldrh	r3, [r4, #12]
 800a156:	6020      	str	r0, [r4, #0]
 800a158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a15c:	81a3      	strh	r3, [r4, #12]
 800a15e:	9b00      	ldr	r3, [sp, #0]
 800a160:	6120      	str	r0, [r4, #16]
 800a162:	6163      	str	r3, [r4, #20]
 800a164:	9b01      	ldr	r3, [sp, #4]
 800a166:	b15b      	cbz	r3, 800a180 <__smakebuf_r+0x74>
 800a168:	4630      	mov	r0, r6
 800a16a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a16e:	f000 f8d1 	bl	800a314 <_isatty_r>
 800a172:	b128      	cbz	r0, 800a180 <__smakebuf_r+0x74>
 800a174:	89a3      	ldrh	r3, [r4, #12]
 800a176:	f023 0303 	bic.w	r3, r3, #3
 800a17a:	f043 0301 	orr.w	r3, r3, #1
 800a17e:	81a3      	strh	r3, [r4, #12]
 800a180:	89a0      	ldrh	r0, [r4, #12]
 800a182:	4305      	orrs	r5, r0
 800a184:	81a5      	strh	r5, [r4, #12]
 800a186:	e7cd      	b.n	800a124 <__smakebuf_r+0x18>
 800a188:	08009f21 	.word	0x08009f21

0800a18c <_malloc_usable_size_r>:
 800a18c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a190:	1f18      	subs	r0, r3, #4
 800a192:	2b00      	cmp	r3, #0
 800a194:	bfbc      	itt	lt
 800a196:	580b      	ldrlt	r3, [r1, r0]
 800a198:	18c0      	addlt	r0, r0, r3
 800a19a:	4770      	bx	lr

0800a19c <_raise_r>:
 800a19c:	291f      	cmp	r1, #31
 800a19e:	b538      	push	{r3, r4, r5, lr}
 800a1a0:	4604      	mov	r4, r0
 800a1a2:	460d      	mov	r5, r1
 800a1a4:	d904      	bls.n	800a1b0 <_raise_r+0x14>
 800a1a6:	2316      	movs	r3, #22
 800a1a8:	6003      	str	r3, [r0, #0]
 800a1aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1ae:	bd38      	pop	{r3, r4, r5, pc}
 800a1b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a1b2:	b112      	cbz	r2, 800a1ba <_raise_r+0x1e>
 800a1b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a1b8:	b94b      	cbnz	r3, 800a1ce <_raise_r+0x32>
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	f000 f830 	bl	800a220 <_getpid_r>
 800a1c0:	462a      	mov	r2, r5
 800a1c2:	4601      	mov	r1, r0
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1ca:	f000 b817 	b.w	800a1fc <_kill_r>
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	d00a      	beq.n	800a1e8 <_raise_r+0x4c>
 800a1d2:	1c59      	adds	r1, r3, #1
 800a1d4:	d103      	bne.n	800a1de <_raise_r+0x42>
 800a1d6:	2316      	movs	r3, #22
 800a1d8:	6003      	str	r3, [r0, #0]
 800a1da:	2001      	movs	r0, #1
 800a1dc:	e7e7      	b.n	800a1ae <_raise_r+0x12>
 800a1de:	2400      	movs	r4, #0
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a1e6:	4798      	blx	r3
 800a1e8:	2000      	movs	r0, #0
 800a1ea:	e7e0      	b.n	800a1ae <_raise_r+0x12>

0800a1ec <raise>:
 800a1ec:	4b02      	ldr	r3, [pc, #8]	; (800a1f8 <raise+0xc>)
 800a1ee:	4601      	mov	r1, r0
 800a1f0:	6818      	ldr	r0, [r3, #0]
 800a1f2:	f7ff bfd3 	b.w	800a19c <_raise_r>
 800a1f6:	bf00      	nop
 800a1f8:	2000001c 	.word	0x2000001c

0800a1fc <_kill_r>:
 800a1fc:	b538      	push	{r3, r4, r5, lr}
 800a1fe:	2300      	movs	r3, #0
 800a200:	4d06      	ldr	r5, [pc, #24]	; (800a21c <_kill_r+0x20>)
 800a202:	4604      	mov	r4, r0
 800a204:	4608      	mov	r0, r1
 800a206:	4611      	mov	r1, r2
 800a208:	602b      	str	r3, [r5, #0]
 800a20a:	f7f7 fd6e 	bl	8001cea <_kill>
 800a20e:	1c43      	adds	r3, r0, #1
 800a210:	d102      	bne.n	800a218 <_kill_r+0x1c>
 800a212:	682b      	ldr	r3, [r5, #0]
 800a214:	b103      	cbz	r3, 800a218 <_kill_r+0x1c>
 800a216:	6023      	str	r3, [r4, #0]
 800a218:	bd38      	pop	{r3, r4, r5, pc}
 800a21a:	bf00      	nop
 800a21c:	20000420 	.word	0x20000420

0800a220 <_getpid_r>:
 800a220:	f7f7 bd5c 	b.w	8001cdc <_getpid>

0800a224 <__sread>:
 800a224:	b510      	push	{r4, lr}
 800a226:	460c      	mov	r4, r1
 800a228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a22c:	f000 f894 	bl	800a358 <_read_r>
 800a230:	2800      	cmp	r0, #0
 800a232:	bfab      	itete	ge
 800a234:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a236:	89a3      	ldrhlt	r3, [r4, #12]
 800a238:	181b      	addge	r3, r3, r0
 800a23a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a23e:	bfac      	ite	ge
 800a240:	6563      	strge	r3, [r4, #84]	; 0x54
 800a242:	81a3      	strhlt	r3, [r4, #12]
 800a244:	bd10      	pop	{r4, pc}

0800a246 <__swrite>:
 800a246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a24a:	461f      	mov	r7, r3
 800a24c:	898b      	ldrh	r3, [r1, #12]
 800a24e:	4605      	mov	r5, r0
 800a250:	05db      	lsls	r3, r3, #23
 800a252:	460c      	mov	r4, r1
 800a254:	4616      	mov	r6, r2
 800a256:	d505      	bpl.n	800a264 <__swrite+0x1e>
 800a258:	2302      	movs	r3, #2
 800a25a:	2200      	movs	r2, #0
 800a25c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a260:	f000 f868 	bl	800a334 <_lseek_r>
 800a264:	89a3      	ldrh	r3, [r4, #12]
 800a266:	4632      	mov	r2, r6
 800a268:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a26c:	81a3      	strh	r3, [r4, #12]
 800a26e:	4628      	mov	r0, r5
 800a270:	463b      	mov	r3, r7
 800a272:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a27a:	f000 b817 	b.w	800a2ac <_write_r>

0800a27e <__sseek>:
 800a27e:	b510      	push	{r4, lr}
 800a280:	460c      	mov	r4, r1
 800a282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a286:	f000 f855 	bl	800a334 <_lseek_r>
 800a28a:	1c43      	adds	r3, r0, #1
 800a28c:	89a3      	ldrh	r3, [r4, #12]
 800a28e:	bf15      	itete	ne
 800a290:	6560      	strne	r0, [r4, #84]	; 0x54
 800a292:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a296:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a29a:	81a3      	strheq	r3, [r4, #12]
 800a29c:	bf18      	it	ne
 800a29e:	81a3      	strhne	r3, [r4, #12]
 800a2a0:	bd10      	pop	{r4, pc}

0800a2a2 <__sclose>:
 800a2a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2a6:	f000 b813 	b.w	800a2d0 <_close_r>
	...

0800a2ac <_write_r>:
 800a2ac:	b538      	push	{r3, r4, r5, lr}
 800a2ae:	4604      	mov	r4, r0
 800a2b0:	4608      	mov	r0, r1
 800a2b2:	4611      	mov	r1, r2
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	4d05      	ldr	r5, [pc, #20]	; (800a2cc <_write_r+0x20>)
 800a2b8:	602a      	str	r2, [r5, #0]
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	f7f7 fd4c 	bl	8001d58 <_write>
 800a2c0:	1c43      	adds	r3, r0, #1
 800a2c2:	d102      	bne.n	800a2ca <_write_r+0x1e>
 800a2c4:	682b      	ldr	r3, [r5, #0]
 800a2c6:	b103      	cbz	r3, 800a2ca <_write_r+0x1e>
 800a2c8:	6023      	str	r3, [r4, #0]
 800a2ca:	bd38      	pop	{r3, r4, r5, pc}
 800a2cc:	20000420 	.word	0x20000420

0800a2d0 <_close_r>:
 800a2d0:	b538      	push	{r3, r4, r5, lr}
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	4d05      	ldr	r5, [pc, #20]	; (800a2ec <_close_r+0x1c>)
 800a2d6:	4604      	mov	r4, r0
 800a2d8:	4608      	mov	r0, r1
 800a2da:	602b      	str	r3, [r5, #0]
 800a2dc:	f7f7 fd58 	bl	8001d90 <_close>
 800a2e0:	1c43      	adds	r3, r0, #1
 800a2e2:	d102      	bne.n	800a2ea <_close_r+0x1a>
 800a2e4:	682b      	ldr	r3, [r5, #0]
 800a2e6:	b103      	cbz	r3, 800a2ea <_close_r+0x1a>
 800a2e8:	6023      	str	r3, [r4, #0]
 800a2ea:	bd38      	pop	{r3, r4, r5, pc}
 800a2ec:	20000420 	.word	0x20000420

0800a2f0 <_fstat_r>:
 800a2f0:	b538      	push	{r3, r4, r5, lr}
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	4d06      	ldr	r5, [pc, #24]	; (800a310 <_fstat_r+0x20>)
 800a2f6:	4604      	mov	r4, r0
 800a2f8:	4608      	mov	r0, r1
 800a2fa:	4611      	mov	r1, r2
 800a2fc:	602b      	str	r3, [r5, #0]
 800a2fe:	f7f7 fd52 	bl	8001da6 <_fstat>
 800a302:	1c43      	adds	r3, r0, #1
 800a304:	d102      	bne.n	800a30c <_fstat_r+0x1c>
 800a306:	682b      	ldr	r3, [r5, #0]
 800a308:	b103      	cbz	r3, 800a30c <_fstat_r+0x1c>
 800a30a:	6023      	str	r3, [r4, #0]
 800a30c:	bd38      	pop	{r3, r4, r5, pc}
 800a30e:	bf00      	nop
 800a310:	20000420 	.word	0x20000420

0800a314 <_isatty_r>:
 800a314:	b538      	push	{r3, r4, r5, lr}
 800a316:	2300      	movs	r3, #0
 800a318:	4d05      	ldr	r5, [pc, #20]	; (800a330 <_isatty_r+0x1c>)
 800a31a:	4604      	mov	r4, r0
 800a31c:	4608      	mov	r0, r1
 800a31e:	602b      	str	r3, [r5, #0]
 800a320:	f7f7 fd50 	bl	8001dc4 <_isatty>
 800a324:	1c43      	adds	r3, r0, #1
 800a326:	d102      	bne.n	800a32e <_isatty_r+0x1a>
 800a328:	682b      	ldr	r3, [r5, #0]
 800a32a:	b103      	cbz	r3, 800a32e <_isatty_r+0x1a>
 800a32c:	6023      	str	r3, [r4, #0]
 800a32e:	bd38      	pop	{r3, r4, r5, pc}
 800a330:	20000420 	.word	0x20000420

0800a334 <_lseek_r>:
 800a334:	b538      	push	{r3, r4, r5, lr}
 800a336:	4604      	mov	r4, r0
 800a338:	4608      	mov	r0, r1
 800a33a:	4611      	mov	r1, r2
 800a33c:	2200      	movs	r2, #0
 800a33e:	4d05      	ldr	r5, [pc, #20]	; (800a354 <_lseek_r+0x20>)
 800a340:	602a      	str	r2, [r5, #0]
 800a342:	461a      	mov	r2, r3
 800a344:	f7f7 fd48 	bl	8001dd8 <_lseek>
 800a348:	1c43      	adds	r3, r0, #1
 800a34a:	d102      	bne.n	800a352 <_lseek_r+0x1e>
 800a34c:	682b      	ldr	r3, [r5, #0]
 800a34e:	b103      	cbz	r3, 800a352 <_lseek_r+0x1e>
 800a350:	6023      	str	r3, [r4, #0]
 800a352:	bd38      	pop	{r3, r4, r5, pc}
 800a354:	20000420 	.word	0x20000420

0800a358 <_read_r>:
 800a358:	b538      	push	{r3, r4, r5, lr}
 800a35a:	4604      	mov	r4, r0
 800a35c:	4608      	mov	r0, r1
 800a35e:	4611      	mov	r1, r2
 800a360:	2200      	movs	r2, #0
 800a362:	4d05      	ldr	r5, [pc, #20]	; (800a378 <_read_r+0x20>)
 800a364:	602a      	str	r2, [r5, #0]
 800a366:	461a      	mov	r2, r3
 800a368:	f7f7 fcd9 	bl	8001d1e <_read>
 800a36c:	1c43      	adds	r3, r0, #1
 800a36e:	d102      	bne.n	800a376 <_read_r+0x1e>
 800a370:	682b      	ldr	r3, [r5, #0]
 800a372:	b103      	cbz	r3, 800a376 <_read_r+0x1e>
 800a374:	6023      	str	r3, [r4, #0]
 800a376:	bd38      	pop	{r3, r4, r5, pc}
 800a378:	20000420 	.word	0x20000420

0800a37c <round>:
 800a37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a37e:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a382:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 800a386:	2c13      	cmp	r4, #19
 800a388:	4602      	mov	r2, r0
 800a38a:	460b      	mov	r3, r1
 800a38c:	4606      	mov	r6, r0
 800a38e:	460d      	mov	r5, r1
 800a390:	dc19      	bgt.n	800a3c6 <round+0x4a>
 800a392:	2c00      	cmp	r4, #0
 800a394:	da09      	bge.n	800a3aa <round+0x2e>
 800a396:	3401      	adds	r4, #1
 800a398:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800a39c:	d103      	bne.n	800a3a6 <round+0x2a>
 800a39e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a3a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	e02a      	b.n	800a400 <round+0x84>
 800a3aa:	4917      	ldr	r1, [pc, #92]	; (800a408 <round+0x8c>)
 800a3ac:	4121      	asrs	r1, r4
 800a3ae:	ea03 0001 	and.w	r0, r3, r1
 800a3b2:	4302      	orrs	r2, r0
 800a3b4:	d010      	beq.n	800a3d8 <round+0x5c>
 800a3b6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a3ba:	fa42 f404 	asr.w	r4, r2, r4
 800a3be:	4423      	add	r3, r4
 800a3c0:	ea23 0301 	bic.w	r3, r3, r1
 800a3c4:	e7ef      	b.n	800a3a6 <round+0x2a>
 800a3c6:	2c33      	cmp	r4, #51	; 0x33
 800a3c8:	dd09      	ble.n	800a3de <round+0x62>
 800a3ca:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800a3ce:	d103      	bne.n	800a3d8 <round+0x5c>
 800a3d0:	f7f5 fecc 	bl	800016c <__adddf3>
 800a3d4:	4606      	mov	r6, r0
 800a3d6:	460d      	mov	r5, r1
 800a3d8:	4630      	mov	r0, r6
 800a3da:	4629      	mov	r1, r5
 800a3dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a3e2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a3e6:	40f9      	lsrs	r1, r7
 800a3e8:	4208      	tst	r0, r1
 800a3ea:	d0f5      	beq.n	800a3d8 <round+0x5c>
 800a3ec:	2001      	movs	r0, #1
 800a3ee:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800a3f2:	fa00 f404 	lsl.w	r4, r0, r4
 800a3f6:	1912      	adds	r2, r2, r4
 800a3f8:	bf28      	it	cs
 800a3fa:	181b      	addcs	r3, r3, r0
 800a3fc:	ea22 0201 	bic.w	r2, r2, r1
 800a400:	4619      	mov	r1, r3
 800a402:	4610      	mov	r0, r2
 800a404:	e7e6      	b.n	800a3d4 <round+0x58>
 800a406:	bf00      	nop
 800a408:	000fffff 	.word	0x000fffff

0800a40c <_init>:
 800a40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a40e:	bf00      	nop
 800a410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a412:	bc08      	pop	{r3}
 800a414:	469e      	mov	lr, r3
 800a416:	4770      	bx	lr

0800a418 <_fini>:
 800a418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a41a:	bf00      	nop
 800a41c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a41e:	bc08      	pop	{r3}
 800a420:	469e      	mov	lr, r3
 800a422:	4770      	bx	lr
