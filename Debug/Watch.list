
Watch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a714  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001934  0800a828  0800a828  0001a828  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c15c  0800c15c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800c15c  0800c15c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c15c  0800c15c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c15c  0800c15c  0001c15c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c160  0800c160  0001c160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  200001e4  0800c348  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000055c  0800c348  0002055c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014d1f  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f54  00000000  00000000  00034f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001548  00000000  00000000  00037ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010aa  00000000  00000000  00039410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a1b4  00000000  00000000  0003a4ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018efd  00000000  00000000  0005466e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099d6c  00000000  00000000  0006d56b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006c80  00000000  00000000  001072d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0010df58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a80c 	.word	0x0800a80c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800a80c 	.word	0x0800a80c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__aeabi_f2iz>:
 8000f84:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f88:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f8c:	d30f      	bcc.n	8000fae <__aeabi_f2iz+0x2a>
 8000f8e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f96:	d90d      	bls.n	8000fb4 <__aeabi_f2iz+0x30>
 8000f98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fa0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fa4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa8:	bf18      	it	ne
 8000faa:	4240      	negne	r0, r0
 8000fac:	4770      	bx	lr
 8000fae:	f04f 0000 	mov.w	r0, #0
 8000fb2:	4770      	bx	lr
 8000fb4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fb8:	d101      	bne.n	8000fbe <__aeabi_f2iz+0x3a>
 8000fba:	0242      	lsls	r2, r0, #9
 8000fbc:	d105      	bne.n	8000fca <__aeabi_f2iz+0x46>
 8000fbe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fc2:	bf08      	it	eq
 8000fc4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fc8:	4770      	bx	lr
 8000fca:	f04f 0000 	mov.w	r0, #0
 8000fce:	4770      	bx	lr

08000fd0 <get_week_day>:
/* USER CODE BEGIN PTD */
int iteration = 0;
int last_beat = 0;
int delays[20];

char *get_week_day(int day) {
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	enum WEEKDAY {MONDAY = 1, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY};

	switch(day) {
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	2b06      	cmp	r3, #6
 8000fde:	d81f      	bhi.n	8001020 <get_week_day+0x50>
 8000fe0:	a201      	add	r2, pc, #4	; (adr r2, 8000fe8 <get_week_day+0x18>)
 8000fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe6:	bf00      	nop
 8000fe8:	08001005 	.word	0x08001005
 8000fec:	08001009 	.word	0x08001009
 8000ff0:	0800100d 	.word	0x0800100d
 8000ff4:	08001011 	.word	0x08001011
 8000ff8:	08001015 	.word	0x08001015
 8000ffc:	08001019 	.word	0x08001019
 8001000:	0800101d 	.word	0x0800101d
		case MONDAY:
			return "Mon";
 8001004:	4b09      	ldr	r3, [pc, #36]	; (800102c <get_week_day+0x5c>)
 8001006:	e00c      	b.n	8001022 <get_week_day+0x52>
			break;
		case TUESDAY:
			return "Tue";
 8001008:	4b09      	ldr	r3, [pc, #36]	; (8001030 <get_week_day+0x60>)
 800100a:	e00a      	b.n	8001022 <get_week_day+0x52>
			break;
		case WEDNESDAY:
			return "Wed";
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <get_week_day+0x64>)
 800100e:	e008      	b.n	8001022 <get_week_day+0x52>
			break;
		case THURSDAY:
			return "Thu";
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <get_week_day+0x68>)
 8001012:	e006      	b.n	8001022 <get_week_day+0x52>
			break;
		case FRIDAY:
			return "Fri";
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <get_week_day+0x6c>)
 8001016:	e004      	b.n	8001022 <get_week_day+0x52>
			break;
		case SATURDAY:
			return "Sat";
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <get_week_day+0x70>)
 800101a:	e002      	b.n	8001022 <get_week_day+0x52>
			break;
		case SUNDAY:
			return "Sun";
 800101c:	4b09      	ldr	r3, [pc, #36]	; (8001044 <get_week_day+0x74>)
 800101e:	e000      	b.n	8001022 <get_week_day+0x52>
			break;
		default:
			return "Non";
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <get_week_day+0x78>)
			break;
	}
}
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr
 800102c:	0800a828 	.word	0x0800a828
 8001030:	0800a82c 	.word	0x0800a82c
 8001034:	0800a830 	.word	0x0800a830
 8001038:	0800a834 	.word	0x0800a834
 800103c:	0800a838 	.word	0x0800a838
 8001040:	0800a83c 	.word	0x0800a83c
 8001044:	0800a840 	.word	0x0800a840
 8001048:	0800a844 	.word	0x0800a844

0800104c <display_date_and_time>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char time[30] = {0};
char date[30] = {0};

void display_date_and_time() {
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af04      	add	r7, sp, #16
	ILI9341_WriteString(40, 10, date, Font_7x10, ILI9341_GREEN, ILI9341_BLACK);
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <display_date_and_time+0x44>)
 8001054:	2200      	movs	r2, #0
 8001056:	9202      	str	r2, [sp, #8]
 8001058:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800105c:	9201      	str	r2, [sp, #4]
 800105e:	685a      	ldr	r2, [r3, #4]
 8001060:	9200      	str	r2, [sp, #0]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0b      	ldr	r2, [pc, #44]	; (8001094 <display_date_and_time+0x48>)
 8001066:	210a      	movs	r1, #10
 8001068:	2028      	movs	r0, #40	; 0x28
 800106a:	f001 f9e0 	bl	800242e <ILI9341_WriteString>
	ILI9341_WriteString(40, 104, time, Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 800106e:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <display_date_and_time+0x4c>)
 8001070:	2200      	movs	r2, #0
 8001072:	9202      	str	r2, [sp, #8]
 8001074:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001078:	9201      	str	r2, [sp, #4]
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	9200      	str	r2, [sp, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a06      	ldr	r2, [pc, #24]	; (800109c <display_date_and_time+0x50>)
 8001082:	2168      	movs	r1, #104	; 0x68
 8001084:	2028      	movs	r0, #40	; 0x28
 8001086:	f001 f9d2 	bl	800242e <ILI9341_WriteString>
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000004 	.word	0x20000004
 8001094:	200003e8 	.word	0x200003e8
 8001098:	2000000c 	.word	0x2000000c
 800109c:	200003c8 	.word	0x200003c8

080010a0 <display_battery_status>:

void display_battery_status() {
 80010a0:	b590      	push	{r4, r7, lr}
 80010a2:	b095      	sub	sp, #84	; 0x54
 80010a4:	af04      	add	r7, sp, #16
  char  adc_char[20];
  float adc_value = 0;
 80010a6:	f04f 0300 	mov.w	r3, #0
 80010aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  float bat_percent = 0;
 80010ac:	f04f 0300 	mov.w	r3, #0
 80010b0:	63bb      	str	r3, [r7, #56]	; 0x38
  int   display_bat = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	637b      	str	r3, [r7, #52]	; 0x34
  int   supply_voltage = 3.3;
 80010b6:	2303      	movs	r3, #3
 80010b8:	633b      	str	r3, [r7, #48]	; 0x30
  int   battery_voltage = 4.2;
 80010ba:	2304      	movs	r3, #4
 80010bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  int   width = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	62bb      	str	r3, [r7, #40]	; 0x28
  struct point point_a = {128, 7};
 80010c2:	4b34      	ldr	r3, [pc, #208]	; (8001194 <display_battery_status+0xf4>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	823b      	strh	r3, [r7, #16]
  struct point point_b = {152, 7};
 80010c8:	4b33      	ldr	r3, [pc, #204]	; (8001198 <display_battery_status+0xf8>)
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	81bb      	strh	r3, [r7, #12]
  struct point point_c = {152, 20};
 80010ce:	4b33      	ldr	r3, [pc, #204]	; (800119c <display_battery_status+0xfc>)
 80010d0:	881b      	ldrh	r3, [r3, #0]
 80010d2:	813b      	strh	r3, [r7, #8]
  struct point point_d = {128, 20};
 80010d4:	4b32      	ldr	r3, [pc, #200]	; (80011a0 <display_battery_status+0x100>)
 80010d6:	881b      	ldrh	r3, [r3, #0]
 80010d8:	80bb      	strh	r3, [r7, #4]

  HAL_ADC_Start(&hadc2);
 80010da:	4832      	ldr	r0, [pc, #200]	; (80011a4 <display_battery_status+0x104>)
 80010dc:	f001 fda4 	bl	8002c28 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc2, 1);
 80010e0:	2101      	movs	r1, #1
 80010e2:	4830      	ldr	r0, [pc, #192]	; (80011a4 <display_battery_status+0x104>)
 80010e4:	f001 fe7a 	bl	8002ddc <HAL_ADC_PollForConversion>
  adc_value = HAL_ADC_GetValue(&hadc2);
 80010e8:	482e      	ldr	r0, [pc, #184]	; (80011a4 <display_battery_status+0x104>)
 80010ea:	f001 ff7d 	bl	8002fe8 <HAL_ADC_GetValue>
 80010ee:	4603      	mov	r3, r0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fd9f 	bl	8000c34 <__aeabi_ui2f>
 80010f6:	4603      	mov	r3, r0
 80010f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  bat_percent = adc_value / 4095;
 80010fa:	492b      	ldr	r1, [pc, #172]	; (80011a8 <display_battery_status+0x108>)
 80010fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80010fe:	f7ff fea5 	bl	8000e4c <__aeabi_fdiv>
 8001102:	4603      	mov	r3, r0
 8001104:	63bb      	str	r3, [r7, #56]	; 0x38
  display_bat = bat_percent * supply_voltage / battery_voltage * 100;
 8001106:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001108:	f7ff fd98 	bl	8000c3c <__aeabi_i2f>
 800110c:	4603      	mov	r3, r0
 800110e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fde7 	bl	8000ce4 <__aeabi_fmul>
 8001116:	4603      	mov	r3, r0
 8001118:	461c      	mov	r4, r3
 800111a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800111c:	f7ff fd8e 	bl	8000c3c <__aeabi_i2f>
 8001120:	4603      	mov	r3, r0
 8001122:	4619      	mov	r1, r3
 8001124:	4620      	mov	r0, r4
 8001126:	f7ff fe91 	bl	8000e4c <__aeabi_fdiv>
 800112a:	4603      	mov	r3, r0
 800112c:	491f      	ldr	r1, [pc, #124]	; (80011ac <display_battery_status+0x10c>)
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fdd8 	bl	8000ce4 <__aeabi_fmul>
 8001134:	4603      	mov	r3, r0
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff ff24 	bl	8000f84 <__aeabi_f2iz>
 800113c:	4603      	mov	r3, r0
 800113e:	637b      	str	r3, [r7, #52]	; 0x34

  sprintf(adc_char, "%d", display_bat);
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001146:	491a      	ldr	r1, [pc, #104]	; (80011b0 <display_battery_status+0x110>)
 8001148:	4618      	mov	r0, r3
 800114a:	f007 fa81 	bl	8008650 <siprintf>
  ILI9341_WriteString(133, 10, adc_char, Font_7x10, ILI9341_RED, ILI9341_BLACK);
 800114e:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <display_battery_status+0x114>)
 8001150:	f107 0114 	add.w	r1, r7, #20
 8001154:	2200      	movs	r2, #0
 8001156:	9202      	str	r2, [sp, #8]
 8001158:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800115c:	9201      	str	r2, [sp, #4]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	9200      	str	r2, [sp, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	460a      	mov	r2, r1
 8001166:	210a      	movs	r1, #10
 8001168:	2085      	movs	r0, #133	; 0x85
 800116a:	f001 f960 	bl	800242e <ILI9341_WriteString>
  ILI9341_DrawRectangle(point_a, point_b, point_c, point_d, ILI9341_RED, width);
 800116e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001170:	9301      	str	r3, [sp, #4]
 8001172:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	68f9      	ldr	r1, [r7, #12]
 800117e:	6938      	ldr	r0, [r7, #16]
 8001180:	f001 fbd1 	bl	8002926 <ILI9341_DrawRectangle>
  HAL_ADC_Stop(&hadc2);
 8001184:	4807      	ldr	r0, [pc, #28]	; (80011a4 <display_battery_status+0x104>)
 8001186:	f001 fdfd 	bl	8002d84 <HAL_ADC_Stop>
}
 800118a:	bf00      	nop
 800118c:	3744      	adds	r7, #68	; 0x44
 800118e:	46bd      	mov	sp, r7
 8001190:	bd90      	pop	{r4, r7, pc}
 8001192:	bf00      	nop
 8001194:	0800a84c 	.word	0x0800a84c
 8001198:	0800a850 	.word	0x0800a850
 800119c:	0800a854 	.word	0x0800a854
 80011a0:	0800a858 	.word	0x0800a858
 80011a4:	20000200 	.word	0x20000200
 80011a8:	457ff000 	.word	0x457ff000
 80011ac:	42c80000 	.word	0x42c80000
 80011b0:	0800a848 	.word	0x0800a848
 80011b4:	20000004 	.word	0x20000004

080011b8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af02      	add	r7, sp, #8
 80011be:	6078      	str	r0, [r7, #4]
	char *dat;
	RTC_TimeTypeDef sTime = {0};
 80011c0:	f107 0310 	add.w	r3, r7, #16
 80011c4:	2100      	movs	r1, #0
 80011c6:	460a      	mov	r2, r1
 80011c8:	801a      	strh	r2, [r3, #0]
 80011ca:	460a      	mov	r2, r1
 80011cc:	709a      	strb	r2, [r3, #2]
	RTC_DateTypeDef sDate = {0};
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
	enum WEEKDAY {MONDAY = 1, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY};

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80011d2:	f107 0310 	add.w	r3, r7, #16
 80011d6:	2200      	movs	r2, #0
 80011d8:	4619      	mov	r1, r3
 80011da:	4817      	ldr	r0, [pc, #92]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80011dc:	f005 f896 	bl	800630c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	2200      	movs	r2, #0
 80011e6:	4619      	mov	r1, r3
 80011e8:	4813      	ldr	r0, [pc, #76]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80011ea:	f005 fa1d 	bl	8006628 <HAL_RTC_GetDate>
	dat = get_week_day(sDate.WeekDay);
 80011ee:	7b3b      	ldrb	r3, [r7, #12]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff feed 	bl	8000fd0 <get_week_day>
 80011f6:	6178      	str	r0, [r7, #20]
	sprintf(date, "%s %02d/%02d/%02d", dat, sDate.Date, sDate.Month, sDate.Year);
 80011f8:	7bbb      	ldrb	r3, [r7, #14]
 80011fa:	4619      	mov	r1, r3
 80011fc:	7b7b      	ldrb	r3, [r7, #13]
 80011fe:	7bfa      	ldrb	r2, [r7, #15]
 8001200:	9201      	str	r2, [sp, #4]
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	460b      	mov	r3, r1
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	490c      	ldr	r1, [pc, #48]	; (800123c <HAL_TIM_PeriodElapsedCallback+0x84>)
 800120a:	480d      	ldr	r0, [pc, #52]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800120c:	f007 fa20 	bl	8008650 <siprintf>
	sprintf(time, "%02d:%02d:%02d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001210:	7c3b      	ldrb	r3, [r7, #16]
 8001212:	461a      	mov	r2, r3
 8001214:	7c7b      	ldrb	r3, [r7, #17]
 8001216:	4619      	mov	r1, r3
 8001218:	7cbb      	ldrb	r3, [r7, #18]
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	460b      	mov	r3, r1
 800121e:	4909      	ldr	r1, [pc, #36]	; (8001244 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001220:	4809      	ldr	r0, [pc, #36]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001222:	f007 fa15 	bl	8008650 <siprintf>
	display_date_and_time();
 8001226:	f7ff ff11 	bl	800104c <display_date_and_time>
	display_battery_status();
 800122a:	f7ff ff39 	bl	80010a0 <display_battery_status>
}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000284 	.word	0x20000284
 800123c:	0800a85c 	.word	0x0800a85c
 8001240:	200003e8 	.word	0x200003e8
 8001244:	0800a870 	.word	0x0800a870
 8001248:	200003c8 	.word	0x200003c8

0800124c <init>:

void init() {
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
    ILI9341_Unselect();
 8001250:	f000 fe68 	bl	8001f24 <ILI9341_Unselect>
    ILI9341_Init();
 8001254:	f000 ff18 	bl	8002088 <ILI9341_Init>
}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}

0800125c <display_david_star>:
  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == GPIO_PIN_RESET) {
	  read_menu(BOTTOM);
  }
}

void display_david_star(uint16_t color) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b090      	sub	sp, #64	; 0x40
 8001260:	af02      	add	r7, sp, #8
 8001262:	4603      	mov	r3, r0
 8001264:	80fb      	strh	r3, [r7, #6]
	int star_width = 30;
 8001266:	231e      	movs	r3, #30
 8001268:	637b      	str	r3, [r7, #52]	; 0x34
	int star_height = 50;
 800126a:	2332      	movs	r3, #50	; 0x32
 800126c:	633b      	str	r3, [r7, #48]	; 0x30
	int star_distance = 67;
 800126e:	2343      	movs	r3, #67	; 0x43
 8001270:	62fb      	str	r3, [r7, #44]	; 0x2c
	int start_y = 25;
 8001272:	2319      	movs	r3, #25
 8001274:	62bb      	str	r3, [r7, #40]	; 0x28
	int width = 1;
 8001276:	2301      	movs	r3, #1
 8001278:	627b      	str	r3, [r7, #36]	; 0x24

	struct point point_a = {ILI9341_WIDTH / 2, start_y};
 800127a:	2350      	movs	r3, #80	; 0x50
 800127c:	f887 3020 	strb.w	r3, [r7, #32]
 8001280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001282:	b2db      	uxtb	r3, r3
 8001284:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	struct point point_b = {ILI9341_WIDTH / 2 - star_width, start_y + star_height};
 8001288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800128a:	b2db      	uxtb	r3, r3
 800128c:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8001290:	b2db      	uxtb	r3, r3
 8001292:	773b      	strb	r3, [r7, #28]
 8001294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001296:	b2da      	uxtb	r2, r3
 8001298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800129a:	b2db      	uxtb	r3, r3
 800129c:	4413      	add	r3, r2
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	777b      	strb	r3, [r7, #29]
	struct point point_c = {ILI9341_WIDTH / 2 + star_width, start_y + star_height};
 80012a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	3350      	adds	r3, #80	; 0x50
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	763b      	strb	r3, [r7, #24]
 80012ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	4413      	add	r3, r2
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	767b      	strb	r3, [r7, #25]

	struct point point_a1 = {ILI9341_WIDTH / 2, start_y + star_distance};
 80012ba:	2350      	movs	r3, #80	; 0x50
 80012bc:	753b      	strb	r3, [r7, #20]
 80012be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	4413      	add	r3, r2
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	757b      	strb	r3, [r7, #21]
	struct point point_b1 = {ILI9341_WIDTH / 2 - star_width, start_y + star_distance - star_height};
 80012cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	743b      	strb	r3, [r7, #16]
 80012d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	4413      	add	r3, r2
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	747b      	strb	r3, [r7, #17]
	struct point point_c1 = {ILI9341_WIDTH / 2 + star_width, start_y + star_distance - star_height};
 80012ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	3350      	adds	r3, #80	; 0x50
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	733b      	strb	r3, [r7, #12]
 80012f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	4413      	add	r3, r2
 8001302:	b2da      	uxtb	r2, r3
 8001304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001306:	b2db      	uxtb	r3, r3
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	b2db      	uxtb	r3, r3
 800130c:	737b      	strb	r3, [r7, #13]

	ILI9341_DrawTriangle(point_a, point_b, point_c, color, width);
 800130e:	88fa      	ldrh	r2, [r7, #6]
 8001310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	4613      	mov	r3, r2
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	69f9      	ldr	r1, [r7, #28]
 800131a:	6a38      	ldr	r0, [r7, #32]
 800131c:	f001 fae6 	bl	80028ec <ILI9341_DrawTriangle>
	ILI9341_DrawTriangle(point_a1, point_b1, point_c1, color, width);
 8001320:	88fa      	ldrh	r2, [r7, #6]
 8001322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	4613      	mov	r3, r2
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	6939      	ldr	r1, [r7, #16]
 800132c:	6978      	ldr	r0, [r7, #20]
 800132e:	f001 fadd 	bl	80028ec <ILI9341_DrawTriangle>
}
 8001332:	bf00      	nop
 8001334:	3738      	adds	r7, #56	; 0x38
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001340:	f001 fb14 	bl	800296c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001344:	f000 f81e 	bl	8001384 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001348:	f000 fa24 	bl	8001794 <MX_GPIO_Init>
  MX_RTC_Init();
 800134c:	f000 f8dc 	bl	8001508 <MX_RTC_Init>
  MX_TIM2_Init();
 8001350:	f000 f9aa 	bl	80016a8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001354:	f000 f958 	bl	8001608 <MX_TIM1_Init>
  MX_SPI2_Init();
 8001358:	f000 f920 	bl	800159c <MX_SPI2_Init>
  MX_I2C2_Init();
 800135c:	f000 f8a6 	bl	80014ac <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001360:	f000 f9ee 	bl	8001740 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 8001364:	f000 f864 	bl	8001430 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  init();
 8001368:	f7ff ff70 	bl	800124c <init>
  ILI9341_FillScreen(ILI9341_BLACK);
 800136c:	2000      	movs	r0, #0
 800136e:	f001 f917 	bl	80025a0 <ILI9341_FillScreen>

  // Read The ADC Conversion Result & Map It To PWM DutyCycle
  display_david_star(ILI9341_BLUE);
 8001372:	201f      	movs	r0, #31
 8001374:	f7ff ff72 	bl	800125c <display_david_star>
  HAL_TIM_Base_Start_IT(&htim2);
 8001378:	4801      	ldr	r0, [pc, #4]	; (8001380 <main+0x44>)
 800137a:	f005 ff09 	bl	8007190 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800137e:	e7fe      	b.n	800137e <main+0x42>
 8001380:	20000338 	.word	0x20000338

08001384 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b094      	sub	sp, #80	; 0x50
 8001388:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800138a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800138e:	2228      	movs	r2, #40	; 0x28
 8001390:	2100      	movs	r1, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f007 f9bf 	bl	8008716 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80013b4:	2303      	movs	r3, #3
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013be:	2301      	movs	r3, #1
 80013c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013c2:	2310      	movs	r3, #16
 80013c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ce:	4618      	mov	r0, r3
 80013d0:	f004 f8fc 	bl	80055cc <HAL_RCC_OscConfig>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80013da:	f000 faad 	bl	8001938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013de:	230f      	movs	r3, #15
 80013e0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013ea:	2300      	movs	r3, #0
 80013ec:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f004 fb69 	bl	8005ad0 <HAL_RCC_ClockConfig>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001404:	f000 fa98 	bl	8001938 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8001408:	2303      	movs	r3, #3
 800140a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 800140c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001410:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	4618      	mov	r0, r3
 800141a:	f004 fce7 	bl	8005dec <HAL_RCCEx_PeriphCLKConfig>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001424:	f000 fa88 	bl	8001938 <Error_Handler>
  }
}
 8001428:	bf00      	nop
 800142a:	3750      	adds	r7, #80	; 0x50
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001440:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <MX_ADC2_Init+0x74>)
 8001442:	4a19      	ldr	r2, [pc, #100]	; (80014a8 <MX_ADC2_Init+0x78>)
 8001444:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001446:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <MX_ADC2_Init+0x74>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800144c:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <MX_ADC2_Init+0x74>)
 800144e:	2200      	movs	r2, #0
 8001450:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001452:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <MX_ADC2_Init+0x74>)
 8001454:	2200      	movs	r2, #0
 8001456:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <MX_ADC2_Init+0x74>)
 800145a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800145e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001460:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <MX_ADC2_Init+0x74>)
 8001462:	2200      	movs	r2, #0
 8001464:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001466:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <MX_ADC2_Init+0x74>)
 8001468:	2201      	movs	r2, #1
 800146a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800146c:	480d      	ldr	r0, [pc, #52]	; (80014a4 <MX_ADC2_Init+0x74>)
 800146e:	f001 fb03 	bl	8002a78 <HAL_ADC_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001478:	f000 fa5e 	bl	8001938 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800147c:	2306      	movs	r3, #6
 800147e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001480:	2301      	movs	r3, #1
 8001482:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	4619      	mov	r1, r3
 800148c:	4805      	ldr	r0, [pc, #20]	; (80014a4 <MX_ADC2_Init+0x74>)
 800148e:	f001 fdb7 	bl	8003000 <HAL_ADC_ConfigChannel>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001498:	f000 fa4e 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800149c:	bf00      	nop
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000200 	.word	0x20000200
 80014a8:	40012800 	.word	0x40012800

080014ac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <MX_I2C2_Init+0x50>)
 80014b2:	4a13      	ldr	r2, [pc, #76]	; (8001500 <MX_I2C2_Init+0x54>)
 80014b4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <MX_I2C2_Init+0x50>)
 80014b8:	4a12      	ldr	r2, [pc, #72]	; (8001504 <MX_I2C2_Init+0x58>)
 80014ba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <MX_I2C2_Init+0x50>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <MX_I2C2_Init+0x50>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <MX_I2C2_Init+0x50>)
 80014ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ce:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014d0:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <MX_I2C2_Init+0x50>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80014d6:	4b09      	ldr	r3, [pc, #36]	; (80014fc <MX_I2C2_Init+0x50>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014dc:	4b07      	ldr	r3, [pc, #28]	; (80014fc <MX_I2C2_Init+0x50>)
 80014de:	2200      	movs	r2, #0
 80014e0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <MX_I2C2_Init+0x50>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014e8:	4804      	ldr	r0, [pc, #16]	; (80014fc <MX_I2C2_Init+0x50>)
 80014ea:	f002 fa4d 	bl	8003988 <HAL_I2C_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80014f4:	f000 fa20 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000230 	.word	0x20000230
 8001500:	40005800 	.word	0x40005800
 8001504:	000186a0 	.word	0x000186a0

08001508 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	2100      	movs	r1, #0
 8001512:	460a      	mov	r2, r1
 8001514:	801a      	strh	r2, [r3, #0]
 8001516:	460a      	mov	r2, r1
 8001518:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800151a:	2300      	movs	r3, #0
 800151c:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800151e:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <MX_RTC_Init+0x8c>)
 8001520:	4a1d      	ldr	r2, [pc, #116]	; (8001598 <MX_RTC_Init+0x90>)
 8001522:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001524:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <MX_RTC_Init+0x8c>)
 8001526:	f04f 32ff 	mov.w	r2, #4294967295
 800152a:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800152c:	4b19      	ldr	r3, [pc, #100]	; (8001594 <MX_RTC_Init+0x8c>)
 800152e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001532:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001534:	4817      	ldr	r0, [pc, #92]	; (8001594 <MX_RTC_Init+0x8c>)
 8001536:	f004 fdc5 	bl	80060c4 <HAL_RTC_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8001540:	f000 f9fa 	bl	8001938 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001544:	2300      	movs	r3, #0
 8001546:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001548:	2300      	movs	r3, #0
 800154a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800154c:	2300      	movs	r3, #0
 800154e:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	2201      	movs	r2, #1
 8001554:	4619      	mov	r1, r3
 8001556:	480f      	ldr	r0, [pc, #60]	; (8001594 <MX_RTC_Init+0x8c>)
 8001558:	f004 fe40 	bl	80061dc <HAL_RTC_SetTime>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8001562:	f000 f9e9 	bl	8001938 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8001566:	2305      	movs	r3, #5
 8001568:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_SEPTEMBER;
 800156a:	2309      	movs	r3, #9
 800156c:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x22;
 800156e:	2322      	movs	r3, #34	; 0x22
 8001570:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x23;
 8001572:	2323      	movs	r3, #35	; 0x23
 8001574:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001576:	463b      	mov	r3, r7
 8001578:	2201      	movs	r2, #1
 800157a:	4619      	mov	r1, r3
 800157c:	4805      	ldr	r0, [pc, #20]	; (8001594 <MX_RTC_Init+0x8c>)
 800157e:	f004 ff9d 	bl	80064bc <HAL_RTC_SetDate>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001588:	f000 f9d6 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800158c:	bf00      	nop
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000284 	.word	0x20000284
 8001598:	40002800 	.word	0x40002800

0800159c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80015a0:	4b17      	ldr	r3, [pc, #92]	; (8001600 <MX_SPI2_Init+0x64>)
 80015a2:	4a18      	ldr	r2, [pc, #96]	; (8001604 <MX_SPI2_Init+0x68>)
 80015a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015a6:	4b16      	ldr	r3, [pc, #88]	; (8001600 <MX_SPI2_Init+0x64>)
 80015a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015ae:	4b14      	ldr	r3, [pc, #80]	; (8001600 <MX_SPI2_Init+0x64>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015b4:	4b12      	ldr	r3, [pc, #72]	; (8001600 <MX_SPI2_Init+0x64>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <MX_SPI2_Init+0x64>)
 80015bc:	2200      	movs	r2, #0
 80015be:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <MX_SPI2_Init+0x64>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80015c6:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <MX_SPI2_Init+0x64>)
 80015c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015cc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015ce:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <MX_SPI2_Init+0x64>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015d4:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <MX_SPI2_Init+0x64>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <MX_SPI2_Init+0x64>)
 80015dc:	2200      	movs	r2, #0
 80015de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015e0:	4b07      	ldr	r3, [pc, #28]	; (8001600 <MX_SPI2_Init+0x64>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <MX_SPI2_Init+0x64>)
 80015e8:	220a      	movs	r2, #10
 80015ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015ec:	4804      	ldr	r0, [pc, #16]	; (8001600 <MX_SPI2_Init+0x64>)
 80015ee:	f005 fb11 	bl	8006c14 <HAL_SPI_Init>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80015f8:	f000 f99e 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000298 	.word	0x20000298
 8001604:	40003800 	.word	0x40003800

08001608 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160e:	f107 0308 	add.w	r3, r7, #8
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161c:	463b      	mov	r3, r7
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001624:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <MX_TIM1_Init+0x98>)
 8001626:	4a1f      	ldr	r2, [pc, #124]	; (80016a4 <MX_TIM1_Init+0x9c>)
 8001628:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <MX_TIM1_Init+0x98>)
 800162c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001630:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001632:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <MX_TIM1_Init+0x98>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8001638:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <MX_TIM1_Init+0x98>)
 800163a:	2264      	movs	r2, #100	; 0x64
 800163c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <MX_TIM1_Init+0x98>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001644:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <MX_TIM1_Init+0x98>)
 8001646:	2200      	movs	r2, #0
 8001648:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <MX_TIM1_Init+0x98>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001650:	4813      	ldr	r0, [pc, #76]	; (80016a0 <MX_TIM1_Init+0x98>)
 8001652:	f005 fd4d 	bl	80070f0 <HAL_TIM_Base_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800165c:	f000 f96c 	bl	8001938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001664:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001666:	f107 0308 	add.w	r3, r7, #8
 800166a:	4619      	mov	r1, r3
 800166c:	480c      	ldr	r0, [pc, #48]	; (80016a0 <MX_TIM1_Init+0x98>)
 800166e:	f005 fee9 	bl	8007444 <HAL_TIM_ConfigClockSource>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001678:	f000 f95e 	bl	8001938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167c:	2300      	movs	r3, #0
 800167e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001680:	2300      	movs	r3, #0
 8001682:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001684:	463b      	mov	r3, r7
 8001686:	4619      	mov	r1, r3
 8001688:	4805      	ldr	r0, [pc, #20]	; (80016a0 <MX_TIM1_Init+0x98>)
 800168a:	f006 f8bf 	bl	800780c <HAL_TIMEx_MasterConfigSynchronization>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001694:	f000 f950 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001698:	bf00      	nop
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	200002f0 	.word	0x200002f0
 80016a4:	40012c00 	.word	0x40012c00

080016a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ae:	f107 0308 	add.w	r3, r7, #8
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016bc:	463b      	mov	r3, r7
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016c4:	4b1d      	ldr	r3, [pc, #116]	; (800173c <MX_TIM2_Init+0x94>)
 80016c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <MX_TIM2_Init+0x94>)
 80016ce:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80016d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d4:	4b19      	ldr	r3, [pc, #100]	; (800173c <MX_TIM2_Init+0x94>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80016da:	4b18      	ldr	r3, [pc, #96]	; (800173c <MX_TIM2_Init+0x94>)
 80016dc:	2264      	movs	r2, #100	; 0x64
 80016de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e0:	4b16      	ldr	r3, [pc, #88]	; (800173c <MX_TIM2_Init+0x94>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <MX_TIM2_Init+0x94>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016ec:	4813      	ldr	r0, [pc, #76]	; (800173c <MX_TIM2_Init+0x94>)
 80016ee:	f005 fcff 	bl	80070f0 <HAL_TIM_Base_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80016f8:	f000 f91e 	bl	8001938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001700:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001702:	f107 0308 	add.w	r3, r7, #8
 8001706:	4619      	mov	r1, r3
 8001708:	480c      	ldr	r0, [pc, #48]	; (800173c <MX_TIM2_Init+0x94>)
 800170a:	f005 fe9b 	bl	8007444 <HAL_TIM_ConfigClockSource>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001714:	f000 f910 	bl	8001938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001718:	2300      	movs	r3, #0
 800171a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800171c:	2300      	movs	r3, #0
 800171e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001720:	463b      	mov	r3, r7
 8001722:	4619      	mov	r1, r3
 8001724:	4805      	ldr	r0, [pc, #20]	; (800173c <MX_TIM2_Init+0x94>)
 8001726:	f006 f871 	bl	800780c <HAL_TIMEx_MasterConfigSynchronization>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001730:	f000 f902 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001734:	bf00      	nop
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000338 	.word	0x20000338

08001740 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <MX_USART1_UART_Init+0x4c>)
 8001746:	4a12      	ldr	r2, [pc, #72]	; (8001790 <MX_USART1_UART_Init+0x50>)
 8001748:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <MX_USART1_UART_Init+0x4c>)
 800174c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001750:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <MX_USART1_UART_Init+0x4c>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <MX_USART1_UART_Init+0x4c>)
 800175a:	2200      	movs	r2, #0
 800175c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <MX_USART1_UART_Init+0x4c>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001764:	4b09      	ldr	r3, [pc, #36]	; (800178c <MX_USART1_UART_Init+0x4c>)
 8001766:	220c      	movs	r2, #12
 8001768:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800176a:	4b08      	ldr	r3, [pc, #32]	; (800178c <MX_USART1_UART_Init+0x4c>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <MX_USART1_UART_Init+0x4c>)
 8001772:	2200      	movs	r2, #0
 8001774:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001776:	4805      	ldr	r0, [pc, #20]	; (800178c <MX_USART1_UART_Init+0x4c>)
 8001778:	f006 f8b8 	bl	80078ec <HAL_UART_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001782:	f000 f8d9 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000380 	.word	0x20000380
 8001790:	40013800 	.word	0x40013800

08001794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	; 0x28
 8001798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179a:	f107 0314 	add.w	r3, r7, #20
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a8:	4b5e      	ldr	r3, [pc, #376]	; (8001924 <MX_GPIO_Init+0x190>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	4a5d      	ldr	r2, [pc, #372]	; (8001924 <MX_GPIO_Init+0x190>)
 80017ae:	f043 0310 	orr.w	r3, r3, #16
 80017b2:	6193      	str	r3, [r2, #24]
 80017b4:	4b5b      	ldr	r3, [pc, #364]	; (8001924 <MX_GPIO_Init+0x190>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	f003 0310 	and.w	r3, r3, #16
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017c0:	4b58      	ldr	r3, [pc, #352]	; (8001924 <MX_GPIO_Init+0x190>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	4a57      	ldr	r2, [pc, #348]	; (8001924 <MX_GPIO_Init+0x190>)
 80017c6:	f043 0320 	orr.w	r3, r3, #32
 80017ca:	6193      	str	r3, [r2, #24]
 80017cc:	4b55      	ldr	r3, [pc, #340]	; (8001924 <MX_GPIO_Init+0x190>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	f003 0320 	and.w	r3, r3, #32
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d8:	4b52      	ldr	r3, [pc, #328]	; (8001924 <MX_GPIO_Init+0x190>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	4a51      	ldr	r2, [pc, #324]	; (8001924 <MX_GPIO_Init+0x190>)
 80017de:	f043 0304 	orr.w	r3, r3, #4
 80017e2:	6193      	str	r3, [r2, #24]
 80017e4:	4b4f      	ldr	r3, [pc, #316]	; (8001924 <MX_GPIO_Init+0x190>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f0:	4b4c      	ldr	r3, [pc, #304]	; (8001924 <MX_GPIO_Init+0x190>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	4a4b      	ldr	r2, [pc, #300]	; (8001924 <MX_GPIO_Init+0x190>)
 80017f6:	f043 0308 	orr.w	r3, r3, #8
 80017fa:	6193      	str	r3, [r2, #24]
 80017fc:	4b49      	ldr	r3, [pc, #292]	; (8001924 <MX_GPIO_Init+0x190>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	f003 0308 	and.w	r3, r3, #8
 8001804:	607b      	str	r3, [r7, #4]
 8001806:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001808:	2200      	movs	r2, #0
 800180a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800180e:	4846      	ldr	r0, [pc, #280]	; (8001928 <MX_GPIO_Init+0x194>)
 8001810:	f002 f8a2 	bl	8003958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8
 8001814:	2200      	movs	r2, #0
 8001816:	f640 1198 	movw	r1, #2456	; 0x998
 800181a:	4844      	ldr	r0, [pc, #272]	; (800192c <MX_GPIO_Init+0x198>)
 800181c:	f002 f89c 	bl	8003958 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001820:	2200      	movs	r2, #0
 8001822:	2180      	movs	r1, #128	; 0x80
 8001824:	4842      	ldr	r0, [pc, #264]	; (8001930 <MX_GPIO_Init+0x19c>)
 8001826:	f002 f897 	bl	8003958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800182a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800182e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001830:	2301      	movs	r3, #1
 8001832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2302      	movs	r3, #2
 800183a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	4619      	mov	r1, r3
 8001842:	4839      	ldr	r0, [pc, #228]	; (8001928 <MX_GPIO_Init+0x194>)
 8001844:	f001 ff04 	bl	8003650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8001848:	2322      	movs	r3, #34	; 0x22
 800184a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184c:	2300      	movs	r3, #0
 800184e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	4619      	mov	r1, r3
 800185a:	4834      	ldr	r0, [pc, #208]	; (800192c <MX_GPIO_Init+0x198>)
 800185c:	f001 fef8 	bl	8003650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_15;
 8001860:	f249 0304 	movw	r3, #36868	; 0x9004
 8001864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001866:	2300      	movs	r3, #0
 8001868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800186a:	2301      	movs	r3, #1
 800186c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	4619      	mov	r1, r3
 8001874:	482d      	ldr	r0, [pc, #180]	; (800192c <MX_GPIO_Init+0x198>)
 8001876:	f001 feeb 	bl	8003650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA7 PA8
                           PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8
 800187a:	f640 1398 	movw	r3, #2456	; 0x998
 800187e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001880:	2301      	movs	r3, #1
 8001882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2302      	movs	r3, #2
 800188a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	4619      	mov	r1, r3
 8001892:	4826      	ldr	r0, [pc, #152]	; (800192c <MX_GPIO_Init+0x198>)
 8001894:	f001 fedc 	bl	8003650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8001898:	2342      	movs	r3, #66	; 0x42
 800189a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800189c:	2300      	movs	r3, #0
 800189e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	4619      	mov	r1, r3
 80018aa:	4821      	ldr	r0, [pc, #132]	; (8001930 <MX_GPIO_Init+0x19c>)
 80018ac:	f001 fed0 	bl	8003650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_9;
 80018b0:	f44f 7301 	mov.w	r3, #516	; 0x204
 80018b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ba:	2301      	movs	r3, #1
 80018bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	4619      	mov	r1, r3
 80018c4:	481a      	ldr	r0, [pc, #104]	; (8001930 <MX_GPIO_Init+0x19c>)
 80018c6:	f001 fec3 	bl	8003650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80018ca:	2338      	movs	r3, #56	; 0x38
 80018cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ce:	2302      	movs	r3, #2
 80018d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018d2:	2303      	movs	r3, #3
 80018d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d6:	f107 0314 	add.w	r3, r7, #20
 80018da:	4619      	mov	r1, r3
 80018dc:	4814      	ldr	r0, [pc, #80]	; (8001930 <MX_GPIO_Init+0x19c>)
 80018de:	f001 feb7 	bl	8003650 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018e2:	2380      	movs	r3, #128	; 0x80
 80018e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e6:	2301      	movs	r3, #1
 80018e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2302      	movs	r3, #2
 80018f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	4619      	mov	r1, r3
 80018f8:	480d      	ldr	r0, [pc, #52]	; (8001930 <MX_GPIO_Init+0x19c>)
 80018fa:	f001 fea9 	bl	8003650 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_SPI1_ENABLE();
 80018fe:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <MX_GPIO_Init+0x1a0>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
 8001904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001906:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
 8001914:	4a07      	ldr	r2, [pc, #28]	; (8001934 <MX_GPIO_Init+0x1a0>)
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	6053      	str	r3, [r2, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800191a:	bf00      	nop
 800191c:	3728      	adds	r7, #40	; 0x28
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40021000 	.word	0x40021000
 8001928:	40011000 	.word	0x40011000
 800192c:	40010800 	.word	0x40010800
 8001930:	40010c00 	.word	0x40010c00
 8001934:	40010000 	.word	0x40010000

08001938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800193c:	b672      	cpsid	i
}
 800193e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001940:	e7fe      	b.n	8001940 <Error_Handler+0x8>
	...

08001944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800194a:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <HAL_MspInit+0x5c>)
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	4a14      	ldr	r2, [pc, #80]	; (80019a0 <HAL_MspInit+0x5c>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6193      	str	r3, [r2, #24]
 8001956:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_MspInit+0x5c>)
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001962:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <HAL_MspInit+0x5c>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	4a0e      	ldr	r2, [pc, #56]	; (80019a0 <HAL_MspInit+0x5c>)
 8001968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800196c:	61d3      	str	r3, [r2, #28]
 800196e:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <HAL_MspInit+0x5c>)
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800197a:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <HAL_MspInit+0x60>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <HAL_MspInit+0x60>)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001996:	bf00      	nop
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40010000 	.word	0x40010000

080019a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	f107 0310 	add.w	r3, r7, #16
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC2)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a14      	ldr	r2, [pc, #80]	; (8001a14 <HAL_ADC_MspInit+0x6c>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d121      	bne.n	8001a0c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80019c8:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <HAL_ADC_MspInit+0x70>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	4a12      	ldr	r2, [pc, #72]	; (8001a18 <HAL_ADC_MspInit+0x70>)
 80019ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019d2:	6193      	str	r3, [r2, #24]
 80019d4:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <HAL_ADC_MspInit+0x70>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e0:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <HAL_ADC_MspInit+0x70>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	4a0c      	ldr	r2, [pc, #48]	; (8001a18 <HAL_ADC_MspInit+0x70>)
 80019e6:	f043 0304 	orr.w	r3, r3, #4
 80019ea:	6193      	str	r3, [r2, #24]
 80019ec:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <HAL_ADC_MspInit+0x70>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA6     ------> ADC2_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019f8:	2340      	movs	r3, #64	; 0x40
 80019fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019fc:	2303      	movs	r3, #3
 80019fe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a00:	f107 0310 	add.w	r3, r7, #16
 8001a04:	4619      	mov	r1, r3
 8001a06:	4805      	ldr	r0, [pc, #20]	; (8001a1c <HAL_ADC_MspInit+0x74>)
 8001a08:	f001 fe22 	bl	8003650 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001a0c:	bf00      	nop
 8001a0e:	3720      	adds	r7, #32
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40012800 	.word	0x40012800
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	40010800 	.word	0x40010800

08001a20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b088      	sub	sp, #32
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 0310 	add.w	r3, r7, #16
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a1e      	ldr	r2, [pc, #120]	; (8001ab4 <HAL_I2C_MspInit+0x94>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d134      	bne.n	8001aaa <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a40:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <HAL_I2C_MspInit+0x98>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	4a1c      	ldr	r2, [pc, #112]	; (8001ab8 <HAL_I2C_MspInit+0x98>)
 8001a46:	f043 0308 	orr.w	r3, r3, #8
 8001a4a:	6193      	str	r3, [r2, #24]
 8001a4c:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <HAL_I2C_MspInit+0x98>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	f003 0308 	and.w	r3, r3, #8
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a58:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a5e:	2312      	movs	r3, #18
 8001a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a62:	2303      	movs	r3, #3
 8001a64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a66:	f107 0310 	add.w	r3, r7, #16
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4813      	ldr	r0, [pc, #76]	; (8001abc <HAL_I2C_MspInit+0x9c>)
 8001a6e:	f001 fdef 	bl	8003650 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a72:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <HAL_I2C_MspInit+0x98>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	4a10      	ldr	r2, [pc, #64]	; (8001ab8 <HAL_I2C_MspInit+0x98>)
 8001a78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a7c:	61d3      	str	r3, [r2, #28]
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <HAL_I2C_MspInit+0x98>)
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2021      	movs	r0, #33	; 0x21
 8001a90:	f001 fd21 	bl	80034d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001a94:	2021      	movs	r0, #33	; 0x21
 8001a96:	f001 fd3a 	bl	800350e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2022      	movs	r0, #34	; 0x22
 8001aa0:	f001 fd19 	bl	80034d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001aa4:	2022      	movs	r0, #34	; 0x22
 8001aa6:	f001 fd32 	bl	800350e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001aaa:	bf00      	nop
 8001aac:	3720      	adds	r7, #32
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40005800 	.word	0x40005800
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40010c00 	.word	0x40010c00

08001ac0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a0b      	ldr	r2, [pc, #44]	; (8001afc <HAL_RTC_MspInit+0x3c>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d110      	bne.n	8001af4 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001ad2:	f003 fd6f 	bl	80055b4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <HAL_RTC_MspInit+0x40>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	4a09      	ldr	r2, [pc, #36]	; (8001b00 <HAL_RTC_MspInit+0x40>)
 8001adc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ae0:	61d3      	str	r3, [r2, #28]
 8001ae2:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <HAL_RTC_MspInit+0x40>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001aee:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <HAL_RTC_MspInit+0x44>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001af4:	bf00      	nop
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40002800 	.word	0x40002800
 8001b00:	40021000 	.word	0x40021000
 8001b04:	4242043c 	.word	0x4242043c

08001b08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b088      	sub	sp, #32
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	f107 0310 	add.w	r3, r7, #16
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a1c      	ldr	r2, [pc, #112]	; (8001b94 <HAL_SPI_MspInit+0x8c>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d131      	bne.n	8001b8c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b28:	4b1b      	ldr	r3, [pc, #108]	; (8001b98 <HAL_SPI_MspInit+0x90>)
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	4a1a      	ldr	r2, [pc, #104]	; (8001b98 <HAL_SPI_MspInit+0x90>)
 8001b2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b32:	61d3      	str	r3, [r2, #28]
 8001b34:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <HAL_SPI_MspInit+0x90>)
 8001b36:	69db      	ldr	r3, [r3, #28]
 8001b38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b40:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <HAL_SPI_MspInit+0x90>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	4a14      	ldr	r2, [pc, #80]	; (8001b98 <HAL_SPI_MspInit+0x90>)
 8001b46:	f043 0308 	orr.w	r3, r3, #8
 8001b4a:	6193      	str	r3, [r2, #24]
 8001b4c:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <HAL_SPI_MspInit+0x90>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	f003 0308 	and.w	r3, r3, #8
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001b58:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001b5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b62:	2303      	movs	r3, #3
 8001b64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b66:	f107 0310 	add.w	r3, r7, #16
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	480b      	ldr	r0, [pc, #44]	; (8001b9c <HAL_SPI_MspInit+0x94>)
 8001b6e:	f001 fd6f 	bl	8003650 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001b72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b80:	f107 0310 	add.w	r3, r7, #16
 8001b84:	4619      	mov	r1, r3
 8001b86:	4805      	ldr	r0, [pc, #20]	; (8001b9c <HAL_SPI_MspInit+0x94>)
 8001b88:	f001 fd62 	bl	8003650 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001b8c:	bf00      	nop
 8001b8e:	3720      	adds	r7, #32
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40003800 	.word	0x40003800
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40010c00 	.word	0x40010c00

08001ba0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a16      	ldr	r2, [pc, #88]	; (8001c08 <HAL_TIM_Base_MspInit+0x68>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d10c      	bne.n	8001bcc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bb2:	4b16      	ldr	r3, [pc, #88]	; (8001c0c <HAL_TIM_Base_MspInit+0x6c>)
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	4a15      	ldr	r2, [pc, #84]	; (8001c0c <HAL_TIM_Base_MspInit+0x6c>)
 8001bb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bbc:	6193      	str	r3, [r2, #24]
 8001bbe:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <HAL_TIM_Base_MspInit+0x6c>)
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001bca:	e018      	b.n	8001bfe <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd4:	d113      	bne.n	8001bfe <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bd6:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <HAL_TIM_Base_MspInit+0x6c>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	4a0c      	ldr	r2, [pc, #48]	; (8001c0c <HAL_TIM_Base_MspInit+0x6c>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	61d3      	str	r3, [r2, #28]
 8001be2:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <HAL_TIM_Base_MspInit+0x6c>)
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	201c      	movs	r0, #28
 8001bf4:	f001 fc6f 	bl	80034d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bf8:	201c      	movs	r0, #28
 8001bfa:	f001 fc88 	bl	800350e <HAL_NVIC_EnableIRQ>
}
 8001bfe:	bf00      	nop
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40012c00 	.word	0x40012c00
 8001c0c:	40021000 	.word	0x40021000

08001c10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c18:	f107 0310 	add.w	r3, r7, #16
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a1c      	ldr	r2, [pc, #112]	; (8001c9c <HAL_UART_MspInit+0x8c>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d131      	bne.n	8001c94 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c30:	4b1b      	ldr	r3, [pc, #108]	; (8001ca0 <HAL_UART_MspInit+0x90>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	4a1a      	ldr	r2, [pc, #104]	; (8001ca0 <HAL_UART_MspInit+0x90>)
 8001c36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c3a:	6193      	str	r3, [r2, #24]
 8001c3c:	4b18      	ldr	r3, [pc, #96]	; (8001ca0 <HAL_UART_MspInit+0x90>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c48:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <HAL_UART_MspInit+0x90>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	4a14      	ldr	r2, [pc, #80]	; (8001ca0 <HAL_UART_MspInit+0x90>)
 8001c4e:	f043 0304 	orr.w	r3, r3, #4
 8001c52:	6193      	str	r3, [r2, #24]
 8001c54:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <HAL_UART_MspInit+0x90>)
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	60bb      	str	r3, [r7, #8]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c66:	2302      	movs	r3, #2
 8001c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6e:	f107 0310 	add.w	r3, r7, #16
 8001c72:	4619      	mov	r1, r3
 8001c74:	480b      	ldr	r0, [pc, #44]	; (8001ca4 <HAL_UART_MspInit+0x94>)
 8001c76:	f001 fceb 	bl	8003650 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c88:	f107 0310 	add.w	r3, r7, #16
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4805      	ldr	r0, [pc, #20]	; (8001ca4 <HAL_UART_MspInit+0x94>)
 8001c90:	f001 fcde 	bl	8003650 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c94:	bf00      	nop
 8001c96:	3720      	adds	r7, #32
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40013800 	.word	0x40013800
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40010800 	.word	0x40010800

08001ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cac:	e7fe      	b.n	8001cac <NMI_Handler+0x4>

08001cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cb2:	e7fe      	b.n	8001cb2 <HardFault_Handler+0x4>

08001cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <MemManage_Handler+0x4>

08001cba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cbe:	e7fe      	b.n	8001cbe <BusFault_Handler+0x4>

08001cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <UsageFault_Handler+0x4>

08001cc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr

08001cd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr

08001cde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr

08001cea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cee:	f000 fe83 	bl	80029f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cfc:	4802      	ldr	r0, [pc, #8]	; (8001d08 <TIM2_IRQHandler+0x10>)
 8001cfe:	f005 fa99 	bl	8007234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000338 	.word	0x20000338

08001d0c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001d10:	4802      	ldr	r0, [pc, #8]	; (8001d1c <I2C2_EV_IRQHandler+0x10>)
 8001d12:	f001 ff91 	bl	8003c38 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000230 	.word	0x20000230

08001d20 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001d24:	4802      	ldr	r0, [pc, #8]	; (8001d30 <I2C2_ER_IRQHandler+0x10>)
 8001d26:	f002 f8da 	bl	8003ede <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000230 	.word	0x20000230

08001d34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
	return 1;
 8001d38:	2301      	movs	r3, #1
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr

08001d42 <_kill>:

int _kill(int pid, int sig)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d4c:	f006 fd46 	bl	80087dc <__errno>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2216      	movs	r2, #22
 8001d54:	601a      	str	r2, [r3, #0]
	return -1;
 8001d56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <_exit>:

void _exit (int status)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d6a:	f04f 31ff 	mov.w	r1, #4294967295
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7ff ffe7 	bl	8001d42 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d74:	e7fe      	b.n	8001d74 <_exit+0x12>

08001d76 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b086      	sub	sp, #24
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	60f8      	str	r0, [r7, #12]
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	e00a      	b.n	8001d9e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d88:	f3af 8000 	nop.w
 8001d8c:	4601      	mov	r1, r0
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	1c5a      	adds	r2, r3, #1
 8001d92:	60ba      	str	r2, [r7, #8]
 8001d94:	b2ca      	uxtb	r2, r1
 8001d96:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	dbf0      	blt.n	8001d88 <_read+0x12>
	}

return len;
 8001da6:	687b      	ldr	r3, [r7, #4]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3718      	adds	r7, #24
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	e009      	b.n	8001dd6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	1c5a      	adds	r2, r3, #1
 8001dc6:	60ba      	str	r2, [r7, #8]
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	dbf1      	blt.n	8001dc2 <_write+0x12>
	}
	return len;
 8001dde:	687b      	ldr	r3, [r7, #4]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <_close>:

int _close(int file)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
	return -1;
 8001df0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr

08001dfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e0e:	605a      	str	r2, [r3, #4]
	return 0;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr

08001e1c <_isatty>:

int _isatty(int file)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
	return 1;
 8001e24:	2301      	movs	r3, #1
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr

08001e30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
	return 0;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr

08001e48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e50:	4a14      	ldr	r2, [pc, #80]	; (8001ea4 <_sbrk+0x5c>)
 8001e52:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <_sbrk+0x60>)
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e5c:	4b13      	ldr	r3, [pc, #76]	; (8001eac <_sbrk+0x64>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d102      	bne.n	8001e6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <_sbrk+0x64>)
 8001e66:	4a12      	ldr	r2, [pc, #72]	; (8001eb0 <_sbrk+0x68>)
 8001e68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e6a:	4b10      	ldr	r3, [pc, #64]	; (8001eac <_sbrk+0x64>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d207      	bcs.n	8001e88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e78:	f006 fcb0 	bl	80087dc <__errno>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	220c      	movs	r2, #12
 8001e80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e82:	f04f 33ff 	mov.w	r3, #4294967295
 8001e86:	e009      	b.n	8001e9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e88:	4b08      	ldr	r3, [pc, #32]	; (8001eac <_sbrk+0x64>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e8e:	4b07      	ldr	r3, [pc, #28]	; (8001eac <_sbrk+0x64>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	4a05      	ldr	r2, [pc, #20]	; (8001eac <_sbrk+0x64>)
 8001e98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20005000 	.word	0x20005000
 8001ea8:	00000400 	.word	0x00000400
 8001eac:	20000408 	.word	0x20000408
 8001eb0:	20000560 	.word	0x20000560

08001eb4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr

08001ec0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ec0:	f7ff fff8 	bl	8001eb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ec4:	480b      	ldr	r0, [pc, #44]	; (8001ef4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ec6:	490c      	ldr	r1, [pc, #48]	; (8001ef8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ec8:	4a0c      	ldr	r2, [pc, #48]	; (8001efc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ecc:	e002      	b.n	8001ed4 <LoopCopyDataInit>

08001ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ed2:	3304      	adds	r3, #4

08001ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ed8:	d3f9      	bcc.n	8001ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eda:	4a09      	ldr	r2, [pc, #36]	; (8001f00 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001edc:	4c09      	ldr	r4, [pc, #36]	; (8001f04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee0:	e001      	b.n	8001ee6 <LoopFillZerobss>

08001ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ee4:	3204      	adds	r2, #4

08001ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ee8:	d3fb      	bcc.n	8001ee2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eea:	f006 fc7d 	bl	80087e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001eee:	f7ff fa25 	bl	800133c <main>
  bx lr
 8001ef2:	4770      	bx	lr
  ldr r0, =_sdata
 8001ef4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ef8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001efc:	0800c164 	.word	0x0800c164
  ldr r2, =_sbss
 8001f00:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001f04:	2000055c 	.word	0x2000055c

08001f08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f08:	e7fe      	b.n	8001f08 <ADC1_2_IRQHandler>
	...

08001f0c <ILI9341_Select>:
/* vim: set ai et ts=4 sw=4: */
#include "stm32f1xx_hal.h"
#include "st7735.h"
#include <math.h>

static void ILI9341_Select() {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8001f10:	2200      	movs	r2, #0
 8001f12:	2110      	movs	r1, #16
 8001f14:	4802      	ldr	r0, [pc, #8]	; (8001f20 <ILI9341_Select+0x14>)
 8001f16:	f001 fd1f 	bl	8003958 <HAL_GPIO_WritePin>
}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40010800 	.word	0x40010800

08001f24 <ILI9341_Unselect>:

void ILI9341_Unselect() {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8001f28:	2201      	movs	r2, #1
 8001f2a:	2110      	movs	r1, #16
 8001f2c:	4802      	ldr	r0, [pc, #8]	; (8001f38 <ILI9341_Unselect+0x14>)
 8001f2e:	f001 fd13 	bl	8003958 <HAL_GPIO_WritePin>
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40010800 	.word	0x40010800

08001f3c <ILI9341_Reset>:

static void ILI9341_Reset() {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8001f40:	2200      	movs	r2, #0
 8001f42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f46:	4807      	ldr	r0, [pc, #28]	; (8001f64 <ILI9341_Reset+0x28>)
 8001f48:	f001 fd06 	bl	8003958 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001f4c:	2005      	movs	r0, #5
 8001f4e:	f000 fd6f 	bl	8002a30 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8001f52:	2201      	movs	r2, #1
 8001f54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f58:	4802      	ldr	r0, [pc, #8]	; (8001f64 <ILI9341_Reset+0x28>)
 8001f5a:	f001 fcfd 	bl	8003958 <HAL_GPIO_WritePin>
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40010800 	.word	0x40010800

08001f68 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8001f72:	2200      	movs	r2, #0
 8001f74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f78:	4806      	ldr	r0, [pc, #24]	; (8001f94 <ILI9341_WriteCommand+0x2c>)
 8001f7a:	f001 fced 	bl	8003958 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001f7e:	1df9      	adds	r1, r7, #7
 8001f80:	f04f 33ff 	mov.w	r3, #4294967295
 8001f84:	2201      	movs	r2, #1
 8001f86:	4804      	ldr	r0, [pc, #16]	; (8001f98 <ILI9341_WriteCommand+0x30>)
 8001f88:	f004 fec8 	bl	8006d1c <HAL_SPI_Transmit>
}
 8001f8c:	bf00      	nop
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40010800 	.word	0x40010800
 8001f98:	20000298 	.word	0x20000298

08001f9c <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fac:	4810      	ldr	r0, [pc, #64]	; (8001ff0 <ILI9341_WriteData+0x54>)
 8001fae:	f001 fcd3 	bl	8003958 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8001fb2:	e015      	b.n	8001fe0 <ILI9341_WriteData+0x44>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fba:	bf28      	it	cs
 8001fbc:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8001fc0:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8001fc2:	89fa      	ldrh	r2, [r7, #14]
 8001fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	480a      	ldr	r0, [pc, #40]	; (8001ff4 <ILI9341_WriteData+0x58>)
 8001fcc:	f004 fea6 	bl	8006d1c <HAL_SPI_Transmit>
        buff += chunk_size;
 8001fd0:	89fb      	ldrh	r3, [r7, #14]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 8001fd8:	89fb      	ldrh	r3, [r7, #14]
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1e6      	bne.n	8001fb4 <ILI9341_WriteData+0x18>
    }
}
 8001fe6:	bf00      	nop
 8001fe8:	bf00      	nop
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40010800 	.word	0x40010800
 8001ff4:	20000298 	.word	0x20000298

08001ff8 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8001ff8:	b590      	push	{r4, r7, lr}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4604      	mov	r4, r0
 8002000:	4608      	mov	r0, r1
 8002002:	4611      	mov	r1, r2
 8002004:	461a      	mov	r2, r3
 8002006:	4623      	mov	r3, r4
 8002008:	80fb      	strh	r3, [r7, #6]
 800200a:	4603      	mov	r3, r0
 800200c:	80bb      	strh	r3, [r7, #4]
 800200e:	460b      	mov	r3, r1
 8002010:	807b      	strh	r3, [r7, #2]
 8002012:	4613      	mov	r3, r2
 8002014:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 8002016:	202a      	movs	r0, #42	; 0x2a
 8002018:	f7ff ffa6 	bl	8001f68 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 800201c:	88fb      	ldrh	r3, [r7, #6]
 800201e:	0a1b      	lsrs	r3, r3, #8
 8002020:	b29b      	uxth	r3, r3
 8002022:	b2db      	uxtb	r3, r3
 8002024:	733b      	strb	r3, [r7, #12]
 8002026:	88fb      	ldrh	r3, [r7, #6]
 8002028:	b2db      	uxtb	r3, r3
 800202a:	737b      	strb	r3, [r7, #13]
 800202c:	887b      	ldrh	r3, [r7, #2]
 800202e:	0a1b      	lsrs	r3, r3, #8
 8002030:	b29b      	uxth	r3, r3
 8002032:	b2db      	uxtb	r3, r3
 8002034:	73bb      	strb	r3, [r7, #14]
 8002036:	887b      	ldrh	r3, [r7, #2]
 8002038:	b2db      	uxtb	r3, r3
 800203a:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 800203c:	f107 030c 	add.w	r3, r7, #12
 8002040:	2104      	movs	r1, #4
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff ffaa 	bl	8001f9c <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 8002048:	202b      	movs	r0, #43	; 0x2b
 800204a:	f7ff ff8d 	bl	8001f68 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 800204e:	88bb      	ldrh	r3, [r7, #4]
 8002050:	0a1b      	lsrs	r3, r3, #8
 8002052:	b29b      	uxth	r3, r3
 8002054:	b2db      	uxtb	r3, r3
 8002056:	723b      	strb	r3, [r7, #8]
 8002058:	88bb      	ldrh	r3, [r7, #4]
 800205a:	b2db      	uxtb	r3, r3
 800205c:	727b      	strb	r3, [r7, #9]
 800205e:	883b      	ldrh	r3, [r7, #0]
 8002060:	0a1b      	lsrs	r3, r3, #8
 8002062:	b29b      	uxth	r3, r3
 8002064:	b2db      	uxtb	r3, r3
 8002066:	72bb      	strb	r3, [r7, #10]
 8002068:	883b      	ldrh	r3, [r7, #0]
 800206a:	b2db      	uxtb	r3, r3
 800206c:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 800206e:	f107 0308 	add.w	r3, r7, #8
 8002072:	2104      	movs	r1, #4
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff ff91 	bl	8001f9c <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 800207a:	202c      	movs	r0, #44	; 0x2c
 800207c:	f7ff ff74 	bl	8001f68 <ILI9341_WriteCommand>
}
 8002080:	bf00      	nop
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	bd90      	pop	{r4, r7, pc}

08002088 <ILI9341_Init>:

void ILI9341_Init() {
 8002088:	b590      	push	{r4, r7, lr}
 800208a:	b09b      	sub	sp, #108	; 0x6c
 800208c:	af00      	add	r7, sp, #0
    ILI9341_Select();
 800208e:	f7ff ff3d 	bl	8001f0c <ILI9341_Select>
    ILI9341_Reset();
 8002092:	f7ff ff53 	bl	8001f3c <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 8002096:	2001      	movs	r0, #1
 8002098:	f7ff ff66 	bl	8001f68 <ILI9341_WriteCommand>
    HAL_Delay(1000);
 800209c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020a0:	f000 fcc6 	bl	8002a30 <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 80020a4:	20cb      	movs	r0, #203	; 0xcb
 80020a6:	f7ff ff5f 	bl	8001f68 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 80020aa:	4a87      	ldr	r2, [pc, #540]	; (80022c8 <ILI9341_Init+0x240>)
 80020ac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80020b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020b4:	6018      	str	r0, [r3, #0]
 80020b6:	3304      	adds	r3, #4
 80020b8:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80020ba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80020be:	2105      	movs	r1, #5
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff ff6b 	bl	8001f9c <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 80020c6:	20cf      	movs	r0, #207	; 0xcf
 80020c8:	f7ff ff4e 	bl	8001f68 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 80020cc:	4a7f      	ldr	r2, [pc, #508]	; (80022cc <ILI9341_Init+0x244>)
 80020ce:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80020d2:	6812      	ldr	r2, [r2, #0]
 80020d4:	4611      	mov	r1, r2
 80020d6:	8019      	strh	r1, [r3, #0]
 80020d8:	3302      	adds	r3, #2
 80020da:	0c12      	lsrs	r2, r2, #16
 80020dc:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80020de:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80020e2:	2103      	movs	r1, #3
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff ff59 	bl	8001f9c <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 80020ea:	20e8      	movs	r0, #232	; 0xe8
 80020ec:	f7ff ff3c 	bl	8001f68 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 80020f0:	4a77      	ldr	r2, [pc, #476]	; (80022d0 <ILI9341_Init+0x248>)
 80020f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	4611      	mov	r1, r2
 80020fa:	8019      	strh	r1, [r3, #0]
 80020fc:	3302      	adds	r3, #2
 80020fe:	0c12      	lsrs	r2, r2, #16
 8002100:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8002102:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002106:	2103      	movs	r1, #3
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ff47 	bl	8001f9c <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 800210e:	20ea      	movs	r0, #234	; 0xea
 8002110:	f7ff ff2a 	bl	8001f68 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 8002114:	2300      	movs	r3, #0
 8002116:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        ILI9341_WriteData(data, sizeof(data));
 800211a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800211e:	2102      	movs	r1, #2
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff3b 	bl	8001f9c <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 8002126:	20ed      	movs	r0, #237	; 0xed
 8002128:	f7ff ff1e 	bl	8001f68 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 800212c:	4b69      	ldr	r3, [pc, #420]	; (80022d4 <ILI9341_Init+0x24c>)
 800212e:	653b      	str	r3, [r7, #80]	; 0x50
        ILI9341_WriteData(data, sizeof(data));
 8002130:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002134:	2104      	movs	r1, #4
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff ff30 	bl	8001f9c <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 800213c:	20f7      	movs	r0, #247	; 0xf7
 800213e:	f7ff ff13 	bl	8001f68 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 8002142:	2320      	movs	r3, #32
 8002144:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        ILI9341_WriteData(data, sizeof(data));
 8002148:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800214c:	2101      	movs	r1, #1
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff ff24 	bl	8001f9c <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 8002154:	20c0      	movs	r0, #192	; 0xc0
 8002156:	f7ff ff07 	bl	8001f68 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 800215a:	2323      	movs	r3, #35	; 0x23
 800215c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        ILI9341_WriteData(data, sizeof(data));
 8002160:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002164:	2101      	movs	r1, #1
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff ff18 	bl	8001f9c <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 800216c:	20c1      	movs	r0, #193	; 0xc1
 800216e:	f7ff fefb 	bl	8001f68 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 8002172:	2310      	movs	r3, #16
 8002174:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        ILI9341_WriteData(data, sizeof(data));
 8002178:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800217c:	2101      	movs	r1, #1
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff ff0c 	bl	8001f9c <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 8002184:	20c5      	movs	r0, #197	; 0xc5
 8002186:	f7ff feef 	bl	8001f68 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 800218a:	f642 033e 	movw	r3, #10302	; 0x283e
 800218e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        ILI9341_WriteData(data, sizeof(data));
 8002192:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002196:	2102      	movs	r1, #2
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff feff 	bl	8001f9c <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 800219e:	20c7      	movs	r0, #199	; 0xc7
 80021a0:	f7ff fee2 	bl	8001f68 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 80021a4:	2386      	movs	r3, #134	; 0x86
 80021a6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        ILI9341_WriteData(data, sizeof(data));
 80021aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021ae:	2101      	movs	r1, #1
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fef3 	bl	8001f9c <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 80021b6:	2036      	movs	r0, #54	; 0x36
 80021b8:	f7ff fed6 	bl	8001f68 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 80021bc:	2348      	movs	r3, #72	; 0x48
 80021be:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        ILI9341_WriteData(data, sizeof(data));
 80021c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021c6:	2101      	movs	r1, #1
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff fee7 	bl	8001f9c <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 80021ce:	203a      	movs	r0, #58	; 0x3a
 80021d0:	f7ff feca 	bl	8001f68 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 80021d4:	2355      	movs	r3, #85	; 0x55
 80021d6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        ILI9341_WriteData(data, sizeof(data));
 80021da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021de:	2101      	movs	r1, #1
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff fedb 	bl	8001f9c <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 80021e6:	20b1      	movs	r0, #177	; 0xb1
 80021e8:	f7ff febe 	bl	8001f68 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 80021ec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80021f0:	863b      	strh	r3, [r7, #48]	; 0x30
        ILI9341_WriteData(data, sizeof(data));
 80021f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021f6:	2102      	movs	r1, #2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff fecf 	bl	8001f9c <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 80021fe:	20b6      	movs	r0, #182	; 0xb6
 8002200:	f7ff feb2 	bl	8001f68 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 8002204:	4a34      	ldr	r2, [pc, #208]	; (80022d8 <ILI9341_Init+0x250>)
 8002206:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800220a:	6812      	ldr	r2, [r2, #0]
 800220c:	4611      	mov	r1, r2
 800220e:	8019      	strh	r1, [r3, #0]
 8002210:	3302      	adds	r3, #2
 8002212:	0c12      	lsrs	r2, r2, #16
 8002214:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8002216:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800221a:	2103      	movs	r1, #3
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff febd 	bl	8001f9c <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 8002222:	20f2      	movs	r0, #242	; 0xf2
 8002224:	f7ff fea0 	bl	8001f68 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 8002228:	2300      	movs	r3, #0
 800222a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        ILI9341_WriteData(data, sizeof(data));
 800222e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002232:	2101      	movs	r1, #1
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff feb1 	bl	8001f9c <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 800223a:	2026      	movs	r0, #38	; 0x26
 800223c:	f7ff fe94 	bl	8001f68 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 8002240:	2301      	movs	r3, #1
 8002242:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        ILI9341_WriteData(data, sizeof(data));
 8002246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800224a:	2101      	movs	r1, #1
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff fea5 	bl	8001f9c <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 8002252:	20e0      	movs	r0, #224	; 0xe0
 8002254:	f7ff fe88 	bl	8001f68 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8002258:	4b20      	ldr	r3, [pc, #128]	; (80022dc <ILI9341_Init+0x254>)
 800225a:	f107 0414 	add.w	r4, r7, #20
 800225e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002260:	c407      	stmia	r4!, {r0, r1, r2}
 8002262:	8023      	strh	r3, [r4, #0]
 8002264:	3402      	adds	r4, #2
 8002266:	0c1b      	lsrs	r3, r3, #16
 8002268:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 800226a:	f107 0314 	add.w	r3, r7, #20
 800226e:	210f      	movs	r1, #15
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fe93 	bl	8001f9c <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 8002276:	20e1      	movs	r0, #225	; 0xe1
 8002278:	f7ff fe76 	bl	8001f68 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 800227c:	4b18      	ldr	r3, [pc, #96]	; (80022e0 <ILI9341_Init+0x258>)
 800227e:	1d3c      	adds	r4, r7, #4
 8002280:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002282:	c407      	stmia	r4!, {r0, r1, r2}
 8002284:	8023      	strh	r3, [r4, #0]
 8002286:	3402      	adds	r4, #2
 8002288:	0c1b      	lsrs	r3, r3, #16
 800228a:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 800228c:	1d3b      	adds	r3, r7, #4
 800228e:	210f      	movs	r1, #15
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fe83 	bl	8001f9c <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 8002296:	2011      	movs	r0, #17
 8002298:	f7ff fe66 	bl	8001f68 <ILI9341_WriteCommand>
    HAL_Delay(120);
 800229c:	2078      	movs	r0, #120	; 0x78
 800229e:	f000 fbc7 	bl	8002a30 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 80022a2:	2029      	movs	r0, #41	; 0x29
 80022a4:	f7ff fe60 	bl	8001f68 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 80022a8:	2036      	movs	r0, #54	; 0x36
 80022aa:	f7ff fe5d 	bl	8001f68 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 80022ae:	23a0      	movs	r3, #160	; 0xa0
 80022b0:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 80022b2:	463b      	mov	r3, r7
 80022b4:	2101      	movs	r1, #1
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff fe70 	bl	8001f9c <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 80022bc:	f7ff fe32 	bl	8001f24 <ILI9341_Unselect>
}
 80022c0:	bf00      	nop
 80022c2:	376c      	adds	r7, #108	; 0x6c
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd90      	pop	{r4, r7, pc}
 80022c8:	0800a8b0 	.word	0x0800a8b0
 80022cc:	0800a8b8 	.word	0x0800a8b8
 80022d0:	0800a8bc 	.word	0x0800a8bc
 80022d4:	81120364 	.word	0x81120364
 80022d8:	0800a8c0 	.word	0x0800a8c0
 80022dc:	0800a8c4 	.word	0x0800a8c4
 80022e0:	0800a8d4 	.word	0x0800a8d4

080022e4 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	80fb      	strh	r3, [r7, #6]
 80022ee:	460b      	mov	r3, r1
 80022f0:	80bb      	strh	r3, [r7, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	807b      	strh	r3, [r7, #2]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 80022f6:	88fb      	ldrh	r3, [r7, #6]
 80022f8:	2b9f      	cmp	r3, #159	; 0x9f
 80022fa:	d81f      	bhi.n	800233c <ILI9341_DrawPixel+0x58>
 80022fc:	88bb      	ldrh	r3, [r7, #4]
 80022fe:	2b7f      	cmp	r3, #127	; 0x7f
 8002300:	d81c      	bhi.n	800233c <ILI9341_DrawPixel+0x58>
        return;

    ILI9341_Select();
 8002302:	f7ff fe03 	bl	8001f0c <ILI9341_Select>

    ILI9341_SetAddressWindow(x, y, x+1, y+1);
 8002306:	88fb      	ldrh	r3, [r7, #6]
 8002308:	3301      	adds	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	88bb      	ldrh	r3, [r7, #4]
 800230e:	3301      	adds	r3, #1
 8002310:	b29b      	uxth	r3, r3
 8002312:	88b9      	ldrh	r1, [r7, #4]
 8002314:	88f8      	ldrh	r0, [r7, #6]
 8002316:	f7ff fe6f 	bl	8001ff8 <ILI9341_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 800231a:	887b      	ldrh	r3, [r7, #2]
 800231c:	0a1b      	lsrs	r3, r3, #8
 800231e:	b29b      	uxth	r3, r3
 8002320:	b2db      	uxtb	r3, r3
 8002322:	733b      	strb	r3, [r7, #12]
 8002324:	887b      	ldrh	r3, [r7, #2]
 8002326:	b2db      	uxtb	r3, r3
 8002328:	737b      	strb	r3, [r7, #13]
    ILI9341_WriteData(data, sizeof(data));
 800232a:	f107 030c 	add.w	r3, r7, #12
 800232e:	2102      	movs	r1, #2
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fe33 	bl	8001f9c <ILI9341_WriteData>

    ILI9341_Unselect();
 8002336:	f7ff fdf5 	bl	8001f24 <ILI9341_Unselect>
 800233a:	e000      	b.n	800233e <ILI9341_DrawPixel+0x5a>
        return;
 800233c:	bf00      	nop
}
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <ILI9341_WriteChar>:

void ILI9341_DrawPoint(struct point point_a, uint16_t color) {
	ILI9341_DrawPixel(point_a.x, point_a.y, color);
}

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002344:	b082      	sub	sp, #8
 8002346:	b590      	push	{r4, r7, lr}
 8002348:	b089      	sub	sp, #36	; 0x24
 800234a:	af00      	add	r7, sp, #0
 800234c:	637b      	str	r3, [r7, #52]	; 0x34
 800234e:	4603      	mov	r3, r0
 8002350:	80fb      	strh	r3, [r7, #6]
 8002352:	460b      	mov	r3, r1
 8002354:	80bb      	strh	r3, [r7, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800235a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800235e:	b29a      	uxth	r2, r3
 8002360:	88fb      	ldrh	r3, [r7, #6]
 8002362:	4413      	add	r3, r2
 8002364:	b29b      	uxth	r3, r3
 8002366:	3b01      	subs	r3, #1
 8002368:	b29c      	uxth	r4, r3
 800236a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800236e:	b29a      	uxth	r2, r3
 8002370:	88bb      	ldrh	r3, [r7, #4]
 8002372:	4413      	add	r3, r2
 8002374:	b29b      	uxth	r3, r3
 8002376:	3b01      	subs	r3, #1
 8002378:	b29b      	uxth	r3, r3
 800237a:	88b9      	ldrh	r1, [r7, #4]
 800237c:	88f8      	ldrh	r0, [r7, #6]
 800237e:	4622      	mov	r2, r4
 8002380:	f7ff fe3a 	bl	8001ff8 <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8002384:	2300      	movs	r3, #0
 8002386:	61fb      	str	r3, [r7, #28]
 8002388:	e043      	b.n	8002412 <ILI9341_WriteChar+0xce>
        b = font.data[(ch - 32) * font.height + i];
 800238a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	3b20      	subs	r3, #32
 8002390:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002394:	fb01 f303 	mul.w	r3, r1, r3
 8002398:	4619      	mov	r1, r3
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	440b      	add	r3, r1
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	4413      	add	r3, r2
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80023a6:	2300      	movs	r3, #0
 80023a8:	61bb      	str	r3, [r7, #24]
 80023aa:	e029      	b.n	8002400 <ILI9341_WriteChar+0xbc>
            if((b << j) & 0x8000)  {
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00e      	beq.n	80023da <ILI9341_WriteChar+0x96>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80023bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80023be:	0a1b      	lsrs	r3, r3, #8
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	743b      	strb	r3, [r7, #16]
 80023c6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 80023cc:	f107 0310 	add.w	r3, r7, #16
 80023d0:	2102      	movs	r1, #2
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff fde2 	bl	8001f9c <ILI9341_WriteData>
 80023d8:	e00f      	b.n	80023fa <ILI9341_WriteChar+0xb6>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80023da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80023de:	0a1b      	lsrs	r3, r3, #8
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	733b      	strb	r3, [r7, #12]
 80023e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 80023ee:	f107 030c 	add.w	r3, r7, #12
 80023f2:	2102      	movs	r1, #2
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff fdd1 	bl	8001f9c <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	3301      	adds	r3, #1
 80023fe:	61bb      	str	r3, [r7, #24]
 8002400:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002404:	461a      	mov	r2, r3
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	4293      	cmp	r3, r2
 800240a:	d3cf      	bcc.n	80023ac <ILI9341_WriteChar+0x68>
    for(i = 0; i < font.height; i++) {
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	3301      	adds	r3, #1
 8002410:	61fb      	str	r3, [r7, #28]
 8002412:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002416:	461a      	mov	r2, r3
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	4293      	cmp	r3, r2
 800241c:	d3b5      	bcc.n	800238a <ILI9341_WriteChar+0x46>
            }
        }
    }
}
 800241e:	bf00      	nop
 8002420:	bf00      	nop
 8002422:	3724      	adds	r7, #36	; 0x24
 8002424:	46bd      	mov	sp, r7
 8002426:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800242a:	b002      	add	sp, #8
 800242c:	4770      	bx	lr

0800242e <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800242e:	b082      	sub	sp, #8
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af04      	add	r7, sp, #16
 8002436:	603a      	str	r2, [r7, #0]
 8002438:	617b      	str	r3, [r7, #20]
 800243a:	4603      	mov	r3, r0
 800243c:	80fb      	strh	r3, [r7, #6]
 800243e:	460b      	mov	r3, r1
 8002440:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 8002442:	f7ff fd63 	bl	8001f0c <ILI9341_Select>

    while(*str) {
 8002446:	e02d      	b.n	80024a4 <ILI9341_WriteString+0x76>
        if(x + font.width >= ILI9341_WIDTH) {
 8002448:	88fb      	ldrh	r3, [r7, #6]
 800244a:	7d3a      	ldrb	r2, [r7, #20]
 800244c:	4413      	add	r3, r2
 800244e:	2b9f      	cmp	r3, #159	; 0x9f
 8002450:	dd13      	ble.n	800247a <ILI9341_WriteString+0x4c>
            x = 0;
 8002452:	2300      	movs	r3, #0
 8002454:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8002456:	7d7b      	ldrb	r3, [r7, #21]
 8002458:	b29a      	uxth	r2, r3
 800245a:	88bb      	ldrh	r3, [r7, #4]
 800245c:	4413      	add	r3, r2
 800245e:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 8002460:	88bb      	ldrh	r3, [r7, #4]
 8002462:	7d7a      	ldrb	r2, [r7, #21]
 8002464:	4413      	add	r3, r2
 8002466:	2b7f      	cmp	r3, #127	; 0x7f
 8002468:	dc21      	bgt.n	80024ae <ILI9341_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b20      	cmp	r3, #32
 8002470:	d103      	bne.n	800247a <ILI9341_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	3301      	adds	r3, #1
 8002476:	603b      	str	r3, [r7, #0]
                continue;
 8002478:	e014      	b.n	80024a4 <ILI9341_WriteString+0x76>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	781a      	ldrb	r2, [r3, #0]
 800247e:	88b9      	ldrh	r1, [r7, #4]
 8002480:	88f8      	ldrh	r0, [r7, #6]
 8002482:	8c3b      	ldrh	r3, [r7, #32]
 8002484:	9302      	str	r3, [sp, #8]
 8002486:	8bbb      	ldrh	r3, [r7, #28]
 8002488:	9301      	str	r3, [sp, #4]
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	f7ff ff58 	bl	8002344 <ILI9341_WriteChar>
        x += font.width;
 8002494:	7d3b      	ldrb	r3, [r7, #20]
 8002496:	b29a      	uxth	r2, r3
 8002498:	88fb      	ldrh	r3, [r7, #6]
 800249a:	4413      	add	r3, r2
 800249c:	80fb      	strh	r3, [r7, #6]
        str++;
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	3301      	adds	r3, #1
 80024a2:	603b      	str	r3, [r7, #0]
    while(*str) {
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1cd      	bne.n	8002448 <ILI9341_WriteString+0x1a>
 80024ac:	e000      	b.n	80024b0 <ILI9341_WriteString+0x82>
                break;
 80024ae:	bf00      	nop
    }

    ILI9341_Unselect();
 80024b0:	f7ff fd38 	bl	8001f24 <ILI9341_Unselect>
}
 80024b4:	bf00      	nop
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80024be:	b002      	add	sp, #8
 80024c0:	4770      	bx	lr
	...

080024c4 <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80024c4:	b590      	push	{r4, r7, lr}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4604      	mov	r4, r0
 80024cc:	4608      	mov	r0, r1
 80024ce:	4611      	mov	r1, r2
 80024d0:	461a      	mov	r2, r3
 80024d2:	4623      	mov	r3, r4
 80024d4:	80fb      	strh	r3, [r7, #6]
 80024d6:	4603      	mov	r3, r0
 80024d8:	80bb      	strh	r3, [r7, #4]
 80024da:	460b      	mov	r3, r1
 80024dc:	807b      	strh	r3, [r7, #2]
 80024de:	4613      	mov	r3, r2
 80024e0:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 80024e2:	88fb      	ldrh	r3, [r7, #6]
 80024e4:	2b9f      	cmp	r3, #159	; 0x9f
 80024e6:	d852      	bhi.n	800258e <ILI9341_FillRectangle+0xca>
 80024e8:	88bb      	ldrh	r3, [r7, #4]
 80024ea:	2b7f      	cmp	r3, #127	; 0x7f
 80024ec:	d84f      	bhi.n	800258e <ILI9341_FillRectangle+0xca>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 80024ee:	88fa      	ldrh	r2, [r7, #6]
 80024f0:	887b      	ldrh	r3, [r7, #2]
 80024f2:	4413      	add	r3, r2
 80024f4:	2ba0      	cmp	r3, #160	; 0xa0
 80024f6:	dd03      	ble.n	8002500 <ILI9341_FillRectangle+0x3c>
 80024f8:	88fb      	ldrh	r3, [r7, #6]
 80024fa:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80024fe:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8002500:	88ba      	ldrh	r2, [r7, #4]
 8002502:	883b      	ldrh	r3, [r7, #0]
 8002504:	4413      	add	r3, r2
 8002506:	2b80      	cmp	r3, #128	; 0x80
 8002508:	dd03      	ble.n	8002512 <ILI9341_FillRectangle+0x4e>
 800250a:	88bb      	ldrh	r3, [r7, #4]
 800250c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002510:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 8002512:	f7ff fcfb 	bl	8001f0c <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002516:	88fa      	ldrh	r2, [r7, #6]
 8002518:	887b      	ldrh	r3, [r7, #2]
 800251a:	4413      	add	r3, r2
 800251c:	b29b      	uxth	r3, r3
 800251e:	3b01      	subs	r3, #1
 8002520:	b29c      	uxth	r4, r3
 8002522:	88ba      	ldrh	r2, [r7, #4]
 8002524:	883b      	ldrh	r3, [r7, #0]
 8002526:	4413      	add	r3, r2
 8002528:	b29b      	uxth	r3, r3
 800252a:	3b01      	subs	r3, #1
 800252c:	b29b      	uxth	r3, r3
 800252e:	88b9      	ldrh	r1, [r7, #4]
 8002530:	88f8      	ldrh	r0, [r7, #6]
 8002532:	4622      	mov	r2, r4
 8002534:	f7ff fd60 	bl	8001ff8 <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8002538:	8c3b      	ldrh	r3, [r7, #32]
 800253a:	0a1b      	lsrs	r3, r3, #8
 800253c:	b29b      	uxth	r3, r3
 800253e:	b2db      	uxtb	r3, r3
 8002540:	733b      	strb	r3, [r7, #12]
 8002542:	8c3b      	ldrh	r3, [r7, #32]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8002548:	2201      	movs	r2, #1
 800254a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800254e:	4812      	ldr	r0, [pc, #72]	; (8002598 <ILI9341_FillRectangle+0xd4>)
 8002550:	f001 fa02 	bl	8003958 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8002554:	883b      	ldrh	r3, [r7, #0]
 8002556:	80bb      	strh	r3, [r7, #4]
 8002558:	e013      	b.n	8002582 <ILI9341_FillRectangle+0xbe>
        for(x = w; x > 0; x--) {
 800255a:	887b      	ldrh	r3, [r7, #2]
 800255c:	80fb      	strh	r3, [r7, #6]
 800255e:	e00a      	b.n	8002576 <ILI9341_FillRectangle+0xb2>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8002560:	f107 010c 	add.w	r1, r7, #12
 8002564:	f04f 33ff 	mov.w	r3, #4294967295
 8002568:	2202      	movs	r2, #2
 800256a:	480c      	ldr	r0, [pc, #48]	; (800259c <ILI9341_FillRectangle+0xd8>)
 800256c:	f004 fbd6 	bl	8006d1c <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8002570:	88fb      	ldrh	r3, [r7, #6]
 8002572:	3b01      	subs	r3, #1
 8002574:	80fb      	strh	r3, [r7, #6]
 8002576:	88fb      	ldrh	r3, [r7, #6]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1f1      	bne.n	8002560 <ILI9341_FillRectangle+0x9c>
    for(y = h; y > 0; y--) {
 800257c:	88bb      	ldrh	r3, [r7, #4]
 800257e:	3b01      	subs	r3, #1
 8002580:	80bb      	strh	r3, [r7, #4]
 8002582:	88bb      	ldrh	r3, [r7, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1e8      	bne.n	800255a <ILI9341_FillRectangle+0x96>
        }
    }

    ILI9341_Unselect();
 8002588:	f7ff fccc 	bl	8001f24 <ILI9341_Unselect>
 800258c:	e000      	b.n	8002590 <ILI9341_FillRectangle+0xcc>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 800258e:	bf00      	nop
}
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	bd90      	pop	{r4, r7, pc}
 8002596:	bf00      	nop
 8002598:	40010800 	.word	0x40010800
 800259c:	20000298 	.word	0x20000298

080025a0 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af02      	add	r7, sp, #8
 80025a6:	4603      	mov	r3, r0
 80025a8:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 80025aa:	88fb      	ldrh	r3, [r7, #6]
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	2380      	movs	r3, #128	; 0x80
 80025b0:	22a0      	movs	r2, #160	; 0xa0
 80025b2:	2100      	movs	r1, #0
 80025b4:	2000      	movs	r0, #0
 80025b6:	f7ff ff85 	bl	80024c4 <ILI9341_FillRectangle>
}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <ILI9341_DrawLine>:
    ILI9341_WriteCommand(invert ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
    ILI9341_Unselect();
}


void ILI9341_DrawLine(struct point point_a, struct point point_b, uint16_t color, int width) {
 80025c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025c4:	b08d      	sub	sp, #52	; 0x34
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	81b8      	strh	r0, [r7, #12]
 80025ca:	8139      	strh	r1, [r7, #8]
 80025cc:	603b      	str	r3, [r7, #0]
 80025ce:	4613      	mov	r3, r2
 80025d0:	80fb      	strh	r3, [r7, #6]
	float x = point_a.x;
 80025d2:	7b3b      	ldrb	r3, [r7, #12]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fe fb2d 	bl	8000c34 <__aeabi_ui2f>
 80025da:	4603      	mov	r3, r0
 80025dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	float y = point_a.y;
 80025de:	7b7b      	ldrb	r3, [r7, #13]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fe fb27 	bl	8000c34 <__aeabi_ui2f>
 80025e6:	4603      	mov	r3, r0
 80025e8:	62bb      	str	r3, [r7, #40]	; 0x28
	int16_t dx = point_b.x - point_a.x;
 80025ea:	7a3b      	ldrb	r3, [r7, #8]
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	7b3b      	ldrb	r3, [r7, #12]
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	83fb      	strh	r3, [r7, #30]
	int16_t dy = point_b.y - point_a.y;
 80025f8:	7a7b      	ldrb	r3, [r7, #9]
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	7b7b      	ldrb	r3, [r7, #13]
 80025fe:	b29b      	uxth	r3, r3
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	b29b      	uxth	r3, r3
 8002604:	83bb      	strh	r3, [r7, #28]
	int steps = abs(dx) > abs(dy) ? abs(dx) : abs(dy);
 8002606:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800260a:	2b00      	cmp	r3, #0
 800260c:	bfb8      	it	lt
 800260e:	425b      	neglt	r3, r3
 8002610:	b29a      	uxth	r2, r3
 8002612:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002616:	2b00      	cmp	r3, #0
 8002618:	bfb8      	it	lt
 800261a:	425b      	neglt	r3, r3
 800261c:	b29b      	uxth	r3, r3
 800261e:	4293      	cmp	r3, r2
 8002620:	bf38      	it	cc
 8002622:	4613      	movcc	r3, r2
 8002624:	b29b      	uxth	r3, r3
 8002626:	61bb      	str	r3, [r7, #24]
	float x_increment = dx / (float) steps;
 8002628:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800262c:	4618      	mov	r0, r3
 800262e:	f7fe fb05 	bl	8000c3c <__aeabi_i2f>
 8002632:	4604      	mov	r4, r0
 8002634:	69b8      	ldr	r0, [r7, #24]
 8002636:	f7fe fb01 	bl	8000c3c <__aeabi_i2f>
 800263a:	4603      	mov	r3, r0
 800263c:	4619      	mov	r1, r3
 800263e:	4620      	mov	r0, r4
 8002640:	f7fe fc04 	bl	8000e4c <__aeabi_fdiv>
 8002644:	4603      	mov	r3, r0
 8002646:	617b      	str	r3, [r7, #20]
	float y_increment = dy / (float) steps;
 8002648:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800264c:	4618      	mov	r0, r3
 800264e:	f7fe faf5 	bl	8000c3c <__aeabi_i2f>
 8002652:	4604      	mov	r4, r0
 8002654:	69b8      	ldr	r0, [r7, #24]
 8002656:	f7fe faf1 	bl	8000c3c <__aeabi_i2f>
 800265a:	4603      	mov	r3, r0
 800265c:	4619      	mov	r1, r3
 800265e:	4620      	mov	r0, r4
 8002660:	f7fe fbf4 	bl	8000e4c <__aeabi_fdiv>
 8002664:	4603      	mov	r3, r0
 8002666:	613b      	str	r3, [r7, #16]

	for (int v = 0; v < steps; v++) {
 8002668:	2300      	movs	r3, #0
 800266a:	627b      	str	r3, [r7, #36]	; 0x24
 800266c:	e134      	b.n	80028d8 <ILI9341_DrawLine+0x316>
		x = x + x_increment;
 800266e:	6979      	ldr	r1, [r7, #20]
 8002670:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002672:	f7fe fa2f 	bl	8000ad4 <__addsf3>
 8002676:	4603      	mov	r3, r0
 8002678:	62fb      	str	r3, [r7, #44]	; 0x2c
		y = y + y_increment;
 800267a:	6939      	ldr	r1, [r7, #16]
 800267c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800267e:	f7fe fa29 	bl	8000ad4 <__addsf3>
 8002682:	4603      	mov	r3, r0
 8002684:	62bb      	str	r3, [r7, #40]	; 0x28
		if (width != 0 )
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 80fb 	beq.w	8002884 <ILI9341_DrawLine+0x2c2>
			for (int j = 0; j < width; j++) {
 800268e:	2300      	movs	r3, #0
 8002690:	623b      	str	r3, [r7, #32]
 8002692:	e0f1      	b.n	8002878 <ILI9341_DrawLine+0x2b6>
				ILI9341_DrawPixel(round(x), round(y), color);
 8002694:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002696:	f7fd fec7 	bl	8000428 <__aeabi_f2d>
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	4610      	mov	r0, r2
 80026a0:	4619      	mov	r1, r3
 80026a2:	f008 f86d 	bl	800a780 <round>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4610      	mov	r0, r2
 80026ac:	4619      	mov	r1, r3
 80026ae:	f7fe f9eb 	bl	8000a88 <__aeabi_d2uiz>
 80026b2:	4603      	mov	r3, r0
 80026b4:	b29c      	uxth	r4, r3
 80026b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026b8:	f7fd feb6 	bl	8000428 <__aeabi_f2d>
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	4610      	mov	r0, r2
 80026c2:	4619      	mov	r1, r3
 80026c4:	f008 f85c 	bl	800a780 <round>
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	4610      	mov	r0, r2
 80026ce:	4619      	mov	r1, r3
 80026d0:	f7fe f9da 	bl	8000a88 <__aeabi_d2uiz>
 80026d4:	4603      	mov	r3, r0
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	88fa      	ldrh	r2, [r7, #6]
 80026da:	4619      	mov	r1, r3
 80026dc:	4620      	mov	r0, r4
 80026de:	f7ff fe01 	bl	80022e4 <ILI9341_DrawPixel>
				ILI9341_DrawPixel(round(x) - width, round(y), color);
 80026e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80026e4:	f7fd fea0 	bl	8000428 <__aeabi_f2d>
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	4610      	mov	r0, r2
 80026ee:	4619      	mov	r1, r3
 80026f0:	f008 f846 	bl	800a780 <round>
 80026f4:	4604      	mov	r4, r0
 80026f6:	460d      	mov	r5, r1
 80026f8:	6838      	ldr	r0, [r7, #0]
 80026fa:	f7fd fe83 	bl	8000404 <__aeabi_i2d>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	4620      	mov	r0, r4
 8002704:	4629      	mov	r1, r5
 8002706:	f7fd fd2f 	bl	8000168 <__aeabi_dsub>
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	4610      	mov	r0, r2
 8002710:	4619      	mov	r1, r3
 8002712:	f7fe f9b9 	bl	8000a88 <__aeabi_d2uiz>
 8002716:	4603      	mov	r3, r0
 8002718:	b29c      	uxth	r4, r3
 800271a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800271c:	f7fd fe84 	bl	8000428 <__aeabi_f2d>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4610      	mov	r0, r2
 8002726:	4619      	mov	r1, r3
 8002728:	f008 f82a 	bl	800a780 <round>
 800272c:	4602      	mov	r2, r0
 800272e:	460b      	mov	r3, r1
 8002730:	4610      	mov	r0, r2
 8002732:	4619      	mov	r1, r3
 8002734:	f7fe f9a8 	bl	8000a88 <__aeabi_d2uiz>
 8002738:	4603      	mov	r3, r0
 800273a:	b29b      	uxth	r3, r3
 800273c:	88fa      	ldrh	r2, [r7, #6]
 800273e:	4619      	mov	r1, r3
 8002740:	4620      	mov	r0, r4
 8002742:	f7ff fdcf 	bl	80022e4 <ILI9341_DrawPixel>
				ILI9341_DrawPixel(round(x) + width, round(y), color);
 8002746:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002748:	f7fd fe6e 	bl	8000428 <__aeabi_f2d>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	4610      	mov	r0, r2
 8002752:	4619      	mov	r1, r3
 8002754:	f008 f814 	bl	800a780 <round>
 8002758:	4604      	mov	r4, r0
 800275a:	460d      	mov	r5, r1
 800275c:	6838      	ldr	r0, [r7, #0]
 800275e:	f7fd fe51 	bl	8000404 <__aeabi_i2d>
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	4620      	mov	r0, r4
 8002768:	4629      	mov	r1, r5
 800276a:	f7fd fcff 	bl	800016c <__adddf3>
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	4610      	mov	r0, r2
 8002774:	4619      	mov	r1, r3
 8002776:	f7fe f987 	bl	8000a88 <__aeabi_d2uiz>
 800277a:	4603      	mov	r3, r0
 800277c:	b29c      	uxth	r4, r3
 800277e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002780:	f7fd fe52 	bl	8000428 <__aeabi_f2d>
 8002784:	4602      	mov	r2, r0
 8002786:	460b      	mov	r3, r1
 8002788:	4610      	mov	r0, r2
 800278a:	4619      	mov	r1, r3
 800278c:	f007 fff8 	bl	800a780 <round>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	4610      	mov	r0, r2
 8002796:	4619      	mov	r1, r3
 8002798:	f7fe f976 	bl	8000a88 <__aeabi_d2uiz>
 800279c:	4603      	mov	r3, r0
 800279e:	b29b      	uxth	r3, r3
 80027a0:	88fa      	ldrh	r2, [r7, #6]
 80027a2:	4619      	mov	r1, r3
 80027a4:	4620      	mov	r0, r4
 80027a6:	f7ff fd9d 	bl	80022e4 <ILI9341_DrawPixel>
				ILI9341_DrawPixel(round(x), round(y) - width, color);
 80027aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027ac:	f7fd fe3c 	bl	8000428 <__aeabi_f2d>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4610      	mov	r0, r2
 80027b6:	4619      	mov	r1, r3
 80027b8:	f007 ffe2 	bl	800a780 <round>
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	4610      	mov	r0, r2
 80027c2:	4619      	mov	r1, r3
 80027c4:	f7fe f960 	bl	8000a88 <__aeabi_d2uiz>
 80027c8:	4603      	mov	r3, r0
 80027ca:	b29e      	uxth	r6, r3
 80027cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027ce:	f7fd fe2b 	bl	8000428 <__aeabi_f2d>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	4610      	mov	r0, r2
 80027d8:	4619      	mov	r1, r3
 80027da:	f007 ffd1 	bl	800a780 <round>
 80027de:	4604      	mov	r4, r0
 80027e0:	460d      	mov	r5, r1
 80027e2:	6838      	ldr	r0, [r7, #0]
 80027e4:	f7fd fe0e 	bl	8000404 <__aeabi_i2d>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	4620      	mov	r0, r4
 80027ee:	4629      	mov	r1, r5
 80027f0:	f7fd fcba 	bl	8000168 <__aeabi_dsub>
 80027f4:	4602      	mov	r2, r0
 80027f6:	460b      	mov	r3, r1
 80027f8:	4610      	mov	r0, r2
 80027fa:	4619      	mov	r1, r3
 80027fc:	f7fe f944 	bl	8000a88 <__aeabi_d2uiz>
 8002800:	4603      	mov	r3, r0
 8002802:	b29b      	uxth	r3, r3
 8002804:	88fa      	ldrh	r2, [r7, #6]
 8002806:	4619      	mov	r1, r3
 8002808:	4630      	mov	r0, r6
 800280a:	f7ff fd6b 	bl	80022e4 <ILI9341_DrawPixel>
				ILI9341_DrawPixel(round(x), round(y) + width, color);
 800280e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002810:	f7fd fe0a 	bl	8000428 <__aeabi_f2d>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4610      	mov	r0, r2
 800281a:	4619      	mov	r1, r3
 800281c:	f007 ffb0 	bl	800a780 <round>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4610      	mov	r0, r2
 8002826:	4619      	mov	r1, r3
 8002828:	f7fe f92e 	bl	8000a88 <__aeabi_d2uiz>
 800282c:	4603      	mov	r3, r0
 800282e:	b29e      	uxth	r6, r3
 8002830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002832:	f7fd fdf9 	bl	8000428 <__aeabi_f2d>
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	4610      	mov	r0, r2
 800283c:	4619      	mov	r1, r3
 800283e:	f007 ff9f 	bl	800a780 <round>
 8002842:	4604      	mov	r4, r0
 8002844:	460d      	mov	r5, r1
 8002846:	6838      	ldr	r0, [r7, #0]
 8002848:	f7fd fddc 	bl	8000404 <__aeabi_i2d>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4620      	mov	r0, r4
 8002852:	4629      	mov	r1, r5
 8002854:	f7fd fc8a 	bl	800016c <__adddf3>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4610      	mov	r0, r2
 800285e:	4619      	mov	r1, r3
 8002860:	f7fe f912 	bl	8000a88 <__aeabi_d2uiz>
 8002864:	4603      	mov	r3, r0
 8002866:	b29b      	uxth	r3, r3
 8002868:	88fa      	ldrh	r2, [r7, #6]
 800286a:	4619      	mov	r1, r3
 800286c:	4630      	mov	r0, r6
 800286e:	f7ff fd39 	bl	80022e4 <ILI9341_DrawPixel>
			for (int j = 0; j < width; j++) {
 8002872:	6a3b      	ldr	r3, [r7, #32]
 8002874:	3301      	adds	r3, #1
 8002876:	623b      	str	r3, [r7, #32]
 8002878:	6a3a      	ldr	r2, [r7, #32]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	429a      	cmp	r2, r3
 800287e:	f6ff af09 	blt.w	8002694 <ILI9341_DrawLine+0xd2>
 8002882:	e026      	b.n	80028d2 <ILI9341_DrawLine+0x310>
			}
		else
			ILI9341_DrawPixel(round(x), round(y), color);
 8002884:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002886:	f7fd fdcf 	bl	8000428 <__aeabi_f2d>
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
 800288e:	4610      	mov	r0, r2
 8002890:	4619      	mov	r1, r3
 8002892:	f007 ff75 	bl	800a780 <round>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	4610      	mov	r0, r2
 800289c:	4619      	mov	r1, r3
 800289e:	f7fe f8f3 	bl	8000a88 <__aeabi_d2uiz>
 80028a2:	4603      	mov	r3, r0
 80028a4:	b29c      	uxth	r4, r3
 80028a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028a8:	f7fd fdbe 	bl	8000428 <__aeabi_f2d>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	4610      	mov	r0, r2
 80028b2:	4619      	mov	r1, r3
 80028b4:	f007 ff64 	bl	800a780 <round>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4610      	mov	r0, r2
 80028be:	4619      	mov	r1, r3
 80028c0:	f7fe f8e2 	bl	8000a88 <__aeabi_d2uiz>
 80028c4:	4603      	mov	r3, r0
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	88fa      	ldrh	r2, [r7, #6]
 80028ca:	4619      	mov	r1, r3
 80028cc:	4620      	mov	r0, r4
 80028ce:	f7ff fd09 	bl	80022e4 <ILI9341_DrawPixel>
	for (int v = 0; v < steps; v++) {
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	3301      	adds	r3, #1
 80028d6:	627b      	str	r3, [r7, #36]	; 0x24
 80028d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	429a      	cmp	r2, r3
 80028de:	f6ff aec6 	blt.w	800266e <ILI9341_DrawLine+0xac>
	}
}
 80028e2:	bf00      	nop
 80028e4:	bf00      	nop
 80028e6:	3734      	adds	r7, #52	; 0x34
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028ec <ILI9341_DrawTriangle>:

void ILI9341_DrawTriangle(struct point point_a, struct point point_b, struct point point_c, uint16_t color, int width) {
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	81b8      	strh	r0, [r7, #12]
 80028f4:	8139      	strh	r1, [r7, #8]
 80028f6:	80ba      	strh	r2, [r7, #4]
 80028f8:	807b      	strh	r3, [r7, #2]
	ILI9341_DrawLine(point_a, point_b, color, width);
 80028fa:	887a      	ldrh	r2, [r7, #2]
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	68b9      	ldr	r1, [r7, #8]
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f7ff fe5e 	bl	80025c2 <ILI9341_DrawLine>
	ILI9341_DrawLine(point_a, point_c, color, width);
 8002906:	887a      	ldrh	r2, [r7, #2]
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f7ff fe58 	bl	80025c2 <ILI9341_DrawLine>
	ILI9341_DrawLine(point_b, point_c, color, width);
 8002912:	887a      	ldrh	r2, [r7, #2]
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	68b8      	ldr	r0, [r7, #8]
 800291a:	f7ff fe52 	bl	80025c2 <ILI9341_DrawLine>
}
 800291e:	bf00      	nop
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(struct point point_a, struct point point_b, struct point point_c, struct point point_d, uint16_t color, int width) {
 8002926:	b580      	push	{r7, lr}
 8002928:	b084      	sub	sp, #16
 800292a:	af00      	add	r7, sp, #0
 800292c:	81b8      	strh	r0, [r7, #12]
 800292e:	8139      	strh	r1, [r7, #8]
 8002930:	80ba      	strh	r2, [r7, #4]
 8002932:	803b      	strh	r3, [r7, #0]
	ILI9341_DrawLine(point_a, point_b, color, width);
 8002934:	8b3a      	ldrh	r2, [r7, #24]
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	68b9      	ldr	r1, [r7, #8]
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f7ff fe41 	bl	80025c2 <ILI9341_DrawLine>
	ILI9341_DrawLine(point_b, point_c, color, width);
 8002940:	8b3a      	ldrh	r2, [r7, #24]
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	68b8      	ldr	r0, [r7, #8]
 8002948:	f7ff fe3b 	bl	80025c2 <ILI9341_DrawLine>
	ILI9341_DrawLine(point_c, point_d, color, width);
 800294c:	8b3a      	ldrh	r2, [r7, #24]
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	6839      	ldr	r1, [r7, #0]
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7ff fe35 	bl	80025c2 <ILI9341_DrawLine>
	ILI9341_DrawLine(point_d, point_a, color, width);
 8002958:	8b3a      	ldrh	r2, [r7, #24]
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	68f9      	ldr	r1, [r7, #12]
 800295e:	6838      	ldr	r0, [r7, #0]
 8002960:	f7ff fe2f 	bl	80025c2 <ILI9341_DrawLine>
}
 8002964:	bf00      	nop
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002970:	4b08      	ldr	r3, [pc, #32]	; (8002994 <HAL_Init+0x28>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a07      	ldr	r2, [pc, #28]	; (8002994 <HAL_Init+0x28>)
 8002976:	f043 0310 	orr.w	r3, r3, #16
 800297a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800297c:	2003      	movs	r0, #3
 800297e:	f000 fd9f 	bl	80034c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002982:	200f      	movs	r0, #15
 8002984:	f000 f808 	bl	8002998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002988:	f7fe ffdc 	bl	8001944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40022000 	.word	0x40022000

08002998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029a0:	4b12      	ldr	r3, [pc, #72]	; (80029ec <HAL_InitTick+0x54>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <HAL_InitTick+0x58>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	4619      	mov	r1, r3
 80029aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80029b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 fdb7 	bl	800352a <HAL_SYSTICK_Config>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e00e      	b.n	80029e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b0f      	cmp	r3, #15
 80029ca:	d80a      	bhi.n	80029e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029cc:	2200      	movs	r2, #0
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	f04f 30ff 	mov.w	r0, #4294967295
 80029d4:	f000 fd7f 	bl	80034d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029d8:	4a06      	ldr	r2, [pc, #24]	; (80029f4 <HAL_InitTick+0x5c>)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	e000      	b.n	80029e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	20000000 	.word	0x20000000
 80029f0:	20000018 	.word	0x20000018
 80029f4:	20000014 	.word	0x20000014

080029f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029fc:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <HAL_IncTick+0x1c>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	461a      	mov	r2, r3
 8002a02:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <HAL_IncTick+0x20>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4413      	add	r3, r2
 8002a08:	4a03      	ldr	r2, [pc, #12]	; (8002a18 <HAL_IncTick+0x20>)
 8002a0a:	6013      	str	r3, [r2, #0]
}
 8002a0c:	bf00      	nop
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr
 8002a14:	20000018 	.word	0x20000018
 8002a18:	2000040c 	.word	0x2000040c

08002a1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a20:	4b02      	ldr	r3, [pc, #8]	; (8002a2c <HAL_GetTick+0x10>)
 8002a22:	681b      	ldr	r3, [r3, #0]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr
 8002a2c:	2000040c 	.word	0x2000040c

08002a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a38:	f7ff fff0 	bl	8002a1c <HAL_GetTick>
 8002a3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a48:	d005      	beq.n	8002a56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a4a:	4b0a      	ldr	r3, [pc, #40]	; (8002a74 <HAL_Delay+0x44>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4413      	add	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a56:	bf00      	nop
 8002a58:	f7ff ffe0 	bl	8002a1c <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d8f7      	bhi.n	8002a58 <HAL_Delay+0x28>
  {
  }
}
 8002a68:	bf00      	nop
 8002a6a:	bf00      	nop
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20000018 	.word	0x20000018

08002a78 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e0be      	b.n	8002c18 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d109      	bne.n	8002abc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7fe ff76 	bl	80019a8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 fbf1 	bl	80032a4 <ADC_ConversionStop_Disable>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aca:	f003 0310 	and.w	r3, r3, #16
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f040 8099 	bne.w	8002c06 <HAL_ADC_Init+0x18e>
 8002ad4:	7dfb      	ldrb	r3, [r7, #23]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f040 8095 	bne.w	8002c06 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ae4:	f023 0302 	bic.w	r3, r3, #2
 8002ae8:	f043 0202 	orr.w	r2, r3, #2
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002af8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	7b1b      	ldrb	r3, [r3, #12]
 8002afe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b00:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b10:	d003      	beq.n	8002b1a <HAL_ADC_Init+0xa2>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d102      	bne.n	8002b20 <HAL_ADC_Init+0xa8>
 8002b1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b1e:	e000      	b.n	8002b22 <HAL_ADC_Init+0xaa>
 8002b20:	2300      	movs	r3, #0
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	7d1b      	ldrb	r3, [r3, #20]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d119      	bne.n	8002b64 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	7b1b      	ldrb	r3, [r3, #12]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d109      	bne.n	8002b4c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	035a      	lsls	r2, r3, #13
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b48:	613b      	str	r3, [r7, #16]
 8002b4a:	e00b      	b.n	8002b64 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b50:	f043 0220 	orr.w	r2, r3, #32
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5c:	f043 0201 	orr.w	r2, r3, #1
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	4b28      	ldr	r3, [pc, #160]	; (8002c20 <HAL_ADC_Init+0x1a8>)
 8002b80:	4013      	ands	r3, r2
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6812      	ldr	r2, [r2, #0]
 8002b86:	68b9      	ldr	r1, [r7, #8]
 8002b88:	430b      	orrs	r3, r1
 8002b8a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b94:	d003      	beq.n	8002b9e <HAL_ADC_Init+0x126>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d104      	bne.n	8002ba8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	051b      	lsls	r3, r3, #20
 8002ba6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bae:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	4b18      	ldr	r3, [pc, #96]	; (8002c24 <HAL_ADC_Init+0x1ac>)
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d10b      	bne.n	8002be4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd6:	f023 0303 	bic.w	r3, r3, #3
 8002bda:	f043 0201 	orr.w	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002be2:	e018      	b.n	8002c16 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be8:	f023 0312 	bic.w	r3, r3, #18
 8002bec:	f043 0210 	orr.w	r2, r3, #16
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf8:	f043 0201 	orr.w	r2, r3, #1
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c04:	e007      	b.n	8002c16 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0a:	f043 0210 	orr.w	r2, r3, #16
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	ffe1f7fd 	.word	0xffe1f7fd
 8002c24:	ff1f0efe 	.word	0xff1f0efe

08002c28 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c30:	2300      	movs	r3, #0
 8002c32:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <HAL_ADC_Start+0x1a>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e098      	b.n	8002d74 <HAL_ADC_Start+0x14c>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 fad0 	bl	80031f0 <ADC_Enable>
 8002c50:	4603      	mov	r3, r0
 8002c52:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f040 8087 	bne.w	8002d6a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c64:	f023 0301 	bic.w	r3, r3, #1
 8002c68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a41      	ldr	r2, [pc, #260]	; (8002d7c <HAL_ADC_Start+0x154>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d105      	bne.n	8002c86 <HAL_ADC_Start+0x5e>
 8002c7a:	4b41      	ldr	r3, [pc, #260]	; (8002d80 <HAL_ADC_Start+0x158>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d115      	bne.n	8002cb2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d026      	beq.n	8002cee <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ca8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cb0:	e01d      	b.n	8002cee <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a2f      	ldr	r2, [pc, #188]	; (8002d80 <HAL_ADC_Start+0x158>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d004      	beq.n	8002cd2 <HAL_ADC_Start+0xaa>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a2b      	ldr	r2, [pc, #172]	; (8002d7c <HAL_ADC_Start+0x154>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d10d      	bne.n	8002cee <HAL_ADC_Start+0xc6>
 8002cd2:	4b2b      	ldr	r3, [pc, #172]	; (8002d80 <HAL_ADC_Start+0x158>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d007      	beq.n	8002cee <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ce6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d006      	beq.n	8002d08 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfe:	f023 0206 	bic.w	r2, r3, #6
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d06:	e002      	b.n	8002d0e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f06f 0202 	mvn.w	r2, #2
 8002d1e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002d2a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002d2e:	d113      	bne.n	8002d58 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d34:	4a11      	ldr	r2, [pc, #68]	; (8002d7c <HAL_ADC_Start+0x154>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d105      	bne.n	8002d46 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002d3a:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <HAL_ADC_Start+0x158>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d108      	bne.n	8002d58 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002d54:	609a      	str	r2, [r3, #8]
 8002d56:	e00c      	b.n	8002d72 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689a      	ldr	r2, [r3, #8]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002d66:	609a      	str	r2, [r3, #8]
 8002d68:	e003      	b.n	8002d72 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40012800 	.word	0x40012800
 8002d80:	40012400 	.word	0x40012400

08002d84 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d101      	bne.n	8002d9e <HAL_ADC_Stop+0x1a>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	e01a      	b.n	8002dd4 <HAL_ADC_Stop+0x50>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 fa7c 	bl	80032a4 <ADC_ConversionStop_Disable>
 8002dac:	4603      	mov	r3, r0
 8002dae:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d109      	bne.n	8002dca <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002dbe:	f023 0301 	bic.w	r3, r3, #1
 8002dc2:	f043 0201 	orr.w	r2, r3, #1
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002ddc:	b590      	push	{r4, r7, lr}
 8002dde:	b087      	sub	sp, #28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002dee:	2300      	movs	r3, #0
 8002df0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002df2:	f7ff fe13 	bl	8002a1c <HAL_GetTick>
 8002df6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00b      	beq.n	8002e1e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0a:	f043 0220 	orr.w	r2, r3, #32
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e0d3      	b.n	8002fc6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d131      	bne.n	8002e90 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e32:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d12a      	bne.n	8002e90 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002e3a:	e021      	b.n	8002e80 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e42:	d01d      	beq.n	8002e80 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d007      	beq.n	8002e5a <HAL_ADC_PollForConversion+0x7e>
 8002e4a:	f7ff fde7 	bl	8002a1c <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d212      	bcs.n	8002e80 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10b      	bne.n	8002e80 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6c:	f043 0204 	orr.w	r2, r3, #4
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e0a2      	b.n	8002fc6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0d6      	beq.n	8002e3c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002e8e:	e070      	b.n	8002f72 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002e90:	4b4f      	ldr	r3, [pc, #316]	; (8002fd0 <HAL_ADC_PollForConversion+0x1f4>)
 8002e92:	681c      	ldr	r4, [r3, #0]
 8002e94:	2002      	movs	r0, #2
 8002e96:	f003 f85f 	bl	8005f58 <HAL_RCCEx_GetPeriphCLKFreq>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6919      	ldr	r1, [r3, #16]
 8002ea6:	4b4b      	ldr	r3, [pc, #300]	; (8002fd4 <HAL_ADC_PollForConversion+0x1f8>)
 8002ea8:	400b      	ands	r3, r1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d118      	bne.n	8002ee0 <HAL_ADC_PollForConversion+0x104>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68d9      	ldr	r1, [r3, #12]
 8002eb4:	4b48      	ldr	r3, [pc, #288]	; (8002fd8 <HAL_ADC_PollForConversion+0x1fc>)
 8002eb6:	400b      	ands	r3, r1
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d111      	bne.n	8002ee0 <HAL_ADC_PollForConversion+0x104>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6919      	ldr	r1, [r3, #16]
 8002ec2:	4b46      	ldr	r3, [pc, #280]	; (8002fdc <HAL_ADC_PollForConversion+0x200>)
 8002ec4:	400b      	ands	r3, r1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d108      	bne.n	8002edc <HAL_ADC_PollForConversion+0x100>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68d9      	ldr	r1, [r3, #12]
 8002ed0:	4b43      	ldr	r3, [pc, #268]	; (8002fe0 <HAL_ADC_PollForConversion+0x204>)
 8002ed2:	400b      	ands	r3, r1
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_ADC_PollForConversion+0x100>
 8002ed8:	2314      	movs	r3, #20
 8002eda:	e020      	b.n	8002f1e <HAL_ADC_PollForConversion+0x142>
 8002edc:	2329      	movs	r3, #41	; 0x29
 8002ede:	e01e      	b.n	8002f1e <HAL_ADC_PollForConversion+0x142>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6919      	ldr	r1, [r3, #16]
 8002ee6:	4b3d      	ldr	r3, [pc, #244]	; (8002fdc <HAL_ADC_PollForConversion+0x200>)
 8002ee8:	400b      	ands	r3, r1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d106      	bne.n	8002efc <HAL_ADC_PollForConversion+0x120>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68d9      	ldr	r1, [r3, #12]
 8002ef4:	4b3a      	ldr	r3, [pc, #232]	; (8002fe0 <HAL_ADC_PollForConversion+0x204>)
 8002ef6:	400b      	ands	r3, r1
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00d      	beq.n	8002f18 <HAL_ADC_PollForConversion+0x13c>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6919      	ldr	r1, [r3, #16]
 8002f02:	4b38      	ldr	r3, [pc, #224]	; (8002fe4 <HAL_ADC_PollForConversion+0x208>)
 8002f04:	400b      	ands	r3, r1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d108      	bne.n	8002f1c <HAL_ADC_PollForConversion+0x140>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68d9      	ldr	r1, [r3, #12]
 8002f10:	4b34      	ldr	r3, [pc, #208]	; (8002fe4 <HAL_ADC_PollForConversion+0x208>)
 8002f12:	400b      	ands	r3, r1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_ADC_PollForConversion+0x140>
 8002f18:	2354      	movs	r3, #84	; 0x54
 8002f1a:	e000      	b.n	8002f1e <HAL_ADC_PollForConversion+0x142>
 8002f1c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002f1e:	fb02 f303 	mul.w	r3, r2, r3
 8002f22:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002f24:	e021      	b.n	8002f6a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f2c:	d01a      	beq.n	8002f64 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d007      	beq.n	8002f44 <HAL_ADC_PollForConversion+0x168>
 8002f34:	f7ff fd72 	bl	8002a1c <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d20f      	bcs.n	8002f64 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d90b      	bls.n	8002f64 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f50:	f043 0204 	orr.w	r2, r3, #4
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e030      	b.n	8002fc6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	3301      	adds	r3, #1
 8002f68:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d8d9      	bhi.n	8002f26 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f06f 0212 	mvn.w	r2, #18
 8002f7a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f80:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002f92:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002f96:	d115      	bne.n	8002fc4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d111      	bne.n	8002fc4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d105      	bne.n	8002fc4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbc:	f043 0201 	orr.w	r2, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	371c      	adds	r7, #28
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd90      	pop	{r4, r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20000000 	.word	0x20000000
 8002fd4:	24924924 	.word	0x24924924
 8002fd8:	00924924 	.word	0x00924924
 8002fdc:	12492492 	.word	0x12492492
 8002fe0:	00492492 	.word	0x00492492
 8002fe4:	00249249 	.word	0x00249249

08002fe8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr

08003000 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800300a:	2300      	movs	r3, #0
 800300c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800300e:	2300      	movs	r3, #0
 8003010:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003018:	2b01      	cmp	r3, #1
 800301a:	d101      	bne.n	8003020 <HAL_ADC_ConfigChannel+0x20>
 800301c:	2302      	movs	r3, #2
 800301e:	e0dc      	b.n	80031da <HAL_ADC_ConfigChannel+0x1da>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b06      	cmp	r3, #6
 800302e:	d81c      	bhi.n	800306a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	3b05      	subs	r3, #5
 8003042:	221f      	movs	r2, #31
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	4019      	ands	r1, r3
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	6818      	ldr	r0, [r3, #0]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	4613      	mov	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	3b05      	subs	r3, #5
 800305c:	fa00 f203 	lsl.w	r2, r0, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	635a      	str	r2, [r3, #52]	; 0x34
 8003068:	e03c      	b.n	80030e4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b0c      	cmp	r3, #12
 8003070:	d81c      	bhi.n	80030ac <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	4613      	mov	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	3b23      	subs	r3, #35	; 0x23
 8003084:	221f      	movs	r2, #31
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	43db      	mvns	r3, r3
 800308c:	4019      	ands	r1, r3
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	6818      	ldr	r0, [r3, #0]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	4613      	mov	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	3b23      	subs	r3, #35	; 0x23
 800309e:	fa00 f203 	lsl.w	r2, r0, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	631a      	str	r2, [r3, #48]	; 0x30
 80030aa:	e01b      	b.n	80030e4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	3b41      	subs	r3, #65	; 0x41
 80030be:	221f      	movs	r2, #31
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	43db      	mvns	r3, r3
 80030c6:	4019      	ands	r1, r3
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	6818      	ldr	r0, [r3, #0]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	4613      	mov	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	3b41      	subs	r3, #65	; 0x41
 80030d8:	fa00 f203 	lsl.w	r2, r0, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2b09      	cmp	r3, #9
 80030ea:	d91c      	bls.n	8003126 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68d9      	ldr	r1, [r3, #12]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	4613      	mov	r3, r2
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	4413      	add	r3, r2
 80030fc:	3b1e      	subs	r3, #30
 80030fe:	2207      	movs	r2, #7
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	43db      	mvns	r3, r3
 8003106:	4019      	ands	r1, r3
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	6898      	ldr	r0, [r3, #8]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	4613      	mov	r3, r2
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	4413      	add	r3, r2
 8003116:	3b1e      	subs	r3, #30
 8003118:	fa00 f203 	lsl.w	r2, r0, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	60da      	str	r2, [r3, #12]
 8003124:	e019      	b.n	800315a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6919      	ldr	r1, [r3, #16]
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	4613      	mov	r3, r2
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	4413      	add	r3, r2
 8003136:	2207      	movs	r2, #7
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	43db      	mvns	r3, r3
 800313e:	4019      	ands	r1, r3
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	6898      	ldr	r0, [r3, #8]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	4613      	mov	r3, r2
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	4413      	add	r3, r2
 800314e:	fa00 f203 	lsl.w	r2, r0, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2b10      	cmp	r3, #16
 8003160:	d003      	beq.n	800316a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003166:	2b11      	cmp	r3, #17
 8003168:	d132      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a1d      	ldr	r2, [pc, #116]	; (80031e4 <HAL_ADC_ConfigChannel+0x1e4>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d125      	bne.n	80031c0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d126      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003190:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2b10      	cmp	r3, #16
 8003198:	d11a      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800319a:	4b13      	ldr	r3, [pc, #76]	; (80031e8 <HAL_ADC_ConfigChannel+0x1e8>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a13      	ldr	r2, [pc, #76]	; (80031ec <HAL_ADC_ConfigChannel+0x1ec>)
 80031a0:	fba2 2303 	umull	r2, r3, r2, r3
 80031a4:	0c9a      	lsrs	r2, r3, #18
 80031a6:	4613      	mov	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031b0:	e002      	b.n	80031b8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	3b01      	subs	r3, #1
 80031b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1f9      	bne.n	80031b2 <HAL_ADC_ConfigChannel+0x1b2>
 80031be:	e007      	b.n	80031d0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c4:	f043 0220 	orr.w	r2, r3, #32
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	bc80      	pop	{r7}
 80031e2:	4770      	bx	lr
 80031e4:	40012400 	.word	0x40012400
 80031e8:	20000000 	.word	0x20000000
 80031ec:	431bde83 	.word	0x431bde83

080031f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b01      	cmp	r3, #1
 800320c:	d040      	beq.n	8003290 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f042 0201 	orr.w	r2, r2, #1
 800321c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800321e:	4b1f      	ldr	r3, [pc, #124]	; (800329c <ADC_Enable+0xac>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a1f      	ldr	r2, [pc, #124]	; (80032a0 <ADC_Enable+0xb0>)
 8003224:	fba2 2303 	umull	r2, r3, r2, r3
 8003228:	0c9b      	lsrs	r3, r3, #18
 800322a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800322c:	e002      	b.n	8003234 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	3b01      	subs	r3, #1
 8003232:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f9      	bne.n	800322e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800323a:	f7ff fbef 	bl	8002a1c <HAL_GetTick>
 800323e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003240:	e01f      	b.n	8003282 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003242:	f7ff fbeb 	bl	8002a1c <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d918      	bls.n	8003282 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b01      	cmp	r3, #1
 800325c:	d011      	beq.n	8003282 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003262:	f043 0210 	orr.w	r2, r3, #16
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326e:	f043 0201 	orr.w	r2, r3, #1
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e007      	b.n	8003292 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b01      	cmp	r3, #1
 800328e:	d1d8      	bne.n	8003242 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	20000000 	.word	0x20000000
 80032a0:	431bde83 	.word	0x431bde83

080032a4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d12e      	bne.n	800331c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0201 	bic.w	r2, r2, #1
 80032cc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032ce:	f7ff fba5 	bl	8002a1c <HAL_GetTick>
 80032d2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80032d4:	e01b      	b.n	800330e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032d6:	f7ff fba1 	bl	8002a1c <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d914      	bls.n	800330e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d10d      	bne.n	800330e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f6:	f043 0210 	orr.w	r2, r3, #16
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003302:	f043 0201 	orr.w	r2, r3, #1
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e007      	b.n	800331e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b01      	cmp	r3, #1
 800331a:	d0dc      	beq.n	80032d6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
	...

08003328 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003338:	4b0c      	ldr	r3, [pc, #48]	; (800336c <__NVIC_SetPriorityGrouping+0x44>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003344:	4013      	ands	r3, r2
 8003346:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003350:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800335a:	4a04      	ldr	r2, [pc, #16]	; (800336c <__NVIC_SetPriorityGrouping+0x44>)
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	60d3      	str	r3, [r2, #12]
}
 8003360:	bf00      	nop
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	e000ed00 	.word	0xe000ed00

08003370 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003374:	4b04      	ldr	r3, [pc, #16]	; (8003388 <__NVIC_GetPriorityGrouping+0x18>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	0a1b      	lsrs	r3, r3, #8
 800337a:	f003 0307 	and.w	r3, r3, #7
}
 800337e:	4618      	mov	r0, r3
 8003380:	46bd      	mov	sp, r7
 8003382:	bc80      	pop	{r7}
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	e000ed00 	.word	0xe000ed00

0800338c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339a:	2b00      	cmp	r3, #0
 800339c:	db0b      	blt.n	80033b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800339e:	79fb      	ldrb	r3, [r7, #7]
 80033a0:	f003 021f 	and.w	r2, r3, #31
 80033a4:	4906      	ldr	r1, [pc, #24]	; (80033c0 <__NVIC_EnableIRQ+0x34>)
 80033a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033aa:	095b      	lsrs	r3, r3, #5
 80033ac:	2001      	movs	r0, #1
 80033ae:	fa00 f202 	lsl.w	r2, r0, r2
 80033b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bc80      	pop	{r7}
 80033be:	4770      	bx	lr
 80033c0:	e000e100 	.word	0xe000e100

080033c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	6039      	str	r1, [r7, #0]
 80033ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	db0a      	blt.n	80033ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	490c      	ldr	r1, [pc, #48]	; (8003410 <__NVIC_SetPriority+0x4c>)
 80033de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e2:	0112      	lsls	r2, r2, #4
 80033e4:	b2d2      	uxtb	r2, r2
 80033e6:	440b      	add	r3, r1
 80033e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033ec:	e00a      	b.n	8003404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	4908      	ldr	r1, [pc, #32]	; (8003414 <__NVIC_SetPriority+0x50>)
 80033f4:	79fb      	ldrb	r3, [r7, #7]
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	3b04      	subs	r3, #4
 80033fc:	0112      	lsls	r2, r2, #4
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	440b      	add	r3, r1
 8003402:	761a      	strb	r2, [r3, #24]
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	bc80      	pop	{r7}
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	e000e100 	.word	0xe000e100
 8003414:	e000ed00 	.word	0xe000ed00

08003418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003418:	b480      	push	{r7}
 800341a:	b089      	sub	sp, #36	; 0x24
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f1c3 0307 	rsb	r3, r3, #7
 8003432:	2b04      	cmp	r3, #4
 8003434:	bf28      	it	cs
 8003436:	2304      	movcs	r3, #4
 8003438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	3304      	adds	r3, #4
 800343e:	2b06      	cmp	r3, #6
 8003440:	d902      	bls.n	8003448 <NVIC_EncodePriority+0x30>
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	3b03      	subs	r3, #3
 8003446:	e000      	b.n	800344a <NVIC_EncodePriority+0x32>
 8003448:	2300      	movs	r3, #0
 800344a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800344c:	f04f 32ff 	mov.w	r2, #4294967295
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43da      	mvns	r2, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	401a      	ands	r2, r3
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003460:	f04f 31ff 	mov.w	r1, #4294967295
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	fa01 f303 	lsl.w	r3, r1, r3
 800346a:	43d9      	mvns	r1, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003470:	4313      	orrs	r3, r2
         );
}
 8003472:	4618      	mov	r0, r3
 8003474:	3724      	adds	r7, #36	; 0x24
 8003476:	46bd      	mov	sp, r7
 8003478:	bc80      	pop	{r7}
 800347a:	4770      	bx	lr

0800347c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3b01      	subs	r3, #1
 8003488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800348c:	d301      	bcc.n	8003492 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800348e:	2301      	movs	r3, #1
 8003490:	e00f      	b.n	80034b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003492:	4a0a      	ldr	r2, [pc, #40]	; (80034bc <SysTick_Config+0x40>)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3b01      	subs	r3, #1
 8003498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800349a:	210f      	movs	r1, #15
 800349c:	f04f 30ff 	mov.w	r0, #4294967295
 80034a0:	f7ff ff90 	bl	80033c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034a4:	4b05      	ldr	r3, [pc, #20]	; (80034bc <SysTick_Config+0x40>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034aa:	4b04      	ldr	r3, [pc, #16]	; (80034bc <SysTick_Config+0x40>)
 80034ac:	2207      	movs	r2, #7
 80034ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	e000e010 	.word	0xe000e010

080034c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7ff ff2d 	bl	8003328 <__NVIC_SetPriorityGrouping>
}
 80034ce:	bf00      	nop
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b086      	sub	sp, #24
 80034da:	af00      	add	r7, sp, #0
 80034dc:	4603      	mov	r3, r0
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	607a      	str	r2, [r7, #4]
 80034e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034e8:	f7ff ff42 	bl	8003370 <__NVIC_GetPriorityGrouping>
 80034ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	68b9      	ldr	r1, [r7, #8]
 80034f2:	6978      	ldr	r0, [r7, #20]
 80034f4:	f7ff ff90 	bl	8003418 <NVIC_EncodePriority>
 80034f8:	4602      	mov	r2, r0
 80034fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034fe:	4611      	mov	r1, r2
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff ff5f 	bl	80033c4 <__NVIC_SetPriority>
}
 8003506:	bf00      	nop
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b082      	sub	sp, #8
 8003512:	af00      	add	r7, sp, #0
 8003514:	4603      	mov	r3, r0
 8003516:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff ff35 	bl	800338c <__NVIC_EnableIRQ>
}
 8003522:	bf00      	nop
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b082      	sub	sp, #8
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff ffa2 	bl	800347c <SysTick_Config>
 8003538:	4603      	mov	r3, r0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
	...

08003544 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800354c:	2300      	movs	r3, #0
 800354e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d005      	beq.n	8003568 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2204      	movs	r2, #4
 8003560:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	73fb      	strb	r3, [r7, #15]
 8003566:	e051      	b.n	800360c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 020e 	bic.w	r2, r2, #14
 8003576:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0201 	bic.w	r2, r2, #1
 8003586:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a22      	ldr	r2, [pc, #136]	; (8003618 <HAL_DMA_Abort_IT+0xd4>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d029      	beq.n	80035e6 <HAL_DMA_Abort_IT+0xa2>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a21      	ldr	r2, [pc, #132]	; (800361c <HAL_DMA_Abort_IT+0xd8>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d022      	beq.n	80035e2 <HAL_DMA_Abort_IT+0x9e>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a1f      	ldr	r2, [pc, #124]	; (8003620 <HAL_DMA_Abort_IT+0xdc>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d01a      	beq.n	80035dc <HAL_DMA_Abort_IT+0x98>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a1e      	ldr	r2, [pc, #120]	; (8003624 <HAL_DMA_Abort_IT+0xe0>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d012      	beq.n	80035d6 <HAL_DMA_Abort_IT+0x92>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a1c      	ldr	r2, [pc, #112]	; (8003628 <HAL_DMA_Abort_IT+0xe4>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d00a      	beq.n	80035d0 <HAL_DMA_Abort_IT+0x8c>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a1b      	ldr	r2, [pc, #108]	; (800362c <HAL_DMA_Abort_IT+0xe8>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d102      	bne.n	80035ca <HAL_DMA_Abort_IT+0x86>
 80035c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80035c8:	e00e      	b.n	80035e8 <HAL_DMA_Abort_IT+0xa4>
 80035ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035ce:	e00b      	b.n	80035e8 <HAL_DMA_Abort_IT+0xa4>
 80035d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035d4:	e008      	b.n	80035e8 <HAL_DMA_Abort_IT+0xa4>
 80035d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035da:	e005      	b.n	80035e8 <HAL_DMA_Abort_IT+0xa4>
 80035dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035e0:	e002      	b.n	80035e8 <HAL_DMA_Abort_IT+0xa4>
 80035e2:	2310      	movs	r3, #16
 80035e4:	e000      	b.n	80035e8 <HAL_DMA_Abort_IT+0xa4>
 80035e6:	2301      	movs	r3, #1
 80035e8:	4a11      	ldr	r2, [pc, #68]	; (8003630 <HAL_DMA_Abort_IT+0xec>)
 80035ea:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	4798      	blx	r3
    } 
  }
  return status;
 800360c:	7bfb      	ldrb	r3, [r7, #15]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	40020008 	.word	0x40020008
 800361c:	4002001c 	.word	0x4002001c
 8003620:	40020030 	.word	0x40020030
 8003624:	40020044 	.word	0x40020044
 8003628:	40020058 	.word	0x40020058
 800362c:	4002006c 	.word	0x4002006c
 8003630:	40020000 	.word	0x40020000

08003634 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003642:	b2db      	uxtb	r3, r3
}
 8003644:	4618      	mov	r0, r3
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	bc80      	pop	{r7}
 800364c:	4770      	bx	lr
	...

08003650 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003650:	b480      	push	{r7}
 8003652:	b08b      	sub	sp, #44	; 0x2c
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800365a:	2300      	movs	r3, #0
 800365c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800365e:	2300      	movs	r3, #0
 8003660:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003662:	e169      	b.n	8003938 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003664:	2201      	movs	r2, #1
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	69fa      	ldr	r2, [r7, #28]
 8003674:	4013      	ands	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	429a      	cmp	r2, r3
 800367e:	f040 8158 	bne.w	8003932 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	4a9a      	ldr	r2, [pc, #616]	; (80038f0 <HAL_GPIO_Init+0x2a0>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d05e      	beq.n	800374a <HAL_GPIO_Init+0xfa>
 800368c:	4a98      	ldr	r2, [pc, #608]	; (80038f0 <HAL_GPIO_Init+0x2a0>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d875      	bhi.n	800377e <HAL_GPIO_Init+0x12e>
 8003692:	4a98      	ldr	r2, [pc, #608]	; (80038f4 <HAL_GPIO_Init+0x2a4>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d058      	beq.n	800374a <HAL_GPIO_Init+0xfa>
 8003698:	4a96      	ldr	r2, [pc, #600]	; (80038f4 <HAL_GPIO_Init+0x2a4>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d86f      	bhi.n	800377e <HAL_GPIO_Init+0x12e>
 800369e:	4a96      	ldr	r2, [pc, #600]	; (80038f8 <HAL_GPIO_Init+0x2a8>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d052      	beq.n	800374a <HAL_GPIO_Init+0xfa>
 80036a4:	4a94      	ldr	r2, [pc, #592]	; (80038f8 <HAL_GPIO_Init+0x2a8>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d869      	bhi.n	800377e <HAL_GPIO_Init+0x12e>
 80036aa:	4a94      	ldr	r2, [pc, #592]	; (80038fc <HAL_GPIO_Init+0x2ac>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d04c      	beq.n	800374a <HAL_GPIO_Init+0xfa>
 80036b0:	4a92      	ldr	r2, [pc, #584]	; (80038fc <HAL_GPIO_Init+0x2ac>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d863      	bhi.n	800377e <HAL_GPIO_Init+0x12e>
 80036b6:	4a92      	ldr	r2, [pc, #584]	; (8003900 <HAL_GPIO_Init+0x2b0>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d046      	beq.n	800374a <HAL_GPIO_Init+0xfa>
 80036bc:	4a90      	ldr	r2, [pc, #576]	; (8003900 <HAL_GPIO_Init+0x2b0>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d85d      	bhi.n	800377e <HAL_GPIO_Init+0x12e>
 80036c2:	2b12      	cmp	r3, #18
 80036c4:	d82a      	bhi.n	800371c <HAL_GPIO_Init+0xcc>
 80036c6:	2b12      	cmp	r3, #18
 80036c8:	d859      	bhi.n	800377e <HAL_GPIO_Init+0x12e>
 80036ca:	a201      	add	r2, pc, #4	; (adr r2, 80036d0 <HAL_GPIO_Init+0x80>)
 80036cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d0:	0800374b 	.word	0x0800374b
 80036d4:	08003725 	.word	0x08003725
 80036d8:	08003737 	.word	0x08003737
 80036dc:	08003779 	.word	0x08003779
 80036e0:	0800377f 	.word	0x0800377f
 80036e4:	0800377f 	.word	0x0800377f
 80036e8:	0800377f 	.word	0x0800377f
 80036ec:	0800377f 	.word	0x0800377f
 80036f0:	0800377f 	.word	0x0800377f
 80036f4:	0800377f 	.word	0x0800377f
 80036f8:	0800377f 	.word	0x0800377f
 80036fc:	0800377f 	.word	0x0800377f
 8003700:	0800377f 	.word	0x0800377f
 8003704:	0800377f 	.word	0x0800377f
 8003708:	0800377f 	.word	0x0800377f
 800370c:	0800377f 	.word	0x0800377f
 8003710:	0800377f 	.word	0x0800377f
 8003714:	0800372d 	.word	0x0800372d
 8003718:	08003741 	.word	0x08003741
 800371c:	4a79      	ldr	r2, [pc, #484]	; (8003904 <HAL_GPIO_Init+0x2b4>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d013      	beq.n	800374a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003722:	e02c      	b.n	800377e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	623b      	str	r3, [r7, #32]
          break;
 800372a:	e029      	b.n	8003780 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	3304      	adds	r3, #4
 8003732:	623b      	str	r3, [r7, #32]
          break;
 8003734:	e024      	b.n	8003780 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	3308      	adds	r3, #8
 800373c:	623b      	str	r3, [r7, #32]
          break;
 800373e:	e01f      	b.n	8003780 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	330c      	adds	r3, #12
 8003746:	623b      	str	r3, [r7, #32]
          break;
 8003748:	e01a      	b.n	8003780 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d102      	bne.n	8003758 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003752:	2304      	movs	r3, #4
 8003754:	623b      	str	r3, [r7, #32]
          break;
 8003756:	e013      	b.n	8003780 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d105      	bne.n	800376c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003760:	2308      	movs	r3, #8
 8003762:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	69fa      	ldr	r2, [r7, #28]
 8003768:	611a      	str	r2, [r3, #16]
          break;
 800376a:	e009      	b.n	8003780 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800376c:	2308      	movs	r3, #8
 800376e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	69fa      	ldr	r2, [r7, #28]
 8003774:	615a      	str	r2, [r3, #20]
          break;
 8003776:	e003      	b.n	8003780 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003778:	2300      	movs	r3, #0
 800377a:	623b      	str	r3, [r7, #32]
          break;
 800377c:	e000      	b.n	8003780 <HAL_GPIO_Init+0x130>
          break;
 800377e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	2bff      	cmp	r3, #255	; 0xff
 8003784:	d801      	bhi.n	800378a <HAL_GPIO_Init+0x13a>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	e001      	b.n	800378e <HAL_GPIO_Init+0x13e>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	3304      	adds	r3, #4
 800378e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	2bff      	cmp	r3, #255	; 0xff
 8003794:	d802      	bhi.n	800379c <HAL_GPIO_Init+0x14c>
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	e002      	b.n	80037a2 <HAL_GPIO_Init+0x152>
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	3b08      	subs	r3, #8
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	210f      	movs	r1, #15
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	fa01 f303 	lsl.w	r3, r1, r3
 80037b0:	43db      	mvns	r3, r3
 80037b2:	401a      	ands	r2, r3
 80037b4:	6a39      	ldr	r1, [r7, #32]
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	fa01 f303 	lsl.w	r3, r1, r3
 80037bc:	431a      	orrs	r2, r3
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f000 80b1 	beq.w	8003932 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80037d0:	4b4d      	ldr	r3, [pc, #308]	; (8003908 <HAL_GPIO_Init+0x2b8>)
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	4a4c      	ldr	r2, [pc, #304]	; (8003908 <HAL_GPIO_Init+0x2b8>)
 80037d6:	f043 0301 	orr.w	r3, r3, #1
 80037da:	6193      	str	r3, [r2, #24]
 80037dc:	4b4a      	ldr	r3, [pc, #296]	; (8003908 <HAL_GPIO_Init+0x2b8>)
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	60bb      	str	r3, [r7, #8]
 80037e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80037e8:	4a48      	ldr	r2, [pc, #288]	; (800390c <HAL_GPIO_Init+0x2bc>)
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	089b      	lsrs	r3, r3, #2
 80037ee:	3302      	adds	r3, #2
 80037f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	f003 0303 	and.w	r3, r3, #3
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	220f      	movs	r2, #15
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	43db      	mvns	r3, r3
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4013      	ands	r3, r2
 800380a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a40      	ldr	r2, [pc, #256]	; (8003910 <HAL_GPIO_Init+0x2c0>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d013      	beq.n	800383c <HAL_GPIO_Init+0x1ec>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a3f      	ldr	r2, [pc, #252]	; (8003914 <HAL_GPIO_Init+0x2c4>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d00d      	beq.n	8003838 <HAL_GPIO_Init+0x1e8>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a3e      	ldr	r2, [pc, #248]	; (8003918 <HAL_GPIO_Init+0x2c8>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d007      	beq.n	8003834 <HAL_GPIO_Init+0x1e4>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a3d      	ldr	r2, [pc, #244]	; (800391c <HAL_GPIO_Init+0x2cc>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d101      	bne.n	8003830 <HAL_GPIO_Init+0x1e0>
 800382c:	2303      	movs	r3, #3
 800382e:	e006      	b.n	800383e <HAL_GPIO_Init+0x1ee>
 8003830:	2304      	movs	r3, #4
 8003832:	e004      	b.n	800383e <HAL_GPIO_Init+0x1ee>
 8003834:	2302      	movs	r3, #2
 8003836:	e002      	b.n	800383e <HAL_GPIO_Init+0x1ee>
 8003838:	2301      	movs	r3, #1
 800383a:	e000      	b.n	800383e <HAL_GPIO_Init+0x1ee>
 800383c:	2300      	movs	r3, #0
 800383e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003840:	f002 0203 	and.w	r2, r2, #3
 8003844:	0092      	lsls	r2, r2, #2
 8003846:	4093      	lsls	r3, r2
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	4313      	orrs	r3, r2
 800384c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800384e:	492f      	ldr	r1, [pc, #188]	; (800390c <HAL_GPIO_Init+0x2bc>)
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	089b      	lsrs	r3, r3, #2
 8003854:	3302      	adds	r3, #2
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d006      	beq.n	8003876 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003868:	4b2d      	ldr	r3, [pc, #180]	; (8003920 <HAL_GPIO_Init+0x2d0>)
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	492c      	ldr	r1, [pc, #176]	; (8003920 <HAL_GPIO_Init+0x2d0>)
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	4313      	orrs	r3, r2
 8003872:	608b      	str	r3, [r1, #8]
 8003874:	e006      	b.n	8003884 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003876:	4b2a      	ldr	r3, [pc, #168]	; (8003920 <HAL_GPIO_Init+0x2d0>)
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	43db      	mvns	r3, r3
 800387e:	4928      	ldr	r1, [pc, #160]	; (8003920 <HAL_GPIO_Init+0x2d0>)
 8003880:	4013      	ands	r3, r2
 8003882:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d006      	beq.n	800389e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003890:	4b23      	ldr	r3, [pc, #140]	; (8003920 <HAL_GPIO_Init+0x2d0>)
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	4922      	ldr	r1, [pc, #136]	; (8003920 <HAL_GPIO_Init+0x2d0>)
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	4313      	orrs	r3, r2
 800389a:	60cb      	str	r3, [r1, #12]
 800389c:	e006      	b.n	80038ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800389e:	4b20      	ldr	r3, [pc, #128]	; (8003920 <HAL_GPIO_Init+0x2d0>)
 80038a0:	68da      	ldr	r2, [r3, #12]
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	43db      	mvns	r3, r3
 80038a6:	491e      	ldr	r1, [pc, #120]	; (8003920 <HAL_GPIO_Init+0x2d0>)
 80038a8:	4013      	ands	r3, r2
 80038aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d006      	beq.n	80038c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80038b8:	4b19      	ldr	r3, [pc, #100]	; (8003920 <HAL_GPIO_Init+0x2d0>)
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	4918      	ldr	r1, [pc, #96]	; (8003920 <HAL_GPIO_Init+0x2d0>)
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	604b      	str	r3, [r1, #4]
 80038c4:	e006      	b.n	80038d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80038c6:	4b16      	ldr	r3, [pc, #88]	; (8003920 <HAL_GPIO_Init+0x2d0>)
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	43db      	mvns	r3, r3
 80038ce:	4914      	ldr	r1, [pc, #80]	; (8003920 <HAL_GPIO_Init+0x2d0>)
 80038d0:	4013      	ands	r3, r2
 80038d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d021      	beq.n	8003924 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80038e0:	4b0f      	ldr	r3, [pc, #60]	; (8003920 <HAL_GPIO_Init+0x2d0>)
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	490e      	ldr	r1, [pc, #56]	; (8003920 <HAL_GPIO_Init+0x2d0>)
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	600b      	str	r3, [r1, #0]
 80038ec:	e021      	b.n	8003932 <HAL_GPIO_Init+0x2e2>
 80038ee:	bf00      	nop
 80038f0:	10320000 	.word	0x10320000
 80038f4:	10310000 	.word	0x10310000
 80038f8:	10220000 	.word	0x10220000
 80038fc:	10210000 	.word	0x10210000
 8003900:	10120000 	.word	0x10120000
 8003904:	10110000 	.word	0x10110000
 8003908:	40021000 	.word	0x40021000
 800390c:	40010000 	.word	0x40010000
 8003910:	40010800 	.word	0x40010800
 8003914:	40010c00 	.word	0x40010c00
 8003918:	40011000 	.word	0x40011000
 800391c:	40011400 	.word	0x40011400
 8003920:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003924:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <HAL_GPIO_Init+0x304>)
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	43db      	mvns	r3, r3
 800392c:	4909      	ldr	r1, [pc, #36]	; (8003954 <HAL_GPIO_Init+0x304>)
 800392e:	4013      	ands	r3, r2
 8003930:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	3301      	adds	r3, #1
 8003936:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	fa22 f303 	lsr.w	r3, r2, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	f47f ae8e 	bne.w	8003664 <HAL_GPIO_Init+0x14>
  }
}
 8003948:	bf00      	nop
 800394a:	bf00      	nop
 800394c:	372c      	adds	r7, #44	; 0x2c
 800394e:	46bd      	mov	sp, r7
 8003950:	bc80      	pop	{r7}
 8003952:	4770      	bx	lr
 8003954:	40010400 	.word	0x40010400

08003958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	460b      	mov	r3, r1
 8003962:	807b      	strh	r3, [r7, #2]
 8003964:	4613      	mov	r3, r2
 8003966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003968:	787b      	ldrb	r3, [r7, #1]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800396e:	887a      	ldrh	r2, [r7, #2]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003974:	e003      	b.n	800397e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003976:	887b      	ldrh	r3, [r7, #2]
 8003978:	041a      	lsls	r2, r3, #16
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	611a      	str	r2, [r3, #16]
}
 800397e:	bf00      	nop
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr

08003988 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e12b      	b.n	8003bf2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d106      	bne.n	80039b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7fe f836 	bl	8001a20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2224      	movs	r2, #36	; 0x24
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0201 	bic.w	r2, r2, #1
 80039ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039ec:	f002 f9b8 	bl	8005d60 <HAL_RCC_GetPCLK1Freq>
 80039f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	4a81      	ldr	r2, [pc, #516]	; (8003bfc <HAL_I2C_Init+0x274>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d807      	bhi.n	8003a0c <HAL_I2C_Init+0x84>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4a80      	ldr	r2, [pc, #512]	; (8003c00 <HAL_I2C_Init+0x278>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	bf94      	ite	ls
 8003a04:	2301      	movls	r3, #1
 8003a06:	2300      	movhi	r3, #0
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	e006      	b.n	8003a1a <HAL_I2C_Init+0x92>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4a7d      	ldr	r2, [pc, #500]	; (8003c04 <HAL_I2C_Init+0x27c>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	bf94      	ite	ls
 8003a14:	2301      	movls	r3, #1
 8003a16:	2300      	movhi	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e0e7      	b.n	8003bf2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	4a78      	ldr	r2, [pc, #480]	; (8003c08 <HAL_I2C_Init+0x280>)
 8003a26:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2a:	0c9b      	lsrs	r3, r3, #18
 8003a2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68ba      	ldr	r2, [r7, #8]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	4a6a      	ldr	r2, [pc, #424]	; (8003bfc <HAL_I2C_Init+0x274>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d802      	bhi.n	8003a5c <HAL_I2C_Init+0xd4>
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	e009      	b.n	8003a70 <HAL_I2C_Init+0xe8>
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a62:	fb02 f303 	mul.w	r3, r2, r3
 8003a66:	4a69      	ldr	r2, [pc, #420]	; (8003c0c <HAL_I2C_Init+0x284>)
 8003a68:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6c:	099b      	lsrs	r3, r3, #6
 8003a6e:	3301      	adds	r3, #1
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6812      	ldr	r2, [r2, #0]
 8003a74:	430b      	orrs	r3, r1
 8003a76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	495c      	ldr	r1, [pc, #368]	; (8003bfc <HAL_I2C_Init+0x274>)
 8003a8c:	428b      	cmp	r3, r1
 8003a8e:	d819      	bhi.n	8003ac4 <HAL_I2C_Init+0x13c>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	1e59      	subs	r1, r3, #1
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a9e:	1c59      	adds	r1, r3, #1
 8003aa0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003aa4:	400b      	ands	r3, r1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00a      	beq.n	8003ac0 <HAL_I2C_Init+0x138>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	1e59      	subs	r1, r3, #1
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ab8:	3301      	adds	r3, #1
 8003aba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003abe:	e051      	b.n	8003b64 <HAL_I2C_Init+0x1dc>
 8003ac0:	2304      	movs	r3, #4
 8003ac2:	e04f      	b.n	8003b64 <HAL_I2C_Init+0x1dc>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d111      	bne.n	8003af0 <HAL_I2C_Init+0x168>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	1e58      	subs	r0, r3, #1
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6859      	ldr	r1, [r3, #4]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	440b      	add	r3, r1
 8003ada:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ade:	3301      	adds	r3, #1
 8003ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	bf0c      	ite	eq
 8003ae8:	2301      	moveq	r3, #1
 8003aea:	2300      	movne	r3, #0
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	e012      	b.n	8003b16 <HAL_I2C_Init+0x18e>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	1e58      	subs	r0, r3, #1
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6859      	ldr	r1, [r3, #4]
 8003af8:	460b      	mov	r3, r1
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	440b      	add	r3, r1
 8003afe:	0099      	lsls	r1, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b06:	3301      	adds	r3, #1
 8003b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	bf0c      	ite	eq
 8003b10:	2301      	moveq	r3, #1
 8003b12:	2300      	movne	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <HAL_I2C_Init+0x196>
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e022      	b.n	8003b64 <HAL_I2C_Init+0x1dc>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10e      	bne.n	8003b44 <HAL_I2C_Init+0x1bc>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	1e58      	subs	r0, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6859      	ldr	r1, [r3, #4]
 8003b2e:	460b      	mov	r3, r1
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	440b      	add	r3, r1
 8003b34:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b38:	3301      	adds	r3, #1
 8003b3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b42:	e00f      	b.n	8003b64 <HAL_I2C_Init+0x1dc>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	1e58      	subs	r0, r3, #1
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6859      	ldr	r1, [r3, #4]
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	440b      	add	r3, r1
 8003b52:	0099      	lsls	r1, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b64:	6879      	ldr	r1, [r7, #4]
 8003b66:	6809      	ldr	r1, [r1, #0]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	69da      	ldr	r2, [r3, #28]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6911      	ldr	r1, [r2, #16]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	68d2      	ldr	r2, [r2, #12]
 8003b9e:	4311      	orrs	r1, r2
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6812      	ldr	r2, [r2, #0]
 8003ba4:	430b      	orrs	r3, r1
 8003ba6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	695a      	ldr	r2, [r3, #20]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0201 	orr.w	r2, r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	000186a0 	.word	0x000186a0
 8003c00:	001e847f 	.word	0x001e847f
 8003c04:	003d08ff 	.word	0x003d08ff
 8003c08:	431bde83 	.word	0x431bde83
 8003c0c:	10624dd3 	.word	0x10624dd3

08003c10 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c22:	2b80      	cmp	r3, #128	; 0x80
 8003c24:	d103      	bne.n	8003c2e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	611a      	str	r2, [r3, #16]
  }
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr

08003c38 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b088      	sub	sp, #32
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c50:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c58:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c60:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
 8003c64:	2b10      	cmp	r3, #16
 8003c66:	d003      	beq.n	8003c70 <HAL_I2C_EV_IRQHandler+0x38>
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
 8003c6a:	2b40      	cmp	r3, #64	; 0x40
 8003c6c:	f040 80b1 	bne.w	8003dd2 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10d      	bne.n	8003ca6 <HAL_I2C_EV_IRQHandler+0x6e>
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003c90:	d003      	beq.n	8003c9a <HAL_I2C_EV_IRQHandler+0x62>
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003c98:	d101      	bne.n	8003c9e <HAL_I2C_EV_IRQHandler+0x66>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <HAL_I2C_EV_IRQHandler+0x68>
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	f000 8114 	beq.w	8003ece <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00b      	beq.n	8003cc8 <HAL_I2C_EV_IRQHandler+0x90>
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d006      	beq.n	8003cc8 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f001 fc60 	bl	8005580 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 fd60 	bl	8004786 <I2C_Master_SB>
 8003cc6:	e083      	b.n	8003dd0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f003 0308 	and.w	r3, r3, #8
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d008      	beq.n	8003ce4 <HAL_I2C_EV_IRQHandler+0xac>
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 fdd7 	bl	8004890 <I2C_Master_ADD10>
 8003ce2:	e075      	b.n	8003dd0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d008      	beq.n	8003d00 <HAL_I2C_EV_IRQHandler+0xc8>
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 fdf2 	bl	80048e2 <I2C_Master_ADDR>
 8003cfe:	e067      	b.n	8003dd0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	f003 0304 	and.w	r3, r3, #4
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d036      	beq.n	8003d78 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d18:	f000 80db 	beq.w	8003ed2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00d      	beq.n	8003d42 <HAL_I2C_EV_IRQHandler+0x10a>
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d008      	beq.n	8003d42 <HAL_I2C_EV_IRQHandler+0x10a>
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f003 0304 	and.w	r3, r3, #4
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d103      	bne.n	8003d42 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f9d4 	bl	80040e8 <I2C_MasterTransmit_TXE>
 8003d40:	e046      	b.n	8003dd0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 80c2 	beq.w	8003ed2 <HAL_I2C_EV_IRQHandler+0x29a>
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 80bc 	beq.w	8003ed2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003d5a:	7bbb      	ldrb	r3, [r7, #14]
 8003d5c:	2b21      	cmp	r3, #33	; 0x21
 8003d5e:	d103      	bne.n	8003d68 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 fa5d 	bl	8004220 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d66:	e0b4      	b.n	8003ed2 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003d68:	7bfb      	ldrb	r3, [r7, #15]
 8003d6a:	2b40      	cmp	r3, #64	; 0x40
 8003d6c:	f040 80b1 	bne.w	8003ed2 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 facb 	bl	800430c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d76:	e0ac      	b.n	8003ed2 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d86:	f000 80a4 	beq.w	8003ed2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00d      	beq.n	8003db0 <HAL_I2C_EV_IRQHandler+0x178>
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d008      	beq.n	8003db0 <HAL_I2C_EV_IRQHandler+0x178>
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d103      	bne.n	8003db0 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 fb47 	bl	800443c <I2C_MasterReceive_RXNE>
 8003dae:	e00f      	b.n	8003dd0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 808b 	beq.w	8003ed2 <HAL_I2C_EV_IRQHandler+0x29a>
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 8085 	beq.w	8003ed2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 fbf2 	bl	80045b2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dce:	e080      	b.n	8003ed2 <HAL_I2C_EV_IRQHandler+0x29a>
 8003dd0:	e07f      	b.n	8003ed2 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d004      	beq.n	8003de4 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	61fb      	str	r3, [r7, #28]
 8003de2:	e007      	b.n	8003df4 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d011      	beq.n	8003e22 <HAL_I2C_EV_IRQHandler+0x1ea>
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00c      	beq.n	8003e22 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d003      	beq.n	8003e18 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003e18:	69b9      	ldr	r1, [r7, #24]
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 ffb8 	bl	8004d90 <I2C_Slave_ADDR>
 8003e20:	e05a      	b.n	8003ed8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	f003 0310 	and.w	r3, r3, #16
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d008      	beq.n	8003e3e <HAL_I2C_EV_IRQHandler+0x206>
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 fff2 	bl	8004e20 <I2C_Slave_STOPF>
 8003e3c:	e04c      	b.n	8003ed8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e3e:	7bbb      	ldrb	r3, [r7, #14]
 8003e40:	2b21      	cmp	r3, #33	; 0x21
 8003e42:	d002      	beq.n	8003e4a <HAL_I2C_EV_IRQHandler+0x212>
 8003e44:	7bbb      	ldrb	r3, [r7, #14]
 8003e46:	2b29      	cmp	r3, #41	; 0x29
 8003e48:	d120      	bne.n	8003e8c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00d      	beq.n	8003e70 <HAL_I2C_EV_IRQHandler+0x238>
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d008      	beq.n	8003e70 <HAL_I2C_EV_IRQHandler+0x238>
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d103      	bne.n	8003e70 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 fed5 	bl	8004c18 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e6e:	e032      	b.n	8003ed6 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f003 0304 	and.w	r3, r3, #4
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d02d      	beq.n	8003ed6 <HAL_I2C_EV_IRQHandler+0x29e>
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d028      	beq.n	8003ed6 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 ff04 	bl	8004c92 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e8a:	e024      	b.n	8003ed6 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00d      	beq.n	8003eb2 <HAL_I2C_EV_IRQHandler+0x27a>
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d008      	beq.n	8003eb2 <HAL_I2C_EV_IRQHandler+0x27a>
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	f003 0304 	and.w	r3, r3, #4
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d103      	bne.n	8003eb2 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 ff11 	bl	8004cd2 <I2C_SlaveReceive_RXNE>
 8003eb0:	e012      	b.n	8003ed8 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00d      	beq.n	8003ed8 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d008      	beq.n	8003ed8 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 ff41 	bl	8004d4e <I2C_SlaveReceive_BTF>
 8003ecc:	e004      	b.n	8003ed8 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003ece:	bf00      	nop
 8003ed0:	e002      	b.n	8003ed8 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ed2:	bf00      	nop
 8003ed4:	e000      	b.n	8003ed8 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ed6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003ed8:	3720      	adds	r7, #32
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b08a      	sub	sp, #40	; 0x28
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f00:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f02:	6a3b      	ldr	r3, [r7, #32]
 8003f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d015      	beq.n	8003f38 <HAL_I2C_ER_IRQHandler+0x5a>
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d010      	beq.n	8003f38 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	f043 0301 	orr.w	r3, r3, #1
 8003f1c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f26:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f36:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00d      	beq.n	8003f5e <HAL_I2C_ER_IRQHandler+0x80>
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d008      	beq.n	8003f5e <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4e:	f043 0302 	orr.w	r3, r3, #2
 8003f52:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003f5c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f5e:	6a3b      	ldr	r3, [r7, #32]
 8003f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d03e      	beq.n	8003fe6 <HAL_I2C_ER_IRQHandler+0x108>
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d039      	beq.n	8003fe6 <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 8003f72:	7efb      	ldrb	r3, [r7, #27]
 8003f74:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f84:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003f8c:	7ebb      	ldrb	r3, [r7, #26]
 8003f8e:	2b20      	cmp	r3, #32
 8003f90:	d112      	bne.n	8003fb8 <HAL_I2C_ER_IRQHandler+0xda>
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10f      	bne.n	8003fb8 <HAL_I2C_ER_IRQHandler+0xda>
 8003f98:	7cfb      	ldrb	r3, [r7, #19]
 8003f9a:	2b21      	cmp	r3, #33	; 0x21
 8003f9c:	d008      	beq.n	8003fb0 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003f9e:	7cfb      	ldrb	r3, [r7, #19]
 8003fa0:	2b29      	cmp	r3, #41	; 0x29
 8003fa2:	d005      	beq.n	8003fb0 <HAL_I2C_ER_IRQHandler+0xd2>
 8003fa4:	7cfb      	ldrb	r3, [r7, #19]
 8003fa6:	2b28      	cmp	r3, #40	; 0x28
 8003fa8:	d106      	bne.n	8003fb8 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2b21      	cmp	r3, #33	; 0x21
 8003fae:	d103      	bne.n	8003fb8 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f001 f865 	bl	8005080 <I2C_Slave_AF>
 8003fb6:	e016      	b.n	8003fe6 <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fc0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	f043 0304 	orr.w	r3, r3, #4
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003fca:	7efb      	ldrb	r3, [r7, #27]
 8003fcc:	2b10      	cmp	r3, #16
 8003fce:	d002      	beq.n	8003fd6 <HAL_I2C_ER_IRQHandler+0xf8>
 8003fd0:	7efb      	ldrb	r3, [r7, #27]
 8003fd2:	2b40      	cmp	r3, #64	; 0x40
 8003fd4:	d107      	bne.n	8003fe6 <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fe4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00d      	beq.n	800400c <HAL_I2C_ER_IRQHandler+0x12e>
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d008      	beq.n	800400c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	f043 0308 	orr.w	r3, r3, #8
 8004000:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800400a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	2b00      	cmp	r3, #0
 8004010:	d008      	beq.n	8004024 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	431a      	orrs	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f001 f8a2 	bl	8005168 <I2C_ITError>
  }
}
 8004024:	bf00      	nop
 8004026:	3728      	adds	r7, #40	; 0x28
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	bc80      	pop	{r7}
 800403c:	4770      	bx	lr

0800403e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800403e:	b480      	push	{r7}
 8004040:	b083      	sub	sp, #12
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004046:	bf00      	nop
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	bc80      	pop	{r7}
 800404e:	4770      	bx	lr

08004050 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	bc80      	pop	{r7}
 8004060:	4770      	bx	lr

08004062 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800406a:	bf00      	nop
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	bc80      	pop	{r7}
 8004072:	4770      	bx	lr

08004074 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	460b      	mov	r3, r1
 800407e:	70fb      	strb	r3, [r7, #3]
 8004080:	4613      	mov	r3, r2
 8004082:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	bc80      	pop	{r7}
 800408c:	4770      	bx	lr

0800408e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800408e:	b480      	push	{r7}
 8004090:	b083      	sub	sp, #12
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004096:	bf00      	nop
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	bc80      	pop	{r7}
 800409e:	4770      	bx	lr

080040a0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bc80      	pop	{r7}
 80040b0:	4770      	bx	lr

080040b2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	bc80      	pop	{r7}
 80040c2:	4770      	bx	lr

080040c4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bc80      	pop	{r7}
 80040d4:	4770      	bx	lr

080040d6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b083      	sub	sp, #12
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bc80      	pop	{r7}
 80040e6:	4770      	bx	lr

080040e8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040fe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004104:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800410a:	2b00      	cmp	r3, #0
 800410c:	d150      	bne.n	80041b0 <I2C_MasterTransmit_TXE+0xc8>
 800410e:	7bfb      	ldrb	r3, [r7, #15]
 8004110:	2b21      	cmp	r3, #33	; 0x21
 8004112:	d14d      	bne.n	80041b0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	2b08      	cmp	r3, #8
 8004118:	d01d      	beq.n	8004156 <I2C_MasterTransmit_TXE+0x6e>
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	2b20      	cmp	r3, #32
 800411e:	d01a      	beq.n	8004156 <I2C_MasterTransmit_TXE+0x6e>
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004126:	d016      	beq.n	8004156 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004136:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2211      	movs	r2, #17
 800413c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2220      	movs	r2, #32
 800414a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7ff ff6c 	bl	800402c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004154:	e060      	b.n	8004218 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004164:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004174:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2220      	movs	r2, #32
 8004180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b40      	cmp	r3, #64	; 0x40
 800418e:	d107      	bne.n	80041a0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f7ff ff81 	bl	80040a0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800419e:	e03b      	b.n	8004218 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7ff ff3f 	bl	800402c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041ae:	e033      	b.n	8004218 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80041b0:	7bfb      	ldrb	r3, [r7, #15]
 80041b2:	2b21      	cmp	r3, #33	; 0x21
 80041b4:	d005      	beq.n	80041c2 <I2C_MasterTransmit_TXE+0xda>
 80041b6:	7bbb      	ldrb	r3, [r7, #14]
 80041b8:	2b40      	cmp	r3, #64	; 0x40
 80041ba:	d12d      	bne.n	8004218 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80041bc:	7bfb      	ldrb	r3, [r7, #15]
 80041be:	2b22      	cmp	r3, #34	; 0x22
 80041c0:	d12a      	bne.n	8004218 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d108      	bne.n	80041de <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041da:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80041dc:	e01c      	b.n	8004218 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b40      	cmp	r3, #64	; 0x40
 80041e8:	d103      	bne.n	80041f2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f88e 	bl	800430c <I2C_MemoryTransmit_TXE_BTF>
}
 80041f0:	e012      	b.n	8004218 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	781a      	ldrb	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	1c5a      	adds	r2, r3, #1
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b01      	subs	r3, #1
 8004210:	b29a      	uxth	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004216:	e7ff      	b.n	8004218 <I2C_MasterTransmit_TXE+0x130>
 8004218:	bf00      	nop
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b21      	cmp	r3, #33	; 0x21
 8004238:	d164      	bne.n	8004304 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423e:	b29b      	uxth	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	d012      	beq.n	800426a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	781a      	ldrb	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004254:	1c5a      	adds	r2, r3, #1
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425e:	b29b      	uxth	r3, r3
 8004260:	3b01      	subs	r3, #1
 8004262:	b29a      	uxth	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004268:	e04c      	b.n	8004304 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2b08      	cmp	r3, #8
 800426e:	d01d      	beq.n	80042ac <I2C_MasterTransmit_BTF+0x8c>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2b20      	cmp	r3, #32
 8004274:	d01a      	beq.n	80042ac <I2C_MasterTransmit_BTF+0x8c>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800427c:	d016      	beq.n	80042ac <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800428c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2211      	movs	r2, #17
 8004292:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2220      	movs	r2, #32
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7ff fec1 	bl	800402c <HAL_I2C_MasterTxCpltCallback>
}
 80042aa:	e02b      	b.n	8004304 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042ba:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ca:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b40      	cmp	r3, #64	; 0x40
 80042e4:	d107      	bne.n	80042f6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7ff fed6 	bl	80040a0 <HAL_I2C_MemTxCpltCallback>
}
 80042f4:	e006      	b.n	8004304 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7ff fe94 	bl	800402c <HAL_I2C_MasterTxCpltCallback>
}
 8004304:	bf00      	nop
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800431a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004320:	2b00      	cmp	r3, #0
 8004322:	d11d      	bne.n	8004360 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004328:	2b01      	cmp	r3, #1
 800432a:	d10b      	bne.n	8004344 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004330:	b2da      	uxtb	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800433c:	1c9a      	adds	r2, r3, #2
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004342:	e077      	b.n	8004434 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004348:	b29b      	uxth	r3, r3
 800434a:	121b      	asrs	r3, r3, #8
 800434c:	b2da      	uxtb	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004358:	1c5a      	adds	r2, r3, #1
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800435e:	e069      	b.n	8004434 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004364:	2b01      	cmp	r3, #1
 8004366:	d10b      	bne.n	8004380 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800436c:	b2da      	uxtb	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004378:	1c5a      	adds	r2, r3, #1
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800437e:	e059      	b.n	8004434 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004384:	2b02      	cmp	r3, #2
 8004386:	d152      	bne.n	800442e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004388:	7bfb      	ldrb	r3, [r7, #15]
 800438a:	2b22      	cmp	r3, #34	; 0x22
 800438c:	d10d      	bne.n	80043aa <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800439c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80043a8:	e044      	b.n	8004434 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d015      	beq.n	80043e0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80043b4:	7bfb      	ldrb	r3, [r7, #15]
 80043b6:	2b21      	cmp	r3, #33	; 0x21
 80043b8:	d112      	bne.n	80043e0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	781a      	ldrb	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	1c5a      	adds	r2, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	3b01      	subs	r3, #1
 80043d8:	b29a      	uxth	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80043de:	e029      	b.n	8004434 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d124      	bne.n	8004434 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80043ea:	7bfb      	ldrb	r3, [r7, #15]
 80043ec:	2b21      	cmp	r3, #33	; 0x21
 80043ee:	d121      	bne.n	8004434 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043fe:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800440e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2220      	movs	r2, #32
 800441a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7ff fe3a 	bl	80040a0 <HAL_I2C_MemTxCpltCallback>
}
 800442c:	e002      	b.n	8004434 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7ff fbee 	bl	8003c10 <I2C_Flush_DR>
}
 8004434:	bf00      	nop
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b22      	cmp	r3, #34	; 0x22
 800444e:	f040 80ac 	bne.w	80045aa <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004456:	b29b      	uxth	r3, r3
 8004458:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2b03      	cmp	r3, #3
 800445e:	d921      	bls.n	80044a4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	691a      	ldr	r2, [r3, #16]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446a:	b2d2      	uxtb	r2, r2
 800446c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447c:	b29b      	uxth	r3, r3
 800447e:	3b01      	subs	r3, #1
 8004480:	b29a      	uxth	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448a:	b29b      	uxth	r3, r3
 800448c:	2b03      	cmp	r3, #3
 800448e:	f040 808c 	bne.w	80045aa <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044a0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80044a2:	e082      	b.n	80045aa <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d075      	beq.n	8004598 <I2C_MasterReceive_RXNE+0x15c>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d002      	beq.n	80044b8 <I2C_MasterReceive_RXNE+0x7c>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d16f      	bne.n	8004598 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f001 f82f 	bl	800551c <I2C_WaitOnSTOPRequestThroughIT>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d142      	bne.n	800454a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044d2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044e2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	691a      	ldr	r2, [r3, #16]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	b2d2      	uxtb	r2, r2
 80044f0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	1c5a      	adds	r2, r3, #1
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004500:	b29b      	uxth	r3, r3
 8004502:	3b01      	subs	r3, #1
 8004504:	b29a      	uxth	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2220      	movs	r2, #32
 800450e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b40      	cmp	r3, #64	; 0x40
 800451c:	d10a      	bne.n	8004534 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f7ff fdc0 	bl	80040b2 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004532:	e03a      	b.n	80045aa <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2212      	movs	r2, #18
 8004540:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7ff fd7b 	bl	800403e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004548:	e02f      	b.n	80045aa <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004558:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	691a      	ldr	r2, [r3, #16]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	b2d2      	uxtb	r2, r2
 8004566:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	1c5a      	adds	r2, r3, #1
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004576:	b29b      	uxth	r3, r3
 8004578:	3b01      	subs	r3, #1
 800457a:	b29a      	uxth	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2220      	movs	r2, #32
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f7ff fd97 	bl	80040c4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004596:	e008      	b.n	80045aa <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045a6:	605a      	str	r2, [r3, #4]
}
 80045a8:	e7ff      	b.n	80045aa <I2C_MasterReceive_RXNE+0x16e>
 80045aa:	bf00      	nop
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b084      	sub	sp, #16
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045be:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d11b      	bne.n	8004602 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045d8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	691a      	ldr	r2, [r3, #16]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	b2d2      	uxtb	r2, r2
 80045e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	1c5a      	adds	r2, r3, #1
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004600:	e0bd      	b.n	800477e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004606:	b29b      	uxth	r3, r3
 8004608:	2b03      	cmp	r3, #3
 800460a:	d129      	bne.n	8004660 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800461a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2b04      	cmp	r3, #4
 8004620:	d00a      	beq.n	8004638 <I2C_MasterReceive_BTF+0x86>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2b02      	cmp	r3, #2
 8004626:	d007      	beq.n	8004638 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004636:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691a      	ldr	r2, [r3, #16]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	b2d2      	uxtb	r2, r2
 8004644:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	1c5a      	adds	r2, r3, #1
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004654:	b29b      	uxth	r3, r3
 8004656:	3b01      	subs	r3, #1
 8004658:	b29a      	uxth	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800465e:	e08e      	b.n	800477e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004664:	b29b      	uxth	r3, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d176      	bne.n	8004758 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d002      	beq.n	8004676 <I2C_MasterReceive_BTF+0xc4>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2b10      	cmp	r3, #16
 8004674:	d108      	bne.n	8004688 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	e019      	b.n	80046bc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2b04      	cmp	r3, #4
 800468c:	d002      	beq.n	8004694 <I2C_MasterReceive_BTF+0xe2>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2b02      	cmp	r3, #2
 8004692:	d108      	bne.n	80046a6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	e00a      	b.n	80046bc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2b10      	cmp	r3, #16
 80046aa:	d007      	beq.n	80046bc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ba:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691a      	ldr	r2, [r3, #16]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	b2d2      	uxtb	r2, r2
 80046c8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	1c5a      	adds	r2, r3, #1
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d8:	b29b      	uxth	r3, r3
 80046da:	3b01      	subs	r3, #1
 80046dc:	b29a      	uxth	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	691a      	ldr	r2, [r3, #16]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	b2d2      	uxtb	r2, r2
 80046ee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	1c5a      	adds	r2, r3, #1
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fe:	b29b      	uxth	r3, r3
 8004700:	3b01      	subs	r3, #1
 8004702:	b29a      	uxth	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004716:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2220      	movs	r2, #32
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b40      	cmp	r3, #64	; 0x40
 800472a:	d10a      	bne.n	8004742 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7ff fcb9 	bl	80040b2 <HAL_I2C_MemRxCpltCallback>
}
 8004740:	e01d      	b.n	800477e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2212      	movs	r2, #18
 800474e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7ff fc74 	bl	800403e <HAL_I2C_MasterRxCpltCallback>
}
 8004756:	e012      	b.n	800477e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	691a      	ldr	r2, [r3, #16]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004762:	b2d2      	uxtb	r2, r2
 8004764:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	1c5a      	adds	r2, r3, #1
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004774:	b29b      	uxth	r3, r3
 8004776:	3b01      	subs	r3, #1
 8004778:	b29a      	uxth	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800477e:	bf00      	nop
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004786:	b480      	push	{r7}
 8004788:	b083      	sub	sp, #12
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b40      	cmp	r3, #64	; 0x40
 8004798:	d117      	bne.n	80047ca <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d109      	bne.n	80047b6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	461a      	mov	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047b2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80047b4:	e067      	b.n	8004886 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	f043 0301 	orr.w	r3, r3, #1
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	611a      	str	r2, [r3, #16]
}
 80047c8:	e05d      	b.n	8004886 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047d2:	d133      	bne.n	800483c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b21      	cmp	r3, #33	; 0x21
 80047de:	d109      	bne.n	80047f4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	461a      	mov	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047f0:	611a      	str	r2, [r3, #16]
 80047f2:	e008      	b.n	8004806 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	f043 0301 	orr.w	r3, r3, #1
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800480a:	2b00      	cmp	r3, #0
 800480c:	d004      	beq.n	8004818 <I2C_Master_SB+0x92>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004814:	2b00      	cmp	r3, #0
 8004816:	d108      	bne.n	800482a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481c:	2b00      	cmp	r3, #0
 800481e:	d032      	beq.n	8004886 <I2C_Master_SB+0x100>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004826:	2b00      	cmp	r3, #0
 8004828:	d02d      	beq.n	8004886 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004838:	605a      	str	r2, [r3, #4]
}
 800483a:	e024      	b.n	8004886 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10e      	bne.n	8004862 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004848:	b29b      	uxth	r3, r3
 800484a:	11db      	asrs	r3, r3, #7
 800484c:	b2db      	uxtb	r3, r3
 800484e:	f003 0306 	and.w	r3, r3, #6
 8004852:	b2db      	uxtb	r3, r3
 8004854:	f063 030f 	orn	r3, r3, #15
 8004858:	b2da      	uxtb	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	611a      	str	r2, [r3, #16]
}
 8004860:	e011      	b.n	8004886 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004866:	2b01      	cmp	r3, #1
 8004868:	d10d      	bne.n	8004886 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486e:	b29b      	uxth	r3, r3
 8004870:	11db      	asrs	r3, r3, #7
 8004872:	b2db      	uxtb	r3, r3
 8004874:	f003 0306 	and.w	r3, r3, #6
 8004878:	b2db      	uxtb	r3, r3
 800487a:	f063 030e 	orn	r3, r3, #14
 800487e:	b2da      	uxtb	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	611a      	str	r2, [r3, #16]
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	bc80      	pop	{r7}
 800488e:	4770      	bx	lr

08004890 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489c:	b2da      	uxtb	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d004      	beq.n	80048b6 <I2C_Master_ADD10+0x26>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d108      	bne.n	80048c8 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00c      	beq.n	80048d8 <I2C_Master_ADD10+0x48>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d007      	beq.n	80048d8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048d6:	605a      	str	r2, [r3, #4]
  }
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	bc80      	pop	{r7}
 80048e0:	4770      	bx	lr

080048e2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b091      	sub	sp, #68	; 0x44
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fe:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b22      	cmp	r3, #34	; 0x22
 800490a:	f040 8174 	bne.w	8004bf6 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10f      	bne.n	8004936 <I2C_Master_ADDR+0x54>
 8004916:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800491a:	2b40      	cmp	r3, #64	; 0x40
 800491c:	d10b      	bne.n	8004936 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800491e:	2300      	movs	r3, #0
 8004920:	633b      	str	r3, [r7, #48]	; 0x30
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	695b      	ldr	r3, [r3, #20]
 8004928:	633b      	str	r3, [r7, #48]	; 0x30
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	633b      	str	r3, [r7, #48]	; 0x30
 8004932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004934:	e16b      	b.n	8004c0e <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800493a:	2b00      	cmp	r3, #0
 800493c:	d11d      	bne.n	800497a <I2C_Master_ADDR+0x98>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004946:	d118      	bne.n	800497a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004948:	2300      	movs	r3, #0
 800494a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800495c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800496c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004972:	1c5a      	adds	r2, r3, #1
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	651a      	str	r2, [r3, #80]	; 0x50
 8004978:	e149      	b.n	8004c0e <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800497e:	b29b      	uxth	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	d113      	bne.n	80049ac <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004984:	2300      	movs	r3, #0
 8004986:	62bb      	str	r3, [r7, #40]	; 0x28
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	62bb      	str	r3, [r7, #40]	; 0x28
 8004998:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	e120      	b.n	8004bee <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	f040 808a 	bne.w	8004acc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80049b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049be:	d137      	bne.n	8004a30 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ce:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049de:	d113      	bne.n	8004a08 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ee:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049f0:	2300      	movs	r3, #0
 80049f2:	627b      	str	r3, [r7, #36]	; 0x24
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	627b      	str	r3, [r7, #36]	; 0x24
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	627b      	str	r3, [r7, #36]	; 0x24
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	e0f2      	b.n	8004bee <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a08:	2300      	movs	r3, #0
 8004a0a:	623b      	str	r3, [r7, #32]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	623b      	str	r3, [r7, #32]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	623b      	str	r3, [r7, #32]
 8004a1c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a2c:	601a      	str	r2, [r3, #0]
 8004a2e:	e0de      	b.n	8004bee <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a32:	2b08      	cmp	r3, #8
 8004a34:	d02e      	beq.n	8004a94 <I2C_Master_ADDR+0x1b2>
 8004a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a38:	2b20      	cmp	r3, #32
 8004a3a:	d02b      	beq.n	8004a94 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a3e:	2b12      	cmp	r3, #18
 8004a40:	d102      	bne.n	8004a48 <I2C_Master_ADDR+0x166>
 8004a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d125      	bne.n	8004a94 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4a:	2b04      	cmp	r3, #4
 8004a4c:	d00e      	beq.n	8004a6c <I2C_Master_ADDR+0x18a>
 8004a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d00b      	beq.n	8004a6c <I2C_Master_ADDR+0x18a>
 8004a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a56:	2b10      	cmp	r3, #16
 8004a58:	d008      	beq.n	8004a6c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	e007      	b.n	8004a7c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a7a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	61fb      	str	r3, [r7, #28]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	61fb      	str	r3, [r7, #28]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	61fb      	str	r3, [r7, #28]
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	e0ac      	b.n	8004bee <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aa2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	61bb      	str	r3, [r7, #24]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	61bb      	str	r3, [r7, #24]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	61bb      	str	r3, [r7, #24]
 8004ab8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ac8:	601a      	str	r2, [r3, #0]
 8004aca:	e090      	b.n	8004bee <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d158      	bne.n	8004b88 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad8:	2b04      	cmp	r3, #4
 8004ada:	d021      	beq.n	8004b20 <I2C_Master_ADDR+0x23e>
 8004adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d01e      	beq.n	8004b20 <I2C_Master_ADDR+0x23e>
 8004ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae4:	2b10      	cmp	r3, #16
 8004ae6:	d01b      	beq.n	8004b20 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004af6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004af8:	2300      	movs	r3, #0
 8004afa:	617b      	str	r3, [r7, #20]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	617b      	str	r3, [r7, #20]
 8004b0c:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b1c:	601a      	str	r2, [r3, #0]
 8004b1e:	e012      	b.n	8004b46 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b2e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b30:	2300      	movs	r3, #0
 8004b32:	613b      	str	r3, [r7, #16]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	613b      	str	r3, [r7, #16]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	613b      	str	r3, [r7, #16]
 8004b44:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b54:	d14b      	bne.n	8004bee <I2C_Master_ADDR+0x30c>
 8004b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b5c:	d00b      	beq.n	8004b76 <I2C_Master_ADDR+0x294>
 8004b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d008      	beq.n	8004b76 <I2C_Master_ADDR+0x294>
 8004b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b66:	2b08      	cmp	r3, #8
 8004b68:	d005      	beq.n	8004b76 <I2C_Master_ADDR+0x294>
 8004b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6c:	2b10      	cmp	r3, #16
 8004b6e:	d002      	beq.n	8004b76 <I2C_Master_ADDR+0x294>
 8004b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b72:	2b20      	cmp	r3, #32
 8004b74:	d13b      	bne.n	8004bee <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b84:	605a      	str	r2, [r3, #4]
 8004b86:	e032      	b.n	8004bee <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b96:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ba2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ba6:	d117      	bne.n	8004bd8 <I2C_Master_ADDR+0x2f6>
 8004ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004baa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bae:	d00b      	beq.n	8004bc8 <I2C_Master_ADDR+0x2e6>
 8004bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d008      	beq.n	8004bc8 <I2C_Master_ADDR+0x2e6>
 8004bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	d005      	beq.n	8004bc8 <I2C_Master_ADDR+0x2e6>
 8004bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bbe:	2b10      	cmp	r3, #16
 8004bc0:	d002      	beq.n	8004bc8 <I2C_Master_ADDR+0x2e6>
 8004bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc4:	2b20      	cmp	r3, #32
 8004bc6:	d107      	bne.n	8004bd8 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004bd6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bd8:	2300      	movs	r3, #0
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	60fb      	str	r3, [r7, #12]
 8004bec:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004bf4:	e00b      	b.n	8004c0e <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	60bb      	str	r3, [r7, #8]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	60bb      	str	r3, [r7, #8]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	60bb      	str	r3, [r7, #8]
 8004c0a:	68bb      	ldr	r3, [r7, #8]
}
 8004c0c:	e7ff      	b.n	8004c0e <I2C_Master_ADDR+0x32c>
 8004c0e:	bf00      	nop
 8004c10:	3744      	adds	r7, #68	; 0x44
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bc80      	pop	{r7}
 8004c16:	4770      	bx	lr

08004c18 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c26:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d02b      	beq.n	8004c8a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	781a      	ldrb	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c42:	1c5a      	adds	r2, r3, #1
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d114      	bne.n	8004c8a <I2C_SlaveTransmit_TXE+0x72>
 8004c60:	7bfb      	ldrb	r3, [r7, #15]
 8004c62:	2b29      	cmp	r3, #41	; 0x29
 8004c64:	d111      	bne.n	8004c8a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c74:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2221      	movs	r2, #33	; 0x21
 8004c7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2228      	movs	r2, #40	; 0x28
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f7ff f9e3 	bl	8004050 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004c8a:	bf00      	nop
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d011      	beq.n	8004cc8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	781a      	ldrb	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb4:	1c5a      	adds	r2, r3, #1
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bc80      	pop	{r7}
 8004cd0:	4770      	bx	lr

08004cd2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b084      	sub	sp, #16
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d02c      	beq.n	8004d46 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	691a      	ldr	r2, [r3, #16]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	b2d2      	uxtb	r2, r2
 8004cf8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	1c5a      	adds	r2, r3, #1
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d114      	bne.n	8004d46 <I2C_SlaveReceive_RXNE+0x74>
 8004d1c:	7bfb      	ldrb	r3, [r7, #15]
 8004d1e:	2b2a      	cmp	r3, #42	; 0x2a
 8004d20:	d111      	bne.n	8004d46 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d30:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2222      	movs	r2, #34	; 0x22
 8004d36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2228      	movs	r2, #40	; 0x28
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7ff f98e 	bl	8004062 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004d46:	bf00      	nop
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b083      	sub	sp, #12
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d012      	beq.n	8004d86 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	691a      	ldr	r2, [r3, #16]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6a:	b2d2      	uxtb	r2, r2
 8004d6c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004d86:	bf00      	nop
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bc80      	pop	{r7}
 8004d8e:	4770      	bx	lr

08004d90 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004daa:	2b28      	cmp	r3, #40	; 0x28
 8004dac:	d125      	bne.n	8004dfa <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dbc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d101      	bne.n	8004dcc <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d103      	bne.n	8004dde <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	81bb      	strh	r3, [r7, #12]
 8004ddc:	e002      	b.n	8004de4 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004dec:	89ba      	ldrh	r2, [r7, #12]
 8004dee:	7bfb      	ldrb	r3, [r7, #15]
 8004df0:	4619      	mov	r1, r3
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f7ff f93e 	bl	8004074 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004df8:	e00e      	b.n	8004e18 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	60bb      	str	r3, [r7, #8]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	60bb      	str	r3, [r7, #8]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	60bb      	str	r3, [r7, #8]
 8004e0e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004e18:	bf00      	nop
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e2e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e3e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004e40:	2300      	movs	r3, #0
 8004e42:	60bb      	str	r3, [r7, #8]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	60bb      	str	r3, [r7, #8]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f042 0201 	orr.w	r2, r2, #1
 8004e5a:	601a      	str	r2, [r3, #0]
 8004e5c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e6c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e7c:	d172      	bne.n	8004f64 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004e7e:	7bfb      	ldrb	r3, [r7, #15]
 8004e80:	2b22      	cmp	r3, #34	; 0x22
 8004e82:	d002      	beq.n	8004e8a <I2C_Slave_STOPF+0x6a>
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
 8004e86:	2b2a      	cmp	r3, #42	; 0x2a
 8004e88:	d135      	bne.n	8004ef6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d005      	beq.n	8004eae <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea6:	f043 0204 	orr.w	r2, r3, #4
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ebc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7fe fbb6 	bl	8003634 <HAL_DMA_GetState>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d049      	beq.n	8004f62 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed2:	4a69      	ldr	r2, [pc, #420]	; (8005078 <I2C_Slave_STOPF+0x258>)
 8004ed4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fe fb32 	bl	8003544 <HAL_DMA_Abort_IT>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d03d      	beq.n	8004f62 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ef0:	4610      	mov	r0, r2
 8004ef2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ef4:	e035      	b.n	8004f62 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d005      	beq.n	8004f1a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f12:	f043 0204 	orr.w	r2, r3, #4
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	685a      	ldr	r2, [r3, #4]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f28:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7fe fb80 	bl	8003634 <HAL_DMA_GetState>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d014      	beq.n	8004f64 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f3e:	4a4e      	ldr	r2, [pc, #312]	; (8005078 <I2C_Slave_STOPF+0x258>)
 8004f40:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fe fafc 	bl	8003544 <HAL_DMA_Abort_IT>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d008      	beq.n	8004f64 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f5c:	4610      	mov	r0, r2
 8004f5e:	4798      	blx	r3
 8004f60:	e000      	b.n	8004f64 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f62:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d03e      	beq.n	8004fec <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	f003 0304 	and.w	r3, r3, #4
 8004f78:	2b04      	cmp	r3, #4
 8004f7a:	d112      	bne.n	8004fa2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	691a      	ldr	r2, [r3, #16]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	b2d2      	uxtb	r2, r2
 8004f88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8e:	1c5a      	adds	r2, r3, #1
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	695b      	ldr	r3, [r3, #20]
 8004fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fac:	2b40      	cmp	r3, #64	; 0x40
 8004fae:	d112      	bne.n	8004fd6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	691a      	ldr	r2, [r3, #16]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	b2d2      	uxtb	r2, r2
 8004fbc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	1c5a      	adds	r2, r3, #1
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d005      	beq.n	8004fec <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe4:	f043 0204 	orr.w	r2, r3, #4
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d003      	beq.n	8004ffc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 f8b7 	bl	8005168 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004ffa:	e039      	b.n	8005070 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004ffc:	7bfb      	ldrb	r3, [r7, #15]
 8004ffe:	2b2a      	cmp	r3, #42	; 0x2a
 8005000:	d109      	bne.n	8005016 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2228      	movs	r2, #40	; 0x28
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7ff f826 	bl	8004062 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b28      	cmp	r3, #40	; 0x28
 8005020:	d111      	bne.n	8005046 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a15      	ldr	r2, [pc, #84]	; (800507c <I2C_Slave_STOPF+0x25c>)
 8005026:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2220      	movs	r2, #32
 8005032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f7ff f825 	bl	800408e <HAL_I2C_ListenCpltCallback>
}
 8005044:	e014      	b.n	8005070 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504a:	2b22      	cmp	r3, #34	; 0x22
 800504c:	d002      	beq.n	8005054 <I2C_Slave_STOPF+0x234>
 800504e:	7bfb      	ldrb	r3, [r7, #15]
 8005050:	2b22      	cmp	r3, #34	; 0x22
 8005052:	d10d      	bne.n	8005070 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2220      	movs	r2, #32
 800505e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7fe fff9 	bl	8004062 <HAL_I2C_SlaveRxCpltCallback>
}
 8005070:	bf00      	nop
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	080053cd 	.word	0x080053cd
 800507c:	ffff0000 	.word	0xffff0000

08005080 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800508e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005094:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	2b08      	cmp	r3, #8
 800509a:	d002      	beq.n	80050a2 <I2C_Slave_AF+0x22>
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	2b20      	cmp	r3, #32
 80050a0:	d129      	bne.n	80050f6 <I2C_Slave_AF+0x76>
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
 80050a4:	2b28      	cmp	r3, #40	; 0x28
 80050a6:	d126      	bne.n	80050f6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a2e      	ldr	r2, [pc, #184]	; (8005164 <I2C_Slave_AF+0xe4>)
 80050ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050bc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050c6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2220      	movs	r2, #32
 80050e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f7fe ffcd 	bl	800408e <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80050f4:	e031      	b.n	800515a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80050f6:	7bfb      	ldrb	r3, [r7, #15]
 80050f8:	2b21      	cmp	r3, #33	; 0x21
 80050fa:	d129      	bne.n	8005150 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a19      	ldr	r2, [pc, #100]	; (8005164 <I2C_Slave_AF+0xe4>)
 8005100:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2221      	movs	r2, #33	; 0x21
 8005106:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2220      	movs	r2, #32
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685a      	ldr	r2, [r3, #4]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005126:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005130:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005140:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7fe fd64 	bl	8003c10 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f7fe ff81 	bl	8004050 <HAL_I2C_SlaveTxCpltCallback>
}
 800514e:	e004      	b.n	800515a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005158:	615a      	str	r2, [r3, #20]
}
 800515a:	bf00      	nop
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	ffff0000 	.word	0xffff0000

08005168 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005176:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800517e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005180:	7bbb      	ldrb	r3, [r7, #14]
 8005182:	2b10      	cmp	r3, #16
 8005184:	d002      	beq.n	800518c <I2C_ITError+0x24>
 8005186:	7bbb      	ldrb	r3, [r7, #14]
 8005188:	2b40      	cmp	r3, #64	; 0x40
 800518a:	d10a      	bne.n	80051a2 <I2C_ITError+0x3a>
 800518c:	7bfb      	ldrb	r3, [r7, #15]
 800518e:	2b22      	cmp	r3, #34	; 0x22
 8005190:	d107      	bne.n	80051a2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051a0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80051a2:	7bfb      	ldrb	r3, [r7, #15]
 80051a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80051a8:	2b28      	cmp	r3, #40	; 0x28
 80051aa:	d107      	bne.n	80051bc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2228      	movs	r2, #40	; 0x28
 80051b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80051ba:	e015      	b.n	80051e8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051ca:	d00a      	beq.n	80051e2 <I2C_ITError+0x7a>
 80051cc:	7bfb      	ldrb	r3, [r7, #15]
 80051ce:	2b60      	cmp	r3, #96	; 0x60
 80051d0:	d007      	beq.n	80051e2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2220      	movs	r2, #32
 80051d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051f6:	d162      	bne.n	80052be <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685a      	ldr	r2, [r3, #4]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005206:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800520c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b01      	cmp	r3, #1
 8005214:	d020      	beq.n	8005258 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800521a:	4a6a      	ldr	r2, [pc, #424]	; (80053c4 <I2C_ITError+0x25c>)
 800521c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005222:	4618      	mov	r0, r3
 8005224:	f7fe f98e 	bl	8003544 <HAL_DMA_Abort_IT>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	f000 8089 	beq.w	8005342 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f022 0201 	bic.w	r2, r2, #1
 800523e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2220      	movs	r2, #32
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800524c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005252:	4610      	mov	r0, r2
 8005254:	4798      	blx	r3
 8005256:	e074      	b.n	8005342 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525c:	4a59      	ldr	r2, [pc, #356]	; (80053c4 <I2C_ITError+0x25c>)
 800525e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005264:	4618      	mov	r0, r3
 8005266:	f7fe f96d 	bl	8003544 <HAL_DMA_Abort_IT>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d068      	beq.n	8005342 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527a:	2b40      	cmp	r3, #64	; 0x40
 800527c:	d10b      	bne.n	8005296 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	691a      	ldr	r2, [r3, #16]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005288:	b2d2      	uxtb	r2, r2
 800528a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	1c5a      	adds	r2, r3, #1
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f022 0201 	bic.w	r2, r2, #1
 80052a4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2220      	movs	r2, #32
 80052aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052b8:	4610      	mov	r0, r2
 80052ba:	4798      	blx	r3
 80052bc:	e041      	b.n	8005342 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b60      	cmp	r3, #96	; 0x60
 80052c8:	d125      	bne.n	8005316 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2220      	movs	r2, #32
 80052ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e2:	2b40      	cmp	r3, #64	; 0x40
 80052e4:	d10b      	bne.n	80052fe <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	691a      	ldr	r2, [r3, #16]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f0:	b2d2      	uxtb	r2, r2
 80052f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f8:	1c5a      	adds	r2, r3, #1
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 0201 	bic.w	r2, r2, #1
 800530c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7fe fee1 	bl	80040d6 <HAL_I2C_AbortCpltCallback>
 8005314:	e015      	b.n	8005342 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	695b      	ldr	r3, [r3, #20]
 800531c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005320:	2b40      	cmp	r3, #64	; 0x40
 8005322:	d10b      	bne.n	800533c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	691a      	ldr	r2, [r3, #16]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532e:	b2d2      	uxtb	r2, r2
 8005330:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	1c5a      	adds	r2, r3, #1
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f7fe fec1 	bl	80040c4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005346:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10e      	bne.n	8005370 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005358:	2b00      	cmp	r3, #0
 800535a:	d109      	bne.n	8005370 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005362:	2b00      	cmp	r3, #0
 8005364:	d104      	bne.n	8005370 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800536c:	2b00      	cmp	r3, #0
 800536e:	d007      	beq.n	8005380 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800537e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005386:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538c:	f003 0304 	and.w	r3, r3, #4
 8005390:	2b04      	cmp	r3, #4
 8005392:	d113      	bne.n	80053bc <I2C_ITError+0x254>
 8005394:	7bfb      	ldrb	r3, [r7, #15]
 8005396:	2b28      	cmp	r3, #40	; 0x28
 8005398:	d110      	bne.n	80053bc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a0a      	ldr	r2, [pc, #40]	; (80053c8 <I2C_ITError+0x260>)
 800539e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2220      	movs	r2, #32
 80053aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7fe fe69 	bl	800408e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80053bc:	bf00      	nop
 80053be:	3710      	adds	r7, #16
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	080053cd 	.word	0x080053cd
 80053c8:	ffff0000 	.word	0xffff0000

080053cc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053d4:	2300      	movs	r3, #0
 80053d6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053dc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80053e6:	4b4b      	ldr	r3, [pc, #300]	; (8005514 <I2C_DMAAbort+0x148>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	08db      	lsrs	r3, r3, #3
 80053ec:	4a4a      	ldr	r2, [pc, #296]	; (8005518 <I2C_DMAAbort+0x14c>)
 80053ee:	fba2 2303 	umull	r2, r3, r2, r3
 80053f2:	0a1a      	lsrs	r2, r3, #8
 80053f4:	4613      	mov	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	00da      	lsls	r2, r3, #3
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d106      	bne.n	8005414 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	f043 0220 	orr.w	r2, r3, #32
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005412:	e00a      	b.n	800542a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	3b01      	subs	r3, #1
 8005418:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005428:	d0ea      	beq.n	8005400 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005436:	2200      	movs	r2, #0
 8005438:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005446:	2200      	movs	r2, #0
 8005448:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005458:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	2200      	movs	r2, #0
 800545e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005464:	2b00      	cmp	r3, #0
 8005466:	d003      	beq.n	8005470 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800546c:	2200      	movs	r2, #0
 800546e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005474:	2b00      	cmp	r3, #0
 8005476:	d003      	beq.n	8005480 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547c:	2200      	movs	r2, #0
 800547e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 0201 	bic.w	r2, r2, #1
 800548e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b60      	cmp	r3, #96	; 0x60
 800549a:	d10e      	bne.n	80054ba <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	2220      	movs	r2, #32
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	2200      	movs	r2, #0
 80054b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80054b2:	6978      	ldr	r0, [r7, #20]
 80054b4:	f7fe fe0f 	bl	80040d6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80054b8:	e027      	b.n	800550a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80054ba:	7cfb      	ldrb	r3, [r7, #19]
 80054bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80054c0:	2b28      	cmp	r3, #40	; 0x28
 80054c2:	d117      	bne.n	80054f4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f042 0201 	orr.w	r2, r2, #1
 80054d2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054e2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	2200      	movs	r2, #0
 80054e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	2228      	movs	r2, #40	; 0x28
 80054ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80054f2:	e007      	b.n	8005504 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	2220      	movs	r2, #32
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005504:	6978      	ldr	r0, [r7, #20]
 8005506:	f7fe fddd 	bl	80040c4 <HAL_I2C_ErrorCallback>
}
 800550a:	bf00      	nop
 800550c:	3718      	adds	r7, #24
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	20000000 	.word	0x20000000
 8005518:	14f8b589 	.word	0x14f8b589

0800551c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005524:	2300      	movs	r3, #0
 8005526:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005528:	4b13      	ldr	r3, [pc, #76]	; (8005578 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	08db      	lsrs	r3, r3, #3
 800552e:	4a13      	ldr	r2, [pc, #76]	; (800557c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005530:	fba2 2303 	umull	r2, r3, r2, r3
 8005534:	0a1a      	lsrs	r2, r3, #8
 8005536:	4613      	mov	r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4413      	add	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	3b01      	subs	r3, #1
 8005542:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d107      	bne.n	800555a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554e:	f043 0220 	orr.w	r2, r3, #32
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e008      	b.n	800556c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005568:	d0e9      	beq.n	800553e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3714      	adds	r7, #20
 8005570:	46bd      	mov	sp, r7
 8005572:	bc80      	pop	{r7}
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	20000000 	.word	0x20000000
 800557c:	14f8b589 	.word	0x14f8b589

08005580 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005590:	d103      	bne.n	800559a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005598:	e007      	b.n	80055aa <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80055a2:	d102      	bne.n	80055aa <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2208      	movs	r2, #8
 80055a8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80055aa:	bf00      	nop
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bc80      	pop	{r7}
 80055b2:	4770      	bx	lr

080055b4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80055b4:	b480      	push	{r7}
 80055b6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80055b8:	4b03      	ldr	r3, [pc, #12]	; (80055c8 <HAL_PWR_EnableBkUpAccess+0x14>)
 80055ba:	2201      	movs	r2, #1
 80055bc:	601a      	str	r2, [r3, #0]
}
 80055be:	bf00      	nop
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bc80      	pop	{r7}
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	420e0020 	.word	0x420e0020

080055cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e272      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f000 8087 	beq.w	80056fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80055ec:	4b92      	ldr	r3, [pc, #584]	; (8005838 <HAL_RCC_OscConfig+0x26c>)
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f003 030c 	and.w	r3, r3, #12
 80055f4:	2b04      	cmp	r3, #4
 80055f6:	d00c      	beq.n	8005612 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80055f8:	4b8f      	ldr	r3, [pc, #572]	; (8005838 <HAL_RCC_OscConfig+0x26c>)
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f003 030c 	and.w	r3, r3, #12
 8005600:	2b08      	cmp	r3, #8
 8005602:	d112      	bne.n	800562a <HAL_RCC_OscConfig+0x5e>
 8005604:	4b8c      	ldr	r3, [pc, #560]	; (8005838 <HAL_RCC_OscConfig+0x26c>)
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800560c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005610:	d10b      	bne.n	800562a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005612:	4b89      	ldr	r3, [pc, #548]	; (8005838 <HAL_RCC_OscConfig+0x26c>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d06c      	beq.n	80056f8 <HAL_RCC_OscConfig+0x12c>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d168      	bne.n	80056f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e24c      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005632:	d106      	bne.n	8005642 <HAL_RCC_OscConfig+0x76>
 8005634:	4b80      	ldr	r3, [pc, #512]	; (8005838 <HAL_RCC_OscConfig+0x26c>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a7f      	ldr	r2, [pc, #508]	; (8005838 <HAL_RCC_OscConfig+0x26c>)
 800563a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800563e:	6013      	str	r3, [r2, #0]
 8005640:	e02e      	b.n	80056a0 <HAL_RCC_OscConfig+0xd4>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10c      	bne.n	8005664 <HAL_RCC_OscConfig+0x98>
 800564a:	4b7b      	ldr	r3, [pc, #492]	; (8005838 <HAL_RCC_OscConfig+0x26c>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a7a      	ldr	r2, [pc, #488]	; (8005838 <HAL_RCC_OscConfig+0x26c>)
 8005650:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005654:	6013      	str	r3, [r2, #0]
 8005656:	4b78      	ldr	r3, [pc, #480]	; (8005838 <HAL_RCC_OscConfig+0x26c>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a77      	ldr	r2, [pc, #476]	; (8005838 <HAL_RCC_OscConfig+0x26c>)
 800565c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005660:	6013      	str	r3, [r2, #0]
 8005662:	e01d      	b.n	80056a0 <HAL_RCC_OscConfig+0xd4>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800566c:	d10c      	bne.n	8005688 <HAL_RCC_OscConfig+0xbc>
 800566e:	4b72      	ldr	r3, [pc, #456]	; (8005838 <HAL_RCC_OscConfig+0x26c>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a71      	ldr	r2, [pc, #452]	; (8005838 <HAL_RCC_OscConfig+0x26c>)
 8005674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005678:	6013      	str	r3, [r2, #0]
 800567a:	4b6f      	ldr	r3, [pc, #444]	; (8005838 <HAL_RCC_OscConfig+0x26c>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a6e      	ldr	r2, [pc, #440]	; (8005838 <HAL_RCC_OscConfig+0x26c>)
 8005680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005684:	6013      	str	r3, [r2, #0]
 8005686:	e00b      	b.n	80056a0 <HAL_RCC_OscConfig+0xd4>
 8005688:	4b6b      	ldr	r3, [pc, #428]	; (8005838 <HAL_RCC_OscConfig+0x26c>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a6a      	ldr	r2, [pc, #424]	; (8005838 <HAL_RCC_OscConfig+0x26c>)
 800568e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005692:	6013      	str	r3, [r2, #0]
 8005694:	4b68      	ldr	r3, [pc, #416]	; (8005838 <HAL_RCC_OscConfig+0x26c>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a67      	ldr	r2, [pc, #412]	; (8005838 <HAL_RCC_OscConfig+0x26c>)
 800569a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800569e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d013      	beq.n	80056d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a8:	f7fd f9b8 	bl	8002a1c <HAL_GetTick>
 80056ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ae:	e008      	b.n	80056c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056b0:	f7fd f9b4 	bl	8002a1c <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b64      	cmp	r3, #100	; 0x64
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e200      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056c2:	4b5d      	ldr	r3, [pc, #372]	; (8005838 <HAL_RCC_OscConfig+0x26c>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d0f0      	beq.n	80056b0 <HAL_RCC_OscConfig+0xe4>
 80056ce:	e014      	b.n	80056fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d0:	f7fd f9a4 	bl	8002a1c <HAL_GetTick>
 80056d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056d6:	e008      	b.n	80056ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056d8:	f7fd f9a0 	bl	8002a1c <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b64      	cmp	r3, #100	; 0x64
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e1ec      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056ea:	4b53      	ldr	r3, [pc, #332]	; (8005838 <HAL_RCC_OscConfig+0x26c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1f0      	bne.n	80056d8 <HAL_RCC_OscConfig+0x10c>
 80056f6:	e000      	b.n	80056fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0302 	and.w	r3, r3, #2
 8005702:	2b00      	cmp	r3, #0
 8005704:	d063      	beq.n	80057ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005706:	4b4c      	ldr	r3, [pc, #304]	; (8005838 <HAL_RCC_OscConfig+0x26c>)
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f003 030c 	and.w	r3, r3, #12
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00b      	beq.n	800572a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005712:	4b49      	ldr	r3, [pc, #292]	; (8005838 <HAL_RCC_OscConfig+0x26c>)
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f003 030c 	and.w	r3, r3, #12
 800571a:	2b08      	cmp	r3, #8
 800571c:	d11c      	bne.n	8005758 <HAL_RCC_OscConfig+0x18c>
 800571e:	4b46      	ldr	r3, [pc, #280]	; (8005838 <HAL_RCC_OscConfig+0x26c>)
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d116      	bne.n	8005758 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800572a:	4b43      	ldr	r3, [pc, #268]	; (8005838 <HAL_RCC_OscConfig+0x26c>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d005      	beq.n	8005742 <HAL_RCC_OscConfig+0x176>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d001      	beq.n	8005742 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e1c0      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005742:	4b3d      	ldr	r3, [pc, #244]	; (8005838 <HAL_RCC_OscConfig+0x26c>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	4939      	ldr	r1, [pc, #228]	; (8005838 <HAL_RCC_OscConfig+0x26c>)
 8005752:	4313      	orrs	r3, r2
 8005754:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005756:	e03a      	b.n	80057ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d020      	beq.n	80057a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005760:	4b36      	ldr	r3, [pc, #216]	; (800583c <HAL_RCC_OscConfig+0x270>)
 8005762:	2201      	movs	r2, #1
 8005764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005766:	f7fd f959 	bl	8002a1c <HAL_GetTick>
 800576a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800576c:	e008      	b.n	8005780 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800576e:	f7fd f955 	bl	8002a1c <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d901      	bls.n	8005780 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e1a1      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005780:	4b2d      	ldr	r3, [pc, #180]	; (8005838 <HAL_RCC_OscConfig+0x26c>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d0f0      	beq.n	800576e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800578c:	4b2a      	ldr	r3, [pc, #168]	; (8005838 <HAL_RCC_OscConfig+0x26c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	00db      	lsls	r3, r3, #3
 800579a:	4927      	ldr	r1, [pc, #156]	; (8005838 <HAL_RCC_OscConfig+0x26c>)
 800579c:	4313      	orrs	r3, r2
 800579e:	600b      	str	r3, [r1, #0]
 80057a0:	e015      	b.n	80057ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057a2:	4b26      	ldr	r3, [pc, #152]	; (800583c <HAL_RCC_OscConfig+0x270>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a8:	f7fd f938 	bl	8002a1c <HAL_GetTick>
 80057ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057ae:	e008      	b.n	80057c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057b0:	f7fd f934 	bl	8002a1c <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e180      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057c2:	4b1d      	ldr	r3, [pc, #116]	; (8005838 <HAL_RCC_OscConfig+0x26c>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1f0      	bne.n	80057b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0308 	and.w	r3, r3, #8
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d03a      	beq.n	8005850 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d019      	beq.n	8005816 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057e2:	4b17      	ldr	r3, [pc, #92]	; (8005840 <HAL_RCC_OscConfig+0x274>)
 80057e4:	2201      	movs	r2, #1
 80057e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057e8:	f7fd f918 	bl	8002a1c <HAL_GetTick>
 80057ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057ee:	e008      	b.n	8005802 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057f0:	f7fd f914 	bl	8002a1c <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e160      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005802:	4b0d      	ldr	r3, [pc, #52]	; (8005838 <HAL_RCC_OscConfig+0x26c>)
 8005804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d0f0      	beq.n	80057f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800580e:	2001      	movs	r0, #1
 8005810:	f000 face 	bl	8005db0 <RCC_Delay>
 8005814:	e01c      	b.n	8005850 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005816:	4b0a      	ldr	r3, [pc, #40]	; (8005840 <HAL_RCC_OscConfig+0x274>)
 8005818:	2200      	movs	r2, #0
 800581a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800581c:	f7fd f8fe 	bl	8002a1c <HAL_GetTick>
 8005820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005822:	e00f      	b.n	8005844 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005824:	f7fd f8fa 	bl	8002a1c <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b02      	cmp	r3, #2
 8005830:	d908      	bls.n	8005844 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e146      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4f8>
 8005836:	bf00      	nop
 8005838:	40021000 	.word	0x40021000
 800583c:	42420000 	.word	0x42420000
 8005840:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005844:	4b92      	ldr	r3, [pc, #584]	; (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 8005846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1e9      	bne.n	8005824 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0304 	and.w	r3, r3, #4
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 80a6 	beq.w	80059aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800585e:	2300      	movs	r3, #0
 8005860:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005862:	4b8b      	ldr	r3, [pc, #556]	; (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10d      	bne.n	800588a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800586e:	4b88      	ldr	r3, [pc, #544]	; (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 8005870:	69db      	ldr	r3, [r3, #28]
 8005872:	4a87      	ldr	r2, [pc, #540]	; (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 8005874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005878:	61d3      	str	r3, [r2, #28]
 800587a:	4b85      	ldr	r3, [pc, #532]	; (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 800587c:	69db      	ldr	r3, [r3, #28]
 800587e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005882:	60bb      	str	r3, [r7, #8]
 8005884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005886:	2301      	movs	r3, #1
 8005888:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800588a:	4b82      	ldr	r3, [pc, #520]	; (8005a94 <HAL_RCC_OscConfig+0x4c8>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005892:	2b00      	cmp	r3, #0
 8005894:	d118      	bne.n	80058c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005896:	4b7f      	ldr	r3, [pc, #508]	; (8005a94 <HAL_RCC_OscConfig+0x4c8>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a7e      	ldr	r2, [pc, #504]	; (8005a94 <HAL_RCC_OscConfig+0x4c8>)
 800589c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058a2:	f7fd f8bb 	bl	8002a1c <HAL_GetTick>
 80058a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058a8:	e008      	b.n	80058bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058aa:	f7fd f8b7 	bl	8002a1c <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	2b64      	cmp	r3, #100	; 0x64
 80058b6:	d901      	bls.n	80058bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e103      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058bc:	4b75      	ldr	r3, [pc, #468]	; (8005a94 <HAL_RCC_OscConfig+0x4c8>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d0f0      	beq.n	80058aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d106      	bne.n	80058de <HAL_RCC_OscConfig+0x312>
 80058d0:	4b6f      	ldr	r3, [pc, #444]	; (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 80058d2:	6a1b      	ldr	r3, [r3, #32]
 80058d4:	4a6e      	ldr	r2, [pc, #440]	; (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 80058d6:	f043 0301 	orr.w	r3, r3, #1
 80058da:	6213      	str	r3, [r2, #32]
 80058dc:	e02d      	b.n	800593a <HAL_RCC_OscConfig+0x36e>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10c      	bne.n	8005900 <HAL_RCC_OscConfig+0x334>
 80058e6:	4b6a      	ldr	r3, [pc, #424]	; (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	4a69      	ldr	r2, [pc, #420]	; (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 80058ec:	f023 0301 	bic.w	r3, r3, #1
 80058f0:	6213      	str	r3, [r2, #32]
 80058f2:	4b67      	ldr	r3, [pc, #412]	; (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	4a66      	ldr	r2, [pc, #408]	; (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 80058f8:	f023 0304 	bic.w	r3, r3, #4
 80058fc:	6213      	str	r3, [r2, #32]
 80058fe:	e01c      	b.n	800593a <HAL_RCC_OscConfig+0x36e>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	2b05      	cmp	r3, #5
 8005906:	d10c      	bne.n	8005922 <HAL_RCC_OscConfig+0x356>
 8005908:	4b61      	ldr	r3, [pc, #388]	; (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 800590a:	6a1b      	ldr	r3, [r3, #32]
 800590c:	4a60      	ldr	r2, [pc, #384]	; (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 800590e:	f043 0304 	orr.w	r3, r3, #4
 8005912:	6213      	str	r3, [r2, #32]
 8005914:	4b5e      	ldr	r3, [pc, #376]	; (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 8005916:	6a1b      	ldr	r3, [r3, #32]
 8005918:	4a5d      	ldr	r2, [pc, #372]	; (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 800591a:	f043 0301 	orr.w	r3, r3, #1
 800591e:	6213      	str	r3, [r2, #32]
 8005920:	e00b      	b.n	800593a <HAL_RCC_OscConfig+0x36e>
 8005922:	4b5b      	ldr	r3, [pc, #364]	; (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	4a5a      	ldr	r2, [pc, #360]	; (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 8005928:	f023 0301 	bic.w	r3, r3, #1
 800592c:	6213      	str	r3, [r2, #32]
 800592e:	4b58      	ldr	r3, [pc, #352]	; (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	4a57      	ldr	r2, [pc, #348]	; (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 8005934:	f023 0304 	bic.w	r3, r3, #4
 8005938:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d015      	beq.n	800596e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005942:	f7fd f86b 	bl	8002a1c <HAL_GetTick>
 8005946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005948:	e00a      	b.n	8005960 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800594a:	f7fd f867 	bl	8002a1c <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	f241 3288 	movw	r2, #5000	; 0x1388
 8005958:	4293      	cmp	r3, r2
 800595a:	d901      	bls.n	8005960 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e0b1      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005960:	4b4b      	ldr	r3, [pc, #300]	; (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	2b00      	cmp	r3, #0
 800596a:	d0ee      	beq.n	800594a <HAL_RCC_OscConfig+0x37e>
 800596c:	e014      	b.n	8005998 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800596e:	f7fd f855 	bl	8002a1c <HAL_GetTick>
 8005972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005974:	e00a      	b.n	800598c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005976:	f7fd f851 	bl	8002a1c <HAL_GetTick>
 800597a:	4602      	mov	r2, r0
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	f241 3288 	movw	r2, #5000	; 0x1388
 8005984:	4293      	cmp	r3, r2
 8005986:	d901      	bls.n	800598c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e09b      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800598c:	4b40      	ldr	r3, [pc, #256]	; (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 800598e:	6a1b      	ldr	r3, [r3, #32]
 8005990:	f003 0302 	and.w	r3, r3, #2
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1ee      	bne.n	8005976 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005998:	7dfb      	ldrb	r3, [r7, #23]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d105      	bne.n	80059aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800599e:	4b3c      	ldr	r3, [pc, #240]	; (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	4a3b      	ldr	r2, [pc, #236]	; (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 80059a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f000 8087 	beq.w	8005ac2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059b4:	4b36      	ldr	r3, [pc, #216]	; (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f003 030c 	and.w	r3, r3, #12
 80059bc:	2b08      	cmp	r3, #8
 80059be:	d061      	beq.n	8005a84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	69db      	ldr	r3, [r3, #28]
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d146      	bne.n	8005a56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059c8:	4b33      	ldr	r3, [pc, #204]	; (8005a98 <HAL_RCC_OscConfig+0x4cc>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059ce:	f7fd f825 	bl	8002a1c <HAL_GetTick>
 80059d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059d4:	e008      	b.n	80059e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059d6:	f7fd f821 	bl	8002a1c <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d901      	bls.n	80059e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e06d      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059e8:	4b29      	ldr	r3, [pc, #164]	; (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1f0      	bne.n	80059d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059fc:	d108      	bne.n	8005a10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80059fe:	4b24      	ldr	r3, [pc, #144]	; (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	4921      	ldr	r1, [pc, #132]	; (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a10:	4b1f      	ldr	r3, [pc, #124]	; (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a19      	ldr	r1, [r3, #32]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a20:	430b      	orrs	r3, r1
 8005a22:	491b      	ldr	r1, [pc, #108]	; (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a28:	4b1b      	ldr	r3, [pc, #108]	; (8005a98 <HAL_RCC_OscConfig+0x4cc>)
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a2e:	f7fc fff5 	bl	8002a1c <HAL_GetTick>
 8005a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a34:	e008      	b.n	8005a48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a36:	f7fc fff1 	bl	8002a1c <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d901      	bls.n	8005a48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e03d      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a48:	4b11      	ldr	r3, [pc, #68]	; (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d0f0      	beq.n	8005a36 <HAL_RCC_OscConfig+0x46a>
 8005a54:	e035      	b.n	8005ac2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a56:	4b10      	ldr	r3, [pc, #64]	; (8005a98 <HAL_RCC_OscConfig+0x4cc>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a5c:	f7fc ffde 	bl	8002a1c <HAL_GetTick>
 8005a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a62:	e008      	b.n	8005a76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a64:	f7fc ffda 	bl	8002a1c <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d901      	bls.n	8005a76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e026      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a76:	4b06      	ldr	r3, [pc, #24]	; (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1f0      	bne.n	8005a64 <HAL_RCC_OscConfig+0x498>
 8005a82:	e01e      	b.n	8005ac2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	69db      	ldr	r3, [r3, #28]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d107      	bne.n	8005a9c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e019      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4f8>
 8005a90:	40021000 	.word	0x40021000
 8005a94:	40007000 	.word	0x40007000
 8005a98:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005a9c:	4b0b      	ldr	r3, [pc, #44]	; (8005acc <HAL_RCC_OscConfig+0x500>)
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d106      	bne.n	8005abe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d001      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e000      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3718      	adds	r7, #24
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	40021000 	.word	0x40021000

08005ad0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e0d0      	b.n	8005c86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ae4:	4b6a      	ldr	r3, [pc, #424]	; (8005c90 <HAL_RCC_ClockConfig+0x1c0>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0307 	and.w	r3, r3, #7
 8005aec:	683a      	ldr	r2, [r7, #0]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d910      	bls.n	8005b14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005af2:	4b67      	ldr	r3, [pc, #412]	; (8005c90 <HAL_RCC_ClockConfig+0x1c0>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f023 0207 	bic.w	r2, r3, #7
 8005afa:	4965      	ldr	r1, [pc, #404]	; (8005c90 <HAL_RCC_ClockConfig+0x1c0>)
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b02:	4b63      	ldr	r3, [pc, #396]	; (8005c90 <HAL_RCC_ClockConfig+0x1c0>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0307 	and.w	r3, r3, #7
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d001      	beq.n	8005b14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e0b8      	b.n	8005c86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0302 	and.w	r3, r3, #2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d020      	beq.n	8005b62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0304 	and.w	r3, r3, #4
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d005      	beq.n	8005b38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b2c:	4b59      	ldr	r3, [pc, #356]	; (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	4a58      	ldr	r2, [pc, #352]	; (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005b32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005b36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0308 	and.w	r3, r3, #8
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d005      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b44:	4b53      	ldr	r3, [pc, #332]	; (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	4a52      	ldr	r2, [pc, #328]	; (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005b4a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005b4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b50:	4b50      	ldr	r3, [pc, #320]	; (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	494d      	ldr	r1, [pc, #308]	; (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d040      	beq.n	8005bf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d107      	bne.n	8005b86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b76:	4b47      	ldr	r3, [pc, #284]	; (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d115      	bne.n	8005bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e07f      	b.n	8005c86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d107      	bne.n	8005b9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b8e:	4b41      	ldr	r3, [pc, #260]	; (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d109      	bne.n	8005bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e073      	b.n	8005c86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b9e:	4b3d      	ldr	r3, [pc, #244]	; (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0302 	and.w	r3, r3, #2
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e06b      	b.n	8005c86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bae:	4b39      	ldr	r3, [pc, #228]	; (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f023 0203 	bic.w	r2, r3, #3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	4936      	ldr	r1, [pc, #216]	; (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005bc0:	f7fc ff2c 	bl	8002a1c <HAL_GetTick>
 8005bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bc6:	e00a      	b.n	8005bde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bc8:	f7fc ff28 	bl	8002a1c <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d901      	bls.n	8005bde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e053      	b.n	8005c86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bde:	4b2d      	ldr	r3, [pc, #180]	; (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f003 020c 	and.w	r2, r3, #12
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d1eb      	bne.n	8005bc8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bf0:	4b27      	ldr	r3, [pc, #156]	; (8005c90 <HAL_RCC_ClockConfig+0x1c0>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0307 	and.w	r3, r3, #7
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d210      	bcs.n	8005c20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bfe:	4b24      	ldr	r3, [pc, #144]	; (8005c90 <HAL_RCC_ClockConfig+0x1c0>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f023 0207 	bic.w	r2, r3, #7
 8005c06:	4922      	ldr	r1, [pc, #136]	; (8005c90 <HAL_RCC_ClockConfig+0x1c0>)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c0e:	4b20      	ldr	r3, [pc, #128]	; (8005c90 <HAL_RCC_ClockConfig+0x1c0>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0307 	and.w	r3, r3, #7
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d001      	beq.n	8005c20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e032      	b.n	8005c86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0304 	and.w	r3, r3, #4
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d008      	beq.n	8005c3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c2c:	4b19      	ldr	r3, [pc, #100]	; (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	4916      	ldr	r1, [pc, #88]	; (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0308 	and.w	r3, r3, #8
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d009      	beq.n	8005c5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c4a:	4b12      	ldr	r3, [pc, #72]	; (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	00db      	lsls	r3, r3, #3
 8005c58:	490e      	ldr	r1, [pc, #56]	; (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c5e:	f000 f821 	bl	8005ca4 <HAL_RCC_GetSysClockFreq>
 8005c62:	4602      	mov	r2, r0
 8005c64:	4b0b      	ldr	r3, [pc, #44]	; (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	091b      	lsrs	r3, r3, #4
 8005c6a:	f003 030f 	and.w	r3, r3, #15
 8005c6e:	490a      	ldr	r1, [pc, #40]	; (8005c98 <HAL_RCC_ClockConfig+0x1c8>)
 8005c70:	5ccb      	ldrb	r3, [r1, r3]
 8005c72:	fa22 f303 	lsr.w	r3, r2, r3
 8005c76:	4a09      	ldr	r2, [pc, #36]	; (8005c9c <HAL_RCC_ClockConfig+0x1cc>)
 8005c78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005c7a:	4b09      	ldr	r3, [pc, #36]	; (8005ca0 <HAL_RCC_ClockConfig+0x1d0>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7fc fe8a 	bl	8002998 <HAL_InitTick>

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	40022000 	.word	0x40022000
 8005c94:	40021000 	.word	0x40021000
 8005c98:	0800a8e4 	.word	0x0800a8e4
 8005c9c:	20000000 	.word	0x20000000
 8005ca0:	20000014 	.word	0x20000014

08005ca4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005caa:	2300      	movs	r3, #0
 8005cac:	60fb      	str	r3, [r7, #12]
 8005cae:	2300      	movs	r3, #0
 8005cb0:	60bb      	str	r3, [r7, #8]
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	617b      	str	r3, [r7, #20]
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005cbe:	4b1e      	ldr	r3, [pc, #120]	; (8005d38 <HAL_RCC_GetSysClockFreq+0x94>)
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f003 030c 	and.w	r3, r3, #12
 8005cca:	2b04      	cmp	r3, #4
 8005ccc:	d002      	beq.n	8005cd4 <HAL_RCC_GetSysClockFreq+0x30>
 8005cce:	2b08      	cmp	r3, #8
 8005cd0:	d003      	beq.n	8005cda <HAL_RCC_GetSysClockFreq+0x36>
 8005cd2:	e027      	b.n	8005d24 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005cd4:	4b19      	ldr	r3, [pc, #100]	; (8005d3c <HAL_RCC_GetSysClockFreq+0x98>)
 8005cd6:	613b      	str	r3, [r7, #16]
      break;
 8005cd8:	e027      	b.n	8005d2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	0c9b      	lsrs	r3, r3, #18
 8005cde:	f003 030f 	and.w	r3, r3, #15
 8005ce2:	4a17      	ldr	r2, [pc, #92]	; (8005d40 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005ce4:	5cd3      	ldrb	r3, [r2, r3]
 8005ce6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d010      	beq.n	8005d14 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005cf2:	4b11      	ldr	r3, [pc, #68]	; (8005d38 <HAL_RCC_GetSysClockFreq+0x94>)
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	0c5b      	lsrs	r3, r3, #17
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	4a11      	ldr	r2, [pc, #68]	; (8005d44 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005cfe:	5cd3      	ldrb	r3, [r2, r3]
 8005d00:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a0d      	ldr	r2, [pc, #52]	; (8005d3c <HAL_RCC_GetSysClockFreq+0x98>)
 8005d06:	fb03 f202 	mul.w	r2, r3, r2
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d10:	617b      	str	r3, [r7, #20]
 8005d12:	e004      	b.n	8005d1e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a0c      	ldr	r2, [pc, #48]	; (8005d48 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005d18:	fb02 f303 	mul.w	r3, r2, r3
 8005d1c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	613b      	str	r3, [r7, #16]
      break;
 8005d22:	e002      	b.n	8005d2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005d24:	4b05      	ldr	r3, [pc, #20]	; (8005d3c <HAL_RCC_GetSysClockFreq+0x98>)
 8005d26:	613b      	str	r3, [r7, #16]
      break;
 8005d28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d2a:	693b      	ldr	r3, [r7, #16]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	371c      	adds	r7, #28
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bc80      	pop	{r7}
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	40021000 	.word	0x40021000
 8005d3c:	007a1200 	.word	0x007a1200
 8005d40:	0800bdc4 	.word	0x0800bdc4
 8005d44:	0800bdd4 	.word	0x0800bdd4
 8005d48:	003d0900 	.word	0x003d0900

08005d4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d50:	4b02      	ldr	r3, [pc, #8]	; (8005d5c <HAL_RCC_GetHCLKFreq+0x10>)
 8005d52:	681b      	ldr	r3, [r3, #0]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bc80      	pop	{r7}
 8005d5a:	4770      	bx	lr
 8005d5c:	20000000 	.word	0x20000000

08005d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d64:	f7ff fff2 	bl	8005d4c <HAL_RCC_GetHCLKFreq>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	4b05      	ldr	r3, [pc, #20]	; (8005d80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	0a1b      	lsrs	r3, r3, #8
 8005d70:	f003 0307 	and.w	r3, r3, #7
 8005d74:	4903      	ldr	r1, [pc, #12]	; (8005d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d76:	5ccb      	ldrb	r3, [r1, r3]
 8005d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	40021000 	.word	0x40021000
 8005d84:	0800a8f4 	.word	0x0800a8f4

08005d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005d8c:	f7ff ffde 	bl	8005d4c <HAL_RCC_GetHCLKFreq>
 8005d90:	4602      	mov	r2, r0
 8005d92:	4b05      	ldr	r3, [pc, #20]	; (8005da8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	0adb      	lsrs	r3, r3, #11
 8005d98:	f003 0307 	and.w	r3, r3, #7
 8005d9c:	4903      	ldr	r1, [pc, #12]	; (8005dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d9e:	5ccb      	ldrb	r3, [r1, r3]
 8005da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	40021000 	.word	0x40021000
 8005dac:	0800a8f4 	.word	0x0800a8f4

08005db0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005db8:	4b0a      	ldr	r3, [pc, #40]	; (8005de4 <RCC_Delay+0x34>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a0a      	ldr	r2, [pc, #40]	; (8005de8 <RCC_Delay+0x38>)
 8005dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc2:	0a5b      	lsrs	r3, r3, #9
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	fb02 f303 	mul.w	r3, r2, r3
 8005dca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005dcc:	bf00      	nop
  }
  while (Delay --);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	1e5a      	subs	r2, r3, #1
 8005dd2:	60fa      	str	r2, [r7, #12]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1f9      	bne.n	8005dcc <RCC_Delay+0x1c>
}
 8005dd8:	bf00      	nop
 8005dda:	bf00      	nop
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bc80      	pop	{r7}
 8005de2:	4770      	bx	lr
 8005de4:	20000000 	.word	0x20000000
 8005de8:	10624dd3 	.word	0x10624dd3

08005dec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005df4:	2300      	movs	r3, #0
 8005df6:	613b      	str	r3, [r7, #16]
 8005df8:	2300      	movs	r3, #0
 8005dfa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d07d      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e0c:	4b4f      	ldr	r3, [pc, #316]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e0e:	69db      	ldr	r3, [r3, #28]
 8005e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10d      	bne.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e18:	4b4c      	ldr	r3, [pc, #304]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e1a:	69db      	ldr	r3, [r3, #28]
 8005e1c:	4a4b      	ldr	r2, [pc, #300]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e22:	61d3      	str	r3, [r2, #28]
 8005e24:	4b49      	ldr	r3, [pc, #292]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e26:	69db      	ldr	r3, [r3, #28]
 8005e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e2c:	60bb      	str	r3, [r7, #8]
 8005e2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e30:	2301      	movs	r3, #1
 8005e32:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e34:	4b46      	ldr	r3, [pc, #280]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d118      	bne.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e40:	4b43      	ldr	r3, [pc, #268]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a42      	ldr	r2, [pc, #264]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e4c:	f7fc fde6 	bl	8002a1c <HAL_GetTick>
 8005e50:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e52:	e008      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e54:	f7fc fde2 	bl	8002a1c <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	2b64      	cmp	r3, #100	; 0x64
 8005e60:	d901      	bls.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e06d      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e66:	4b3a      	ldr	r3, [pc, #232]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d0f0      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e72:	4b36      	ldr	r3, [pc, #216]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e7a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d02e      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d027      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e90:	4b2e      	ldr	r3, [pc, #184]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e92:	6a1b      	ldr	r3, [r3, #32]
 8005e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e98:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e9a:	4b2e      	ldr	r3, [pc, #184]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ea0:	4b2c      	ldr	r3, [pc, #176]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005ea6:	4a29      	ldr	r2, [pc, #164]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f003 0301 	and.w	r3, r3, #1
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d014      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eb6:	f7fc fdb1 	bl	8002a1c <HAL_GetTick>
 8005eba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ebc:	e00a      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ebe:	f7fc fdad 	bl	8002a1c <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d901      	bls.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e036      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ed4:	4b1d      	ldr	r3, [pc, #116]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ed6:	6a1b      	ldr	r3, [r3, #32]
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d0ee      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ee0:	4b1a      	ldr	r3, [pc, #104]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	4917      	ldr	r1, [pc, #92]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ef2:	7dfb      	ldrb	r3, [r7, #23]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d105      	bne.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ef8:	4b14      	ldr	r3, [pc, #80]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005efa:	69db      	ldr	r3, [r3, #28]
 8005efc:	4a13      	ldr	r2, [pc, #76]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005efe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f02:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0302 	and.w	r3, r3, #2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d008      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f10:	4b0e      	ldr	r3, [pc, #56]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	490b      	ldr	r1, [pc, #44]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0310 	and.w	r3, r3, #16
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d008      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f2e:	4b07      	ldr	r3, [pc, #28]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	4904      	ldr	r1, [pc, #16]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3718      	adds	r7, #24
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	40021000 	.word	0x40021000
 8005f50:	40007000 	.word	0x40007000
 8005f54:	42420440 	.word	0x42420440

08005f58 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b088      	sub	sp, #32
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005f60:	2300      	movs	r3, #0
 8005f62:	617b      	str	r3, [r7, #20]
 8005f64:	2300      	movs	r3, #0
 8005f66:	61fb      	str	r3, [r7, #28]
 8005f68:	2300      	movs	r3, #0
 8005f6a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	2300      	movs	r3, #0
 8005f72:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b10      	cmp	r3, #16
 8005f78:	d00a      	beq.n	8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2b10      	cmp	r3, #16
 8005f7e:	f200 808a 	bhi.w	8006096 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d045      	beq.n	8006014 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d075      	beq.n	800607a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005f8e:	e082      	b.n	8006096 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005f90:	4b46      	ldr	r3, [pc, #280]	; (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005f96:	4b45      	ldr	r3, [pc, #276]	; (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d07b      	beq.n	800609a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	0c9b      	lsrs	r3, r3, #18
 8005fa6:	f003 030f 	and.w	r3, r3, #15
 8005faa:	4a41      	ldr	r2, [pc, #260]	; (80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005fac:	5cd3      	ldrb	r3, [r2, r3]
 8005fae:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d015      	beq.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005fba:	4b3c      	ldr	r3, [pc, #240]	; (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	0c5b      	lsrs	r3, r3, #17
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	4a3b      	ldr	r2, [pc, #236]	; (80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005fc6:	5cd3      	ldrb	r3, [r2, r3]
 8005fc8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00d      	beq.n	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005fd4:	4a38      	ldr	r2, [pc, #224]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	fb02 f303 	mul.w	r3, r2, r3
 8005fe2:	61fb      	str	r3, [r7, #28]
 8005fe4:	e004      	b.n	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	4a34      	ldr	r2, [pc, #208]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005fea:	fb02 f303 	mul.w	r3, r2, r3
 8005fee:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005ff0:	4b2e      	ldr	r3, [pc, #184]	; (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ff8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ffc:	d102      	bne.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	61bb      	str	r3, [r7, #24]
      break;
 8006002:	e04a      	b.n	800609a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	005b      	lsls	r3, r3, #1
 8006008:	4a2d      	ldr	r2, [pc, #180]	; (80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800600a:	fba2 2303 	umull	r2, r3, r2, r3
 800600e:	085b      	lsrs	r3, r3, #1
 8006010:	61bb      	str	r3, [r7, #24]
      break;
 8006012:	e042      	b.n	800609a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8006014:	4b25      	ldr	r3, [pc, #148]	; (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006016:	6a1b      	ldr	r3, [r3, #32]
 8006018:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006024:	d108      	bne.n	8006038 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f003 0302 	and.w	r3, r3, #2
 800602c:	2b00      	cmp	r3, #0
 800602e:	d003      	beq.n	8006038 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8006030:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006034:	61bb      	str	r3, [r7, #24]
 8006036:	e01f      	b.n	8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800603e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006042:	d109      	bne.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8006044:	4b19      	ldr	r3, [pc, #100]	; (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006048:	f003 0302 	and.w	r3, r3, #2
 800604c:	2b00      	cmp	r3, #0
 800604e:	d003      	beq.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8006050:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006054:	61bb      	str	r3, [r7, #24]
 8006056:	e00f      	b.n	8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800605e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006062:	d11c      	bne.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006064:	4b11      	ldr	r3, [pc, #68]	; (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d016      	beq.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8006070:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006074:	61bb      	str	r3, [r7, #24]
      break;
 8006076:	e012      	b.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006078:	e011      	b.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800607a:	f7ff fe85 	bl	8005d88 <HAL_RCC_GetPCLK2Freq>
 800607e:	4602      	mov	r2, r0
 8006080:	4b0a      	ldr	r3, [pc, #40]	; (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	0b9b      	lsrs	r3, r3, #14
 8006086:	f003 0303 	and.w	r3, r3, #3
 800608a:	3301      	adds	r3, #1
 800608c:	005b      	lsls	r3, r3, #1
 800608e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006092:	61bb      	str	r3, [r7, #24]
      break;
 8006094:	e004      	b.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006096:	bf00      	nop
 8006098:	e002      	b.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800609a:	bf00      	nop
 800609c:	e000      	b.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800609e:	bf00      	nop
    }
  }
  return (frequency);
 80060a0:	69bb      	ldr	r3, [r7, #24]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3720      	adds	r7, #32
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	40021000 	.word	0x40021000
 80060b0:	0800bdd8 	.word	0x0800bdd8
 80060b4:	0800bde8 	.word	0x0800bde8
 80060b8:	007a1200 	.word	0x007a1200
 80060bc:	003d0900 	.word	0x003d0900
 80060c0:	aaaaaaab 	.word	0xaaaaaaab

080060c4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80060cc:	2300      	movs	r3, #0
 80060ce:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e07a      	b.n	80061d0 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	7c5b      	ldrb	r3, [r3, #17]
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d105      	bne.n	80060f0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f7fb fce8 	bl	8001ac0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2202      	movs	r2, #2
 80060f4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 faea 	bl	80066d0 <HAL_RTC_WaitForSynchro>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d004      	beq.n	800610c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2204      	movs	r2, #4
 8006106:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e061      	b.n	80061d0 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 fba3 	bl	8006858 <RTC_EnterInitMode>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d004      	beq.n	8006122 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2204      	movs	r2, #4
 800611c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e056      	b.n	80061d0 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	685a      	ldr	r2, [r3, #4]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f022 0207 	bic.w	r2, r2, #7
 8006130:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d005      	beq.n	8006146 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800613a:	4b27      	ldr	r3, [pc, #156]	; (80061d8 <HAL_RTC_Init+0x114>)
 800613c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613e:	4a26      	ldr	r2, [pc, #152]	; (80061d8 <HAL_RTC_Init+0x114>)
 8006140:	f023 0301 	bic.w	r3, r3, #1
 8006144:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8006146:	4b24      	ldr	r3, [pc, #144]	; (80061d8 <HAL_RTC_Init+0x114>)
 8006148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	4921      	ldr	r1, [pc, #132]	; (80061d8 <HAL_RTC_Init+0x114>)
 8006154:	4313      	orrs	r3, r2
 8006156:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006160:	d003      	beq.n	800616a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	60fb      	str	r3, [r7, #12]
 8006168:	e00e      	b.n	8006188 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800616a:	2001      	movs	r0, #1
 800616c:	f7ff fef4 	bl	8005f58 <HAL_RCCEx_GetPeriphCLKFreq>
 8006170:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d104      	bne.n	8006182 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2204      	movs	r2, #4
 800617c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e026      	b.n	80061d0 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	3b01      	subs	r3, #1
 8006186:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	0c1a      	lsrs	r2, r3, #16
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f002 020f 	and.w	r2, r2, #15
 8006194:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	b292      	uxth	r2, r2
 800619e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 fb81 	bl	80068a8 <RTC_ExitInitMode>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d004      	beq.n	80061b6 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2204      	movs	r2, #4
 80061b0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e00c      	b.n	80061d0 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80061ce:	2300      	movs	r3, #0
  }
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3710      	adds	r7, #16
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	40006c00 	.word	0x40006c00

080061dc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80061dc:	b590      	push	{r4, r7, lr}
 80061de:	b087      	sub	sp, #28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80061e8:	2300      	movs	r3, #0
 80061ea:	617b      	str	r3, [r7, #20]
 80061ec:	2300      	movs	r3, #0
 80061ee:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d002      	beq.n	80061fc <HAL_RTC_SetTime+0x20>
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d101      	bne.n	8006200 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e080      	b.n	8006302 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	7c1b      	ldrb	r3, [r3, #16]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d101      	bne.n	800620c <HAL_RTC_SetTime+0x30>
 8006208:	2302      	movs	r3, #2
 800620a:	e07a      	b.n	8006302 <HAL_RTC_SetTime+0x126>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2201      	movs	r2, #1
 8006210:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2202      	movs	r2, #2
 8006216:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d113      	bne.n	8006246 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	461a      	mov	r2, r3
 8006224:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006228:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	785b      	ldrb	r3, [r3, #1]
 8006230:	4619      	mov	r1, r3
 8006232:	460b      	mov	r3, r1
 8006234:	011b      	lsls	r3, r3, #4
 8006236:	1a5b      	subs	r3, r3, r1
 8006238:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800623a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006240:	4413      	add	r3, r2
 8006242:	617b      	str	r3, [r7, #20]
 8006244:	e01e      	b.n	8006284 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	4618      	mov	r0, r3
 800624c:	f000 fb71 	bl	8006932 <RTC_Bcd2ToByte>
 8006250:	4603      	mov	r3, r0
 8006252:	461a      	mov	r2, r3
 8006254:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006258:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	785b      	ldrb	r3, [r3, #1]
 8006260:	4618      	mov	r0, r3
 8006262:	f000 fb66 	bl	8006932 <RTC_Bcd2ToByte>
 8006266:	4603      	mov	r3, r0
 8006268:	461a      	mov	r2, r3
 800626a:	4613      	mov	r3, r2
 800626c:	011b      	lsls	r3, r3, #4
 800626e:	1a9b      	subs	r3, r3, r2
 8006270:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006272:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	789b      	ldrb	r3, [r3, #2]
 8006278:	4618      	mov	r0, r3
 800627a:	f000 fb5a 	bl	8006932 <RTC_Bcd2ToByte>
 800627e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006280:	4423      	add	r3, r4
 8006282:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006284:	6979      	ldr	r1, [r7, #20]
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f000 fa7f 	bl	800678a <RTC_WriteTimeCounter>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d007      	beq.n	80062a2 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2204      	movs	r2, #4
 8006296:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e02f      	b.n	8006302 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	685a      	ldr	r2, [r3, #4]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 0205 	bic.w	r2, r2, #5
 80062b0:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f000 fa90 	bl	80067d8 <RTC_ReadAlarmCounter>
 80062b8:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c0:	d018      	beq.n	80062f4 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d214      	bcs.n	80062f4 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80062d0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80062d4:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80062d6:	6939      	ldr	r1, [r7, #16]
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f000 fa96 	bl	800680a <RTC_WriteAlarmCounter>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d007      	beq.n	80062f4 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2204      	movs	r2, #4
 80062e8:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e006      	b.n	8006302 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2201      	movs	r2, #1
 80062f8:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8006300:	2300      	movs	r3, #0
  }
}
 8006302:	4618      	mov	r0, r3
 8006304:	371c      	adds	r7, #28
 8006306:	46bd      	mov	sp, r7
 8006308:	bd90      	pop	{r4, r7, pc}
	...

0800630c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b088      	sub	sp, #32
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8006318:	2300      	movs	r3, #0
 800631a:	61bb      	str	r3, [r7, #24]
 800631c:	2300      	movs	r3, #0
 800631e:	61fb      	str	r3, [r7, #28]
 8006320:	2300      	movs	r3, #0
 8006322:	617b      	str	r3, [r7, #20]
 8006324:	2300      	movs	r3, #0
 8006326:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d002      	beq.n	8006334 <HAL_RTC_GetTime+0x28>
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d101      	bne.n	8006338 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e0b5      	b.n	80064a4 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	f003 0304 	and.w	r3, r3, #4
 8006342:	2b00      	cmp	r3, #0
 8006344:	d001      	beq.n	800634a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e0ac      	b.n	80064a4 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f000 f9ed 	bl	800672a <RTC_ReadTimeCounter>
 8006350:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	4a55      	ldr	r2, [pc, #340]	; (80064ac <HAL_RTC_GetTime+0x1a0>)
 8006356:	fba2 2303 	umull	r2, r3, r2, r3
 800635a:	0adb      	lsrs	r3, r3, #11
 800635c:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800635e:	69ba      	ldr	r2, [r7, #24]
 8006360:	4b52      	ldr	r3, [pc, #328]	; (80064ac <HAL_RTC_GetTime+0x1a0>)
 8006362:	fba3 1302 	umull	r1, r3, r3, r2
 8006366:	0adb      	lsrs	r3, r3, #11
 8006368:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800636c:	fb01 f303 	mul.w	r3, r1, r3
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	4a4f      	ldr	r2, [pc, #316]	; (80064b0 <HAL_RTC_GetTime+0x1a4>)
 8006374:	fba2 2303 	umull	r2, r3, r2, r3
 8006378:	095b      	lsrs	r3, r3, #5
 800637a:	b2da      	uxtb	r2, r3
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	4a4a      	ldr	r2, [pc, #296]	; (80064ac <HAL_RTC_GetTime+0x1a0>)
 8006384:	fba2 1203 	umull	r1, r2, r2, r3
 8006388:	0ad2      	lsrs	r2, r2, #11
 800638a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800638e:	fb01 f202 	mul.w	r2, r1, r2
 8006392:	1a9a      	subs	r2, r3, r2
 8006394:	4b46      	ldr	r3, [pc, #280]	; (80064b0 <HAL_RTC_GetTime+0x1a4>)
 8006396:	fba3 1302 	umull	r1, r3, r3, r2
 800639a:	0959      	lsrs	r1, r3, #5
 800639c:	460b      	mov	r3, r1
 800639e:	011b      	lsls	r3, r3, #4
 80063a0:	1a5b      	subs	r3, r3, r1
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	1ad1      	subs	r1, r2, r3
 80063a6:	b2ca      	uxtb	r2, r1
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	2b17      	cmp	r3, #23
 80063b0:	d955      	bls.n	800645e <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	4a3f      	ldr	r2, [pc, #252]	; (80064b4 <HAL_RTC_GetTime+0x1a8>)
 80063b6:	fba2 2303 	umull	r2, r3, r2, r3
 80063ba:	091b      	lsrs	r3, r3, #4
 80063bc:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80063be:	6939      	ldr	r1, [r7, #16]
 80063c0:	4b3c      	ldr	r3, [pc, #240]	; (80064b4 <HAL_RTC_GetTime+0x1a8>)
 80063c2:	fba3 2301 	umull	r2, r3, r3, r1
 80063c6:	091a      	lsrs	r2, r3, #4
 80063c8:	4613      	mov	r3, r2
 80063ca:	005b      	lsls	r3, r3, #1
 80063cc:	4413      	add	r3, r2
 80063ce:	00db      	lsls	r3, r3, #3
 80063d0:	1aca      	subs	r2, r1, r3
 80063d2:	b2d2      	uxtb	r2, r2
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f000 f9fd 	bl	80067d8 <RTC_ReadAlarmCounter>
 80063de:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e6:	d008      	beq.n	80063fa <HAL_RTC_GetTime+0xee>
 80063e8:	69fa      	ldr	r2, [r7, #28]
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d904      	bls.n	80063fa <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80063f0:	69fa      	ldr	r2, [r7, #28]
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	61fb      	str	r3, [r7, #28]
 80063f8:	e002      	b.n	8006400 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80063fa:	f04f 33ff 	mov.w	r3, #4294967295
 80063fe:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	4a2d      	ldr	r2, [pc, #180]	; (80064b8 <HAL_RTC_GetTime+0x1ac>)
 8006404:	fb02 f303 	mul.w	r3, r2, r3
 8006408:	69ba      	ldr	r2, [r7, #24]
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800640e:	69b9      	ldr	r1, [r7, #24]
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f000 f9ba 	bl	800678a <RTC_WriteTimeCounter>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d001      	beq.n	8006420 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e041      	b.n	80064a4 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006426:	d00c      	beq.n	8006442 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8006428:	69fa      	ldr	r2, [r7, #28]
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	4413      	add	r3, r2
 800642e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006430:	69f9      	ldr	r1, [r7, #28]
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f000 f9e9 	bl	800680a <RTC_WriteAlarmCounter>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00a      	beq.n	8006454 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e030      	b.n	80064a4 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006442:	69f9      	ldr	r1, [r7, #28]
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f000 f9e0 	bl	800680a <RTC_WriteAlarmCounter>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d001      	beq.n	8006454 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e027      	b.n	80064a4 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8006454:	6979      	ldr	r1, [r7, #20]
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f000 fa88 	bl	800696c <RTC_DateUpdate>
 800645c:	e003      	b.n	8006466 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	b2da      	uxtb	r2, r3
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d01a      	beq.n	80064a2 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	4618      	mov	r0, r3
 8006472:	f000 fa41 	bl	80068f8 <RTC_ByteToBcd2>
 8006476:	4603      	mov	r3, r0
 8006478:	461a      	mov	r2, r3
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	785b      	ldrb	r3, [r3, #1]
 8006482:	4618      	mov	r0, r3
 8006484:	f000 fa38 	bl	80068f8 <RTC_ByteToBcd2>
 8006488:	4603      	mov	r3, r0
 800648a:	461a      	mov	r2, r3
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	789b      	ldrb	r3, [r3, #2]
 8006494:	4618      	mov	r0, r3
 8006496:	f000 fa2f 	bl	80068f8 <RTC_ByteToBcd2>
 800649a:	4603      	mov	r3, r0
 800649c:	461a      	mov	r2, r3
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3720      	adds	r7, #32
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	91a2b3c5 	.word	0x91a2b3c5
 80064b0:	88888889 	.word	0x88888889
 80064b4:	aaaaaaab 	.word	0xaaaaaaab
 80064b8:	00015180 	.word	0x00015180

080064bc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b088      	sub	sp, #32
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80064c8:	2300      	movs	r3, #0
 80064ca:	61fb      	str	r3, [r7, #28]
 80064cc:	2300      	movs	r3, #0
 80064ce:	61bb      	str	r3, [r7, #24]
 80064d0:	2300      	movs	r3, #0
 80064d2:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d002      	beq.n	80064e0 <HAL_RTC_SetDate+0x24>
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e097      	b.n	8006614 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	7c1b      	ldrb	r3, [r3, #16]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d101      	bne.n	80064f0 <HAL_RTC_SetDate+0x34>
 80064ec:	2302      	movs	r3, #2
 80064ee:	e091      	b.n	8006614 <HAL_RTC_SetDate+0x158>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2201      	movs	r2, #1
 80064f4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2202      	movs	r2, #2
 80064fa:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10c      	bne.n	800651c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	78da      	ldrb	r2, [r3, #3]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	785a      	ldrb	r2, [r3, #1]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	789a      	ldrb	r2, [r3, #2]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	739a      	strb	r2, [r3, #14]
 800651a:	e01a      	b.n	8006552 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	78db      	ldrb	r3, [r3, #3]
 8006520:	4618      	mov	r0, r3
 8006522:	f000 fa06 	bl	8006932 <RTC_Bcd2ToByte>
 8006526:	4603      	mov	r3, r0
 8006528:	461a      	mov	r2, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	785b      	ldrb	r3, [r3, #1]
 8006532:	4618      	mov	r0, r3
 8006534:	f000 f9fd 	bl	8006932 <RTC_Bcd2ToByte>
 8006538:	4603      	mov	r3, r0
 800653a:	461a      	mov	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	789b      	ldrb	r3, [r3, #2]
 8006544:	4618      	mov	r0, r3
 8006546:	f000 f9f4 	bl	8006932 <RTC_Bcd2ToByte>
 800654a:	4603      	mov	r3, r0
 800654c:	461a      	mov	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	7bdb      	ldrb	r3, [r3, #15]
 8006556:	4618      	mov	r0, r3
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	7b59      	ldrb	r1, [r3, #13]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	7b9b      	ldrb	r3, [r3, #14]
 8006560:	461a      	mov	r2, r3
 8006562:	f000 fadf 	bl	8006b24 <RTC_WeekDayNum>
 8006566:	4603      	mov	r3, r0
 8006568:	461a      	mov	r2, r3
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	7b1a      	ldrb	r2, [r3, #12]
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f000 f8d7 	bl	800672a <RTC_ReadTimeCounter>
 800657c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	4a26      	ldr	r2, [pc, #152]	; (800661c <HAL_RTC_SetDate+0x160>)
 8006582:	fba2 2303 	umull	r2, r3, r2, r3
 8006586:	0adb      	lsrs	r3, r3, #11
 8006588:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	2b18      	cmp	r3, #24
 800658e:	d93a      	bls.n	8006606 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	4a23      	ldr	r2, [pc, #140]	; (8006620 <HAL_RTC_SetDate+0x164>)
 8006594:	fba2 2303 	umull	r2, r3, r2, r3
 8006598:	091b      	lsrs	r3, r3, #4
 800659a:	4a22      	ldr	r2, [pc, #136]	; (8006624 <HAL_RTC_SetDate+0x168>)
 800659c:	fb02 f303 	mul.w	r3, r2, r3
 80065a0:	69fa      	ldr	r2, [r7, #28]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80065a6:	69f9      	ldr	r1, [r7, #28]
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f000 f8ee 	bl	800678a <RTC_WriteTimeCounter>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d007      	beq.n	80065c4 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2204      	movs	r2, #4
 80065b8:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e027      	b.n	8006614 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f000 f907 	bl	80067d8 <RTC_ReadAlarmCounter>
 80065ca:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d2:	d018      	beq.n	8006606 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80065d4:	69ba      	ldr	r2, [r7, #24]
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d214      	bcs.n	8006606 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80065e2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80065e6:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80065e8:	69b9      	ldr	r1, [r7, #24]
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f000 f90d 	bl	800680a <RTC_WriteAlarmCounter>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d007      	beq.n	8006606 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2204      	movs	r2, #4
 80065fa:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e006      	b.n	8006614 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2201      	movs	r2, #1
 800660a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3720      	adds	r7, #32
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	91a2b3c5 	.word	0x91a2b3c5
 8006620:	aaaaaaab 	.word	0xaaaaaaab
 8006624:	00015180 	.word	0x00015180

08006628 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8006634:	f107 0314 	add.w	r3, r7, #20
 8006638:	2100      	movs	r1, #0
 800663a:	460a      	mov	r2, r1
 800663c:	801a      	strh	r2, [r3, #0]
 800663e:	460a      	mov	r2, r1
 8006640:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d002      	beq.n	800664e <HAL_RTC_GetDate+0x26>
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d101      	bne.n	8006652 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e03a      	b.n	80066c8 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8006652:	f107 0314 	add.w	r3, r7, #20
 8006656:	2200      	movs	r2, #0
 8006658:	4619      	mov	r1, r3
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f7ff fe56 	bl	800630c <HAL_RTC_GetTime>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d001      	beq.n	800666a <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e02e      	b.n	80066c8 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	7b1a      	ldrb	r2, [r3, #12]
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	7bda      	ldrb	r2, [r3, #15]
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	7b5a      	ldrb	r2, [r3, #13]
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	7b9a      	ldrb	r2, [r3, #14]
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d01a      	beq.n	80066c6 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	78db      	ldrb	r3, [r3, #3]
 8006694:	4618      	mov	r0, r3
 8006696:	f000 f92f 	bl	80068f8 <RTC_ByteToBcd2>
 800669a:	4603      	mov	r3, r0
 800669c:	461a      	mov	r2, r3
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	785b      	ldrb	r3, [r3, #1]
 80066a6:	4618      	mov	r0, r3
 80066a8:	f000 f926 	bl	80068f8 <RTC_ByteToBcd2>
 80066ac:	4603      	mov	r3, r0
 80066ae:	461a      	mov	r2, r3
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	789b      	ldrb	r3, [r3, #2]
 80066b8:	4618      	mov	r0, r3
 80066ba:	f000 f91d 	bl	80068f8 <RTC_ByteToBcd2>
 80066be:	4603      	mov	r3, r0
 80066c0:	461a      	mov	r2, r3
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3718      	adds	r7, #24
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80066d8:	2300      	movs	r3, #0
 80066da:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e01d      	b.n	8006722 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	685a      	ldr	r2, [r3, #4]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f022 0208 	bic.w	r2, r2, #8
 80066f4:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80066f6:	f7fc f991 	bl	8002a1c <HAL_GetTick>
 80066fa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80066fc:	e009      	b.n	8006712 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80066fe:	f7fc f98d 	bl	8002a1c <HAL_GetTick>
 8006702:	4602      	mov	r2, r0
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800670c:	d901      	bls.n	8006712 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e007      	b.n	8006722 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	f003 0308 	and.w	r3, r3, #8
 800671c:	2b00      	cmp	r3, #0
 800671e:	d0ee      	beq.n	80066fe <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800672a:	b480      	push	{r7}
 800672c:	b087      	sub	sp, #28
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8006732:	2300      	movs	r3, #0
 8006734:	827b      	strh	r3, [r7, #18]
 8006736:	2300      	movs	r3, #0
 8006738:	823b      	strh	r3, [r7, #16]
 800673a:	2300      	movs	r3, #0
 800673c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800673e:	2300      	movs	r3, #0
 8006740:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	69db      	ldr	r3, [r3, #28]
 8006750:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800675a:	8a7a      	ldrh	r2, [r7, #18]
 800675c:	8a3b      	ldrh	r3, [r7, #16]
 800675e:	429a      	cmp	r2, r3
 8006760:	d008      	beq.n	8006774 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8006762:	8a3b      	ldrh	r3, [r7, #16]
 8006764:	041a      	lsls	r2, r3, #16
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	69db      	ldr	r3, [r3, #28]
 800676c:	b29b      	uxth	r3, r3
 800676e:	4313      	orrs	r3, r2
 8006770:	617b      	str	r3, [r7, #20]
 8006772:	e004      	b.n	800677e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8006774:	8a7b      	ldrh	r3, [r7, #18]
 8006776:	041a      	lsls	r2, r3, #16
 8006778:	89fb      	ldrh	r3, [r7, #14]
 800677a:	4313      	orrs	r3, r2
 800677c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800677e:	697b      	ldr	r3, [r7, #20]
}
 8006780:	4618      	mov	r0, r3
 8006782:	371c      	adds	r7, #28
 8006784:	46bd      	mov	sp, r7
 8006786:	bc80      	pop	{r7}
 8006788:	4770      	bx	lr

0800678a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b084      	sub	sp, #16
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
 8006792:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006794:	2300      	movs	r3, #0
 8006796:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f85d 	bl	8006858 <RTC_EnterInitMode>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d002      	beq.n	80067aa <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	73fb      	strb	r3, [r7, #15]
 80067a8:	e011      	b.n	80067ce <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	0c12      	lsrs	r2, r2, #16
 80067b2:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	683a      	ldr	r2, [r7, #0]
 80067ba:	b292      	uxth	r2, r2
 80067bc:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f872 	bl	80068a8 <RTC_ExitInitMode>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d001      	beq.n	80067ce <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80067ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80067e0:	2300      	movs	r3, #0
 80067e2:	81fb      	strh	r3, [r7, #14]
 80067e4:	2300      	movs	r3, #0
 80067e6:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f6:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80067f8:	89fb      	ldrh	r3, [r7, #14]
 80067fa:	041a      	lsls	r2, r3, #16
 80067fc:	89bb      	ldrh	r3, [r7, #12]
 80067fe:	4313      	orrs	r3, r2
}
 8006800:	4618      	mov	r0, r3
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	bc80      	pop	{r7}
 8006808:	4770      	bx	lr

0800680a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b084      	sub	sp, #16
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
 8006812:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006814:	2300      	movs	r3, #0
 8006816:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 f81d 	bl	8006858 <RTC_EnterInitMode>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d002      	beq.n	800682a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	73fb      	strb	r3, [r7, #15]
 8006828:	e011      	b.n	800684e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	0c12      	lsrs	r2, r2, #16
 8006832:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	683a      	ldr	r2, [r7, #0]
 800683a:	b292      	uxth	r2, r2
 800683c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 f832 	bl	80068a8 <RTC_ExitInitMode>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d001      	beq.n	800684e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800684e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006850:	4618      	mov	r0, r3
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006860:	2300      	movs	r3, #0
 8006862:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8006864:	f7fc f8da 	bl	8002a1c <HAL_GetTick>
 8006868:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800686a:	e009      	b.n	8006880 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800686c:	f7fc f8d6 	bl	8002a1c <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800687a:	d901      	bls.n	8006880 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	e00f      	b.n	80068a0 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	f003 0320 	and.w	r3, r3, #32
 800688a:	2b00      	cmp	r3, #0
 800688c:	d0ee      	beq.n	800686c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f042 0210 	orr.w	r2, r2, #16
 800689c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80068b0:	2300      	movs	r3, #0
 80068b2:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	685a      	ldr	r2, [r3, #4]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f022 0210 	bic.w	r2, r2, #16
 80068c2:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80068c4:	f7fc f8aa 	bl	8002a1c <HAL_GetTick>
 80068c8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80068ca:	e009      	b.n	80068e0 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80068cc:	f7fc f8a6 	bl	8002a1c <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068da:	d901      	bls.n	80068e0 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e007      	b.n	80068f0 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	f003 0320 	and.w	r3, r3, #32
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d0ee      	beq.n	80068cc <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	4603      	mov	r3, r0
 8006900:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006902:	2300      	movs	r3, #0
 8006904:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8006906:	e005      	b.n	8006914 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	3301      	adds	r3, #1
 800690c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800690e:	79fb      	ldrb	r3, [r7, #7]
 8006910:	3b0a      	subs	r3, #10
 8006912:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8006914:	79fb      	ldrb	r3, [r7, #7]
 8006916:	2b09      	cmp	r3, #9
 8006918:	d8f6      	bhi.n	8006908 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	b2db      	uxtb	r3, r3
 800691e:	011b      	lsls	r3, r3, #4
 8006920:	b2da      	uxtb	r2, r3
 8006922:	79fb      	ldrb	r3, [r7, #7]
 8006924:	4313      	orrs	r3, r2
 8006926:	b2db      	uxtb	r3, r3
}
 8006928:	4618      	mov	r0, r3
 800692a:	3714      	adds	r7, #20
 800692c:	46bd      	mov	sp, r7
 800692e:	bc80      	pop	{r7}
 8006930:	4770      	bx	lr

08006932 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006932:	b480      	push	{r7}
 8006934:	b085      	sub	sp, #20
 8006936:	af00      	add	r7, sp, #0
 8006938:	4603      	mov	r3, r0
 800693a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800693c:	2300      	movs	r3, #0
 800693e:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8006940:	79fb      	ldrb	r3, [r7, #7]
 8006942:	091b      	lsrs	r3, r3, #4
 8006944:	b2db      	uxtb	r3, r3
 8006946:	461a      	mov	r2, r3
 8006948:	4613      	mov	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	005b      	lsls	r3, r3, #1
 8006950:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8006952:	79fb      	ldrb	r3, [r7, #7]
 8006954:	f003 030f 	and.w	r3, r3, #15
 8006958:	b2da      	uxtb	r2, r3
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	b2db      	uxtb	r3, r3
 800695e:	4413      	add	r3, r2
 8006960:	b2db      	uxtb	r3, r3
}
 8006962:	4618      	mov	r0, r3
 8006964:	3714      	adds	r7, #20
 8006966:	46bd      	mov	sp, r7
 8006968:	bc80      	pop	{r7}
 800696a:	4770      	bx	lr

0800696c <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8006976:	2300      	movs	r3, #0
 8006978:	617b      	str	r3, [r7, #20]
 800697a:	2300      	movs	r3, #0
 800697c:	613b      	str	r3, [r7, #16]
 800697e:	2300      	movs	r3, #0
 8006980:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8006982:	2300      	movs	r3, #0
 8006984:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	7bdb      	ldrb	r3, [r3, #15]
 800698a:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	7b5b      	ldrb	r3, [r3, #13]
 8006990:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	7b9b      	ldrb	r3, [r3, #14]
 8006996:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8006998:	2300      	movs	r3, #0
 800699a:	60bb      	str	r3, [r7, #8]
 800699c:	e06f      	b.n	8006a7e <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d011      	beq.n	80069c8 <RTC_DateUpdate+0x5c>
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	2b03      	cmp	r3, #3
 80069a8:	d00e      	beq.n	80069c8 <RTC_DateUpdate+0x5c>
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	2b05      	cmp	r3, #5
 80069ae:	d00b      	beq.n	80069c8 <RTC_DateUpdate+0x5c>
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	2b07      	cmp	r3, #7
 80069b4:	d008      	beq.n	80069c8 <RTC_DateUpdate+0x5c>
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	2b08      	cmp	r3, #8
 80069ba:	d005      	beq.n	80069c8 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	2b0a      	cmp	r3, #10
 80069c0:	d002      	beq.n	80069c8 <RTC_DateUpdate+0x5c>
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	2b0c      	cmp	r3, #12
 80069c6:	d117      	bne.n	80069f8 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2b1e      	cmp	r3, #30
 80069cc:	d803      	bhi.n	80069d6 <RTC_DateUpdate+0x6a>
      {
        day++;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	3301      	adds	r3, #1
 80069d2:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80069d4:	e050      	b.n	8006a78 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	2b0c      	cmp	r3, #12
 80069da:	d005      	beq.n	80069e8 <RTC_DateUpdate+0x7c>
        {
          month++;
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	3301      	adds	r3, #1
 80069e0:	613b      	str	r3, [r7, #16]
          day = 1U;
 80069e2:	2301      	movs	r3, #1
 80069e4:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80069e6:	e047      	b.n	8006a78 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80069e8:	2301      	movs	r3, #1
 80069ea:	613b      	str	r3, [r7, #16]
          day = 1U;
 80069ec:	2301      	movs	r3, #1
 80069ee:	60fb      	str	r3, [r7, #12]
          year++;
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	3301      	adds	r3, #1
 80069f4:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80069f6:	e03f      	b.n	8006a78 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	2b04      	cmp	r3, #4
 80069fc:	d008      	beq.n	8006a10 <RTC_DateUpdate+0xa4>
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	2b06      	cmp	r3, #6
 8006a02:	d005      	beq.n	8006a10 <RTC_DateUpdate+0xa4>
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	2b09      	cmp	r3, #9
 8006a08:	d002      	beq.n	8006a10 <RTC_DateUpdate+0xa4>
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	2b0b      	cmp	r3, #11
 8006a0e:	d10c      	bne.n	8006a2a <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2b1d      	cmp	r3, #29
 8006a14:	d803      	bhi.n	8006a1e <RTC_DateUpdate+0xb2>
      {
        day++;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8006a1c:	e02c      	b.n	8006a78 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	3301      	adds	r3, #1
 8006a22:	613b      	str	r3, [r7, #16]
        day = 1U;
 8006a24:	2301      	movs	r3, #1
 8006a26:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8006a28:	e026      	b.n	8006a78 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d123      	bne.n	8006a78 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2b1b      	cmp	r3, #27
 8006a34:	d803      	bhi.n	8006a3e <RTC_DateUpdate+0xd2>
      {
        day++;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	60fb      	str	r3, [r7, #12]
 8006a3c:	e01c      	b.n	8006a78 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2b1c      	cmp	r3, #28
 8006a42:	d111      	bne.n	8006a68 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f000 f839 	bl	8006ac0 <RTC_IsLeapYear>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d003      	beq.n	8006a5c <RTC_DateUpdate+0xf0>
        {
          day++;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	3301      	adds	r3, #1
 8006a58:	60fb      	str	r3, [r7, #12]
 8006a5a:	e00d      	b.n	8006a78 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	613b      	str	r3, [r7, #16]
          day = 1U;
 8006a62:	2301      	movs	r3, #1
 8006a64:	60fb      	str	r3, [r7, #12]
 8006a66:	e007      	b.n	8006a78 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2b1d      	cmp	r3, #29
 8006a6c:	d104      	bne.n	8006a78 <RTC_DateUpdate+0x10c>
      {
        month++;
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	3301      	adds	r3, #1
 8006a72:	613b      	str	r3, [r7, #16]
        day = 1U;
 8006a74:	2301      	movs	r3, #1
 8006a76:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	60bb      	str	r3, [r7, #8]
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d38b      	bcc.n	800699e <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	b2da      	uxtb	r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	b2da      	uxtb	r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	b2da      	uxtb	r2, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	b2d2      	uxtb	r2, r2
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	6978      	ldr	r0, [r7, #20]
 8006aaa:	f000 f83b 	bl	8006b24 <RTC_WeekDayNum>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	731a      	strb	r2, [r3, #12]
}
 8006ab6:	bf00      	nop
 8006ab8:	3718      	adds	r7, #24
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
	...

08006ac0 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8006aca:	88fb      	ldrh	r3, [r7, #6]
 8006acc:	f003 0303 	and.w	r3, r3, #3
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d001      	beq.n	8006ada <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	e01d      	b.n	8006b16 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8006ada:	88fb      	ldrh	r3, [r7, #6]
 8006adc:	4a10      	ldr	r2, [pc, #64]	; (8006b20 <RTC_IsLeapYear+0x60>)
 8006ade:	fba2 1203 	umull	r1, r2, r2, r3
 8006ae2:	0952      	lsrs	r2, r2, #5
 8006ae4:	2164      	movs	r1, #100	; 0x64
 8006ae6:	fb01 f202 	mul.w	r2, r1, r2
 8006aea:	1a9b      	subs	r3, r3, r2
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d001      	beq.n	8006af6 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e00f      	b.n	8006b16 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8006af6:	88fb      	ldrh	r3, [r7, #6]
 8006af8:	4a09      	ldr	r2, [pc, #36]	; (8006b20 <RTC_IsLeapYear+0x60>)
 8006afa:	fba2 1203 	umull	r1, r2, r2, r3
 8006afe:	09d2      	lsrs	r2, r2, #7
 8006b00:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006b04:	fb01 f202 	mul.w	r2, r1, r2
 8006b08:	1a9b      	subs	r3, r3, r2
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e000      	b.n	8006b16 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8006b14:	2300      	movs	r3, #0
  }
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	370c      	adds	r7, #12
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bc80      	pop	{r7}
 8006b1e:	4770      	bx	lr
 8006b20:	51eb851f 	.word	0x51eb851f

08006b24 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	70fb      	strb	r3, [r7, #3]
 8006b30:	4613      	mov	r3, r2
 8006b32:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8006b34:	2300      	movs	r3, #0
 8006b36:	60bb      	str	r3, [r7, #8]
 8006b38:	2300      	movs	r3, #0
 8006b3a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8006b42:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8006b44:	78fb      	ldrb	r3, [r7, #3]
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d82d      	bhi.n	8006ba6 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8006b4a:	78fa      	ldrb	r2, [r7, #3]
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	005b      	lsls	r3, r3, #1
 8006b50:	4413      	add	r3, r2
 8006b52:	00db      	lsls	r3, r3, #3
 8006b54:	1a9b      	subs	r3, r3, r2
 8006b56:	4a2c      	ldr	r2, [pc, #176]	; (8006c08 <RTC_WeekDayNum+0xe4>)
 8006b58:	fba2 2303 	umull	r2, r3, r2, r3
 8006b5c:	085a      	lsrs	r2, r3, #1
 8006b5e:	78bb      	ldrb	r3, [r7, #2]
 8006b60:	441a      	add	r2, r3
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	441a      	add	r2, r3
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	089b      	lsrs	r3, r3, #2
 8006b6c:	441a      	add	r2, r3
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	3b01      	subs	r3, #1
 8006b72:	4926      	ldr	r1, [pc, #152]	; (8006c0c <RTC_WeekDayNum+0xe8>)
 8006b74:	fba1 1303 	umull	r1, r3, r1, r3
 8006b78:	095b      	lsrs	r3, r3, #5
 8006b7a:	1ad2      	subs	r2, r2, r3
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	4922      	ldr	r1, [pc, #136]	; (8006c0c <RTC_WeekDayNum+0xe8>)
 8006b82:	fba1 1303 	umull	r1, r3, r1, r3
 8006b86:	09db      	lsrs	r3, r3, #7
 8006b88:	4413      	add	r3, r2
 8006b8a:	1d1a      	adds	r2, r3, #4
 8006b8c:	4b20      	ldr	r3, [pc, #128]	; (8006c10 <RTC_WeekDayNum+0xec>)
 8006b8e:	fba3 1302 	umull	r1, r3, r3, r2
 8006b92:	1ad1      	subs	r1, r2, r3
 8006b94:	0849      	lsrs	r1, r1, #1
 8006b96:	440b      	add	r3, r1
 8006b98:	0899      	lsrs	r1, r3, #2
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	00db      	lsls	r3, r3, #3
 8006b9e:	1a5b      	subs	r3, r3, r1
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	60fb      	str	r3, [r7, #12]
 8006ba4:	e029      	b.n	8006bfa <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8006ba6:	78fa      	ldrb	r2, [r7, #3]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	005b      	lsls	r3, r3, #1
 8006bac:	4413      	add	r3, r2
 8006bae:	00db      	lsls	r3, r3, #3
 8006bb0:	1a9b      	subs	r3, r3, r2
 8006bb2:	4a15      	ldr	r2, [pc, #84]	; (8006c08 <RTC_WeekDayNum+0xe4>)
 8006bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb8:	085a      	lsrs	r2, r3, #1
 8006bba:	78bb      	ldrb	r3, [r7, #2]
 8006bbc:	441a      	add	r2, r3
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	441a      	add	r2, r3
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	089b      	lsrs	r3, r3, #2
 8006bc6:	441a      	add	r2, r3
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	4910      	ldr	r1, [pc, #64]	; (8006c0c <RTC_WeekDayNum+0xe8>)
 8006bcc:	fba1 1303 	umull	r1, r3, r1, r3
 8006bd0:	095b      	lsrs	r3, r3, #5
 8006bd2:	1ad2      	subs	r2, r2, r3
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	490d      	ldr	r1, [pc, #52]	; (8006c0c <RTC_WeekDayNum+0xe8>)
 8006bd8:	fba1 1303 	umull	r1, r3, r1, r3
 8006bdc:	09db      	lsrs	r3, r3, #7
 8006bde:	4413      	add	r3, r2
 8006be0:	1c9a      	adds	r2, r3, #2
 8006be2:	4b0b      	ldr	r3, [pc, #44]	; (8006c10 <RTC_WeekDayNum+0xec>)
 8006be4:	fba3 1302 	umull	r1, r3, r3, r2
 8006be8:	1ad1      	subs	r1, r2, r3
 8006bea:	0849      	lsrs	r1, r1, #1
 8006bec:	440b      	add	r3, r1
 8006bee:	0899      	lsrs	r1, r3, #2
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	00db      	lsls	r3, r3, #3
 8006bf4:	1a5b      	subs	r3, r3, r1
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	b2db      	uxtb	r3, r3
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3714      	adds	r7, #20
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bc80      	pop	{r7}
 8006c06:	4770      	bx	lr
 8006c08:	38e38e39 	.word	0x38e38e39
 8006c0c:	51eb851f 	.word	0x51eb851f
 8006c10:	24924925 	.word	0x24924925

08006c14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d101      	bne.n	8006c26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e076      	b.n	8006d14 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d108      	bne.n	8006c40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c36:	d009      	beq.n	8006c4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	61da      	str	r2, [r3, #28]
 8006c3e:	e005      	b.n	8006c4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d106      	bne.n	8006c6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f7fa ff4e 	bl	8001b08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2202      	movs	r2, #2
 8006c70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006c94:	431a      	orrs	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c9e:	431a      	orrs	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	f003 0302 	and.w	r3, r3, #2
 8006ca8:	431a      	orrs	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	695b      	ldr	r3, [r3, #20]
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	431a      	orrs	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cbc:	431a      	orrs	r2, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	69db      	ldr	r3, [r3, #28]
 8006cc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cc6:	431a      	orrs	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a1b      	ldr	r3, [r3, #32]
 8006ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cd0:	ea42 0103 	orr.w	r1, r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	430a      	orrs	r2, r1
 8006ce2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	699b      	ldr	r3, [r3, #24]
 8006ce8:	0c1a      	lsrs	r2, r3, #16
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f002 0204 	and.w	r2, r2, #4
 8006cf2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	69da      	ldr	r2, [r3, #28]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d02:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3708      	adds	r7, #8
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b088      	sub	sp, #32
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	603b      	str	r3, [r7, #0]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d101      	bne.n	8006d3e <HAL_SPI_Transmit+0x22>
 8006d3a:	2302      	movs	r3, #2
 8006d3c:	e12d      	b.n	8006f9a <HAL_SPI_Transmit+0x27e>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2201      	movs	r2, #1
 8006d42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d46:	f7fb fe69 	bl	8002a1c <HAL_GetTick>
 8006d4a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006d4c:	88fb      	ldrh	r3, [r7, #6]
 8006d4e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d002      	beq.n	8006d62 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d60:	e116      	b.n	8006f90 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d002      	beq.n	8006d6e <HAL_SPI_Transmit+0x52>
 8006d68:	88fb      	ldrh	r3, [r7, #6]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d102      	bne.n	8006d74 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d72:	e10d      	b.n	8006f90 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2203      	movs	r2, #3
 8006d78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	88fa      	ldrh	r2, [r7, #6]
 8006d8c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	88fa      	ldrh	r2, [r7, #6]
 8006d92:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dba:	d10f      	bne.n	8006ddc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006dda:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de6:	2b40      	cmp	r3, #64	; 0x40
 8006de8:	d007      	beq.n	8006dfa <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006df8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e02:	d14f      	bne.n	8006ea4 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d002      	beq.n	8006e12 <HAL_SPI_Transmit+0xf6>
 8006e0c:	8afb      	ldrh	r3, [r7, #22]
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d142      	bne.n	8006e98 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e16:	881a      	ldrh	r2, [r3, #0]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e22:	1c9a      	adds	r2, r3, #2
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006e36:	e02f      	b.n	8006e98 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f003 0302 	and.w	r3, r3, #2
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d112      	bne.n	8006e6c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4a:	881a      	ldrh	r2, [r3, #0]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e56:	1c9a      	adds	r2, r3, #2
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	3b01      	subs	r3, #1
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	86da      	strh	r2, [r3, #54]	; 0x36
 8006e6a:	e015      	b.n	8006e98 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e6c:	f7fb fdd6 	bl	8002a1c <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	683a      	ldr	r2, [r7, #0]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d803      	bhi.n	8006e84 <HAL_SPI_Transmit+0x168>
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e82:	d102      	bne.n	8006e8a <HAL_SPI_Transmit+0x16e>
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d106      	bne.n	8006e98 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2201      	movs	r2, #1
 8006e92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006e96:	e07b      	b.n	8006f90 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1ca      	bne.n	8006e38 <HAL_SPI_Transmit+0x11c>
 8006ea2:	e050      	b.n	8006f46 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d002      	beq.n	8006eb2 <HAL_SPI_Transmit+0x196>
 8006eac:	8afb      	ldrh	r3, [r7, #22]
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d144      	bne.n	8006f3c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	330c      	adds	r3, #12
 8006ebc:	7812      	ldrb	r2, [r2, #0]
 8006ebe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec4:	1c5a      	adds	r2, r3, #1
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006ed8:	e030      	b.n	8006f3c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f003 0302 	and.w	r3, r3, #2
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d113      	bne.n	8006f10 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	330c      	adds	r3, #12
 8006ef2:	7812      	ldrb	r2, [r2, #0]
 8006ef4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efa:	1c5a      	adds	r2, r3, #1
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	3b01      	subs	r3, #1
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	86da      	strh	r2, [r3, #54]	; 0x36
 8006f0e:	e015      	b.n	8006f3c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f10:	f7fb fd84 	bl	8002a1c <HAL_GetTick>
 8006f14:	4602      	mov	r2, r0
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	1ad3      	subs	r3, r2, r3
 8006f1a:	683a      	ldr	r2, [r7, #0]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d803      	bhi.n	8006f28 <HAL_SPI_Transmit+0x20c>
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f26:	d102      	bne.n	8006f2e <HAL_SPI_Transmit+0x212>
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d106      	bne.n	8006f3c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006f3a:	e029      	b.n	8006f90 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1c9      	bne.n	8006eda <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f46:	69ba      	ldr	r2, [r7, #24]
 8006f48:	6839      	ldr	r1, [r7, #0]
 8006f4a:	68f8      	ldr	r0, [r7, #12]
 8006f4c:	f000 f8b2 	bl	80070b4 <SPI_EndRxTxTransaction>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d002      	beq.n	8006f5c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2220      	movs	r2, #32
 8006f5a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d10a      	bne.n	8006f7a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f64:	2300      	movs	r3, #0
 8006f66:	613b      	str	r3, [r7, #16]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	613b      	str	r3, [r7, #16]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	613b      	str	r3, [r7, #16]
 8006f78:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d002      	beq.n	8006f88 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	77fb      	strb	r3, [r7, #31]
 8006f86:	e003      	b.n	8006f90 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006f98:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3720      	adds	r7, #32
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
	...

08006fa4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b088      	sub	sp, #32
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	603b      	str	r3, [r7, #0]
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006fb4:	f7fb fd32 	bl	8002a1c <HAL_GetTick>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fbc:	1a9b      	subs	r3, r3, r2
 8006fbe:	683a      	ldr	r2, [r7, #0]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006fc4:	f7fb fd2a 	bl	8002a1c <HAL_GetTick>
 8006fc8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006fca:	4b39      	ldr	r3, [pc, #228]	; (80070b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	015b      	lsls	r3, r3, #5
 8006fd0:	0d1b      	lsrs	r3, r3, #20
 8006fd2:	69fa      	ldr	r2, [r7, #28]
 8006fd4:	fb02 f303 	mul.w	r3, r2, r3
 8006fd8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fda:	e054      	b.n	8007086 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe2:	d050      	beq.n	8007086 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006fe4:	f7fb fd1a 	bl	8002a1c <HAL_GetTick>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	69fa      	ldr	r2, [r7, #28]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d902      	bls.n	8006ffa <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d13d      	bne.n	8007076 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	685a      	ldr	r2, [r3, #4]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007008:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007012:	d111      	bne.n	8007038 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800701c:	d004      	beq.n	8007028 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007026:	d107      	bne.n	8007038 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007036:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800703c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007040:	d10f      	bne.n	8007062 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007050:	601a      	str	r2, [r3, #0]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007060:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2200      	movs	r2, #0
 800706e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e017      	b.n	80070a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d101      	bne.n	8007080 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800707c:	2300      	movs	r3, #0
 800707e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	3b01      	subs	r3, #1
 8007084:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	689a      	ldr	r2, [r3, #8]
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	4013      	ands	r3, r2
 8007090:	68ba      	ldr	r2, [r7, #8]
 8007092:	429a      	cmp	r2, r3
 8007094:	bf0c      	ite	eq
 8007096:	2301      	moveq	r3, #1
 8007098:	2300      	movne	r3, #0
 800709a:	b2db      	uxtb	r3, r3
 800709c:	461a      	mov	r2, r3
 800709e:	79fb      	ldrb	r3, [r7, #7]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d19b      	bne.n	8006fdc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3720      	adds	r7, #32
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	20000000 	.word	0x20000000

080070b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b086      	sub	sp, #24
 80070b8:	af02      	add	r7, sp, #8
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	2200      	movs	r2, #0
 80070c8:	2180      	movs	r1, #128	; 0x80
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f7ff ff6a 	bl	8006fa4 <SPI_WaitFlagStateUntilTimeout>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d007      	beq.n	80070e6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070da:	f043 0220 	orr.w	r2, r3, #32
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e000      	b.n	80070e8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d101      	bne.n	8007102 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e041      	b.n	8007186 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d106      	bne.n	800711c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f7fa fd42 	bl	8001ba0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2202      	movs	r2, #2
 8007120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	3304      	adds	r3, #4
 800712c:	4619      	mov	r1, r3
 800712e:	4610      	mov	r0, r2
 8007130:	f000 fa74 	bl	800761c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3708      	adds	r7, #8
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
	...

08007190 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d001      	beq.n	80071a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e03a      	b.n	800721e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2202      	movs	r2, #2
 80071ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68da      	ldr	r2, [r3, #12]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f042 0201 	orr.w	r2, r2, #1
 80071be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a18      	ldr	r2, [pc, #96]	; (8007228 <HAL_TIM_Base_Start_IT+0x98>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d00e      	beq.n	80071e8 <HAL_TIM_Base_Start_IT+0x58>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071d2:	d009      	beq.n	80071e8 <HAL_TIM_Base_Start_IT+0x58>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a14      	ldr	r2, [pc, #80]	; (800722c <HAL_TIM_Base_Start_IT+0x9c>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d004      	beq.n	80071e8 <HAL_TIM_Base_Start_IT+0x58>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a13      	ldr	r2, [pc, #76]	; (8007230 <HAL_TIM_Base_Start_IT+0xa0>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d111      	bne.n	800720c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f003 0307 	and.w	r3, r3, #7
 80071f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2b06      	cmp	r3, #6
 80071f8:	d010      	beq.n	800721c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f042 0201 	orr.w	r2, r2, #1
 8007208:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800720a:	e007      	b.n	800721c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f042 0201 	orr.w	r2, r2, #1
 800721a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3714      	adds	r7, #20
 8007222:	46bd      	mov	sp, r7
 8007224:	bc80      	pop	{r7}
 8007226:	4770      	bx	lr
 8007228:	40012c00 	.word	0x40012c00
 800722c:	40000400 	.word	0x40000400
 8007230:	40000800 	.word	0x40000800

08007234 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	f003 0302 	and.w	r3, r3, #2
 8007246:	2b02      	cmp	r3, #2
 8007248:	d122      	bne.n	8007290 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	f003 0302 	and.w	r3, r3, #2
 8007254:	2b02      	cmp	r3, #2
 8007256:	d11b      	bne.n	8007290 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f06f 0202 	mvn.w	r2, #2
 8007260:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	f003 0303 	and.w	r3, r3, #3
 8007272:	2b00      	cmp	r3, #0
 8007274:	d003      	beq.n	800727e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f9b4 	bl	80075e4 <HAL_TIM_IC_CaptureCallback>
 800727c:	e005      	b.n	800728a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 f9a7 	bl	80075d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 f9b6 	bl	80075f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	f003 0304 	and.w	r3, r3, #4
 800729a:	2b04      	cmp	r3, #4
 800729c:	d122      	bne.n	80072e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	f003 0304 	and.w	r3, r3, #4
 80072a8:	2b04      	cmp	r3, #4
 80072aa:	d11b      	bne.n	80072e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f06f 0204 	mvn.w	r2, #4
 80072b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2202      	movs	r2, #2
 80072ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	699b      	ldr	r3, [r3, #24]
 80072c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d003      	beq.n	80072d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f98a 	bl	80075e4 <HAL_TIM_IC_CaptureCallback>
 80072d0:	e005      	b.n	80072de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 f97d 	bl	80075d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f98c 	bl	80075f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	f003 0308 	and.w	r3, r3, #8
 80072ee:	2b08      	cmp	r3, #8
 80072f0:	d122      	bne.n	8007338 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	f003 0308 	and.w	r3, r3, #8
 80072fc:	2b08      	cmp	r3, #8
 80072fe:	d11b      	bne.n	8007338 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f06f 0208 	mvn.w	r2, #8
 8007308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2204      	movs	r2, #4
 800730e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	69db      	ldr	r3, [r3, #28]
 8007316:	f003 0303 	and.w	r3, r3, #3
 800731a:	2b00      	cmp	r3, #0
 800731c:	d003      	beq.n	8007326 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f960 	bl	80075e4 <HAL_TIM_IC_CaptureCallback>
 8007324:	e005      	b.n	8007332 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 f953 	bl	80075d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f962 	bl	80075f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	f003 0310 	and.w	r3, r3, #16
 8007342:	2b10      	cmp	r3, #16
 8007344:	d122      	bne.n	800738c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	f003 0310 	and.w	r3, r3, #16
 8007350:	2b10      	cmp	r3, #16
 8007352:	d11b      	bne.n	800738c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f06f 0210 	mvn.w	r2, #16
 800735c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2208      	movs	r2, #8
 8007362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	69db      	ldr	r3, [r3, #28]
 800736a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800736e:	2b00      	cmp	r3, #0
 8007370:	d003      	beq.n	800737a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f936 	bl	80075e4 <HAL_TIM_IC_CaptureCallback>
 8007378:	e005      	b.n	8007386 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f929 	bl	80075d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 f938 	bl	80075f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	f003 0301 	and.w	r3, r3, #1
 8007396:	2b01      	cmp	r3, #1
 8007398:	d10e      	bne.n	80073b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	f003 0301 	and.w	r3, r3, #1
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d107      	bne.n	80073b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f06f 0201 	mvn.w	r2, #1
 80073b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f7f9 ff00 	bl	80011b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073c2:	2b80      	cmp	r3, #128	; 0x80
 80073c4:	d10e      	bne.n	80073e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073d0:	2b80      	cmp	r3, #128	; 0x80
 80073d2:	d107      	bne.n	80073e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80073dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fa7b 	bl	80078da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ee:	2b40      	cmp	r3, #64	; 0x40
 80073f0:	d10e      	bne.n	8007410 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073fc:	2b40      	cmp	r3, #64	; 0x40
 80073fe:	d107      	bne.n	8007410 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f8fc 	bl	8007608 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	f003 0320 	and.w	r3, r3, #32
 800741a:	2b20      	cmp	r3, #32
 800741c:	d10e      	bne.n	800743c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	f003 0320 	and.w	r3, r3, #32
 8007428:	2b20      	cmp	r3, #32
 800742a:	d107      	bne.n	800743c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f06f 0220 	mvn.w	r2, #32
 8007434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fa46 	bl	80078c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800743c:	bf00      	nop
 800743e:	3708      	adds	r7, #8
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800744e:	2300      	movs	r3, #0
 8007450:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007458:	2b01      	cmp	r3, #1
 800745a:	d101      	bne.n	8007460 <HAL_TIM_ConfigClockSource+0x1c>
 800745c:	2302      	movs	r3, #2
 800745e:	e0b4      	b.n	80075ca <HAL_TIM_ConfigClockSource+0x186>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2202      	movs	r2, #2
 800746c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800747e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007486:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	68ba      	ldr	r2, [r7, #8]
 800748e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007498:	d03e      	beq.n	8007518 <HAL_TIM_ConfigClockSource+0xd4>
 800749a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800749e:	f200 8087 	bhi.w	80075b0 <HAL_TIM_ConfigClockSource+0x16c>
 80074a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074a6:	f000 8086 	beq.w	80075b6 <HAL_TIM_ConfigClockSource+0x172>
 80074aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ae:	d87f      	bhi.n	80075b0 <HAL_TIM_ConfigClockSource+0x16c>
 80074b0:	2b70      	cmp	r3, #112	; 0x70
 80074b2:	d01a      	beq.n	80074ea <HAL_TIM_ConfigClockSource+0xa6>
 80074b4:	2b70      	cmp	r3, #112	; 0x70
 80074b6:	d87b      	bhi.n	80075b0 <HAL_TIM_ConfigClockSource+0x16c>
 80074b8:	2b60      	cmp	r3, #96	; 0x60
 80074ba:	d050      	beq.n	800755e <HAL_TIM_ConfigClockSource+0x11a>
 80074bc:	2b60      	cmp	r3, #96	; 0x60
 80074be:	d877      	bhi.n	80075b0 <HAL_TIM_ConfigClockSource+0x16c>
 80074c0:	2b50      	cmp	r3, #80	; 0x50
 80074c2:	d03c      	beq.n	800753e <HAL_TIM_ConfigClockSource+0xfa>
 80074c4:	2b50      	cmp	r3, #80	; 0x50
 80074c6:	d873      	bhi.n	80075b0 <HAL_TIM_ConfigClockSource+0x16c>
 80074c8:	2b40      	cmp	r3, #64	; 0x40
 80074ca:	d058      	beq.n	800757e <HAL_TIM_ConfigClockSource+0x13a>
 80074cc:	2b40      	cmp	r3, #64	; 0x40
 80074ce:	d86f      	bhi.n	80075b0 <HAL_TIM_ConfigClockSource+0x16c>
 80074d0:	2b30      	cmp	r3, #48	; 0x30
 80074d2:	d064      	beq.n	800759e <HAL_TIM_ConfigClockSource+0x15a>
 80074d4:	2b30      	cmp	r3, #48	; 0x30
 80074d6:	d86b      	bhi.n	80075b0 <HAL_TIM_ConfigClockSource+0x16c>
 80074d8:	2b20      	cmp	r3, #32
 80074da:	d060      	beq.n	800759e <HAL_TIM_ConfigClockSource+0x15a>
 80074dc:	2b20      	cmp	r3, #32
 80074de:	d867      	bhi.n	80075b0 <HAL_TIM_ConfigClockSource+0x16c>
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d05c      	beq.n	800759e <HAL_TIM_ConfigClockSource+0x15a>
 80074e4:	2b10      	cmp	r3, #16
 80074e6:	d05a      	beq.n	800759e <HAL_TIM_ConfigClockSource+0x15a>
 80074e8:	e062      	b.n	80075b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80074fa:	f000 f968 	bl	80077ce <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800750c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	609a      	str	r2, [r3, #8]
      break;
 8007516:	e04f      	b.n	80075b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007528:	f000 f951 	bl	80077ce <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	689a      	ldr	r2, [r3, #8]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800753a:	609a      	str	r2, [r3, #8]
      break;
 800753c:	e03c      	b.n	80075b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800754a:	461a      	mov	r2, r3
 800754c:	f000 f8c8 	bl	80076e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2150      	movs	r1, #80	; 0x50
 8007556:	4618      	mov	r0, r3
 8007558:	f000 f91f 	bl	800779a <TIM_ITRx_SetConfig>
      break;
 800755c:	e02c      	b.n	80075b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800756a:	461a      	mov	r2, r3
 800756c:	f000 f8e6 	bl	800773c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2160      	movs	r1, #96	; 0x60
 8007576:	4618      	mov	r0, r3
 8007578:	f000 f90f 	bl	800779a <TIM_ITRx_SetConfig>
      break;
 800757c:	e01c      	b.n	80075b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800758a:	461a      	mov	r2, r3
 800758c:	f000 f8a8 	bl	80076e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2140      	movs	r1, #64	; 0x40
 8007596:	4618      	mov	r0, r3
 8007598:	f000 f8ff 	bl	800779a <TIM_ITRx_SetConfig>
      break;
 800759c:	e00c      	b.n	80075b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4619      	mov	r1, r3
 80075a8:	4610      	mov	r0, r2
 80075aa:	f000 f8f6 	bl	800779a <TIM_ITRx_SetConfig>
      break;
 80075ae:	e003      	b.n	80075b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	73fb      	strb	r3, [r7, #15]
      break;
 80075b4:	e000      	b.n	80075b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80075b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3710      	adds	r7, #16
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075d2:	b480      	push	{r7}
 80075d4:	b083      	sub	sp, #12
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075da:	bf00      	nop
 80075dc:	370c      	adds	r7, #12
 80075de:	46bd      	mov	sp, r7
 80075e0:	bc80      	pop	{r7}
 80075e2:	4770      	bx	lr

080075e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80075ec:	bf00      	nop
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bc80      	pop	{r7}
 80075f4:	4770      	bx	lr

080075f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b083      	sub	sp, #12
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075fe:	bf00      	nop
 8007600:	370c      	adds	r7, #12
 8007602:	46bd      	mov	sp, r7
 8007604:	bc80      	pop	{r7}
 8007606:	4770      	bx	lr

08007608 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007610:	bf00      	nop
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	bc80      	pop	{r7}
 8007618:	4770      	bx	lr
	...

0800761c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800761c:	b480      	push	{r7}
 800761e:	b085      	sub	sp, #20
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4a29      	ldr	r2, [pc, #164]	; (80076d4 <TIM_Base_SetConfig+0xb8>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d00b      	beq.n	800764c <TIM_Base_SetConfig+0x30>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800763a:	d007      	beq.n	800764c <TIM_Base_SetConfig+0x30>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4a26      	ldr	r2, [pc, #152]	; (80076d8 <TIM_Base_SetConfig+0xbc>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d003      	beq.n	800764c <TIM_Base_SetConfig+0x30>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4a25      	ldr	r2, [pc, #148]	; (80076dc <TIM_Base_SetConfig+0xc0>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d108      	bne.n	800765e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007652:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	4313      	orrs	r3, r2
 800765c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4a1c      	ldr	r2, [pc, #112]	; (80076d4 <TIM_Base_SetConfig+0xb8>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d00b      	beq.n	800767e <TIM_Base_SetConfig+0x62>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800766c:	d007      	beq.n	800767e <TIM_Base_SetConfig+0x62>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4a19      	ldr	r2, [pc, #100]	; (80076d8 <TIM_Base_SetConfig+0xbc>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d003      	beq.n	800767e <TIM_Base_SetConfig+0x62>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4a18      	ldr	r2, [pc, #96]	; (80076dc <TIM_Base_SetConfig+0xc0>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d108      	bne.n	8007690 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	4313      	orrs	r3, r2
 800768e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	695b      	ldr	r3, [r3, #20]
 800769a:	4313      	orrs	r3, r2
 800769c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	689a      	ldr	r2, [r3, #8]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a07      	ldr	r2, [pc, #28]	; (80076d4 <TIM_Base_SetConfig+0xb8>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d103      	bne.n	80076c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	691a      	ldr	r2, [r3, #16]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	615a      	str	r2, [r3, #20]
}
 80076ca:	bf00      	nop
 80076cc:	3714      	adds	r7, #20
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bc80      	pop	{r7}
 80076d2:	4770      	bx	lr
 80076d4:	40012c00 	.word	0x40012c00
 80076d8:	40000400 	.word	0x40000400
 80076dc:	40000800 	.word	0x40000800

080076e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b087      	sub	sp, #28
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6a1b      	ldr	r3, [r3, #32]
 80076f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6a1b      	ldr	r3, [r3, #32]
 80076f6:	f023 0201 	bic.w	r2, r3, #1
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800770a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	011b      	lsls	r3, r3, #4
 8007710:	693a      	ldr	r2, [r7, #16]
 8007712:	4313      	orrs	r3, r2
 8007714:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	f023 030a 	bic.w	r3, r3, #10
 800771c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800771e:	697a      	ldr	r2, [r7, #20]
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	4313      	orrs	r3, r2
 8007724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	693a      	ldr	r2, [r7, #16]
 800772a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	697a      	ldr	r2, [r7, #20]
 8007730:	621a      	str	r2, [r3, #32]
}
 8007732:	bf00      	nop
 8007734:	371c      	adds	r7, #28
 8007736:	46bd      	mov	sp, r7
 8007738:	bc80      	pop	{r7}
 800773a:	4770      	bx	lr

0800773c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800773c:	b480      	push	{r7}
 800773e:	b087      	sub	sp, #28
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6a1b      	ldr	r3, [r3, #32]
 800774c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6a1b      	ldr	r3, [r3, #32]
 8007752:	f023 0210 	bic.w	r2, r3, #16
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	699b      	ldr	r3, [r3, #24]
 800775e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007766:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	031b      	lsls	r3, r3, #12
 800776c:	693a      	ldr	r2, [r7, #16]
 800776e:	4313      	orrs	r3, r2
 8007770:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007778:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	011b      	lsls	r3, r3, #4
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	4313      	orrs	r3, r2
 8007782:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	693a      	ldr	r2, [r7, #16]
 8007788:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	697a      	ldr	r2, [r7, #20]
 800778e:	621a      	str	r2, [r3, #32]
}
 8007790:	bf00      	nop
 8007792:	371c      	adds	r7, #28
 8007794:	46bd      	mov	sp, r7
 8007796:	bc80      	pop	{r7}
 8007798:	4770      	bx	lr

0800779a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800779a:	b480      	push	{r7}
 800779c:	b085      	sub	sp, #20
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
 80077a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077b2:	683a      	ldr	r2, [r7, #0]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	f043 0307 	orr.w	r3, r3, #7
 80077bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	609a      	str	r2, [r3, #8]
}
 80077c4:	bf00      	nop
 80077c6:	3714      	adds	r7, #20
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bc80      	pop	{r7}
 80077cc:	4770      	bx	lr

080077ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077ce:	b480      	push	{r7}
 80077d0:	b087      	sub	sp, #28
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	60f8      	str	r0, [r7, #12]
 80077d6:	60b9      	str	r1, [r7, #8]
 80077d8:	607a      	str	r2, [r7, #4]
 80077da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	021a      	lsls	r2, r3, #8
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	431a      	orrs	r2, r3
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	697a      	ldr	r2, [r7, #20]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	697a      	ldr	r2, [r7, #20]
 8007800:	609a      	str	r2, [r3, #8]
}
 8007802:	bf00      	nop
 8007804:	371c      	adds	r7, #28
 8007806:	46bd      	mov	sp, r7
 8007808:	bc80      	pop	{r7}
 800780a:	4770      	bx	lr

0800780c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800781c:	2b01      	cmp	r3, #1
 800781e:	d101      	bne.n	8007824 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007820:	2302      	movs	r3, #2
 8007822:	e046      	b.n	80078b2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2202      	movs	r2, #2
 8007830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800784a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	4313      	orrs	r3, r2
 8007854:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a16      	ldr	r2, [pc, #88]	; (80078bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d00e      	beq.n	8007886 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007870:	d009      	beq.n	8007886 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a12      	ldr	r2, [pc, #72]	; (80078c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d004      	beq.n	8007886 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a10      	ldr	r2, [pc, #64]	; (80078c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d10c      	bne.n	80078a0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800788c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	68ba      	ldr	r2, [r7, #8]
 8007894:	4313      	orrs	r3, r2
 8007896:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	68ba      	ldr	r2, [r7, #8]
 800789e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3714      	adds	r7, #20
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bc80      	pop	{r7}
 80078ba:	4770      	bx	lr
 80078bc:	40012c00 	.word	0x40012c00
 80078c0:	40000400 	.word	0x40000400
 80078c4:	40000800 	.word	0x40000800

080078c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078d0:	bf00      	nop
 80078d2:	370c      	adds	r7, #12
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bc80      	pop	{r7}
 80078d8:	4770      	bx	lr

080078da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078da:	b480      	push	{r7}
 80078dc:	b083      	sub	sp, #12
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078e2:	bf00      	nop
 80078e4:	370c      	adds	r7, #12
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bc80      	pop	{r7}
 80078ea:	4770      	bx	lr

080078ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d101      	bne.n	80078fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e042      	b.n	8007984 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b00      	cmp	r3, #0
 8007908:	d106      	bne.n	8007918 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f7fa f97c 	bl	8001c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2224      	movs	r2, #36	; 0x24
 800791c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	68da      	ldr	r2, [r3, #12]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800792e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 f82b 	bl	800798c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	691a      	ldr	r2, [r3, #16]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007944:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	695a      	ldr	r2, [r3, #20]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007954:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	68da      	ldr	r2, [r3, #12]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007964:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2220      	movs	r2, #32
 8007970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2220      	movs	r2, #32
 8007978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3708      	adds	r7, #8
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	68da      	ldr	r2, [r3, #12]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	430a      	orrs	r2, r1
 80079a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	689a      	ldr	r2, [r3, #8]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	431a      	orrs	r2, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	695b      	ldr	r3, [r3, #20]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80079c6:	f023 030c 	bic.w	r3, r3, #12
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	6812      	ldr	r2, [r2, #0]
 80079ce:	68b9      	ldr	r1, [r7, #8]
 80079d0:	430b      	orrs	r3, r1
 80079d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	699a      	ldr	r2, [r3, #24]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	430a      	orrs	r2, r1
 80079e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a2c      	ldr	r2, [pc, #176]	; (8007aa0 <UART_SetConfig+0x114>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d103      	bne.n	80079fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80079f4:	f7fe f9c8 	bl	8005d88 <HAL_RCC_GetPCLK2Freq>
 80079f8:	60f8      	str	r0, [r7, #12]
 80079fa:	e002      	b.n	8007a02 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80079fc:	f7fe f9b0 	bl	8005d60 <HAL_RCC_GetPCLK1Freq>
 8007a00:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	4613      	mov	r3, r2
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	4413      	add	r3, r2
 8007a0a:	009a      	lsls	r2, r3, #2
 8007a0c:	441a      	add	r2, r3
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a18:	4a22      	ldr	r2, [pc, #136]	; (8007aa4 <UART_SetConfig+0x118>)
 8007a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a1e:	095b      	lsrs	r3, r3, #5
 8007a20:	0119      	lsls	r1, r3, #4
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	4613      	mov	r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	4413      	add	r3, r2
 8007a2a:	009a      	lsls	r2, r3, #2
 8007a2c:	441a      	add	r2, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a38:	4b1a      	ldr	r3, [pc, #104]	; (8007aa4 <UART_SetConfig+0x118>)
 8007a3a:	fba3 0302 	umull	r0, r3, r3, r2
 8007a3e:	095b      	lsrs	r3, r3, #5
 8007a40:	2064      	movs	r0, #100	; 0x64
 8007a42:	fb00 f303 	mul.w	r3, r0, r3
 8007a46:	1ad3      	subs	r3, r2, r3
 8007a48:	011b      	lsls	r3, r3, #4
 8007a4a:	3332      	adds	r3, #50	; 0x32
 8007a4c:	4a15      	ldr	r2, [pc, #84]	; (8007aa4 <UART_SetConfig+0x118>)
 8007a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a52:	095b      	lsrs	r3, r3, #5
 8007a54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a58:	4419      	add	r1, r3
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	4413      	add	r3, r2
 8007a62:	009a      	lsls	r2, r3, #2
 8007a64:	441a      	add	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a70:	4b0c      	ldr	r3, [pc, #48]	; (8007aa4 <UART_SetConfig+0x118>)
 8007a72:	fba3 0302 	umull	r0, r3, r3, r2
 8007a76:	095b      	lsrs	r3, r3, #5
 8007a78:	2064      	movs	r0, #100	; 0x64
 8007a7a:	fb00 f303 	mul.w	r3, r0, r3
 8007a7e:	1ad3      	subs	r3, r2, r3
 8007a80:	011b      	lsls	r3, r3, #4
 8007a82:	3332      	adds	r3, #50	; 0x32
 8007a84:	4a07      	ldr	r2, [pc, #28]	; (8007aa4 <UART_SetConfig+0x118>)
 8007a86:	fba2 2303 	umull	r2, r3, r2, r3
 8007a8a:	095b      	lsrs	r3, r3, #5
 8007a8c:	f003 020f 	and.w	r2, r3, #15
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	440a      	add	r2, r1
 8007a96:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007a98:	bf00      	nop
 8007a9a:	3710      	adds	r7, #16
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	40013800 	.word	0x40013800
 8007aa4:	51eb851f 	.word	0x51eb851f

08007aa8 <malloc>:
 8007aa8:	4b02      	ldr	r3, [pc, #8]	; (8007ab4 <malloc+0xc>)
 8007aaa:	4601      	mov	r1, r0
 8007aac:	6818      	ldr	r0, [r3, #0]
 8007aae:	f000 b823 	b.w	8007af8 <_malloc_r>
 8007ab2:	bf00      	nop
 8007ab4:	20000074 	.word	0x20000074

08007ab8 <sbrk_aligned>:
 8007ab8:	b570      	push	{r4, r5, r6, lr}
 8007aba:	4e0e      	ldr	r6, [pc, #56]	; (8007af4 <sbrk_aligned+0x3c>)
 8007abc:	460c      	mov	r4, r1
 8007abe:	6831      	ldr	r1, [r6, #0]
 8007ac0:	4605      	mov	r5, r0
 8007ac2:	b911      	cbnz	r1, 8007aca <sbrk_aligned+0x12>
 8007ac4:	f000 fe68 	bl	8008798 <_sbrk_r>
 8007ac8:	6030      	str	r0, [r6, #0]
 8007aca:	4621      	mov	r1, r4
 8007acc:	4628      	mov	r0, r5
 8007ace:	f000 fe63 	bl	8008798 <_sbrk_r>
 8007ad2:	1c43      	adds	r3, r0, #1
 8007ad4:	d00a      	beq.n	8007aec <sbrk_aligned+0x34>
 8007ad6:	1cc4      	adds	r4, r0, #3
 8007ad8:	f024 0403 	bic.w	r4, r4, #3
 8007adc:	42a0      	cmp	r0, r4
 8007ade:	d007      	beq.n	8007af0 <sbrk_aligned+0x38>
 8007ae0:	1a21      	subs	r1, r4, r0
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	f000 fe58 	bl	8008798 <_sbrk_r>
 8007ae8:	3001      	adds	r0, #1
 8007aea:	d101      	bne.n	8007af0 <sbrk_aligned+0x38>
 8007aec:	f04f 34ff 	mov.w	r4, #4294967295
 8007af0:	4620      	mov	r0, r4
 8007af2:	bd70      	pop	{r4, r5, r6, pc}
 8007af4:	20000414 	.word	0x20000414

08007af8 <_malloc_r>:
 8007af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007afc:	1ccd      	adds	r5, r1, #3
 8007afe:	f025 0503 	bic.w	r5, r5, #3
 8007b02:	3508      	adds	r5, #8
 8007b04:	2d0c      	cmp	r5, #12
 8007b06:	bf38      	it	cc
 8007b08:	250c      	movcc	r5, #12
 8007b0a:	2d00      	cmp	r5, #0
 8007b0c:	4607      	mov	r7, r0
 8007b0e:	db01      	blt.n	8007b14 <_malloc_r+0x1c>
 8007b10:	42a9      	cmp	r1, r5
 8007b12:	d905      	bls.n	8007b20 <_malloc_r+0x28>
 8007b14:	230c      	movs	r3, #12
 8007b16:	2600      	movs	r6, #0
 8007b18:	603b      	str	r3, [r7, #0]
 8007b1a:	4630      	mov	r0, r6
 8007b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b20:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007bf4 <_malloc_r+0xfc>
 8007b24:	f000 f868 	bl	8007bf8 <__malloc_lock>
 8007b28:	f8d8 3000 	ldr.w	r3, [r8]
 8007b2c:	461c      	mov	r4, r3
 8007b2e:	bb5c      	cbnz	r4, 8007b88 <_malloc_r+0x90>
 8007b30:	4629      	mov	r1, r5
 8007b32:	4638      	mov	r0, r7
 8007b34:	f7ff ffc0 	bl	8007ab8 <sbrk_aligned>
 8007b38:	1c43      	adds	r3, r0, #1
 8007b3a:	4604      	mov	r4, r0
 8007b3c:	d155      	bne.n	8007bea <_malloc_r+0xf2>
 8007b3e:	f8d8 4000 	ldr.w	r4, [r8]
 8007b42:	4626      	mov	r6, r4
 8007b44:	2e00      	cmp	r6, #0
 8007b46:	d145      	bne.n	8007bd4 <_malloc_r+0xdc>
 8007b48:	2c00      	cmp	r4, #0
 8007b4a:	d048      	beq.n	8007bde <_malloc_r+0xe6>
 8007b4c:	6823      	ldr	r3, [r4, #0]
 8007b4e:	4631      	mov	r1, r6
 8007b50:	4638      	mov	r0, r7
 8007b52:	eb04 0903 	add.w	r9, r4, r3
 8007b56:	f000 fe1f 	bl	8008798 <_sbrk_r>
 8007b5a:	4581      	cmp	r9, r0
 8007b5c:	d13f      	bne.n	8007bde <_malloc_r+0xe6>
 8007b5e:	6821      	ldr	r1, [r4, #0]
 8007b60:	4638      	mov	r0, r7
 8007b62:	1a6d      	subs	r5, r5, r1
 8007b64:	4629      	mov	r1, r5
 8007b66:	f7ff ffa7 	bl	8007ab8 <sbrk_aligned>
 8007b6a:	3001      	adds	r0, #1
 8007b6c:	d037      	beq.n	8007bde <_malloc_r+0xe6>
 8007b6e:	6823      	ldr	r3, [r4, #0]
 8007b70:	442b      	add	r3, r5
 8007b72:	6023      	str	r3, [r4, #0]
 8007b74:	f8d8 3000 	ldr.w	r3, [r8]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d038      	beq.n	8007bee <_malloc_r+0xf6>
 8007b7c:	685a      	ldr	r2, [r3, #4]
 8007b7e:	42a2      	cmp	r2, r4
 8007b80:	d12b      	bne.n	8007bda <_malloc_r+0xe2>
 8007b82:	2200      	movs	r2, #0
 8007b84:	605a      	str	r2, [r3, #4]
 8007b86:	e00f      	b.n	8007ba8 <_malloc_r+0xb0>
 8007b88:	6822      	ldr	r2, [r4, #0]
 8007b8a:	1b52      	subs	r2, r2, r5
 8007b8c:	d41f      	bmi.n	8007bce <_malloc_r+0xd6>
 8007b8e:	2a0b      	cmp	r2, #11
 8007b90:	d917      	bls.n	8007bc2 <_malloc_r+0xca>
 8007b92:	1961      	adds	r1, r4, r5
 8007b94:	42a3      	cmp	r3, r4
 8007b96:	6025      	str	r5, [r4, #0]
 8007b98:	bf18      	it	ne
 8007b9a:	6059      	strne	r1, [r3, #4]
 8007b9c:	6863      	ldr	r3, [r4, #4]
 8007b9e:	bf08      	it	eq
 8007ba0:	f8c8 1000 	streq.w	r1, [r8]
 8007ba4:	5162      	str	r2, [r4, r5]
 8007ba6:	604b      	str	r3, [r1, #4]
 8007ba8:	4638      	mov	r0, r7
 8007baa:	f104 060b 	add.w	r6, r4, #11
 8007bae:	f000 f829 	bl	8007c04 <__malloc_unlock>
 8007bb2:	f026 0607 	bic.w	r6, r6, #7
 8007bb6:	1d23      	adds	r3, r4, #4
 8007bb8:	1af2      	subs	r2, r6, r3
 8007bba:	d0ae      	beq.n	8007b1a <_malloc_r+0x22>
 8007bbc:	1b9b      	subs	r3, r3, r6
 8007bbe:	50a3      	str	r3, [r4, r2]
 8007bc0:	e7ab      	b.n	8007b1a <_malloc_r+0x22>
 8007bc2:	42a3      	cmp	r3, r4
 8007bc4:	6862      	ldr	r2, [r4, #4]
 8007bc6:	d1dd      	bne.n	8007b84 <_malloc_r+0x8c>
 8007bc8:	f8c8 2000 	str.w	r2, [r8]
 8007bcc:	e7ec      	b.n	8007ba8 <_malloc_r+0xb0>
 8007bce:	4623      	mov	r3, r4
 8007bd0:	6864      	ldr	r4, [r4, #4]
 8007bd2:	e7ac      	b.n	8007b2e <_malloc_r+0x36>
 8007bd4:	4634      	mov	r4, r6
 8007bd6:	6876      	ldr	r6, [r6, #4]
 8007bd8:	e7b4      	b.n	8007b44 <_malloc_r+0x4c>
 8007bda:	4613      	mov	r3, r2
 8007bdc:	e7cc      	b.n	8007b78 <_malloc_r+0x80>
 8007bde:	230c      	movs	r3, #12
 8007be0:	4638      	mov	r0, r7
 8007be2:	603b      	str	r3, [r7, #0]
 8007be4:	f000 f80e 	bl	8007c04 <__malloc_unlock>
 8007be8:	e797      	b.n	8007b1a <_malloc_r+0x22>
 8007bea:	6025      	str	r5, [r4, #0]
 8007bec:	e7dc      	b.n	8007ba8 <_malloc_r+0xb0>
 8007bee:	605b      	str	r3, [r3, #4]
 8007bf0:	deff      	udf	#255	; 0xff
 8007bf2:	bf00      	nop
 8007bf4:	20000410 	.word	0x20000410

08007bf8 <__malloc_lock>:
 8007bf8:	4801      	ldr	r0, [pc, #4]	; (8007c00 <__malloc_lock+0x8>)
 8007bfa:	f000 be1a 	b.w	8008832 <__retarget_lock_acquire_recursive>
 8007bfe:	bf00      	nop
 8007c00:	20000558 	.word	0x20000558

08007c04 <__malloc_unlock>:
 8007c04:	4801      	ldr	r0, [pc, #4]	; (8007c0c <__malloc_unlock+0x8>)
 8007c06:	f000 be15 	b.w	8008834 <__retarget_lock_release_recursive>
 8007c0a:	bf00      	nop
 8007c0c:	20000558 	.word	0x20000558

08007c10 <__cvt>:
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c16:	461f      	mov	r7, r3
 8007c18:	bfbb      	ittet	lt
 8007c1a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007c1e:	461f      	movlt	r7, r3
 8007c20:	2300      	movge	r3, #0
 8007c22:	232d      	movlt	r3, #45	; 0x2d
 8007c24:	b088      	sub	sp, #32
 8007c26:	4614      	mov	r4, r2
 8007c28:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c2a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007c2c:	7013      	strb	r3, [r2, #0]
 8007c2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007c30:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007c34:	f023 0820 	bic.w	r8, r3, #32
 8007c38:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c3c:	d005      	beq.n	8007c4a <__cvt+0x3a>
 8007c3e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007c42:	d100      	bne.n	8007c46 <__cvt+0x36>
 8007c44:	3501      	adds	r5, #1
 8007c46:	2302      	movs	r3, #2
 8007c48:	e000      	b.n	8007c4c <__cvt+0x3c>
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	aa07      	add	r2, sp, #28
 8007c4e:	9204      	str	r2, [sp, #16]
 8007c50:	aa06      	add	r2, sp, #24
 8007c52:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007c56:	e9cd 3500 	strd	r3, r5, [sp]
 8007c5a:	4622      	mov	r2, r4
 8007c5c:	463b      	mov	r3, r7
 8007c5e:	f000 fe8f 	bl	8008980 <_dtoa_r>
 8007c62:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007c66:	4606      	mov	r6, r0
 8007c68:	d102      	bne.n	8007c70 <__cvt+0x60>
 8007c6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c6c:	07db      	lsls	r3, r3, #31
 8007c6e:	d522      	bpl.n	8007cb6 <__cvt+0xa6>
 8007c70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c74:	eb06 0905 	add.w	r9, r6, r5
 8007c78:	d110      	bne.n	8007c9c <__cvt+0x8c>
 8007c7a:	7833      	ldrb	r3, [r6, #0]
 8007c7c:	2b30      	cmp	r3, #48	; 0x30
 8007c7e:	d10a      	bne.n	8007c96 <__cvt+0x86>
 8007c80:	2200      	movs	r2, #0
 8007c82:	2300      	movs	r3, #0
 8007c84:	4620      	mov	r0, r4
 8007c86:	4639      	mov	r1, r7
 8007c88:	f7f8 fe8e 	bl	80009a8 <__aeabi_dcmpeq>
 8007c8c:	b918      	cbnz	r0, 8007c96 <__cvt+0x86>
 8007c8e:	f1c5 0501 	rsb	r5, r5, #1
 8007c92:	f8ca 5000 	str.w	r5, [sl]
 8007c96:	f8da 3000 	ldr.w	r3, [sl]
 8007c9a:	4499      	add	r9, r3
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	4639      	mov	r1, r7
 8007ca4:	f7f8 fe80 	bl	80009a8 <__aeabi_dcmpeq>
 8007ca8:	b108      	cbz	r0, 8007cae <__cvt+0x9e>
 8007caa:	f8cd 901c 	str.w	r9, [sp, #28]
 8007cae:	2230      	movs	r2, #48	; 0x30
 8007cb0:	9b07      	ldr	r3, [sp, #28]
 8007cb2:	454b      	cmp	r3, r9
 8007cb4:	d307      	bcc.n	8007cc6 <__cvt+0xb6>
 8007cb6:	4630      	mov	r0, r6
 8007cb8:	9b07      	ldr	r3, [sp, #28]
 8007cba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007cbc:	1b9b      	subs	r3, r3, r6
 8007cbe:	6013      	str	r3, [r2, #0]
 8007cc0:	b008      	add	sp, #32
 8007cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cc6:	1c59      	adds	r1, r3, #1
 8007cc8:	9107      	str	r1, [sp, #28]
 8007cca:	701a      	strb	r2, [r3, #0]
 8007ccc:	e7f0      	b.n	8007cb0 <__cvt+0xa0>

08007cce <__exponent>:
 8007cce:	4603      	mov	r3, r0
 8007cd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cd2:	2900      	cmp	r1, #0
 8007cd4:	f803 2b02 	strb.w	r2, [r3], #2
 8007cd8:	bfb6      	itet	lt
 8007cda:	222d      	movlt	r2, #45	; 0x2d
 8007cdc:	222b      	movge	r2, #43	; 0x2b
 8007cde:	4249      	neglt	r1, r1
 8007ce0:	2909      	cmp	r1, #9
 8007ce2:	7042      	strb	r2, [r0, #1]
 8007ce4:	dd2a      	ble.n	8007d3c <__exponent+0x6e>
 8007ce6:	f10d 0207 	add.w	r2, sp, #7
 8007cea:	4617      	mov	r7, r2
 8007cec:	260a      	movs	r6, #10
 8007cee:	fb91 f5f6 	sdiv	r5, r1, r6
 8007cf2:	4694      	mov	ip, r2
 8007cf4:	fb06 1415 	mls	r4, r6, r5, r1
 8007cf8:	3430      	adds	r4, #48	; 0x30
 8007cfa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007cfe:	460c      	mov	r4, r1
 8007d00:	2c63      	cmp	r4, #99	; 0x63
 8007d02:	4629      	mov	r1, r5
 8007d04:	f102 32ff 	add.w	r2, r2, #4294967295
 8007d08:	dcf1      	bgt.n	8007cee <__exponent+0x20>
 8007d0a:	3130      	adds	r1, #48	; 0x30
 8007d0c:	f1ac 0402 	sub.w	r4, ip, #2
 8007d10:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007d14:	4622      	mov	r2, r4
 8007d16:	1c41      	adds	r1, r0, #1
 8007d18:	42ba      	cmp	r2, r7
 8007d1a:	d30a      	bcc.n	8007d32 <__exponent+0x64>
 8007d1c:	f10d 0209 	add.w	r2, sp, #9
 8007d20:	eba2 020c 	sub.w	r2, r2, ip
 8007d24:	42bc      	cmp	r4, r7
 8007d26:	bf88      	it	hi
 8007d28:	2200      	movhi	r2, #0
 8007d2a:	4413      	add	r3, r2
 8007d2c:	1a18      	subs	r0, r3, r0
 8007d2e:	b003      	add	sp, #12
 8007d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d32:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007d36:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007d3a:	e7ed      	b.n	8007d18 <__exponent+0x4a>
 8007d3c:	2330      	movs	r3, #48	; 0x30
 8007d3e:	3130      	adds	r1, #48	; 0x30
 8007d40:	7083      	strb	r3, [r0, #2]
 8007d42:	70c1      	strb	r1, [r0, #3]
 8007d44:	1d03      	adds	r3, r0, #4
 8007d46:	e7f1      	b.n	8007d2c <__exponent+0x5e>

08007d48 <_printf_float>:
 8007d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d4c:	b091      	sub	sp, #68	; 0x44
 8007d4e:	460c      	mov	r4, r1
 8007d50:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007d54:	4616      	mov	r6, r2
 8007d56:	461f      	mov	r7, r3
 8007d58:	4605      	mov	r5, r0
 8007d5a:	f000 fce5 	bl	8008728 <_localeconv_r>
 8007d5e:	6803      	ldr	r3, [r0, #0]
 8007d60:	4618      	mov	r0, r3
 8007d62:	9309      	str	r3, [sp, #36]	; 0x24
 8007d64:	f7f8 f9f4 	bl	8000150 <strlen>
 8007d68:	2300      	movs	r3, #0
 8007d6a:	930e      	str	r3, [sp, #56]	; 0x38
 8007d6c:	f8d8 3000 	ldr.w	r3, [r8]
 8007d70:	900a      	str	r0, [sp, #40]	; 0x28
 8007d72:	3307      	adds	r3, #7
 8007d74:	f023 0307 	bic.w	r3, r3, #7
 8007d78:	f103 0208 	add.w	r2, r3, #8
 8007d7c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007d80:	f8d4 b000 	ldr.w	fp, [r4]
 8007d84:	f8c8 2000 	str.w	r2, [r8]
 8007d88:	e9d3 a800 	ldrd	sl, r8, [r3]
 8007d8c:	4652      	mov	r2, sl
 8007d8e:	4643      	mov	r3, r8
 8007d90:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007d94:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8007d98:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d9e:	4650      	mov	r0, sl
 8007da0:	4b9c      	ldr	r3, [pc, #624]	; (8008014 <_printf_float+0x2cc>)
 8007da2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007da4:	f7f8 fe32 	bl	8000a0c <__aeabi_dcmpun>
 8007da8:	bb70      	cbnz	r0, 8007e08 <_printf_float+0xc0>
 8007daa:	f04f 32ff 	mov.w	r2, #4294967295
 8007dae:	4650      	mov	r0, sl
 8007db0:	4b98      	ldr	r3, [pc, #608]	; (8008014 <_printf_float+0x2cc>)
 8007db2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007db4:	f7f8 fe0c 	bl	80009d0 <__aeabi_dcmple>
 8007db8:	bb30      	cbnz	r0, 8007e08 <_printf_float+0xc0>
 8007dba:	2200      	movs	r2, #0
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	4650      	mov	r0, sl
 8007dc0:	4641      	mov	r1, r8
 8007dc2:	f7f8 fdfb 	bl	80009bc <__aeabi_dcmplt>
 8007dc6:	b110      	cbz	r0, 8007dce <_printf_float+0x86>
 8007dc8:	232d      	movs	r3, #45	; 0x2d
 8007dca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dce:	4a92      	ldr	r2, [pc, #584]	; (8008018 <_printf_float+0x2d0>)
 8007dd0:	4b92      	ldr	r3, [pc, #584]	; (800801c <_printf_float+0x2d4>)
 8007dd2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007dd6:	bf94      	ite	ls
 8007dd8:	4690      	movls	r8, r2
 8007dda:	4698      	movhi	r8, r3
 8007ddc:	2303      	movs	r3, #3
 8007dde:	f04f 0a00 	mov.w	sl, #0
 8007de2:	6123      	str	r3, [r4, #16]
 8007de4:	f02b 0304 	bic.w	r3, fp, #4
 8007de8:	6023      	str	r3, [r4, #0]
 8007dea:	4633      	mov	r3, r6
 8007dec:	4621      	mov	r1, r4
 8007dee:	4628      	mov	r0, r5
 8007df0:	9700      	str	r7, [sp, #0]
 8007df2:	aa0f      	add	r2, sp, #60	; 0x3c
 8007df4:	f000 f9d6 	bl	80081a4 <_printf_common>
 8007df8:	3001      	adds	r0, #1
 8007dfa:	f040 8090 	bne.w	8007f1e <_printf_float+0x1d6>
 8007dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8007e02:	b011      	add	sp, #68	; 0x44
 8007e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e08:	4652      	mov	r2, sl
 8007e0a:	4643      	mov	r3, r8
 8007e0c:	4650      	mov	r0, sl
 8007e0e:	4641      	mov	r1, r8
 8007e10:	f7f8 fdfc 	bl	8000a0c <__aeabi_dcmpun>
 8007e14:	b148      	cbz	r0, 8007e2a <_printf_float+0xe2>
 8007e16:	f1b8 0f00 	cmp.w	r8, #0
 8007e1a:	bfb8      	it	lt
 8007e1c:	232d      	movlt	r3, #45	; 0x2d
 8007e1e:	4a80      	ldr	r2, [pc, #512]	; (8008020 <_printf_float+0x2d8>)
 8007e20:	bfb8      	it	lt
 8007e22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007e26:	4b7f      	ldr	r3, [pc, #508]	; (8008024 <_printf_float+0x2dc>)
 8007e28:	e7d3      	b.n	8007dd2 <_printf_float+0x8a>
 8007e2a:	6863      	ldr	r3, [r4, #4]
 8007e2c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007e30:	1c5a      	adds	r2, r3, #1
 8007e32:	d142      	bne.n	8007eba <_printf_float+0x172>
 8007e34:	2306      	movs	r3, #6
 8007e36:	6063      	str	r3, [r4, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	9206      	str	r2, [sp, #24]
 8007e3c:	aa0e      	add	r2, sp, #56	; 0x38
 8007e3e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007e42:	aa0d      	add	r2, sp, #52	; 0x34
 8007e44:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007e48:	9203      	str	r2, [sp, #12]
 8007e4a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007e4e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007e52:	6023      	str	r3, [r4, #0]
 8007e54:	6863      	ldr	r3, [r4, #4]
 8007e56:	4652      	mov	r2, sl
 8007e58:	9300      	str	r3, [sp, #0]
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	4643      	mov	r3, r8
 8007e5e:	910b      	str	r1, [sp, #44]	; 0x2c
 8007e60:	f7ff fed6 	bl	8007c10 <__cvt>
 8007e64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e66:	4680      	mov	r8, r0
 8007e68:	2947      	cmp	r1, #71	; 0x47
 8007e6a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007e6c:	d108      	bne.n	8007e80 <_printf_float+0x138>
 8007e6e:	1cc8      	adds	r0, r1, #3
 8007e70:	db02      	blt.n	8007e78 <_printf_float+0x130>
 8007e72:	6863      	ldr	r3, [r4, #4]
 8007e74:	4299      	cmp	r1, r3
 8007e76:	dd40      	ble.n	8007efa <_printf_float+0x1b2>
 8007e78:	f1a9 0902 	sub.w	r9, r9, #2
 8007e7c:	fa5f f989 	uxtb.w	r9, r9
 8007e80:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007e84:	d81f      	bhi.n	8007ec6 <_printf_float+0x17e>
 8007e86:	464a      	mov	r2, r9
 8007e88:	3901      	subs	r1, #1
 8007e8a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007e8e:	910d      	str	r1, [sp, #52]	; 0x34
 8007e90:	f7ff ff1d 	bl	8007cce <__exponent>
 8007e94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e96:	4682      	mov	sl, r0
 8007e98:	1813      	adds	r3, r2, r0
 8007e9a:	2a01      	cmp	r2, #1
 8007e9c:	6123      	str	r3, [r4, #16]
 8007e9e:	dc02      	bgt.n	8007ea6 <_printf_float+0x15e>
 8007ea0:	6822      	ldr	r2, [r4, #0]
 8007ea2:	07d2      	lsls	r2, r2, #31
 8007ea4:	d501      	bpl.n	8007eaa <_printf_float+0x162>
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	6123      	str	r3, [r4, #16]
 8007eaa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d09b      	beq.n	8007dea <_printf_float+0xa2>
 8007eb2:	232d      	movs	r3, #45	; 0x2d
 8007eb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007eb8:	e797      	b.n	8007dea <_printf_float+0xa2>
 8007eba:	2947      	cmp	r1, #71	; 0x47
 8007ebc:	d1bc      	bne.n	8007e38 <_printf_float+0xf0>
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d1ba      	bne.n	8007e38 <_printf_float+0xf0>
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e7b7      	b.n	8007e36 <_printf_float+0xee>
 8007ec6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007eca:	d118      	bne.n	8007efe <_printf_float+0x1b6>
 8007ecc:	2900      	cmp	r1, #0
 8007ece:	6863      	ldr	r3, [r4, #4]
 8007ed0:	dd0b      	ble.n	8007eea <_printf_float+0x1a2>
 8007ed2:	6121      	str	r1, [r4, #16]
 8007ed4:	b913      	cbnz	r3, 8007edc <_printf_float+0x194>
 8007ed6:	6822      	ldr	r2, [r4, #0]
 8007ed8:	07d0      	lsls	r0, r2, #31
 8007eda:	d502      	bpl.n	8007ee2 <_printf_float+0x19a>
 8007edc:	3301      	adds	r3, #1
 8007ede:	440b      	add	r3, r1
 8007ee0:	6123      	str	r3, [r4, #16]
 8007ee2:	f04f 0a00 	mov.w	sl, #0
 8007ee6:	65a1      	str	r1, [r4, #88]	; 0x58
 8007ee8:	e7df      	b.n	8007eaa <_printf_float+0x162>
 8007eea:	b913      	cbnz	r3, 8007ef2 <_printf_float+0x1aa>
 8007eec:	6822      	ldr	r2, [r4, #0]
 8007eee:	07d2      	lsls	r2, r2, #31
 8007ef0:	d501      	bpl.n	8007ef6 <_printf_float+0x1ae>
 8007ef2:	3302      	adds	r3, #2
 8007ef4:	e7f4      	b.n	8007ee0 <_printf_float+0x198>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e7f2      	b.n	8007ee0 <_printf_float+0x198>
 8007efa:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007efe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f00:	4299      	cmp	r1, r3
 8007f02:	db05      	blt.n	8007f10 <_printf_float+0x1c8>
 8007f04:	6823      	ldr	r3, [r4, #0]
 8007f06:	6121      	str	r1, [r4, #16]
 8007f08:	07d8      	lsls	r0, r3, #31
 8007f0a:	d5ea      	bpl.n	8007ee2 <_printf_float+0x19a>
 8007f0c:	1c4b      	adds	r3, r1, #1
 8007f0e:	e7e7      	b.n	8007ee0 <_printf_float+0x198>
 8007f10:	2900      	cmp	r1, #0
 8007f12:	bfcc      	ite	gt
 8007f14:	2201      	movgt	r2, #1
 8007f16:	f1c1 0202 	rsble	r2, r1, #2
 8007f1a:	4413      	add	r3, r2
 8007f1c:	e7e0      	b.n	8007ee0 <_printf_float+0x198>
 8007f1e:	6823      	ldr	r3, [r4, #0]
 8007f20:	055a      	lsls	r2, r3, #21
 8007f22:	d407      	bmi.n	8007f34 <_printf_float+0x1ec>
 8007f24:	6923      	ldr	r3, [r4, #16]
 8007f26:	4642      	mov	r2, r8
 8007f28:	4631      	mov	r1, r6
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	47b8      	blx	r7
 8007f2e:	3001      	adds	r0, #1
 8007f30:	d12b      	bne.n	8007f8a <_printf_float+0x242>
 8007f32:	e764      	b.n	8007dfe <_printf_float+0xb6>
 8007f34:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007f38:	f240 80dd 	bls.w	80080f6 <_printf_float+0x3ae>
 8007f3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f40:	2200      	movs	r2, #0
 8007f42:	2300      	movs	r3, #0
 8007f44:	f7f8 fd30 	bl	80009a8 <__aeabi_dcmpeq>
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	d033      	beq.n	8007fb4 <_printf_float+0x26c>
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	4631      	mov	r1, r6
 8007f50:	4628      	mov	r0, r5
 8007f52:	4a35      	ldr	r2, [pc, #212]	; (8008028 <_printf_float+0x2e0>)
 8007f54:	47b8      	blx	r7
 8007f56:	3001      	adds	r0, #1
 8007f58:	f43f af51 	beq.w	8007dfe <_printf_float+0xb6>
 8007f5c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007f60:	429a      	cmp	r2, r3
 8007f62:	db02      	blt.n	8007f6a <_printf_float+0x222>
 8007f64:	6823      	ldr	r3, [r4, #0]
 8007f66:	07d8      	lsls	r0, r3, #31
 8007f68:	d50f      	bpl.n	8007f8a <_printf_float+0x242>
 8007f6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f6e:	4631      	mov	r1, r6
 8007f70:	4628      	mov	r0, r5
 8007f72:	47b8      	blx	r7
 8007f74:	3001      	adds	r0, #1
 8007f76:	f43f af42 	beq.w	8007dfe <_printf_float+0xb6>
 8007f7a:	f04f 0800 	mov.w	r8, #0
 8007f7e:	f104 091a 	add.w	r9, r4, #26
 8007f82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f84:	3b01      	subs	r3, #1
 8007f86:	4543      	cmp	r3, r8
 8007f88:	dc09      	bgt.n	8007f9e <_printf_float+0x256>
 8007f8a:	6823      	ldr	r3, [r4, #0]
 8007f8c:	079b      	lsls	r3, r3, #30
 8007f8e:	f100 8104 	bmi.w	800819a <_printf_float+0x452>
 8007f92:	68e0      	ldr	r0, [r4, #12]
 8007f94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f96:	4298      	cmp	r0, r3
 8007f98:	bfb8      	it	lt
 8007f9a:	4618      	movlt	r0, r3
 8007f9c:	e731      	b.n	8007e02 <_printf_float+0xba>
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	464a      	mov	r2, r9
 8007fa2:	4631      	mov	r1, r6
 8007fa4:	4628      	mov	r0, r5
 8007fa6:	47b8      	blx	r7
 8007fa8:	3001      	adds	r0, #1
 8007faa:	f43f af28 	beq.w	8007dfe <_printf_float+0xb6>
 8007fae:	f108 0801 	add.w	r8, r8, #1
 8007fb2:	e7e6      	b.n	8007f82 <_printf_float+0x23a>
 8007fb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	dc38      	bgt.n	800802c <_printf_float+0x2e4>
 8007fba:	2301      	movs	r3, #1
 8007fbc:	4631      	mov	r1, r6
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	4a19      	ldr	r2, [pc, #100]	; (8008028 <_printf_float+0x2e0>)
 8007fc2:	47b8      	blx	r7
 8007fc4:	3001      	adds	r0, #1
 8007fc6:	f43f af1a 	beq.w	8007dfe <_printf_float+0xb6>
 8007fca:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	d102      	bne.n	8007fd8 <_printf_float+0x290>
 8007fd2:	6823      	ldr	r3, [r4, #0]
 8007fd4:	07d9      	lsls	r1, r3, #31
 8007fd6:	d5d8      	bpl.n	8007f8a <_printf_float+0x242>
 8007fd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fdc:	4631      	mov	r1, r6
 8007fde:	4628      	mov	r0, r5
 8007fe0:	47b8      	blx	r7
 8007fe2:	3001      	adds	r0, #1
 8007fe4:	f43f af0b 	beq.w	8007dfe <_printf_float+0xb6>
 8007fe8:	f04f 0900 	mov.w	r9, #0
 8007fec:	f104 0a1a 	add.w	sl, r4, #26
 8007ff0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ff2:	425b      	negs	r3, r3
 8007ff4:	454b      	cmp	r3, r9
 8007ff6:	dc01      	bgt.n	8007ffc <_printf_float+0x2b4>
 8007ff8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ffa:	e794      	b.n	8007f26 <_printf_float+0x1de>
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	4652      	mov	r2, sl
 8008000:	4631      	mov	r1, r6
 8008002:	4628      	mov	r0, r5
 8008004:	47b8      	blx	r7
 8008006:	3001      	adds	r0, #1
 8008008:	f43f aef9 	beq.w	8007dfe <_printf_float+0xb6>
 800800c:	f109 0901 	add.w	r9, r9, #1
 8008010:	e7ee      	b.n	8007ff0 <_printf_float+0x2a8>
 8008012:	bf00      	nop
 8008014:	7fefffff 	.word	0x7fefffff
 8008018:	0800bdea 	.word	0x0800bdea
 800801c:	0800bdee 	.word	0x0800bdee
 8008020:	0800bdf2 	.word	0x0800bdf2
 8008024:	0800bdf6 	.word	0x0800bdf6
 8008028:	0800bdfa 	.word	0x0800bdfa
 800802c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800802e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008030:	429a      	cmp	r2, r3
 8008032:	bfa8      	it	ge
 8008034:	461a      	movge	r2, r3
 8008036:	2a00      	cmp	r2, #0
 8008038:	4691      	mov	r9, r2
 800803a:	dc37      	bgt.n	80080ac <_printf_float+0x364>
 800803c:	f04f 0b00 	mov.w	fp, #0
 8008040:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008044:	f104 021a 	add.w	r2, r4, #26
 8008048:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800804c:	ebaa 0309 	sub.w	r3, sl, r9
 8008050:	455b      	cmp	r3, fp
 8008052:	dc33      	bgt.n	80080bc <_printf_float+0x374>
 8008054:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008058:	429a      	cmp	r2, r3
 800805a:	db3b      	blt.n	80080d4 <_printf_float+0x38c>
 800805c:	6823      	ldr	r3, [r4, #0]
 800805e:	07da      	lsls	r2, r3, #31
 8008060:	d438      	bmi.n	80080d4 <_printf_float+0x38c>
 8008062:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008066:	eba2 0903 	sub.w	r9, r2, r3
 800806a:	eba2 020a 	sub.w	r2, r2, sl
 800806e:	4591      	cmp	r9, r2
 8008070:	bfa8      	it	ge
 8008072:	4691      	movge	r9, r2
 8008074:	f1b9 0f00 	cmp.w	r9, #0
 8008078:	dc34      	bgt.n	80080e4 <_printf_float+0x39c>
 800807a:	f04f 0800 	mov.w	r8, #0
 800807e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008082:	f104 0a1a 	add.w	sl, r4, #26
 8008086:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800808a:	1a9b      	subs	r3, r3, r2
 800808c:	eba3 0309 	sub.w	r3, r3, r9
 8008090:	4543      	cmp	r3, r8
 8008092:	f77f af7a 	ble.w	8007f8a <_printf_float+0x242>
 8008096:	2301      	movs	r3, #1
 8008098:	4652      	mov	r2, sl
 800809a:	4631      	mov	r1, r6
 800809c:	4628      	mov	r0, r5
 800809e:	47b8      	blx	r7
 80080a0:	3001      	adds	r0, #1
 80080a2:	f43f aeac 	beq.w	8007dfe <_printf_float+0xb6>
 80080a6:	f108 0801 	add.w	r8, r8, #1
 80080aa:	e7ec      	b.n	8008086 <_printf_float+0x33e>
 80080ac:	4613      	mov	r3, r2
 80080ae:	4631      	mov	r1, r6
 80080b0:	4642      	mov	r2, r8
 80080b2:	4628      	mov	r0, r5
 80080b4:	47b8      	blx	r7
 80080b6:	3001      	adds	r0, #1
 80080b8:	d1c0      	bne.n	800803c <_printf_float+0x2f4>
 80080ba:	e6a0      	b.n	8007dfe <_printf_float+0xb6>
 80080bc:	2301      	movs	r3, #1
 80080be:	4631      	mov	r1, r6
 80080c0:	4628      	mov	r0, r5
 80080c2:	920b      	str	r2, [sp, #44]	; 0x2c
 80080c4:	47b8      	blx	r7
 80080c6:	3001      	adds	r0, #1
 80080c8:	f43f ae99 	beq.w	8007dfe <_printf_float+0xb6>
 80080cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80080ce:	f10b 0b01 	add.w	fp, fp, #1
 80080d2:	e7b9      	b.n	8008048 <_printf_float+0x300>
 80080d4:	4631      	mov	r1, r6
 80080d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080da:	4628      	mov	r0, r5
 80080dc:	47b8      	blx	r7
 80080de:	3001      	adds	r0, #1
 80080e0:	d1bf      	bne.n	8008062 <_printf_float+0x31a>
 80080e2:	e68c      	b.n	8007dfe <_printf_float+0xb6>
 80080e4:	464b      	mov	r3, r9
 80080e6:	4631      	mov	r1, r6
 80080e8:	4628      	mov	r0, r5
 80080ea:	eb08 020a 	add.w	r2, r8, sl
 80080ee:	47b8      	blx	r7
 80080f0:	3001      	adds	r0, #1
 80080f2:	d1c2      	bne.n	800807a <_printf_float+0x332>
 80080f4:	e683      	b.n	8007dfe <_printf_float+0xb6>
 80080f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80080f8:	2a01      	cmp	r2, #1
 80080fa:	dc01      	bgt.n	8008100 <_printf_float+0x3b8>
 80080fc:	07db      	lsls	r3, r3, #31
 80080fe:	d539      	bpl.n	8008174 <_printf_float+0x42c>
 8008100:	2301      	movs	r3, #1
 8008102:	4642      	mov	r2, r8
 8008104:	4631      	mov	r1, r6
 8008106:	4628      	mov	r0, r5
 8008108:	47b8      	blx	r7
 800810a:	3001      	adds	r0, #1
 800810c:	f43f ae77 	beq.w	8007dfe <_printf_float+0xb6>
 8008110:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008114:	4631      	mov	r1, r6
 8008116:	4628      	mov	r0, r5
 8008118:	47b8      	blx	r7
 800811a:	3001      	adds	r0, #1
 800811c:	f43f ae6f 	beq.w	8007dfe <_printf_float+0xb6>
 8008120:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008124:	2200      	movs	r2, #0
 8008126:	2300      	movs	r3, #0
 8008128:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800812c:	f7f8 fc3c 	bl	80009a8 <__aeabi_dcmpeq>
 8008130:	b9d8      	cbnz	r0, 800816a <_printf_float+0x422>
 8008132:	f109 33ff 	add.w	r3, r9, #4294967295
 8008136:	f108 0201 	add.w	r2, r8, #1
 800813a:	4631      	mov	r1, r6
 800813c:	4628      	mov	r0, r5
 800813e:	47b8      	blx	r7
 8008140:	3001      	adds	r0, #1
 8008142:	d10e      	bne.n	8008162 <_printf_float+0x41a>
 8008144:	e65b      	b.n	8007dfe <_printf_float+0xb6>
 8008146:	2301      	movs	r3, #1
 8008148:	464a      	mov	r2, r9
 800814a:	4631      	mov	r1, r6
 800814c:	4628      	mov	r0, r5
 800814e:	47b8      	blx	r7
 8008150:	3001      	adds	r0, #1
 8008152:	f43f ae54 	beq.w	8007dfe <_printf_float+0xb6>
 8008156:	f108 0801 	add.w	r8, r8, #1
 800815a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800815c:	3b01      	subs	r3, #1
 800815e:	4543      	cmp	r3, r8
 8008160:	dcf1      	bgt.n	8008146 <_printf_float+0x3fe>
 8008162:	4653      	mov	r3, sl
 8008164:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008168:	e6de      	b.n	8007f28 <_printf_float+0x1e0>
 800816a:	f04f 0800 	mov.w	r8, #0
 800816e:	f104 091a 	add.w	r9, r4, #26
 8008172:	e7f2      	b.n	800815a <_printf_float+0x412>
 8008174:	2301      	movs	r3, #1
 8008176:	4642      	mov	r2, r8
 8008178:	e7df      	b.n	800813a <_printf_float+0x3f2>
 800817a:	2301      	movs	r3, #1
 800817c:	464a      	mov	r2, r9
 800817e:	4631      	mov	r1, r6
 8008180:	4628      	mov	r0, r5
 8008182:	47b8      	blx	r7
 8008184:	3001      	adds	r0, #1
 8008186:	f43f ae3a 	beq.w	8007dfe <_printf_float+0xb6>
 800818a:	f108 0801 	add.w	r8, r8, #1
 800818e:	68e3      	ldr	r3, [r4, #12]
 8008190:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008192:	1a5b      	subs	r3, r3, r1
 8008194:	4543      	cmp	r3, r8
 8008196:	dcf0      	bgt.n	800817a <_printf_float+0x432>
 8008198:	e6fb      	b.n	8007f92 <_printf_float+0x24a>
 800819a:	f04f 0800 	mov.w	r8, #0
 800819e:	f104 0919 	add.w	r9, r4, #25
 80081a2:	e7f4      	b.n	800818e <_printf_float+0x446>

080081a4 <_printf_common>:
 80081a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081a8:	4616      	mov	r6, r2
 80081aa:	4699      	mov	r9, r3
 80081ac:	688a      	ldr	r2, [r1, #8]
 80081ae:	690b      	ldr	r3, [r1, #16]
 80081b0:	4607      	mov	r7, r0
 80081b2:	4293      	cmp	r3, r2
 80081b4:	bfb8      	it	lt
 80081b6:	4613      	movlt	r3, r2
 80081b8:	6033      	str	r3, [r6, #0]
 80081ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081be:	460c      	mov	r4, r1
 80081c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081c4:	b10a      	cbz	r2, 80081ca <_printf_common+0x26>
 80081c6:	3301      	adds	r3, #1
 80081c8:	6033      	str	r3, [r6, #0]
 80081ca:	6823      	ldr	r3, [r4, #0]
 80081cc:	0699      	lsls	r1, r3, #26
 80081ce:	bf42      	ittt	mi
 80081d0:	6833      	ldrmi	r3, [r6, #0]
 80081d2:	3302      	addmi	r3, #2
 80081d4:	6033      	strmi	r3, [r6, #0]
 80081d6:	6825      	ldr	r5, [r4, #0]
 80081d8:	f015 0506 	ands.w	r5, r5, #6
 80081dc:	d106      	bne.n	80081ec <_printf_common+0x48>
 80081de:	f104 0a19 	add.w	sl, r4, #25
 80081e2:	68e3      	ldr	r3, [r4, #12]
 80081e4:	6832      	ldr	r2, [r6, #0]
 80081e6:	1a9b      	subs	r3, r3, r2
 80081e8:	42ab      	cmp	r3, r5
 80081ea:	dc2b      	bgt.n	8008244 <_printf_common+0xa0>
 80081ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80081f0:	1e13      	subs	r3, r2, #0
 80081f2:	6822      	ldr	r2, [r4, #0]
 80081f4:	bf18      	it	ne
 80081f6:	2301      	movne	r3, #1
 80081f8:	0692      	lsls	r2, r2, #26
 80081fa:	d430      	bmi.n	800825e <_printf_common+0xba>
 80081fc:	4649      	mov	r1, r9
 80081fe:	4638      	mov	r0, r7
 8008200:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008204:	47c0      	blx	r8
 8008206:	3001      	adds	r0, #1
 8008208:	d023      	beq.n	8008252 <_printf_common+0xae>
 800820a:	6823      	ldr	r3, [r4, #0]
 800820c:	6922      	ldr	r2, [r4, #16]
 800820e:	f003 0306 	and.w	r3, r3, #6
 8008212:	2b04      	cmp	r3, #4
 8008214:	bf14      	ite	ne
 8008216:	2500      	movne	r5, #0
 8008218:	6833      	ldreq	r3, [r6, #0]
 800821a:	f04f 0600 	mov.w	r6, #0
 800821e:	bf08      	it	eq
 8008220:	68e5      	ldreq	r5, [r4, #12]
 8008222:	f104 041a 	add.w	r4, r4, #26
 8008226:	bf08      	it	eq
 8008228:	1aed      	subeq	r5, r5, r3
 800822a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800822e:	bf08      	it	eq
 8008230:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008234:	4293      	cmp	r3, r2
 8008236:	bfc4      	itt	gt
 8008238:	1a9b      	subgt	r3, r3, r2
 800823a:	18ed      	addgt	r5, r5, r3
 800823c:	42b5      	cmp	r5, r6
 800823e:	d11a      	bne.n	8008276 <_printf_common+0xd2>
 8008240:	2000      	movs	r0, #0
 8008242:	e008      	b.n	8008256 <_printf_common+0xb2>
 8008244:	2301      	movs	r3, #1
 8008246:	4652      	mov	r2, sl
 8008248:	4649      	mov	r1, r9
 800824a:	4638      	mov	r0, r7
 800824c:	47c0      	blx	r8
 800824e:	3001      	adds	r0, #1
 8008250:	d103      	bne.n	800825a <_printf_common+0xb6>
 8008252:	f04f 30ff 	mov.w	r0, #4294967295
 8008256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800825a:	3501      	adds	r5, #1
 800825c:	e7c1      	b.n	80081e2 <_printf_common+0x3e>
 800825e:	2030      	movs	r0, #48	; 0x30
 8008260:	18e1      	adds	r1, r4, r3
 8008262:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008266:	1c5a      	adds	r2, r3, #1
 8008268:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800826c:	4422      	add	r2, r4
 800826e:	3302      	adds	r3, #2
 8008270:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008274:	e7c2      	b.n	80081fc <_printf_common+0x58>
 8008276:	2301      	movs	r3, #1
 8008278:	4622      	mov	r2, r4
 800827a:	4649      	mov	r1, r9
 800827c:	4638      	mov	r0, r7
 800827e:	47c0      	blx	r8
 8008280:	3001      	adds	r0, #1
 8008282:	d0e6      	beq.n	8008252 <_printf_common+0xae>
 8008284:	3601      	adds	r6, #1
 8008286:	e7d9      	b.n	800823c <_printf_common+0x98>

08008288 <_printf_i>:
 8008288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800828c:	7e0f      	ldrb	r7, [r1, #24]
 800828e:	4691      	mov	r9, r2
 8008290:	2f78      	cmp	r7, #120	; 0x78
 8008292:	4680      	mov	r8, r0
 8008294:	460c      	mov	r4, r1
 8008296:	469a      	mov	sl, r3
 8008298:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800829a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800829e:	d807      	bhi.n	80082b0 <_printf_i+0x28>
 80082a0:	2f62      	cmp	r7, #98	; 0x62
 80082a2:	d80a      	bhi.n	80082ba <_printf_i+0x32>
 80082a4:	2f00      	cmp	r7, #0
 80082a6:	f000 80d5 	beq.w	8008454 <_printf_i+0x1cc>
 80082aa:	2f58      	cmp	r7, #88	; 0x58
 80082ac:	f000 80c1 	beq.w	8008432 <_printf_i+0x1aa>
 80082b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80082b8:	e03a      	b.n	8008330 <_printf_i+0xa8>
 80082ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80082be:	2b15      	cmp	r3, #21
 80082c0:	d8f6      	bhi.n	80082b0 <_printf_i+0x28>
 80082c2:	a101      	add	r1, pc, #4	; (adr r1, 80082c8 <_printf_i+0x40>)
 80082c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082c8:	08008321 	.word	0x08008321
 80082cc:	08008335 	.word	0x08008335
 80082d0:	080082b1 	.word	0x080082b1
 80082d4:	080082b1 	.word	0x080082b1
 80082d8:	080082b1 	.word	0x080082b1
 80082dc:	080082b1 	.word	0x080082b1
 80082e0:	08008335 	.word	0x08008335
 80082e4:	080082b1 	.word	0x080082b1
 80082e8:	080082b1 	.word	0x080082b1
 80082ec:	080082b1 	.word	0x080082b1
 80082f0:	080082b1 	.word	0x080082b1
 80082f4:	0800843b 	.word	0x0800843b
 80082f8:	08008361 	.word	0x08008361
 80082fc:	080083f5 	.word	0x080083f5
 8008300:	080082b1 	.word	0x080082b1
 8008304:	080082b1 	.word	0x080082b1
 8008308:	0800845d 	.word	0x0800845d
 800830c:	080082b1 	.word	0x080082b1
 8008310:	08008361 	.word	0x08008361
 8008314:	080082b1 	.word	0x080082b1
 8008318:	080082b1 	.word	0x080082b1
 800831c:	080083fd 	.word	0x080083fd
 8008320:	682b      	ldr	r3, [r5, #0]
 8008322:	1d1a      	adds	r2, r3, #4
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	602a      	str	r2, [r5, #0]
 8008328:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800832c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008330:	2301      	movs	r3, #1
 8008332:	e0a0      	b.n	8008476 <_printf_i+0x1ee>
 8008334:	6820      	ldr	r0, [r4, #0]
 8008336:	682b      	ldr	r3, [r5, #0]
 8008338:	0607      	lsls	r7, r0, #24
 800833a:	f103 0104 	add.w	r1, r3, #4
 800833e:	6029      	str	r1, [r5, #0]
 8008340:	d501      	bpl.n	8008346 <_printf_i+0xbe>
 8008342:	681e      	ldr	r6, [r3, #0]
 8008344:	e003      	b.n	800834e <_printf_i+0xc6>
 8008346:	0646      	lsls	r6, r0, #25
 8008348:	d5fb      	bpl.n	8008342 <_printf_i+0xba>
 800834a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800834e:	2e00      	cmp	r6, #0
 8008350:	da03      	bge.n	800835a <_printf_i+0xd2>
 8008352:	232d      	movs	r3, #45	; 0x2d
 8008354:	4276      	negs	r6, r6
 8008356:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800835a:	230a      	movs	r3, #10
 800835c:	4859      	ldr	r0, [pc, #356]	; (80084c4 <_printf_i+0x23c>)
 800835e:	e012      	b.n	8008386 <_printf_i+0xfe>
 8008360:	682b      	ldr	r3, [r5, #0]
 8008362:	6820      	ldr	r0, [r4, #0]
 8008364:	1d19      	adds	r1, r3, #4
 8008366:	6029      	str	r1, [r5, #0]
 8008368:	0605      	lsls	r5, r0, #24
 800836a:	d501      	bpl.n	8008370 <_printf_i+0xe8>
 800836c:	681e      	ldr	r6, [r3, #0]
 800836e:	e002      	b.n	8008376 <_printf_i+0xee>
 8008370:	0641      	lsls	r1, r0, #25
 8008372:	d5fb      	bpl.n	800836c <_printf_i+0xe4>
 8008374:	881e      	ldrh	r6, [r3, #0]
 8008376:	2f6f      	cmp	r7, #111	; 0x6f
 8008378:	bf0c      	ite	eq
 800837a:	2308      	moveq	r3, #8
 800837c:	230a      	movne	r3, #10
 800837e:	4851      	ldr	r0, [pc, #324]	; (80084c4 <_printf_i+0x23c>)
 8008380:	2100      	movs	r1, #0
 8008382:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008386:	6865      	ldr	r5, [r4, #4]
 8008388:	2d00      	cmp	r5, #0
 800838a:	bfa8      	it	ge
 800838c:	6821      	ldrge	r1, [r4, #0]
 800838e:	60a5      	str	r5, [r4, #8]
 8008390:	bfa4      	itt	ge
 8008392:	f021 0104 	bicge.w	r1, r1, #4
 8008396:	6021      	strge	r1, [r4, #0]
 8008398:	b90e      	cbnz	r6, 800839e <_printf_i+0x116>
 800839a:	2d00      	cmp	r5, #0
 800839c:	d04b      	beq.n	8008436 <_printf_i+0x1ae>
 800839e:	4615      	mov	r5, r2
 80083a0:	fbb6 f1f3 	udiv	r1, r6, r3
 80083a4:	fb03 6711 	mls	r7, r3, r1, r6
 80083a8:	5dc7      	ldrb	r7, [r0, r7]
 80083aa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80083ae:	4637      	mov	r7, r6
 80083b0:	42bb      	cmp	r3, r7
 80083b2:	460e      	mov	r6, r1
 80083b4:	d9f4      	bls.n	80083a0 <_printf_i+0x118>
 80083b6:	2b08      	cmp	r3, #8
 80083b8:	d10b      	bne.n	80083d2 <_printf_i+0x14a>
 80083ba:	6823      	ldr	r3, [r4, #0]
 80083bc:	07de      	lsls	r6, r3, #31
 80083be:	d508      	bpl.n	80083d2 <_printf_i+0x14a>
 80083c0:	6923      	ldr	r3, [r4, #16]
 80083c2:	6861      	ldr	r1, [r4, #4]
 80083c4:	4299      	cmp	r1, r3
 80083c6:	bfde      	ittt	le
 80083c8:	2330      	movle	r3, #48	; 0x30
 80083ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80083ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80083d2:	1b52      	subs	r2, r2, r5
 80083d4:	6122      	str	r2, [r4, #16]
 80083d6:	464b      	mov	r3, r9
 80083d8:	4621      	mov	r1, r4
 80083da:	4640      	mov	r0, r8
 80083dc:	f8cd a000 	str.w	sl, [sp]
 80083e0:	aa03      	add	r2, sp, #12
 80083e2:	f7ff fedf 	bl	80081a4 <_printf_common>
 80083e6:	3001      	adds	r0, #1
 80083e8:	d14a      	bne.n	8008480 <_printf_i+0x1f8>
 80083ea:	f04f 30ff 	mov.w	r0, #4294967295
 80083ee:	b004      	add	sp, #16
 80083f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083f4:	6823      	ldr	r3, [r4, #0]
 80083f6:	f043 0320 	orr.w	r3, r3, #32
 80083fa:	6023      	str	r3, [r4, #0]
 80083fc:	2778      	movs	r7, #120	; 0x78
 80083fe:	4832      	ldr	r0, [pc, #200]	; (80084c8 <_printf_i+0x240>)
 8008400:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008404:	6823      	ldr	r3, [r4, #0]
 8008406:	6829      	ldr	r1, [r5, #0]
 8008408:	061f      	lsls	r7, r3, #24
 800840a:	f851 6b04 	ldr.w	r6, [r1], #4
 800840e:	d402      	bmi.n	8008416 <_printf_i+0x18e>
 8008410:	065f      	lsls	r7, r3, #25
 8008412:	bf48      	it	mi
 8008414:	b2b6      	uxthmi	r6, r6
 8008416:	07df      	lsls	r7, r3, #31
 8008418:	bf48      	it	mi
 800841a:	f043 0320 	orrmi.w	r3, r3, #32
 800841e:	6029      	str	r1, [r5, #0]
 8008420:	bf48      	it	mi
 8008422:	6023      	strmi	r3, [r4, #0]
 8008424:	b91e      	cbnz	r6, 800842e <_printf_i+0x1a6>
 8008426:	6823      	ldr	r3, [r4, #0]
 8008428:	f023 0320 	bic.w	r3, r3, #32
 800842c:	6023      	str	r3, [r4, #0]
 800842e:	2310      	movs	r3, #16
 8008430:	e7a6      	b.n	8008380 <_printf_i+0xf8>
 8008432:	4824      	ldr	r0, [pc, #144]	; (80084c4 <_printf_i+0x23c>)
 8008434:	e7e4      	b.n	8008400 <_printf_i+0x178>
 8008436:	4615      	mov	r5, r2
 8008438:	e7bd      	b.n	80083b6 <_printf_i+0x12e>
 800843a:	682b      	ldr	r3, [r5, #0]
 800843c:	6826      	ldr	r6, [r4, #0]
 800843e:	1d18      	adds	r0, r3, #4
 8008440:	6961      	ldr	r1, [r4, #20]
 8008442:	6028      	str	r0, [r5, #0]
 8008444:	0635      	lsls	r5, r6, #24
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	d501      	bpl.n	800844e <_printf_i+0x1c6>
 800844a:	6019      	str	r1, [r3, #0]
 800844c:	e002      	b.n	8008454 <_printf_i+0x1cc>
 800844e:	0670      	lsls	r0, r6, #25
 8008450:	d5fb      	bpl.n	800844a <_printf_i+0x1c2>
 8008452:	8019      	strh	r1, [r3, #0]
 8008454:	2300      	movs	r3, #0
 8008456:	4615      	mov	r5, r2
 8008458:	6123      	str	r3, [r4, #16]
 800845a:	e7bc      	b.n	80083d6 <_printf_i+0x14e>
 800845c:	682b      	ldr	r3, [r5, #0]
 800845e:	2100      	movs	r1, #0
 8008460:	1d1a      	adds	r2, r3, #4
 8008462:	602a      	str	r2, [r5, #0]
 8008464:	681d      	ldr	r5, [r3, #0]
 8008466:	6862      	ldr	r2, [r4, #4]
 8008468:	4628      	mov	r0, r5
 800846a:	f000 f9e4 	bl	8008836 <memchr>
 800846e:	b108      	cbz	r0, 8008474 <_printf_i+0x1ec>
 8008470:	1b40      	subs	r0, r0, r5
 8008472:	6060      	str	r0, [r4, #4]
 8008474:	6863      	ldr	r3, [r4, #4]
 8008476:	6123      	str	r3, [r4, #16]
 8008478:	2300      	movs	r3, #0
 800847a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800847e:	e7aa      	b.n	80083d6 <_printf_i+0x14e>
 8008480:	462a      	mov	r2, r5
 8008482:	4649      	mov	r1, r9
 8008484:	4640      	mov	r0, r8
 8008486:	6923      	ldr	r3, [r4, #16]
 8008488:	47d0      	blx	sl
 800848a:	3001      	adds	r0, #1
 800848c:	d0ad      	beq.n	80083ea <_printf_i+0x162>
 800848e:	6823      	ldr	r3, [r4, #0]
 8008490:	079b      	lsls	r3, r3, #30
 8008492:	d413      	bmi.n	80084bc <_printf_i+0x234>
 8008494:	68e0      	ldr	r0, [r4, #12]
 8008496:	9b03      	ldr	r3, [sp, #12]
 8008498:	4298      	cmp	r0, r3
 800849a:	bfb8      	it	lt
 800849c:	4618      	movlt	r0, r3
 800849e:	e7a6      	b.n	80083ee <_printf_i+0x166>
 80084a0:	2301      	movs	r3, #1
 80084a2:	4632      	mov	r2, r6
 80084a4:	4649      	mov	r1, r9
 80084a6:	4640      	mov	r0, r8
 80084a8:	47d0      	blx	sl
 80084aa:	3001      	adds	r0, #1
 80084ac:	d09d      	beq.n	80083ea <_printf_i+0x162>
 80084ae:	3501      	adds	r5, #1
 80084b0:	68e3      	ldr	r3, [r4, #12]
 80084b2:	9903      	ldr	r1, [sp, #12]
 80084b4:	1a5b      	subs	r3, r3, r1
 80084b6:	42ab      	cmp	r3, r5
 80084b8:	dcf2      	bgt.n	80084a0 <_printf_i+0x218>
 80084ba:	e7eb      	b.n	8008494 <_printf_i+0x20c>
 80084bc:	2500      	movs	r5, #0
 80084be:	f104 0619 	add.w	r6, r4, #25
 80084c2:	e7f5      	b.n	80084b0 <_printf_i+0x228>
 80084c4:	0800bdfc 	.word	0x0800bdfc
 80084c8:	0800be0d 	.word	0x0800be0d

080084cc <std>:
 80084cc:	2300      	movs	r3, #0
 80084ce:	b510      	push	{r4, lr}
 80084d0:	4604      	mov	r4, r0
 80084d2:	e9c0 3300 	strd	r3, r3, [r0]
 80084d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084da:	6083      	str	r3, [r0, #8]
 80084dc:	8181      	strh	r1, [r0, #12]
 80084de:	6643      	str	r3, [r0, #100]	; 0x64
 80084e0:	81c2      	strh	r2, [r0, #14]
 80084e2:	6183      	str	r3, [r0, #24]
 80084e4:	4619      	mov	r1, r3
 80084e6:	2208      	movs	r2, #8
 80084e8:	305c      	adds	r0, #92	; 0x5c
 80084ea:	f000 f914 	bl	8008716 <memset>
 80084ee:	4b0d      	ldr	r3, [pc, #52]	; (8008524 <std+0x58>)
 80084f0:	6224      	str	r4, [r4, #32]
 80084f2:	6263      	str	r3, [r4, #36]	; 0x24
 80084f4:	4b0c      	ldr	r3, [pc, #48]	; (8008528 <std+0x5c>)
 80084f6:	62a3      	str	r3, [r4, #40]	; 0x28
 80084f8:	4b0c      	ldr	r3, [pc, #48]	; (800852c <std+0x60>)
 80084fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084fc:	4b0c      	ldr	r3, [pc, #48]	; (8008530 <std+0x64>)
 80084fe:	6323      	str	r3, [r4, #48]	; 0x30
 8008500:	4b0c      	ldr	r3, [pc, #48]	; (8008534 <std+0x68>)
 8008502:	429c      	cmp	r4, r3
 8008504:	d006      	beq.n	8008514 <std+0x48>
 8008506:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800850a:	4294      	cmp	r4, r2
 800850c:	d002      	beq.n	8008514 <std+0x48>
 800850e:	33d0      	adds	r3, #208	; 0xd0
 8008510:	429c      	cmp	r4, r3
 8008512:	d105      	bne.n	8008520 <std+0x54>
 8008514:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800851c:	f000 b988 	b.w	8008830 <__retarget_lock_init_recursive>
 8008520:	bd10      	pop	{r4, pc}
 8008522:	bf00      	nop
 8008524:	08008691 	.word	0x08008691
 8008528:	080086b3 	.word	0x080086b3
 800852c:	080086eb 	.word	0x080086eb
 8008530:	0800870f 	.word	0x0800870f
 8008534:	20000418 	.word	0x20000418

08008538 <stdio_exit_handler>:
 8008538:	4a02      	ldr	r2, [pc, #8]	; (8008544 <stdio_exit_handler+0xc>)
 800853a:	4903      	ldr	r1, [pc, #12]	; (8008548 <stdio_exit_handler+0x10>)
 800853c:	4803      	ldr	r0, [pc, #12]	; (800854c <stdio_exit_handler+0x14>)
 800853e:	f000 b869 	b.w	8008614 <_fwalk_sglue>
 8008542:	bf00      	nop
 8008544:	2000001c 	.word	0x2000001c
 8008548:	0800a07d 	.word	0x0800a07d
 800854c:	20000028 	.word	0x20000028

08008550 <cleanup_stdio>:
 8008550:	6841      	ldr	r1, [r0, #4]
 8008552:	4b0c      	ldr	r3, [pc, #48]	; (8008584 <cleanup_stdio+0x34>)
 8008554:	b510      	push	{r4, lr}
 8008556:	4299      	cmp	r1, r3
 8008558:	4604      	mov	r4, r0
 800855a:	d001      	beq.n	8008560 <cleanup_stdio+0x10>
 800855c:	f001 fd8e 	bl	800a07c <_fflush_r>
 8008560:	68a1      	ldr	r1, [r4, #8]
 8008562:	4b09      	ldr	r3, [pc, #36]	; (8008588 <cleanup_stdio+0x38>)
 8008564:	4299      	cmp	r1, r3
 8008566:	d002      	beq.n	800856e <cleanup_stdio+0x1e>
 8008568:	4620      	mov	r0, r4
 800856a:	f001 fd87 	bl	800a07c <_fflush_r>
 800856e:	68e1      	ldr	r1, [r4, #12]
 8008570:	4b06      	ldr	r3, [pc, #24]	; (800858c <cleanup_stdio+0x3c>)
 8008572:	4299      	cmp	r1, r3
 8008574:	d004      	beq.n	8008580 <cleanup_stdio+0x30>
 8008576:	4620      	mov	r0, r4
 8008578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800857c:	f001 bd7e 	b.w	800a07c <_fflush_r>
 8008580:	bd10      	pop	{r4, pc}
 8008582:	bf00      	nop
 8008584:	20000418 	.word	0x20000418
 8008588:	20000480 	.word	0x20000480
 800858c:	200004e8 	.word	0x200004e8

08008590 <global_stdio_init.part.0>:
 8008590:	b510      	push	{r4, lr}
 8008592:	4b0b      	ldr	r3, [pc, #44]	; (80085c0 <global_stdio_init.part.0+0x30>)
 8008594:	4c0b      	ldr	r4, [pc, #44]	; (80085c4 <global_stdio_init.part.0+0x34>)
 8008596:	4a0c      	ldr	r2, [pc, #48]	; (80085c8 <global_stdio_init.part.0+0x38>)
 8008598:	4620      	mov	r0, r4
 800859a:	601a      	str	r2, [r3, #0]
 800859c:	2104      	movs	r1, #4
 800859e:	2200      	movs	r2, #0
 80085a0:	f7ff ff94 	bl	80084cc <std>
 80085a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80085a8:	2201      	movs	r2, #1
 80085aa:	2109      	movs	r1, #9
 80085ac:	f7ff ff8e 	bl	80084cc <std>
 80085b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80085b4:	2202      	movs	r2, #2
 80085b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085ba:	2112      	movs	r1, #18
 80085bc:	f7ff bf86 	b.w	80084cc <std>
 80085c0:	20000550 	.word	0x20000550
 80085c4:	20000418 	.word	0x20000418
 80085c8:	08008539 	.word	0x08008539

080085cc <__sfp_lock_acquire>:
 80085cc:	4801      	ldr	r0, [pc, #4]	; (80085d4 <__sfp_lock_acquire+0x8>)
 80085ce:	f000 b930 	b.w	8008832 <__retarget_lock_acquire_recursive>
 80085d2:	bf00      	nop
 80085d4:	20000559 	.word	0x20000559

080085d8 <__sfp_lock_release>:
 80085d8:	4801      	ldr	r0, [pc, #4]	; (80085e0 <__sfp_lock_release+0x8>)
 80085da:	f000 b92b 	b.w	8008834 <__retarget_lock_release_recursive>
 80085de:	bf00      	nop
 80085e0:	20000559 	.word	0x20000559

080085e4 <__sinit>:
 80085e4:	b510      	push	{r4, lr}
 80085e6:	4604      	mov	r4, r0
 80085e8:	f7ff fff0 	bl	80085cc <__sfp_lock_acquire>
 80085ec:	6a23      	ldr	r3, [r4, #32]
 80085ee:	b11b      	cbz	r3, 80085f8 <__sinit+0x14>
 80085f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085f4:	f7ff bff0 	b.w	80085d8 <__sfp_lock_release>
 80085f8:	4b04      	ldr	r3, [pc, #16]	; (800860c <__sinit+0x28>)
 80085fa:	6223      	str	r3, [r4, #32]
 80085fc:	4b04      	ldr	r3, [pc, #16]	; (8008610 <__sinit+0x2c>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d1f5      	bne.n	80085f0 <__sinit+0xc>
 8008604:	f7ff ffc4 	bl	8008590 <global_stdio_init.part.0>
 8008608:	e7f2      	b.n	80085f0 <__sinit+0xc>
 800860a:	bf00      	nop
 800860c:	08008551 	.word	0x08008551
 8008610:	20000550 	.word	0x20000550

08008614 <_fwalk_sglue>:
 8008614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008618:	4607      	mov	r7, r0
 800861a:	4688      	mov	r8, r1
 800861c:	4614      	mov	r4, r2
 800861e:	2600      	movs	r6, #0
 8008620:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008624:	f1b9 0901 	subs.w	r9, r9, #1
 8008628:	d505      	bpl.n	8008636 <_fwalk_sglue+0x22>
 800862a:	6824      	ldr	r4, [r4, #0]
 800862c:	2c00      	cmp	r4, #0
 800862e:	d1f7      	bne.n	8008620 <_fwalk_sglue+0xc>
 8008630:	4630      	mov	r0, r6
 8008632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008636:	89ab      	ldrh	r3, [r5, #12]
 8008638:	2b01      	cmp	r3, #1
 800863a:	d907      	bls.n	800864c <_fwalk_sglue+0x38>
 800863c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008640:	3301      	adds	r3, #1
 8008642:	d003      	beq.n	800864c <_fwalk_sglue+0x38>
 8008644:	4629      	mov	r1, r5
 8008646:	4638      	mov	r0, r7
 8008648:	47c0      	blx	r8
 800864a:	4306      	orrs	r6, r0
 800864c:	3568      	adds	r5, #104	; 0x68
 800864e:	e7e9      	b.n	8008624 <_fwalk_sglue+0x10>

08008650 <siprintf>:
 8008650:	b40e      	push	{r1, r2, r3}
 8008652:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008656:	b500      	push	{lr}
 8008658:	b09c      	sub	sp, #112	; 0x70
 800865a:	ab1d      	add	r3, sp, #116	; 0x74
 800865c:	9002      	str	r0, [sp, #8]
 800865e:	9006      	str	r0, [sp, #24]
 8008660:	9107      	str	r1, [sp, #28]
 8008662:	9104      	str	r1, [sp, #16]
 8008664:	4808      	ldr	r0, [pc, #32]	; (8008688 <siprintf+0x38>)
 8008666:	4909      	ldr	r1, [pc, #36]	; (800868c <siprintf+0x3c>)
 8008668:	f853 2b04 	ldr.w	r2, [r3], #4
 800866c:	9105      	str	r1, [sp, #20]
 800866e:	6800      	ldr	r0, [r0, #0]
 8008670:	a902      	add	r1, sp, #8
 8008672:	9301      	str	r3, [sp, #4]
 8008674:	f001 fb82 	bl	8009d7c <_svfiprintf_r>
 8008678:	2200      	movs	r2, #0
 800867a:	9b02      	ldr	r3, [sp, #8]
 800867c:	701a      	strb	r2, [r3, #0]
 800867e:	b01c      	add	sp, #112	; 0x70
 8008680:	f85d eb04 	ldr.w	lr, [sp], #4
 8008684:	b003      	add	sp, #12
 8008686:	4770      	bx	lr
 8008688:	20000074 	.word	0x20000074
 800868c:	ffff0208 	.word	0xffff0208

08008690 <__sread>:
 8008690:	b510      	push	{r4, lr}
 8008692:	460c      	mov	r4, r1
 8008694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008698:	f000 f86c 	bl	8008774 <_read_r>
 800869c:	2800      	cmp	r0, #0
 800869e:	bfab      	itete	ge
 80086a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80086a2:	89a3      	ldrhlt	r3, [r4, #12]
 80086a4:	181b      	addge	r3, r3, r0
 80086a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80086aa:	bfac      	ite	ge
 80086ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80086ae:	81a3      	strhlt	r3, [r4, #12]
 80086b0:	bd10      	pop	{r4, pc}

080086b2 <__swrite>:
 80086b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086b6:	461f      	mov	r7, r3
 80086b8:	898b      	ldrh	r3, [r1, #12]
 80086ba:	4605      	mov	r5, r0
 80086bc:	05db      	lsls	r3, r3, #23
 80086be:	460c      	mov	r4, r1
 80086c0:	4616      	mov	r6, r2
 80086c2:	d505      	bpl.n	80086d0 <__swrite+0x1e>
 80086c4:	2302      	movs	r3, #2
 80086c6:	2200      	movs	r2, #0
 80086c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086cc:	f000 f840 	bl	8008750 <_lseek_r>
 80086d0:	89a3      	ldrh	r3, [r4, #12]
 80086d2:	4632      	mov	r2, r6
 80086d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086d8:	81a3      	strh	r3, [r4, #12]
 80086da:	4628      	mov	r0, r5
 80086dc:	463b      	mov	r3, r7
 80086de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086e6:	f000 b867 	b.w	80087b8 <_write_r>

080086ea <__sseek>:
 80086ea:	b510      	push	{r4, lr}
 80086ec:	460c      	mov	r4, r1
 80086ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086f2:	f000 f82d 	bl	8008750 <_lseek_r>
 80086f6:	1c43      	adds	r3, r0, #1
 80086f8:	89a3      	ldrh	r3, [r4, #12]
 80086fa:	bf15      	itete	ne
 80086fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80086fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008702:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008706:	81a3      	strheq	r3, [r4, #12]
 8008708:	bf18      	it	ne
 800870a:	81a3      	strhne	r3, [r4, #12]
 800870c:	bd10      	pop	{r4, pc}

0800870e <__sclose>:
 800870e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008712:	f000 b80d 	b.w	8008730 <_close_r>

08008716 <memset>:
 8008716:	4603      	mov	r3, r0
 8008718:	4402      	add	r2, r0
 800871a:	4293      	cmp	r3, r2
 800871c:	d100      	bne.n	8008720 <memset+0xa>
 800871e:	4770      	bx	lr
 8008720:	f803 1b01 	strb.w	r1, [r3], #1
 8008724:	e7f9      	b.n	800871a <memset+0x4>
	...

08008728 <_localeconv_r>:
 8008728:	4800      	ldr	r0, [pc, #0]	; (800872c <_localeconv_r+0x4>)
 800872a:	4770      	bx	lr
 800872c:	20000168 	.word	0x20000168

08008730 <_close_r>:
 8008730:	b538      	push	{r3, r4, r5, lr}
 8008732:	2300      	movs	r3, #0
 8008734:	4d05      	ldr	r5, [pc, #20]	; (800874c <_close_r+0x1c>)
 8008736:	4604      	mov	r4, r0
 8008738:	4608      	mov	r0, r1
 800873a:	602b      	str	r3, [r5, #0]
 800873c:	f7f9 fb54 	bl	8001de8 <_close>
 8008740:	1c43      	adds	r3, r0, #1
 8008742:	d102      	bne.n	800874a <_close_r+0x1a>
 8008744:	682b      	ldr	r3, [r5, #0]
 8008746:	b103      	cbz	r3, 800874a <_close_r+0x1a>
 8008748:	6023      	str	r3, [r4, #0]
 800874a:	bd38      	pop	{r3, r4, r5, pc}
 800874c:	20000554 	.word	0x20000554

08008750 <_lseek_r>:
 8008750:	b538      	push	{r3, r4, r5, lr}
 8008752:	4604      	mov	r4, r0
 8008754:	4608      	mov	r0, r1
 8008756:	4611      	mov	r1, r2
 8008758:	2200      	movs	r2, #0
 800875a:	4d05      	ldr	r5, [pc, #20]	; (8008770 <_lseek_r+0x20>)
 800875c:	602a      	str	r2, [r5, #0]
 800875e:	461a      	mov	r2, r3
 8008760:	f7f9 fb66 	bl	8001e30 <_lseek>
 8008764:	1c43      	adds	r3, r0, #1
 8008766:	d102      	bne.n	800876e <_lseek_r+0x1e>
 8008768:	682b      	ldr	r3, [r5, #0]
 800876a:	b103      	cbz	r3, 800876e <_lseek_r+0x1e>
 800876c:	6023      	str	r3, [r4, #0]
 800876e:	bd38      	pop	{r3, r4, r5, pc}
 8008770:	20000554 	.word	0x20000554

08008774 <_read_r>:
 8008774:	b538      	push	{r3, r4, r5, lr}
 8008776:	4604      	mov	r4, r0
 8008778:	4608      	mov	r0, r1
 800877a:	4611      	mov	r1, r2
 800877c:	2200      	movs	r2, #0
 800877e:	4d05      	ldr	r5, [pc, #20]	; (8008794 <_read_r+0x20>)
 8008780:	602a      	str	r2, [r5, #0]
 8008782:	461a      	mov	r2, r3
 8008784:	f7f9 faf7 	bl	8001d76 <_read>
 8008788:	1c43      	adds	r3, r0, #1
 800878a:	d102      	bne.n	8008792 <_read_r+0x1e>
 800878c:	682b      	ldr	r3, [r5, #0]
 800878e:	b103      	cbz	r3, 8008792 <_read_r+0x1e>
 8008790:	6023      	str	r3, [r4, #0]
 8008792:	bd38      	pop	{r3, r4, r5, pc}
 8008794:	20000554 	.word	0x20000554

08008798 <_sbrk_r>:
 8008798:	b538      	push	{r3, r4, r5, lr}
 800879a:	2300      	movs	r3, #0
 800879c:	4d05      	ldr	r5, [pc, #20]	; (80087b4 <_sbrk_r+0x1c>)
 800879e:	4604      	mov	r4, r0
 80087a0:	4608      	mov	r0, r1
 80087a2:	602b      	str	r3, [r5, #0]
 80087a4:	f7f9 fb50 	bl	8001e48 <_sbrk>
 80087a8:	1c43      	adds	r3, r0, #1
 80087aa:	d102      	bne.n	80087b2 <_sbrk_r+0x1a>
 80087ac:	682b      	ldr	r3, [r5, #0]
 80087ae:	b103      	cbz	r3, 80087b2 <_sbrk_r+0x1a>
 80087b0:	6023      	str	r3, [r4, #0]
 80087b2:	bd38      	pop	{r3, r4, r5, pc}
 80087b4:	20000554 	.word	0x20000554

080087b8 <_write_r>:
 80087b8:	b538      	push	{r3, r4, r5, lr}
 80087ba:	4604      	mov	r4, r0
 80087bc:	4608      	mov	r0, r1
 80087be:	4611      	mov	r1, r2
 80087c0:	2200      	movs	r2, #0
 80087c2:	4d05      	ldr	r5, [pc, #20]	; (80087d8 <_write_r+0x20>)
 80087c4:	602a      	str	r2, [r5, #0]
 80087c6:	461a      	mov	r2, r3
 80087c8:	f7f9 faf2 	bl	8001db0 <_write>
 80087cc:	1c43      	adds	r3, r0, #1
 80087ce:	d102      	bne.n	80087d6 <_write_r+0x1e>
 80087d0:	682b      	ldr	r3, [r5, #0]
 80087d2:	b103      	cbz	r3, 80087d6 <_write_r+0x1e>
 80087d4:	6023      	str	r3, [r4, #0]
 80087d6:	bd38      	pop	{r3, r4, r5, pc}
 80087d8:	20000554 	.word	0x20000554

080087dc <__errno>:
 80087dc:	4b01      	ldr	r3, [pc, #4]	; (80087e4 <__errno+0x8>)
 80087de:	6818      	ldr	r0, [r3, #0]
 80087e0:	4770      	bx	lr
 80087e2:	bf00      	nop
 80087e4:	20000074 	.word	0x20000074

080087e8 <__libc_init_array>:
 80087e8:	b570      	push	{r4, r5, r6, lr}
 80087ea:	2600      	movs	r6, #0
 80087ec:	4d0c      	ldr	r5, [pc, #48]	; (8008820 <__libc_init_array+0x38>)
 80087ee:	4c0d      	ldr	r4, [pc, #52]	; (8008824 <__libc_init_array+0x3c>)
 80087f0:	1b64      	subs	r4, r4, r5
 80087f2:	10a4      	asrs	r4, r4, #2
 80087f4:	42a6      	cmp	r6, r4
 80087f6:	d109      	bne.n	800880c <__libc_init_array+0x24>
 80087f8:	f002 f808 	bl	800a80c <_init>
 80087fc:	2600      	movs	r6, #0
 80087fe:	4d0a      	ldr	r5, [pc, #40]	; (8008828 <__libc_init_array+0x40>)
 8008800:	4c0a      	ldr	r4, [pc, #40]	; (800882c <__libc_init_array+0x44>)
 8008802:	1b64      	subs	r4, r4, r5
 8008804:	10a4      	asrs	r4, r4, #2
 8008806:	42a6      	cmp	r6, r4
 8008808:	d105      	bne.n	8008816 <__libc_init_array+0x2e>
 800880a:	bd70      	pop	{r4, r5, r6, pc}
 800880c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008810:	4798      	blx	r3
 8008812:	3601      	adds	r6, #1
 8008814:	e7ee      	b.n	80087f4 <__libc_init_array+0xc>
 8008816:	f855 3b04 	ldr.w	r3, [r5], #4
 800881a:	4798      	blx	r3
 800881c:	3601      	adds	r6, #1
 800881e:	e7f2      	b.n	8008806 <__libc_init_array+0x1e>
 8008820:	0800c15c 	.word	0x0800c15c
 8008824:	0800c15c 	.word	0x0800c15c
 8008828:	0800c15c 	.word	0x0800c15c
 800882c:	0800c160 	.word	0x0800c160

08008830 <__retarget_lock_init_recursive>:
 8008830:	4770      	bx	lr

08008832 <__retarget_lock_acquire_recursive>:
 8008832:	4770      	bx	lr

08008834 <__retarget_lock_release_recursive>:
 8008834:	4770      	bx	lr

08008836 <memchr>:
 8008836:	4603      	mov	r3, r0
 8008838:	b510      	push	{r4, lr}
 800883a:	b2c9      	uxtb	r1, r1
 800883c:	4402      	add	r2, r0
 800883e:	4293      	cmp	r3, r2
 8008840:	4618      	mov	r0, r3
 8008842:	d101      	bne.n	8008848 <memchr+0x12>
 8008844:	2000      	movs	r0, #0
 8008846:	e003      	b.n	8008850 <memchr+0x1a>
 8008848:	7804      	ldrb	r4, [r0, #0]
 800884a:	3301      	adds	r3, #1
 800884c:	428c      	cmp	r4, r1
 800884e:	d1f6      	bne.n	800883e <memchr+0x8>
 8008850:	bd10      	pop	{r4, pc}

08008852 <memcpy>:
 8008852:	440a      	add	r2, r1
 8008854:	4291      	cmp	r1, r2
 8008856:	f100 33ff 	add.w	r3, r0, #4294967295
 800885a:	d100      	bne.n	800885e <memcpy+0xc>
 800885c:	4770      	bx	lr
 800885e:	b510      	push	{r4, lr}
 8008860:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008864:	4291      	cmp	r1, r2
 8008866:	f803 4f01 	strb.w	r4, [r3, #1]!
 800886a:	d1f9      	bne.n	8008860 <memcpy+0xe>
 800886c:	bd10      	pop	{r4, pc}

0800886e <quorem>:
 800886e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008872:	6903      	ldr	r3, [r0, #16]
 8008874:	690c      	ldr	r4, [r1, #16]
 8008876:	4607      	mov	r7, r0
 8008878:	42a3      	cmp	r3, r4
 800887a:	db7f      	blt.n	800897c <quorem+0x10e>
 800887c:	3c01      	subs	r4, #1
 800887e:	f100 0514 	add.w	r5, r0, #20
 8008882:	f101 0814 	add.w	r8, r1, #20
 8008886:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800888a:	9301      	str	r3, [sp, #4]
 800888c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008890:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008894:	3301      	adds	r3, #1
 8008896:	429a      	cmp	r2, r3
 8008898:	fbb2 f6f3 	udiv	r6, r2, r3
 800889c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80088a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80088a4:	d331      	bcc.n	800890a <quorem+0x9c>
 80088a6:	f04f 0e00 	mov.w	lr, #0
 80088aa:	4640      	mov	r0, r8
 80088ac:	46ac      	mov	ip, r5
 80088ae:	46f2      	mov	sl, lr
 80088b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80088b4:	b293      	uxth	r3, r2
 80088b6:	fb06 e303 	mla	r3, r6, r3, lr
 80088ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80088be:	0c1a      	lsrs	r2, r3, #16
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	fb06 220e 	mla	r2, r6, lr, r2
 80088c6:	ebaa 0303 	sub.w	r3, sl, r3
 80088ca:	f8dc a000 	ldr.w	sl, [ip]
 80088ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80088d2:	fa1f fa8a 	uxth.w	sl, sl
 80088d6:	4453      	add	r3, sl
 80088d8:	f8dc a000 	ldr.w	sl, [ip]
 80088dc:	b292      	uxth	r2, r2
 80088de:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80088e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088ec:	4581      	cmp	r9, r0
 80088ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80088f2:	f84c 3b04 	str.w	r3, [ip], #4
 80088f6:	d2db      	bcs.n	80088b0 <quorem+0x42>
 80088f8:	f855 300b 	ldr.w	r3, [r5, fp]
 80088fc:	b92b      	cbnz	r3, 800890a <quorem+0x9c>
 80088fe:	9b01      	ldr	r3, [sp, #4]
 8008900:	3b04      	subs	r3, #4
 8008902:	429d      	cmp	r5, r3
 8008904:	461a      	mov	r2, r3
 8008906:	d32d      	bcc.n	8008964 <quorem+0xf6>
 8008908:	613c      	str	r4, [r7, #16]
 800890a:	4638      	mov	r0, r7
 800890c:	f001 f8de 	bl	8009acc <__mcmp>
 8008910:	2800      	cmp	r0, #0
 8008912:	db23      	blt.n	800895c <quorem+0xee>
 8008914:	4629      	mov	r1, r5
 8008916:	2000      	movs	r0, #0
 8008918:	3601      	adds	r6, #1
 800891a:	f858 2b04 	ldr.w	r2, [r8], #4
 800891e:	f8d1 c000 	ldr.w	ip, [r1]
 8008922:	b293      	uxth	r3, r2
 8008924:	1ac3      	subs	r3, r0, r3
 8008926:	0c12      	lsrs	r2, r2, #16
 8008928:	fa1f f08c 	uxth.w	r0, ip
 800892c:	4403      	add	r3, r0
 800892e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008932:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008936:	b29b      	uxth	r3, r3
 8008938:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800893c:	45c1      	cmp	r9, r8
 800893e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008942:	f841 3b04 	str.w	r3, [r1], #4
 8008946:	d2e8      	bcs.n	800891a <quorem+0xac>
 8008948:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800894c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008950:	b922      	cbnz	r2, 800895c <quorem+0xee>
 8008952:	3b04      	subs	r3, #4
 8008954:	429d      	cmp	r5, r3
 8008956:	461a      	mov	r2, r3
 8008958:	d30a      	bcc.n	8008970 <quorem+0x102>
 800895a:	613c      	str	r4, [r7, #16]
 800895c:	4630      	mov	r0, r6
 800895e:	b003      	add	sp, #12
 8008960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008964:	6812      	ldr	r2, [r2, #0]
 8008966:	3b04      	subs	r3, #4
 8008968:	2a00      	cmp	r2, #0
 800896a:	d1cd      	bne.n	8008908 <quorem+0x9a>
 800896c:	3c01      	subs	r4, #1
 800896e:	e7c8      	b.n	8008902 <quorem+0x94>
 8008970:	6812      	ldr	r2, [r2, #0]
 8008972:	3b04      	subs	r3, #4
 8008974:	2a00      	cmp	r2, #0
 8008976:	d1f0      	bne.n	800895a <quorem+0xec>
 8008978:	3c01      	subs	r4, #1
 800897a:	e7eb      	b.n	8008954 <quorem+0xe6>
 800897c:	2000      	movs	r0, #0
 800897e:	e7ee      	b.n	800895e <quorem+0xf0>

08008980 <_dtoa_r>:
 8008980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008984:	4616      	mov	r6, r2
 8008986:	461f      	mov	r7, r3
 8008988:	69c4      	ldr	r4, [r0, #28]
 800898a:	b099      	sub	sp, #100	; 0x64
 800898c:	4605      	mov	r5, r0
 800898e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008992:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008996:	b974      	cbnz	r4, 80089b6 <_dtoa_r+0x36>
 8008998:	2010      	movs	r0, #16
 800899a:	f7ff f885 	bl	8007aa8 <malloc>
 800899e:	4602      	mov	r2, r0
 80089a0:	61e8      	str	r0, [r5, #28]
 80089a2:	b920      	cbnz	r0, 80089ae <_dtoa_r+0x2e>
 80089a4:	21ef      	movs	r1, #239	; 0xef
 80089a6:	4bac      	ldr	r3, [pc, #688]	; (8008c58 <_dtoa_r+0x2d8>)
 80089a8:	48ac      	ldr	r0, [pc, #688]	; (8008c5c <_dtoa_r+0x2dc>)
 80089aa:	f001 fba9 	bl	800a100 <__assert_func>
 80089ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089b2:	6004      	str	r4, [r0, #0]
 80089b4:	60c4      	str	r4, [r0, #12]
 80089b6:	69eb      	ldr	r3, [r5, #28]
 80089b8:	6819      	ldr	r1, [r3, #0]
 80089ba:	b151      	cbz	r1, 80089d2 <_dtoa_r+0x52>
 80089bc:	685a      	ldr	r2, [r3, #4]
 80089be:	2301      	movs	r3, #1
 80089c0:	4093      	lsls	r3, r2
 80089c2:	604a      	str	r2, [r1, #4]
 80089c4:	608b      	str	r3, [r1, #8]
 80089c6:	4628      	mov	r0, r5
 80089c8:	f000 fe46 	bl	8009658 <_Bfree>
 80089cc:	2200      	movs	r2, #0
 80089ce:	69eb      	ldr	r3, [r5, #28]
 80089d0:	601a      	str	r2, [r3, #0]
 80089d2:	1e3b      	subs	r3, r7, #0
 80089d4:	bfaf      	iteee	ge
 80089d6:	2300      	movge	r3, #0
 80089d8:	2201      	movlt	r2, #1
 80089da:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80089de:	9305      	strlt	r3, [sp, #20]
 80089e0:	bfa8      	it	ge
 80089e2:	f8c8 3000 	strge.w	r3, [r8]
 80089e6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80089ea:	4b9d      	ldr	r3, [pc, #628]	; (8008c60 <_dtoa_r+0x2e0>)
 80089ec:	bfb8      	it	lt
 80089ee:	f8c8 2000 	strlt.w	r2, [r8]
 80089f2:	ea33 0309 	bics.w	r3, r3, r9
 80089f6:	d119      	bne.n	8008a2c <_dtoa_r+0xac>
 80089f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80089fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80089fe:	6013      	str	r3, [r2, #0]
 8008a00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a04:	4333      	orrs	r3, r6
 8008a06:	f000 8589 	beq.w	800951c <_dtoa_r+0xb9c>
 8008a0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008a0c:	b953      	cbnz	r3, 8008a24 <_dtoa_r+0xa4>
 8008a0e:	4b95      	ldr	r3, [pc, #596]	; (8008c64 <_dtoa_r+0x2e4>)
 8008a10:	e023      	b.n	8008a5a <_dtoa_r+0xda>
 8008a12:	4b95      	ldr	r3, [pc, #596]	; (8008c68 <_dtoa_r+0x2e8>)
 8008a14:	9303      	str	r3, [sp, #12]
 8008a16:	3308      	adds	r3, #8
 8008a18:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008a1a:	6013      	str	r3, [r2, #0]
 8008a1c:	9803      	ldr	r0, [sp, #12]
 8008a1e:	b019      	add	sp, #100	; 0x64
 8008a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a24:	4b8f      	ldr	r3, [pc, #572]	; (8008c64 <_dtoa_r+0x2e4>)
 8008a26:	9303      	str	r3, [sp, #12]
 8008a28:	3303      	adds	r3, #3
 8008a2a:	e7f5      	b.n	8008a18 <_dtoa_r+0x98>
 8008a2c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008a30:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008a34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008a38:	2200      	movs	r2, #0
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	f7f7 ffb4 	bl	80009a8 <__aeabi_dcmpeq>
 8008a40:	4680      	mov	r8, r0
 8008a42:	b160      	cbz	r0, 8008a5e <_dtoa_r+0xde>
 8008a44:	2301      	movs	r3, #1
 8008a46:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008a48:	6013      	str	r3, [r2, #0]
 8008a4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f000 8562 	beq.w	8009516 <_dtoa_r+0xb96>
 8008a52:	4b86      	ldr	r3, [pc, #536]	; (8008c6c <_dtoa_r+0x2ec>)
 8008a54:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008a56:	6013      	str	r3, [r2, #0]
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	9303      	str	r3, [sp, #12]
 8008a5c:	e7de      	b.n	8008a1c <_dtoa_r+0x9c>
 8008a5e:	ab16      	add	r3, sp, #88	; 0x58
 8008a60:	9301      	str	r3, [sp, #4]
 8008a62:	ab17      	add	r3, sp, #92	; 0x5c
 8008a64:	9300      	str	r3, [sp, #0]
 8008a66:	4628      	mov	r0, r5
 8008a68:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008a6c:	f001 f8d6 	bl	8009c1c <__d2b>
 8008a70:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008a74:	4682      	mov	sl, r0
 8008a76:	2c00      	cmp	r4, #0
 8008a78:	d07e      	beq.n	8008b78 <_dtoa_r+0x1f8>
 8008a7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008a7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a80:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008a84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a88:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008a8c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008a90:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008a94:	4619      	mov	r1, r3
 8008a96:	2200      	movs	r2, #0
 8008a98:	4b75      	ldr	r3, [pc, #468]	; (8008c70 <_dtoa_r+0x2f0>)
 8008a9a:	f7f7 fb65 	bl	8000168 <__aeabi_dsub>
 8008a9e:	a368      	add	r3, pc, #416	; (adr r3, 8008c40 <_dtoa_r+0x2c0>)
 8008aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa4:	f7f7 fd18 	bl	80004d8 <__aeabi_dmul>
 8008aa8:	a367      	add	r3, pc, #412	; (adr r3, 8008c48 <_dtoa_r+0x2c8>)
 8008aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aae:	f7f7 fb5d 	bl	800016c <__adddf3>
 8008ab2:	4606      	mov	r6, r0
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	460f      	mov	r7, r1
 8008ab8:	f7f7 fca4 	bl	8000404 <__aeabi_i2d>
 8008abc:	a364      	add	r3, pc, #400	; (adr r3, 8008c50 <_dtoa_r+0x2d0>)
 8008abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac2:	f7f7 fd09 	bl	80004d8 <__aeabi_dmul>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	460b      	mov	r3, r1
 8008aca:	4630      	mov	r0, r6
 8008acc:	4639      	mov	r1, r7
 8008ace:	f7f7 fb4d 	bl	800016c <__adddf3>
 8008ad2:	4606      	mov	r6, r0
 8008ad4:	460f      	mov	r7, r1
 8008ad6:	f7f7 ffaf 	bl	8000a38 <__aeabi_d2iz>
 8008ada:	2200      	movs	r2, #0
 8008adc:	4683      	mov	fp, r0
 8008ade:	2300      	movs	r3, #0
 8008ae0:	4630      	mov	r0, r6
 8008ae2:	4639      	mov	r1, r7
 8008ae4:	f7f7 ff6a 	bl	80009bc <__aeabi_dcmplt>
 8008ae8:	b148      	cbz	r0, 8008afe <_dtoa_r+0x17e>
 8008aea:	4658      	mov	r0, fp
 8008aec:	f7f7 fc8a 	bl	8000404 <__aeabi_i2d>
 8008af0:	4632      	mov	r2, r6
 8008af2:	463b      	mov	r3, r7
 8008af4:	f7f7 ff58 	bl	80009a8 <__aeabi_dcmpeq>
 8008af8:	b908      	cbnz	r0, 8008afe <_dtoa_r+0x17e>
 8008afa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008afe:	f1bb 0f16 	cmp.w	fp, #22
 8008b02:	d857      	bhi.n	8008bb4 <_dtoa_r+0x234>
 8008b04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b08:	4b5a      	ldr	r3, [pc, #360]	; (8008c74 <_dtoa_r+0x2f4>)
 8008b0a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b12:	f7f7 ff53 	bl	80009bc <__aeabi_dcmplt>
 8008b16:	2800      	cmp	r0, #0
 8008b18:	d04e      	beq.n	8008bb8 <_dtoa_r+0x238>
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b20:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b22:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008b24:	1b1b      	subs	r3, r3, r4
 8008b26:	1e5a      	subs	r2, r3, #1
 8008b28:	bf46      	itte	mi
 8008b2a:	f1c3 0901 	rsbmi	r9, r3, #1
 8008b2e:	2300      	movmi	r3, #0
 8008b30:	f04f 0900 	movpl.w	r9, #0
 8008b34:	9209      	str	r2, [sp, #36]	; 0x24
 8008b36:	bf48      	it	mi
 8008b38:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008b3a:	f1bb 0f00 	cmp.w	fp, #0
 8008b3e:	db3d      	blt.n	8008bbc <_dtoa_r+0x23c>
 8008b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b42:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8008b46:	445b      	add	r3, fp
 8008b48:	9309      	str	r3, [sp, #36]	; 0x24
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	930a      	str	r3, [sp, #40]	; 0x28
 8008b4e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b50:	2b09      	cmp	r3, #9
 8008b52:	d867      	bhi.n	8008c24 <_dtoa_r+0x2a4>
 8008b54:	2b05      	cmp	r3, #5
 8008b56:	bfc4      	itt	gt
 8008b58:	3b04      	subgt	r3, #4
 8008b5a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008b5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b5e:	bfc8      	it	gt
 8008b60:	2400      	movgt	r4, #0
 8008b62:	f1a3 0302 	sub.w	r3, r3, #2
 8008b66:	bfd8      	it	le
 8008b68:	2401      	movle	r4, #1
 8008b6a:	2b03      	cmp	r3, #3
 8008b6c:	f200 8086 	bhi.w	8008c7c <_dtoa_r+0x2fc>
 8008b70:	e8df f003 	tbb	[pc, r3]
 8008b74:	5637392c 	.word	0x5637392c
 8008b78:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008b7c:	441c      	add	r4, r3
 8008b7e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008b82:	2b20      	cmp	r3, #32
 8008b84:	bfc1      	itttt	gt
 8008b86:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008b8a:	fa09 f903 	lslgt.w	r9, r9, r3
 8008b8e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8008b92:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008b96:	bfd6      	itet	le
 8008b98:	f1c3 0320 	rsble	r3, r3, #32
 8008b9c:	ea49 0003 	orrgt.w	r0, r9, r3
 8008ba0:	fa06 f003 	lslle.w	r0, r6, r3
 8008ba4:	f7f7 fc1e 	bl	80003e4 <__aeabi_ui2d>
 8008ba8:	2201      	movs	r2, #1
 8008baa:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008bae:	3c01      	subs	r4, #1
 8008bb0:	9213      	str	r2, [sp, #76]	; 0x4c
 8008bb2:	e76f      	b.n	8008a94 <_dtoa_r+0x114>
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	e7b3      	b.n	8008b20 <_dtoa_r+0x1a0>
 8008bb8:	900f      	str	r0, [sp, #60]	; 0x3c
 8008bba:	e7b2      	b.n	8008b22 <_dtoa_r+0x1a2>
 8008bbc:	f1cb 0300 	rsb	r3, fp, #0
 8008bc0:	930a      	str	r3, [sp, #40]	; 0x28
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	eba9 090b 	sub.w	r9, r9, fp
 8008bc8:	930e      	str	r3, [sp, #56]	; 0x38
 8008bca:	e7c0      	b.n	8008b4e <_dtoa_r+0x1ce>
 8008bcc:	2300      	movs	r3, #0
 8008bce:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bd0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	dc55      	bgt.n	8008c82 <_dtoa_r+0x302>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	461a      	mov	r2, r3
 8008bda:	9306      	str	r3, [sp, #24]
 8008bdc:	9308      	str	r3, [sp, #32]
 8008bde:	9223      	str	r2, [sp, #140]	; 0x8c
 8008be0:	e00b      	b.n	8008bfa <_dtoa_r+0x27a>
 8008be2:	2301      	movs	r3, #1
 8008be4:	e7f3      	b.n	8008bce <_dtoa_r+0x24e>
 8008be6:	2300      	movs	r3, #0
 8008be8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008bec:	445b      	add	r3, fp
 8008bee:	9306      	str	r3, [sp, #24]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	9308      	str	r3, [sp, #32]
 8008bf6:	bfb8      	it	lt
 8008bf8:	2301      	movlt	r3, #1
 8008bfa:	2100      	movs	r1, #0
 8008bfc:	2204      	movs	r2, #4
 8008bfe:	69e8      	ldr	r0, [r5, #28]
 8008c00:	f102 0614 	add.w	r6, r2, #20
 8008c04:	429e      	cmp	r6, r3
 8008c06:	d940      	bls.n	8008c8a <_dtoa_r+0x30a>
 8008c08:	6041      	str	r1, [r0, #4]
 8008c0a:	4628      	mov	r0, r5
 8008c0c:	f000 fce4 	bl	80095d8 <_Balloc>
 8008c10:	9003      	str	r0, [sp, #12]
 8008c12:	2800      	cmp	r0, #0
 8008c14:	d13c      	bne.n	8008c90 <_dtoa_r+0x310>
 8008c16:	4602      	mov	r2, r0
 8008c18:	f240 11af 	movw	r1, #431	; 0x1af
 8008c1c:	4b16      	ldr	r3, [pc, #88]	; (8008c78 <_dtoa_r+0x2f8>)
 8008c1e:	e6c3      	b.n	80089a8 <_dtoa_r+0x28>
 8008c20:	2301      	movs	r3, #1
 8008c22:	e7e1      	b.n	8008be8 <_dtoa_r+0x268>
 8008c24:	2401      	movs	r4, #1
 8008c26:	2300      	movs	r3, #0
 8008c28:	940b      	str	r4, [sp, #44]	; 0x2c
 8008c2a:	9322      	str	r3, [sp, #136]	; 0x88
 8008c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8008c30:	2200      	movs	r2, #0
 8008c32:	9306      	str	r3, [sp, #24]
 8008c34:	9308      	str	r3, [sp, #32]
 8008c36:	2312      	movs	r3, #18
 8008c38:	e7d1      	b.n	8008bde <_dtoa_r+0x25e>
 8008c3a:	bf00      	nop
 8008c3c:	f3af 8000 	nop.w
 8008c40:	636f4361 	.word	0x636f4361
 8008c44:	3fd287a7 	.word	0x3fd287a7
 8008c48:	8b60c8b3 	.word	0x8b60c8b3
 8008c4c:	3fc68a28 	.word	0x3fc68a28
 8008c50:	509f79fb 	.word	0x509f79fb
 8008c54:	3fd34413 	.word	0x3fd34413
 8008c58:	0800be2b 	.word	0x0800be2b
 8008c5c:	0800be42 	.word	0x0800be42
 8008c60:	7ff00000 	.word	0x7ff00000
 8008c64:	0800be27 	.word	0x0800be27
 8008c68:	0800be1e 	.word	0x0800be1e
 8008c6c:	0800bdfb 	.word	0x0800bdfb
 8008c70:	3ff80000 	.word	0x3ff80000
 8008c74:	0800bf30 	.word	0x0800bf30
 8008c78:	0800be9a 	.word	0x0800be9a
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c80:	e7d4      	b.n	8008c2c <_dtoa_r+0x2ac>
 8008c82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008c84:	9306      	str	r3, [sp, #24]
 8008c86:	9308      	str	r3, [sp, #32]
 8008c88:	e7b7      	b.n	8008bfa <_dtoa_r+0x27a>
 8008c8a:	3101      	adds	r1, #1
 8008c8c:	0052      	lsls	r2, r2, #1
 8008c8e:	e7b7      	b.n	8008c00 <_dtoa_r+0x280>
 8008c90:	69eb      	ldr	r3, [r5, #28]
 8008c92:	9a03      	ldr	r2, [sp, #12]
 8008c94:	601a      	str	r2, [r3, #0]
 8008c96:	9b08      	ldr	r3, [sp, #32]
 8008c98:	2b0e      	cmp	r3, #14
 8008c9a:	f200 80a8 	bhi.w	8008dee <_dtoa_r+0x46e>
 8008c9e:	2c00      	cmp	r4, #0
 8008ca0:	f000 80a5 	beq.w	8008dee <_dtoa_r+0x46e>
 8008ca4:	f1bb 0f00 	cmp.w	fp, #0
 8008ca8:	dd34      	ble.n	8008d14 <_dtoa_r+0x394>
 8008caa:	4b9a      	ldr	r3, [pc, #616]	; (8008f14 <_dtoa_r+0x594>)
 8008cac:	f00b 020f 	and.w	r2, fp, #15
 8008cb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cb4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008cb8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008cbc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008cc0:	ea4f 142b 	mov.w	r4, fp, asr #4
 8008cc4:	d016      	beq.n	8008cf4 <_dtoa_r+0x374>
 8008cc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008cca:	4b93      	ldr	r3, [pc, #588]	; (8008f18 <_dtoa_r+0x598>)
 8008ccc:	2703      	movs	r7, #3
 8008cce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008cd2:	f7f7 fd2b 	bl	800072c <__aeabi_ddiv>
 8008cd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008cda:	f004 040f 	and.w	r4, r4, #15
 8008cde:	4e8e      	ldr	r6, [pc, #568]	; (8008f18 <_dtoa_r+0x598>)
 8008ce0:	b954      	cbnz	r4, 8008cf8 <_dtoa_r+0x378>
 8008ce2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008ce6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008cea:	f7f7 fd1f 	bl	800072c <__aeabi_ddiv>
 8008cee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008cf2:	e029      	b.n	8008d48 <_dtoa_r+0x3c8>
 8008cf4:	2702      	movs	r7, #2
 8008cf6:	e7f2      	b.n	8008cde <_dtoa_r+0x35e>
 8008cf8:	07e1      	lsls	r1, r4, #31
 8008cfa:	d508      	bpl.n	8008d0e <_dtoa_r+0x38e>
 8008cfc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d00:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008d04:	f7f7 fbe8 	bl	80004d8 <__aeabi_dmul>
 8008d08:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008d0c:	3701      	adds	r7, #1
 8008d0e:	1064      	asrs	r4, r4, #1
 8008d10:	3608      	adds	r6, #8
 8008d12:	e7e5      	b.n	8008ce0 <_dtoa_r+0x360>
 8008d14:	f000 80a5 	beq.w	8008e62 <_dtoa_r+0x4e2>
 8008d18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d1c:	f1cb 0400 	rsb	r4, fp, #0
 8008d20:	4b7c      	ldr	r3, [pc, #496]	; (8008f14 <_dtoa_r+0x594>)
 8008d22:	f004 020f 	and.w	r2, r4, #15
 8008d26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2e:	f7f7 fbd3 	bl	80004d8 <__aeabi_dmul>
 8008d32:	2702      	movs	r7, #2
 8008d34:	2300      	movs	r3, #0
 8008d36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d3a:	4e77      	ldr	r6, [pc, #476]	; (8008f18 <_dtoa_r+0x598>)
 8008d3c:	1124      	asrs	r4, r4, #4
 8008d3e:	2c00      	cmp	r4, #0
 8008d40:	f040 8084 	bne.w	8008e4c <_dtoa_r+0x4cc>
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d1d2      	bne.n	8008cee <_dtoa_r+0x36e>
 8008d48:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008d4c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008d50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	f000 8087 	beq.w	8008e66 <_dtoa_r+0x4e6>
 8008d58:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	4b6f      	ldr	r3, [pc, #444]	; (8008f1c <_dtoa_r+0x59c>)
 8008d60:	f7f7 fe2c 	bl	80009bc <__aeabi_dcmplt>
 8008d64:	2800      	cmp	r0, #0
 8008d66:	d07e      	beq.n	8008e66 <_dtoa_r+0x4e6>
 8008d68:	9b08      	ldr	r3, [sp, #32]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d07b      	beq.n	8008e66 <_dtoa_r+0x4e6>
 8008d6e:	9b06      	ldr	r3, [sp, #24]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	dd38      	ble.n	8008de6 <_dtoa_r+0x466>
 8008d74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d78:	2200      	movs	r2, #0
 8008d7a:	4b69      	ldr	r3, [pc, #420]	; (8008f20 <_dtoa_r+0x5a0>)
 8008d7c:	f7f7 fbac 	bl	80004d8 <__aeabi_dmul>
 8008d80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d84:	9c06      	ldr	r4, [sp, #24]
 8008d86:	f10b 38ff 	add.w	r8, fp, #4294967295
 8008d8a:	3701      	adds	r7, #1
 8008d8c:	4638      	mov	r0, r7
 8008d8e:	f7f7 fb39 	bl	8000404 <__aeabi_i2d>
 8008d92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d96:	f7f7 fb9f 	bl	80004d8 <__aeabi_dmul>
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	4b61      	ldr	r3, [pc, #388]	; (8008f24 <_dtoa_r+0x5a4>)
 8008d9e:	f7f7 f9e5 	bl	800016c <__adddf3>
 8008da2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008da6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008daa:	9611      	str	r6, [sp, #68]	; 0x44
 8008dac:	2c00      	cmp	r4, #0
 8008dae:	d15d      	bne.n	8008e6c <_dtoa_r+0x4ec>
 8008db0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008db4:	2200      	movs	r2, #0
 8008db6:	4b5c      	ldr	r3, [pc, #368]	; (8008f28 <_dtoa_r+0x5a8>)
 8008db8:	f7f7 f9d6 	bl	8000168 <__aeabi_dsub>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008dc4:	4633      	mov	r3, r6
 8008dc6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008dc8:	f7f7 fe16 	bl	80009f8 <__aeabi_dcmpgt>
 8008dcc:	2800      	cmp	r0, #0
 8008dce:	f040 8295 	bne.w	80092fc <_dtoa_r+0x97c>
 8008dd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dd6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008dd8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008ddc:	f7f7 fdee 	bl	80009bc <__aeabi_dcmplt>
 8008de0:	2800      	cmp	r0, #0
 8008de2:	f040 8289 	bne.w	80092f8 <_dtoa_r+0x978>
 8008de6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008dea:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008dee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	f2c0 8151 	blt.w	8009098 <_dtoa_r+0x718>
 8008df6:	f1bb 0f0e 	cmp.w	fp, #14
 8008dfa:	f300 814d 	bgt.w	8009098 <_dtoa_r+0x718>
 8008dfe:	4b45      	ldr	r3, [pc, #276]	; (8008f14 <_dtoa_r+0x594>)
 8008e00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008e04:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008e08:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008e0c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	f280 80da 	bge.w	8008fc8 <_dtoa_r+0x648>
 8008e14:	9b08      	ldr	r3, [sp, #32]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	f300 80d6 	bgt.w	8008fc8 <_dtoa_r+0x648>
 8008e1c:	f040 826b 	bne.w	80092f6 <_dtoa_r+0x976>
 8008e20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e24:	2200      	movs	r2, #0
 8008e26:	4b40      	ldr	r3, [pc, #256]	; (8008f28 <_dtoa_r+0x5a8>)
 8008e28:	f7f7 fb56 	bl	80004d8 <__aeabi_dmul>
 8008e2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e30:	f7f7 fdd8 	bl	80009e4 <__aeabi_dcmpge>
 8008e34:	9c08      	ldr	r4, [sp, #32]
 8008e36:	4626      	mov	r6, r4
 8008e38:	2800      	cmp	r0, #0
 8008e3a:	f040 8241 	bne.w	80092c0 <_dtoa_r+0x940>
 8008e3e:	2331      	movs	r3, #49	; 0x31
 8008e40:	9f03      	ldr	r7, [sp, #12]
 8008e42:	f10b 0b01 	add.w	fp, fp, #1
 8008e46:	f807 3b01 	strb.w	r3, [r7], #1
 8008e4a:	e23d      	b.n	80092c8 <_dtoa_r+0x948>
 8008e4c:	07e2      	lsls	r2, r4, #31
 8008e4e:	d505      	bpl.n	8008e5c <_dtoa_r+0x4dc>
 8008e50:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e54:	f7f7 fb40 	bl	80004d8 <__aeabi_dmul>
 8008e58:	2301      	movs	r3, #1
 8008e5a:	3701      	adds	r7, #1
 8008e5c:	1064      	asrs	r4, r4, #1
 8008e5e:	3608      	adds	r6, #8
 8008e60:	e76d      	b.n	8008d3e <_dtoa_r+0x3be>
 8008e62:	2702      	movs	r7, #2
 8008e64:	e770      	b.n	8008d48 <_dtoa_r+0x3c8>
 8008e66:	46d8      	mov	r8, fp
 8008e68:	9c08      	ldr	r4, [sp, #32]
 8008e6a:	e78f      	b.n	8008d8c <_dtoa_r+0x40c>
 8008e6c:	9903      	ldr	r1, [sp, #12]
 8008e6e:	4b29      	ldr	r3, [pc, #164]	; (8008f14 <_dtoa_r+0x594>)
 8008e70:	4421      	add	r1, r4
 8008e72:	9112      	str	r1, [sp, #72]	; 0x48
 8008e74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e76:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008e7a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008e7e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e82:	2900      	cmp	r1, #0
 8008e84:	d054      	beq.n	8008f30 <_dtoa_r+0x5b0>
 8008e86:	2000      	movs	r0, #0
 8008e88:	4928      	ldr	r1, [pc, #160]	; (8008f2c <_dtoa_r+0x5ac>)
 8008e8a:	f7f7 fc4f 	bl	800072c <__aeabi_ddiv>
 8008e8e:	463b      	mov	r3, r7
 8008e90:	4632      	mov	r2, r6
 8008e92:	f7f7 f969 	bl	8000168 <__aeabi_dsub>
 8008e96:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008e9a:	9f03      	ldr	r7, [sp, #12]
 8008e9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ea0:	f7f7 fdca 	bl	8000a38 <__aeabi_d2iz>
 8008ea4:	4604      	mov	r4, r0
 8008ea6:	f7f7 faad 	bl	8000404 <__aeabi_i2d>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	460b      	mov	r3, r1
 8008eae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008eb2:	f7f7 f959 	bl	8000168 <__aeabi_dsub>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	460b      	mov	r3, r1
 8008eba:	3430      	adds	r4, #48	; 0x30
 8008ebc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008ec0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008ec4:	f807 4b01 	strb.w	r4, [r7], #1
 8008ec8:	f7f7 fd78 	bl	80009bc <__aeabi_dcmplt>
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	d173      	bne.n	8008fb8 <_dtoa_r+0x638>
 8008ed0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ed4:	2000      	movs	r0, #0
 8008ed6:	4911      	ldr	r1, [pc, #68]	; (8008f1c <_dtoa_r+0x59c>)
 8008ed8:	f7f7 f946 	bl	8000168 <__aeabi_dsub>
 8008edc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008ee0:	f7f7 fd6c 	bl	80009bc <__aeabi_dcmplt>
 8008ee4:	2800      	cmp	r0, #0
 8008ee6:	f040 80b6 	bne.w	8009056 <_dtoa_r+0x6d6>
 8008eea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008eec:	429f      	cmp	r7, r3
 8008eee:	f43f af7a 	beq.w	8008de6 <_dtoa_r+0x466>
 8008ef2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	4b09      	ldr	r3, [pc, #36]	; (8008f20 <_dtoa_r+0x5a0>)
 8008efa:	f7f7 faed 	bl	80004d8 <__aeabi_dmul>
 8008efe:	2200      	movs	r2, #0
 8008f00:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008f04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f08:	4b05      	ldr	r3, [pc, #20]	; (8008f20 <_dtoa_r+0x5a0>)
 8008f0a:	f7f7 fae5 	bl	80004d8 <__aeabi_dmul>
 8008f0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f12:	e7c3      	b.n	8008e9c <_dtoa_r+0x51c>
 8008f14:	0800bf30 	.word	0x0800bf30
 8008f18:	0800bf08 	.word	0x0800bf08
 8008f1c:	3ff00000 	.word	0x3ff00000
 8008f20:	40240000 	.word	0x40240000
 8008f24:	401c0000 	.word	0x401c0000
 8008f28:	40140000 	.word	0x40140000
 8008f2c:	3fe00000 	.word	0x3fe00000
 8008f30:	4630      	mov	r0, r6
 8008f32:	4639      	mov	r1, r7
 8008f34:	f7f7 fad0 	bl	80004d8 <__aeabi_dmul>
 8008f38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f3a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008f3e:	9c03      	ldr	r4, [sp, #12]
 8008f40:	9314      	str	r3, [sp, #80]	; 0x50
 8008f42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f46:	f7f7 fd77 	bl	8000a38 <__aeabi_d2iz>
 8008f4a:	9015      	str	r0, [sp, #84]	; 0x54
 8008f4c:	f7f7 fa5a 	bl	8000404 <__aeabi_i2d>
 8008f50:	4602      	mov	r2, r0
 8008f52:	460b      	mov	r3, r1
 8008f54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f58:	f7f7 f906 	bl	8000168 <__aeabi_dsub>
 8008f5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f5e:	4606      	mov	r6, r0
 8008f60:	3330      	adds	r3, #48	; 0x30
 8008f62:	f804 3b01 	strb.w	r3, [r4], #1
 8008f66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f68:	460f      	mov	r7, r1
 8008f6a:	429c      	cmp	r4, r3
 8008f6c:	f04f 0200 	mov.w	r2, #0
 8008f70:	d124      	bne.n	8008fbc <_dtoa_r+0x63c>
 8008f72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008f76:	4baf      	ldr	r3, [pc, #700]	; (8009234 <_dtoa_r+0x8b4>)
 8008f78:	f7f7 f8f8 	bl	800016c <__adddf3>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	460b      	mov	r3, r1
 8008f80:	4630      	mov	r0, r6
 8008f82:	4639      	mov	r1, r7
 8008f84:	f7f7 fd38 	bl	80009f8 <__aeabi_dcmpgt>
 8008f88:	2800      	cmp	r0, #0
 8008f8a:	d163      	bne.n	8009054 <_dtoa_r+0x6d4>
 8008f8c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008f90:	2000      	movs	r0, #0
 8008f92:	49a8      	ldr	r1, [pc, #672]	; (8009234 <_dtoa_r+0x8b4>)
 8008f94:	f7f7 f8e8 	bl	8000168 <__aeabi_dsub>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	460b      	mov	r3, r1
 8008f9c:	4630      	mov	r0, r6
 8008f9e:	4639      	mov	r1, r7
 8008fa0:	f7f7 fd0c 	bl	80009bc <__aeabi_dcmplt>
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	f43f af1e 	beq.w	8008de6 <_dtoa_r+0x466>
 8008faa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008fac:	1e7b      	subs	r3, r7, #1
 8008fae:	9314      	str	r3, [sp, #80]	; 0x50
 8008fb0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008fb4:	2b30      	cmp	r3, #48	; 0x30
 8008fb6:	d0f8      	beq.n	8008faa <_dtoa_r+0x62a>
 8008fb8:	46c3      	mov	fp, r8
 8008fba:	e03b      	b.n	8009034 <_dtoa_r+0x6b4>
 8008fbc:	4b9e      	ldr	r3, [pc, #632]	; (8009238 <_dtoa_r+0x8b8>)
 8008fbe:	f7f7 fa8b 	bl	80004d8 <__aeabi_dmul>
 8008fc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008fc6:	e7bc      	b.n	8008f42 <_dtoa_r+0x5c2>
 8008fc8:	9f03      	ldr	r7, [sp, #12]
 8008fca:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008fce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008fd2:	4640      	mov	r0, r8
 8008fd4:	4649      	mov	r1, r9
 8008fd6:	f7f7 fba9 	bl	800072c <__aeabi_ddiv>
 8008fda:	f7f7 fd2d 	bl	8000a38 <__aeabi_d2iz>
 8008fde:	4604      	mov	r4, r0
 8008fe0:	f7f7 fa10 	bl	8000404 <__aeabi_i2d>
 8008fe4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008fe8:	f7f7 fa76 	bl	80004d8 <__aeabi_dmul>
 8008fec:	4602      	mov	r2, r0
 8008fee:	460b      	mov	r3, r1
 8008ff0:	4640      	mov	r0, r8
 8008ff2:	4649      	mov	r1, r9
 8008ff4:	f7f7 f8b8 	bl	8000168 <__aeabi_dsub>
 8008ff8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008ffc:	f807 6b01 	strb.w	r6, [r7], #1
 8009000:	9e03      	ldr	r6, [sp, #12]
 8009002:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009006:	1bbe      	subs	r6, r7, r6
 8009008:	45b4      	cmp	ip, r6
 800900a:	4602      	mov	r2, r0
 800900c:	460b      	mov	r3, r1
 800900e:	d136      	bne.n	800907e <_dtoa_r+0x6fe>
 8009010:	f7f7 f8ac 	bl	800016c <__adddf3>
 8009014:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009018:	4680      	mov	r8, r0
 800901a:	4689      	mov	r9, r1
 800901c:	f7f7 fcec 	bl	80009f8 <__aeabi_dcmpgt>
 8009020:	bb58      	cbnz	r0, 800907a <_dtoa_r+0x6fa>
 8009022:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009026:	4640      	mov	r0, r8
 8009028:	4649      	mov	r1, r9
 800902a:	f7f7 fcbd 	bl	80009a8 <__aeabi_dcmpeq>
 800902e:	b108      	cbz	r0, 8009034 <_dtoa_r+0x6b4>
 8009030:	07e3      	lsls	r3, r4, #31
 8009032:	d422      	bmi.n	800907a <_dtoa_r+0x6fa>
 8009034:	4651      	mov	r1, sl
 8009036:	4628      	mov	r0, r5
 8009038:	f000 fb0e 	bl	8009658 <_Bfree>
 800903c:	2300      	movs	r3, #0
 800903e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009040:	703b      	strb	r3, [r7, #0]
 8009042:	f10b 0301 	add.w	r3, fp, #1
 8009046:	6013      	str	r3, [r2, #0]
 8009048:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800904a:	2b00      	cmp	r3, #0
 800904c:	f43f ace6 	beq.w	8008a1c <_dtoa_r+0x9c>
 8009050:	601f      	str	r7, [r3, #0]
 8009052:	e4e3      	b.n	8008a1c <_dtoa_r+0x9c>
 8009054:	4627      	mov	r7, r4
 8009056:	463b      	mov	r3, r7
 8009058:	461f      	mov	r7, r3
 800905a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800905e:	2a39      	cmp	r2, #57	; 0x39
 8009060:	d107      	bne.n	8009072 <_dtoa_r+0x6f2>
 8009062:	9a03      	ldr	r2, [sp, #12]
 8009064:	429a      	cmp	r2, r3
 8009066:	d1f7      	bne.n	8009058 <_dtoa_r+0x6d8>
 8009068:	2230      	movs	r2, #48	; 0x30
 800906a:	9903      	ldr	r1, [sp, #12]
 800906c:	f108 0801 	add.w	r8, r8, #1
 8009070:	700a      	strb	r2, [r1, #0]
 8009072:	781a      	ldrb	r2, [r3, #0]
 8009074:	3201      	adds	r2, #1
 8009076:	701a      	strb	r2, [r3, #0]
 8009078:	e79e      	b.n	8008fb8 <_dtoa_r+0x638>
 800907a:	46d8      	mov	r8, fp
 800907c:	e7eb      	b.n	8009056 <_dtoa_r+0x6d6>
 800907e:	2200      	movs	r2, #0
 8009080:	4b6d      	ldr	r3, [pc, #436]	; (8009238 <_dtoa_r+0x8b8>)
 8009082:	f7f7 fa29 	bl	80004d8 <__aeabi_dmul>
 8009086:	2200      	movs	r2, #0
 8009088:	2300      	movs	r3, #0
 800908a:	4680      	mov	r8, r0
 800908c:	4689      	mov	r9, r1
 800908e:	f7f7 fc8b 	bl	80009a8 <__aeabi_dcmpeq>
 8009092:	2800      	cmp	r0, #0
 8009094:	d09b      	beq.n	8008fce <_dtoa_r+0x64e>
 8009096:	e7cd      	b.n	8009034 <_dtoa_r+0x6b4>
 8009098:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800909a:	2a00      	cmp	r2, #0
 800909c:	f000 80c4 	beq.w	8009228 <_dtoa_r+0x8a8>
 80090a0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80090a2:	2a01      	cmp	r2, #1
 80090a4:	f300 80a8 	bgt.w	80091f8 <_dtoa_r+0x878>
 80090a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80090aa:	2a00      	cmp	r2, #0
 80090ac:	f000 80a0 	beq.w	80091f0 <_dtoa_r+0x870>
 80090b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80090b4:	464f      	mov	r7, r9
 80090b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80090b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090ba:	2101      	movs	r1, #1
 80090bc:	441a      	add	r2, r3
 80090be:	4628      	mov	r0, r5
 80090c0:	4499      	add	r9, r3
 80090c2:	9209      	str	r2, [sp, #36]	; 0x24
 80090c4:	f000 fb7e 	bl	80097c4 <__i2b>
 80090c8:	4606      	mov	r6, r0
 80090ca:	b15f      	cbz	r7, 80090e4 <_dtoa_r+0x764>
 80090cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	dd08      	ble.n	80090e4 <_dtoa_r+0x764>
 80090d2:	42bb      	cmp	r3, r7
 80090d4:	bfa8      	it	ge
 80090d6:	463b      	movge	r3, r7
 80090d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090da:	eba9 0903 	sub.w	r9, r9, r3
 80090de:	1aff      	subs	r7, r7, r3
 80090e0:	1ad3      	subs	r3, r2, r3
 80090e2:	9309      	str	r3, [sp, #36]	; 0x24
 80090e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090e6:	b1f3      	cbz	r3, 8009126 <_dtoa_r+0x7a6>
 80090e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	f000 80a0 	beq.w	8009230 <_dtoa_r+0x8b0>
 80090f0:	2c00      	cmp	r4, #0
 80090f2:	dd10      	ble.n	8009116 <_dtoa_r+0x796>
 80090f4:	4631      	mov	r1, r6
 80090f6:	4622      	mov	r2, r4
 80090f8:	4628      	mov	r0, r5
 80090fa:	f000 fc21 	bl	8009940 <__pow5mult>
 80090fe:	4652      	mov	r2, sl
 8009100:	4601      	mov	r1, r0
 8009102:	4606      	mov	r6, r0
 8009104:	4628      	mov	r0, r5
 8009106:	f000 fb73 	bl	80097f0 <__multiply>
 800910a:	4680      	mov	r8, r0
 800910c:	4651      	mov	r1, sl
 800910e:	4628      	mov	r0, r5
 8009110:	f000 faa2 	bl	8009658 <_Bfree>
 8009114:	46c2      	mov	sl, r8
 8009116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009118:	1b1a      	subs	r2, r3, r4
 800911a:	d004      	beq.n	8009126 <_dtoa_r+0x7a6>
 800911c:	4651      	mov	r1, sl
 800911e:	4628      	mov	r0, r5
 8009120:	f000 fc0e 	bl	8009940 <__pow5mult>
 8009124:	4682      	mov	sl, r0
 8009126:	2101      	movs	r1, #1
 8009128:	4628      	mov	r0, r5
 800912a:	f000 fb4b 	bl	80097c4 <__i2b>
 800912e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009130:	4604      	mov	r4, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	f340 8082 	ble.w	800923c <_dtoa_r+0x8bc>
 8009138:	461a      	mov	r2, r3
 800913a:	4601      	mov	r1, r0
 800913c:	4628      	mov	r0, r5
 800913e:	f000 fbff 	bl	8009940 <__pow5mult>
 8009142:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009144:	4604      	mov	r4, r0
 8009146:	2b01      	cmp	r3, #1
 8009148:	dd7b      	ble.n	8009242 <_dtoa_r+0x8c2>
 800914a:	f04f 0800 	mov.w	r8, #0
 800914e:	6923      	ldr	r3, [r4, #16]
 8009150:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009154:	6918      	ldr	r0, [r3, #16]
 8009156:	f000 fae7 	bl	8009728 <__hi0bits>
 800915a:	f1c0 0020 	rsb	r0, r0, #32
 800915e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009160:	4418      	add	r0, r3
 8009162:	f010 001f 	ands.w	r0, r0, #31
 8009166:	f000 8092 	beq.w	800928e <_dtoa_r+0x90e>
 800916a:	f1c0 0320 	rsb	r3, r0, #32
 800916e:	2b04      	cmp	r3, #4
 8009170:	f340 8085 	ble.w	800927e <_dtoa_r+0x8fe>
 8009174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009176:	f1c0 001c 	rsb	r0, r0, #28
 800917a:	4403      	add	r3, r0
 800917c:	4481      	add	r9, r0
 800917e:	4407      	add	r7, r0
 8009180:	9309      	str	r3, [sp, #36]	; 0x24
 8009182:	f1b9 0f00 	cmp.w	r9, #0
 8009186:	dd05      	ble.n	8009194 <_dtoa_r+0x814>
 8009188:	4651      	mov	r1, sl
 800918a:	464a      	mov	r2, r9
 800918c:	4628      	mov	r0, r5
 800918e:	f000 fc31 	bl	80099f4 <__lshift>
 8009192:	4682      	mov	sl, r0
 8009194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009196:	2b00      	cmp	r3, #0
 8009198:	dd05      	ble.n	80091a6 <_dtoa_r+0x826>
 800919a:	4621      	mov	r1, r4
 800919c:	461a      	mov	r2, r3
 800919e:	4628      	mov	r0, r5
 80091a0:	f000 fc28 	bl	80099f4 <__lshift>
 80091a4:	4604      	mov	r4, r0
 80091a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d072      	beq.n	8009292 <_dtoa_r+0x912>
 80091ac:	4621      	mov	r1, r4
 80091ae:	4650      	mov	r0, sl
 80091b0:	f000 fc8c 	bl	8009acc <__mcmp>
 80091b4:	2800      	cmp	r0, #0
 80091b6:	da6c      	bge.n	8009292 <_dtoa_r+0x912>
 80091b8:	2300      	movs	r3, #0
 80091ba:	4651      	mov	r1, sl
 80091bc:	220a      	movs	r2, #10
 80091be:	4628      	mov	r0, r5
 80091c0:	f000 fa6c 	bl	800969c <__multadd>
 80091c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091c6:	4682      	mov	sl, r0
 80091c8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f000 81ac 	beq.w	800952a <_dtoa_r+0xbaa>
 80091d2:	2300      	movs	r3, #0
 80091d4:	4631      	mov	r1, r6
 80091d6:	220a      	movs	r2, #10
 80091d8:	4628      	mov	r0, r5
 80091da:	f000 fa5f 	bl	800969c <__multadd>
 80091de:	9b06      	ldr	r3, [sp, #24]
 80091e0:	4606      	mov	r6, r0
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	f300 8093 	bgt.w	800930e <_dtoa_r+0x98e>
 80091e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091ea:	2b02      	cmp	r3, #2
 80091ec:	dc59      	bgt.n	80092a2 <_dtoa_r+0x922>
 80091ee:	e08e      	b.n	800930e <_dtoa_r+0x98e>
 80091f0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80091f2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80091f6:	e75d      	b.n	80090b4 <_dtoa_r+0x734>
 80091f8:	9b08      	ldr	r3, [sp, #32]
 80091fa:	1e5c      	subs	r4, r3, #1
 80091fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091fe:	42a3      	cmp	r3, r4
 8009200:	bfbf      	itttt	lt
 8009202:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009204:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8009206:	1ae3      	sublt	r3, r4, r3
 8009208:	18d2      	addlt	r2, r2, r3
 800920a:	bfa8      	it	ge
 800920c:	1b1c      	subge	r4, r3, r4
 800920e:	9b08      	ldr	r3, [sp, #32]
 8009210:	bfbe      	ittt	lt
 8009212:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009214:	920e      	strlt	r2, [sp, #56]	; 0x38
 8009216:	2400      	movlt	r4, #0
 8009218:	2b00      	cmp	r3, #0
 800921a:	bfb5      	itete	lt
 800921c:	eba9 0703 	sublt.w	r7, r9, r3
 8009220:	464f      	movge	r7, r9
 8009222:	2300      	movlt	r3, #0
 8009224:	9b08      	ldrge	r3, [sp, #32]
 8009226:	e747      	b.n	80090b8 <_dtoa_r+0x738>
 8009228:	464f      	mov	r7, r9
 800922a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800922c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800922e:	e74c      	b.n	80090ca <_dtoa_r+0x74a>
 8009230:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009232:	e773      	b.n	800911c <_dtoa_r+0x79c>
 8009234:	3fe00000 	.word	0x3fe00000
 8009238:	40240000 	.word	0x40240000
 800923c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800923e:	2b01      	cmp	r3, #1
 8009240:	dc18      	bgt.n	8009274 <_dtoa_r+0x8f4>
 8009242:	9b04      	ldr	r3, [sp, #16]
 8009244:	b9b3      	cbnz	r3, 8009274 <_dtoa_r+0x8f4>
 8009246:	9b05      	ldr	r3, [sp, #20]
 8009248:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800924c:	b993      	cbnz	r3, 8009274 <_dtoa_r+0x8f4>
 800924e:	9b05      	ldr	r3, [sp, #20]
 8009250:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009254:	0d1b      	lsrs	r3, r3, #20
 8009256:	051b      	lsls	r3, r3, #20
 8009258:	b17b      	cbz	r3, 800927a <_dtoa_r+0x8fa>
 800925a:	f04f 0801 	mov.w	r8, #1
 800925e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009260:	f109 0901 	add.w	r9, r9, #1
 8009264:	3301      	adds	r3, #1
 8009266:	9309      	str	r3, [sp, #36]	; 0x24
 8009268:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800926a:	2b00      	cmp	r3, #0
 800926c:	f47f af6f 	bne.w	800914e <_dtoa_r+0x7ce>
 8009270:	2001      	movs	r0, #1
 8009272:	e774      	b.n	800915e <_dtoa_r+0x7de>
 8009274:	f04f 0800 	mov.w	r8, #0
 8009278:	e7f6      	b.n	8009268 <_dtoa_r+0x8e8>
 800927a:	4698      	mov	r8, r3
 800927c:	e7f4      	b.n	8009268 <_dtoa_r+0x8e8>
 800927e:	d080      	beq.n	8009182 <_dtoa_r+0x802>
 8009280:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009282:	331c      	adds	r3, #28
 8009284:	441a      	add	r2, r3
 8009286:	4499      	add	r9, r3
 8009288:	441f      	add	r7, r3
 800928a:	9209      	str	r2, [sp, #36]	; 0x24
 800928c:	e779      	b.n	8009182 <_dtoa_r+0x802>
 800928e:	4603      	mov	r3, r0
 8009290:	e7f6      	b.n	8009280 <_dtoa_r+0x900>
 8009292:	9b08      	ldr	r3, [sp, #32]
 8009294:	2b00      	cmp	r3, #0
 8009296:	dc34      	bgt.n	8009302 <_dtoa_r+0x982>
 8009298:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800929a:	2b02      	cmp	r3, #2
 800929c:	dd31      	ble.n	8009302 <_dtoa_r+0x982>
 800929e:	9b08      	ldr	r3, [sp, #32]
 80092a0:	9306      	str	r3, [sp, #24]
 80092a2:	9b06      	ldr	r3, [sp, #24]
 80092a4:	b963      	cbnz	r3, 80092c0 <_dtoa_r+0x940>
 80092a6:	4621      	mov	r1, r4
 80092a8:	2205      	movs	r2, #5
 80092aa:	4628      	mov	r0, r5
 80092ac:	f000 f9f6 	bl	800969c <__multadd>
 80092b0:	4601      	mov	r1, r0
 80092b2:	4604      	mov	r4, r0
 80092b4:	4650      	mov	r0, sl
 80092b6:	f000 fc09 	bl	8009acc <__mcmp>
 80092ba:	2800      	cmp	r0, #0
 80092bc:	f73f adbf 	bgt.w	8008e3e <_dtoa_r+0x4be>
 80092c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80092c2:	9f03      	ldr	r7, [sp, #12]
 80092c4:	ea6f 0b03 	mvn.w	fp, r3
 80092c8:	f04f 0800 	mov.w	r8, #0
 80092cc:	4621      	mov	r1, r4
 80092ce:	4628      	mov	r0, r5
 80092d0:	f000 f9c2 	bl	8009658 <_Bfree>
 80092d4:	2e00      	cmp	r6, #0
 80092d6:	f43f aead 	beq.w	8009034 <_dtoa_r+0x6b4>
 80092da:	f1b8 0f00 	cmp.w	r8, #0
 80092de:	d005      	beq.n	80092ec <_dtoa_r+0x96c>
 80092e0:	45b0      	cmp	r8, r6
 80092e2:	d003      	beq.n	80092ec <_dtoa_r+0x96c>
 80092e4:	4641      	mov	r1, r8
 80092e6:	4628      	mov	r0, r5
 80092e8:	f000 f9b6 	bl	8009658 <_Bfree>
 80092ec:	4631      	mov	r1, r6
 80092ee:	4628      	mov	r0, r5
 80092f0:	f000 f9b2 	bl	8009658 <_Bfree>
 80092f4:	e69e      	b.n	8009034 <_dtoa_r+0x6b4>
 80092f6:	2400      	movs	r4, #0
 80092f8:	4626      	mov	r6, r4
 80092fa:	e7e1      	b.n	80092c0 <_dtoa_r+0x940>
 80092fc:	46c3      	mov	fp, r8
 80092fe:	4626      	mov	r6, r4
 8009300:	e59d      	b.n	8008e3e <_dtoa_r+0x4be>
 8009302:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009304:	2b00      	cmp	r3, #0
 8009306:	f000 80c8 	beq.w	800949a <_dtoa_r+0xb1a>
 800930a:	9b08      	ldr	r3, [sp, #32]
 800930c:	9306      	str	r3, [sp, #24]
 800930e:	2f00      	cmp	r7, #0
 8009310:	dd05      	ble.n	800931e <_dtoa_r+0x99e>
 8009312:	4631      	mov	r1, r6
 8009314:	463a      	mov	r2, r7
 8009316:	4628      	mov	r0, r5
 8009318:	f000 fb6c 	bl	80099f4 <__lshift>
 800931c:	4606      	mov	r6, r0
 800931e:	f1b8 0f00 	cmp.w	r8, #0
 8009322:	d05b      	beq.n	80093dc <_dtoa_r+0xa5c>
 8009324:	4628      	mov	r0, r5
 8009326:	6871      	ldr	r1, [r6, #4]
 8009328:	f000 f956 	bl	80095d8 <_Balloc>
 800932c:	4607      	mov	r7, r0
 800932e:	b928      	cbnz	r0, 800933c <_dtoa_r+0x9bc>
 8009330:	4602      	mov	r2, r0
 8009332:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009336:	4b81      	ldr	r3, [pc, #516]	; (800953c <_dtoa_r+0xbbc>)
 8009338:	f7ff bb36 	b.w	80089a8 <_dtoa_r+0x28>
 800933c:	6932      	ldr	r2, [r6, #16]
 800933e:	f106 010c 	add.w	r1, r6, #12
 8009342:	3202      	adds	r2, #2
 8009344:	0092      	lsls	r2, r2, #2
 8009346:	300c      	adds	r0, #12
 8009348:	f7ff fa83 	bl	8008852 <memcpy>
 800934c:	2201      	movs	r2, #1
 800934e:	4639      	mov	r1, r7
 8009350:	4628      	mov	r0, r5
 8009352:	f000 fb4f 	bl	80099f4 <__lshift>
 8009356:	46b0      	mov	r8, r6
 8009358:	4606      	mov	r6, r0
 800935a:	9b03      	ldr	r3, [sp, #12]
 800935c:	9a03      	ldr	r2, [sp, #12]
 800935e:	3301      	adds	r3, #1
 8009360:	9308      	str	r3, [sp, #32]
 8009362:	9b06      	ldr	r3, [sp, #24]
 8009364:	4413      	add	r3, r2
 8009366:	930b      	str	r3, [sp, #44]	; 0x2c
 8009368:	9b04      	ldr	r3, [sp, #16]
 800936a:	f003 0301 	and.w	r3, r3, #1
 800936e:	930a      	str	r3, [sp, #40]	; 0x28
 8009370:	9b08      	ldr	r3, [sp, #32]
 8009372:	4621      	mov	r1, r4
 8009374:	3b01      	subs	r3, #1
 8009376:	4650      	mov	r0, sl
 8009378:	9304      	str	r3, [sp, #16]
 800937a:	f7ff fa78 	bl	800886e <quorem>
 800937e:	4641      	mov	r1, r8
 8009380:	9006      	str	r0, [sp, #24]
 8009382:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009386:	4650      	mov	r0, sl
 8009388:	f000 fba0 	bl	8009acc <__mcmp>
 800938c:	4632      	mov	r2, r6
 800938e:	9009      	str	r0, [sp, #36]	; 0x24
 8009390:	4621      	mov	r1, r4
 8009392:	4628      	mov	r0, r5
 8009394:	f000 fbb6 	bl	8009b04 <__mdiff>
 8009398:	68c2      	ldr	r2, [r0, #12]
 800939a:	4607      	mov	r7, r0
 800939c:	bb02      	cbnz	r2, 80093e0 <_dtoa_r+0xa60>
 800939e:	4601      	mov	r1, r0
 80093a0:	4650      	mov	r0, sl
 80093a2:	f000 fb93 	bl	8009acc <__mcmp>
 80093a6:	4602      	mov	r2, r0
 80093a8:	4639      	mov	r1, r7
 80093aa:	4628      	mov	r0, r5
 80093ac:	920c      	str	r2, [sp, #48]	; 0x30
 80093ae:	f000 f953 	bl	8009658 <_Bfree>
 80093b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80093b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093b6:	9f08      	ldr	r7, [sp, #32]
 80093b8:	ea43 0102 	orr.w	r1, r3, r2
 80093bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093be:	4319      	orrs	r1, r3
 80093c0:	d110      	bne.n	80093e4 <_dtoa_r+0xa64>
 80093c2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80093c6:	d029      	beq.n	800941c <_dtoa_r+0xa9c>
 80093c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	dd02      	ble.n	80093d4 <_dtoa_r+0xa54>
 80093ce:	9b06      	ldr	r3, [sp, #24]
 80093d0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80093d4:	9b04      	ldr	r3, [sp, #16]
 80093d6:	f883 9000 	strb.w	r9, [r3]
 80093da:	e777      	b.n	80092cc <_dtoa_r+0x94c>
 80093dc:	4630      	mov	r0, r6
 80093de:	e7ba      	b.n	8009356 <_dtoa_r+0x9d6>
 80093e0:	2201      	movs	r2, #1
 80093e2:	e7e1      	b.n	80093a8 <_dtoa_r+0xa28>
 80093e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	db04      	blt.n	80093f4 <_dtoa_r+0xa74>
 80093ea:	9922      	ldr	r1, [sp, #136]	; 0x88
 80093ec:	430b      	orrs	r3, r1
 80093ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80093f0:	430b      	orrs	r3, r1
 80093f2:	d120      	bne.n	8009436 <_dtoa_r+0xab6>
 80093f4:	2a00      	cmp	r2, #0
 80093f6:	dded      	ble.n	80093d4 <_dtoa_r+0xa54>
 80093f8:	4651      	mov	r1, sl
 80093fa:	2201      	movs	r2, #1
 80093fc:	4628      	mov	r0, r5
 80093fe:	f000 faf9 	bl	80099f4 <__lshift>
 8009402:	4621      	mov	r1, r4
 8009404:	4682      	mov	sl, r0
 8009406:	f000 fb61 	bl	8009acc <__mcmp>
 800940a:	2800      	cmp	r0, #0
 800940c:	dc03      	bgt.n	8009416 <_dtoa_r+0xa96>
 800940e:	d1e1      	bne.n	80093d4 <_dtoa_r+0xa54>
 8009410:	f019 0f01 	tst.w	r9, #1
 8009414:	d0de      	beq.n	80093d4 <_dtoa_r+0xa54>
 8009416:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800941a:	d1d8      	bne.n	80093ce <_dtoa_r+0xa4e>
 800941c:	2339      	movs	r3, #57	; 0x39
 800941e:	9a04      	ldr	r2, [sp, #16]
 8009420:	7013      	strb	r3, [r2, #0]
 8009422:	463b      	mov	r3, r7
 8009424:	461f      	mov	r7, r3
 8009426:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800942a:	3b01      	subs	r3, #1
 800942c:	2a39      	cmp	r2, #57	; 0x39
 800942e:	d06b      	beq.n	8009508 <_dtoa_r+0xb88>
 8009430:	3201      	adds	r2, #1
 8009432:	701a      	strb	r2, [r3, #0]
 8009434:	e74a      	b.n	80092cc <_dtoa_r+0x94c>
 8009436:	2a00      	cmp	r2, #0
 8009438:	dd07      	ble.n	800944a <_dtoa_r+0xaca>
 800943a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800943e:	d0ed      	beq.n	800941c <_dtoa_r+0xa9c>
 8009440:	9a04      	ldr	r2, [sp, #16]
 8009442:	f109 0301 	add.w	r3, r9, #1
 8009446:	7013      	strb	r3, [r2, #0]
 8009448:	e740      	b.n	80092cc <_dtoa_r+0x94c>
 800944a:	9b08      	ldr	r3, [sp, #32]
 800944c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800944e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009452:	4293      	cmp	r3, r2
 8009454:	d042      	beq.n	80094dc <_dtoa_r+0xb5c>
 8009456:	4651      	mov	r1, sl
 8009458:	2300      	movs	r3, #0
 800945a:	220a      	movs	r2, #10
 800945c:	4628      	mov	r0, r5
 800945e:	f000 f91d 	bl	800969c <__multadd>
 8009462:	45b0      	cmp	r8, r6
 8009464:	4682      	mov	sl, r0
 8009466:	f04f 0300 	mov.w	r3, #0
 800946a:	f04f 020a 	mov.w	r2, #10
 800946e:	4641      	mov	r1, r8
 8009470:	4628      	mov	r0, r5
 8009472:	d107      	bne.n	8009484 <_dtoa_r+0xb04>
 8009474:	f000 f912 	bl	800969c <__multadd>
 8009478:	4680      	mov	r8, r0
 800947a:	4606      	mov	r6, r0
 800947c:	9b08      	ldr	r3, [sp, #32]
 800947e:	3301      	adds	r3, #1
 8009480:	9308      	str	r3, [sp, #32]
 8009482:	e775      	b.n	8009370 <_dtoa_r+0x9f0>
 8009484:	f000 f90a 	bl	800969c <__multadd>
 8009488:	4631      	mov	r1, r6
 800948a:	4680      	mov	r8, r0
 800948c:	2300      	movs	r3, #0
 800948e:	220a      	movs	r2, #10
 8009490:	4628      	mov	r0, r5
 8009492:	f000 f903 	bl	800969c <__multadd>
 8009496:	4606      	mov	r6, r0
 8009498:	e7f0      	b.n	800947c <_dtoa_r+0xafc>
 800949a:	9b08      	ldr	r3, [sp, #32]
 800949c:	9306      	str	r3, [sp, #24]
 800949e:	9f03      	ldr	r7, [sp, #12]
 80094a0:	4621      	mov	r1, r4
 80094a2:	4650      	mov	r0, sl
 80094a4:	f7ff f9e3 	bl	800886e <quorem>
 80094a8:	9b03      	ldr	r3, [sp, #12]
 80094aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80094ae:	f807 9b01 	strb.w	r9, [r7], #1
 80094b2:	1afa      	subs	r2, r7, r3
 80094b4:	9b06      	ldr	r3, [sp, #24]
 80094b6:	4293      	cmp	r3, r2
 80094b8:	dd07      	ble.n	80094ca <_dtoa_r+0xb4a>
 80094ba:	4651      	mov	r1, sl
 80094bc:	2300      	movs	r3, #0
 80094be:	220a      	movs	r2, #10
 80094c0:	4628      	mov	r0, r5
 80094c2:	f000 f8eb 	bl	800969c <__multadd>
 80094c6:	4682      	mov	sl, r0
 80094c8:	e7ea      	b.n	80094a0 <_dtoa_r+0xb20>
 80094ca:	9b06      	ldr	r3, [sp, #24]
 80094cc:	f04f 0800 	mov.w	r8, #0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	bfcc      	ite	gt
 80094d4:	461f      	movgt	r7, r3
 80094d6:	2701      	movle	r7, #1
 80094d8:	9b03      	ldr	r3, [sp, #12]
 80094da:	441f      	add	r7, r3
 80094dc:	4651      	mov	r1, sl
 80094de:	2201      	movs	r2, #1
 80094e0:	4628      	mov	r0, r5
 80094e2:	f000 fa87 	bl	80099f4 <__lshift>
 80094e6:	4621      	mov	r1, r4
 80094e8:	4682      	mov	sl, r0
 80094ea:	f000 faef 	bl	8009acc <__mcmp>
 80094ee:	2800      	cmp	r0, #0
 80094f0:	dc97      	bgt.n	8009422 <_dtoa_r+0xaa2>
 80094f2:	d102      	bne.n	80094fa <_dtoa_r+0xb7a>
 80094f4:	f019 0f01 	tst.w	r9, #1
 80094f8:	d193      	bne.n	8009422 <_dtoa_r+0xaa2>
 80094fa:	463b      	mov	r3, r7
 80094fc:	461f      	mov	r7, r3
 80094fe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009502:	2a30      	cmp	r2, #48	; 0x30
 8009504:	d0fa      	beq.n	80094fc <_dtoa_r+0xb7c>
 8009506:	e6e1      	b.n	80092cc <_dtoa_r+0x94c>
 8009508:	9a03      	ldr	r2, [sp, #12]
 800950a:	429a      	cmp	r2, r3
 800950c:	d18a      	bne.n	8009424 <_dtoa_r+0xaa4>
 800950e:	2331      	movs	r3, #49	; 0x31
 8009510:	f10b 0b01 	add.w	fp, fp, #1
 8009514:	e797      	b.n	8009446 <_dtoa_r+0xac6>
 8009516:	4b0a      	ldr	r3, [pc, #40]	; (8009540 <_dtoa_r+0xbc0>)
 8009518:	f7ff ba9f 	b.w	8008a5a <_dtoa_r+0xda>
 800951c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800951e:	2b00      	cmp	r3, #0
 8009520:	f47f aa77 	bne.w	8008a12 <_dtoa_r+0x92>
 8009524:	4b07      	ldr	r3, [pc, #28]	; (8009544 <_dtoa_r+0xbc4>)
 8009526:	f7ff ba98 	b.w	8008a5a <_dtoa_r+0xda>
 800952a:	9b06      	ldr	r3, [sp, #24]
 800952c:	2b00      	cmp	r3, #0
 800952e:	dcb6      	bgt.n	800949e <_dtoa_r+0xb1e>
 8009530:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009532:	2b02      	cmp	r3, #2
 8009534:	f73f aeb5 	bgt.w	80092a2 <_dtoa_r+0x922>
 8009538:	e7b1      	b.n	800949e <_dtoa_r+0xb1e>
 800953a:	bf00      	nop
 800953c:	0800be9a 	.word	0x0800be9a
 8009540:	0800bdfa 	.word	0x0800bdfa
 8009544:	0800be1e 	.word	0x0800be1e

08009548 <_free_r>:
 8009548:	b538      	push	{r3, r4, r5, lr}
 800954a:	4605      	mov	r5, r0
 800954c:	2900      	cmp	r1, #0
 800954e:	d040      	beq.n	80095d2 <_free_r+0x8a>
 8009550:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009554:	1f0c      	subs	r4, r1, #4
 8009556:	2b00      	cmp	r3, #0
 8009558:	bfb8      	it	lt
 800955a:	18e4      	addlt	r4, r4, r3
 800955c:	f7fe fb4c 	bl	8007bf8 <__malloc_lock>
 8009560:	4a1c      	ldr	r2, [pc, #112]	; (80095d4 <_free_r+0x8c>)
 8009562:	6813      	ldr	r3, [r2, #0]
 8009564:	b933      	cbnz	r3, 8009574 <_free_r+0x2c>
 8009566:	6063      	str	r3, [r4, #4]
 8009568:	6014      	str	r4, [r2, #0]
 800956a:	4628      	mov	r0, r5
 800956c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009570:	f7fe bb48 	b.w	8007c04 <__malloc_unlock>
 8009574:	42a3      	cmp	r3, r4
 8009576:	d908      	bls.n	800958a <_free_r+0x42>
 8009578:	6820      	ldr	r0, [r4, #0]
 800957a:	1821      	adds	r1, r4, r0
 800957c:	428b      	cmp	r3, r1
 800957e:	bf01      	itttt	eq
 8009580:	6819      	ldreq	r1, [r3, #0]
 8009582:	685b      	ldreq	r3, [r3, #4]
 8009584:	1809      	addeq	r1, r1, r0
 8009586:	6021      	streq	r1, [r4, #0]
 8009588:	e7ed      	b.n	8009566 <_free_r+0x1e>
 800958a:	461a      	mov	r2, r3
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	b10b      	cbz	r3, 8009594 <_free_r+0x4c>
 8009590:	42a3      	cmp	r3, r4
 8009592:	d9fa      	bls.n	800958a <_free_r+0x42>
 8009594:	6811      	ldr	r1, [r2, #0]
 8009596:	1850      	adds	r0, r2, r1
 8009598:	42a0      	cmp	r0, r4
 800959a:	d10b      	bne.n	80095b4 <_free_r+0x6c>
 800959c:	6820      	ldr	r0, [r4, #0]
 800959e:	4401      	add	r1, r0
 80095a0:	1850      	adds	r0, r2, r1
 80095a2:	4283      	cmp	r3, r0
 80095a4:	6011      	str	r1, [r2, #0]
 80095a6:	d1e0      	bne.n	800956a <_free_r+0x22>
 80095a8:	6818      	ldr	r0, [r3, #0]
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	4408      	add	r0, r1
 80095ae:	6010      	str	r0, [r2, #0]
 80095b0:	6053      	str	r3, [r2, #4]
 80095b2:	e7da      	b.n	800956a <_free_r+0x22>
 80095b4:	d902      	bls.n	80095bc <_free_r+0x74>
 80095b6:	230c      	movs	r3, #12
 80095b8:	602b      	str	r3, [r5, #0]
 80095ba:	e7d6      	b.n	800956a <_free_r+0x22>
 80095bc:	6820      	ldr	r0, [r4, #0]
 80095be:	1821      	adds	r1, r4, r0
 80095c0:	428b      	cmp	r3, r1
 80095c2:	bf01      	itttt	eq
 80095c4:	6819      	ldreq	r1, [r3, #0]
 80095c6:	685b      	ldreq	r3, [r3, #4]
 80095c8:	1809      	addeq	r1, r1, r0
 80095ca:	6021      	streq	r1, [r4, #0]
 80095cc:	6063      	str	r3, [r4, #4]
 80095ce:	6054      	str	r4, [r2, #4]
 80095d0:	e7cb      	b.n	800956a <_free_r+0x22>
 80095d2:	bd38      	pop	{r3, r4, r5, pc}
 80095d4:	20000410 	.word	0x20000410

080095d8 <_Balloc>:
 80095d8:	b570      	push	{r4, r5, r6, lr}
 80095da:	69c6      	ldr	r6, [r0, #28]
 80095dc:	4604      	mov	r4, r0
 80095de:	460d      	mov	r5, r1
 80095e0:	b976      	cbnz	r6, 8009600 <_Balloc+0x28>
 80095e2:	2010      	movs	r0, #16
 80095e4:	f7fe fa60 	bl	8007aa8 <malloc>
 80095e8:	4602      	mov	r2, r0
 80095ea:	61e0      	str	r0, [r4, #28]
 80095ec:	b920      	cbnz	r0, 80095f8 <_Balloc+0x20>
 80095ee:	216b      	movs	r1, #107	; 0x6b
 80095f0:	4b17      	ldr	r3, [pc, #92]	; (8009650 <_Balloc+0x78>)
 80095f2:	4818      	ldr	r0, [pc, #96]	; (8009654 <_Balloc+0x7c>)
 80095f4:	f000 fd84 	bl	800a100 <__assert_func>
 80095f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095fc:	6006      	str	r6, [r0, #0]
 80095fe:	60c6      	str	r6, [r0, #12]
 8009600:	69e6      	ldr	r6, [r4, #28]
 8009602:	68f3      	ldr	r3, [r6, #12]
 8009604:	b183      	cbz	r3, 8009628 <_Balloc+0x50>
 8009606:	69e3      	ldr	r3, [r4, #28]
 8009608:	68db      	ldr	r3, [r3, #12]
 800960a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800960e:	b9b8      	cbnz	r0, 8009640 <_Balloc+0x68>
 8009610:	2101      	movs	r1, #1
 8009612:	fa01 f605 	lsl.w	r6, r1, r5
 8009616:	1d72      	adds	r2, r6, #5
 8009618:	4620      	mov	r0, r4
 800961a:	0092      	lsls	r2, r2, #2
 800961c:	f000 fd8e 	bl	800a13c <_calloc_r>
 8009620:	b160      	cbz	r0, 800963c <_Balloc+0x64>
 8009622:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009626:	e00e      	b.n	8009646 <_Balloc+0x6e>
 8009628:	2221      	movs	r2, #33	; 0x21
 800962a:	2104      	movs	r1, #4
 800962c:	4620      	mov	r0, r4
 800962e:	f000 fd85 	bl	800a13c <_calloc_r>
 8009632:	69e3      	ldr	r3, [r4, #28]
 8009634:	60f0      	str	r0, [r6, #12]
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d1e4      	bne.n	8009606 <_Balloc+0x2e>
 800963c:	2000      	movs	r0, #0
 800963e:	bd70      	pop	{r4, r5, r6, pc}
 8009640:	6802      	ldr	r2, [r0, #0]
 8009642:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009646:	2300      	movs	r3, #0
 8009648:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800964c:	e7f7      	b.n	800963e <_Balloc+0x66>
 800964e:	bf00      	nop
 8009650:	0800be2b 	.word	0x0800be2b
 8009654:	0800beab 	.word	0x0800beab

08009658 <_Bfree>:
 8009658:	b570      	push	{r4, r5, r6, lr}
 800965a:	69c6      	ldr	r6, [r0, #28]
 800965c:	4605      	mov	r5, r0
 800965e:	460c      	mov	r4, r1
 8009660:	b976      	cbnz	r6, 8009680 <_Bfree+0x28>
 8009662:	2010      	movs	r0, #16
 8009664:	f7fe fa20 	bl	8007aa8 <malloc>
 8009668:	4602      	mov	r2, r0
 800966a:	61e8      	str	r0, [r5, #28]
 800966c:	b920      	cbnz	r0, 8009678 <_Bfree+0x20>
 800966e:	218f      	movs	r1, #143	; 0x8f
 8009670:	4b08      	ldr	r3, [pc, #32]	; (8009694 <_Bfree+0x3c>)
 8009672:	4809      	ldr	r0, [pc, #36]	; (8009698 <_Bfree+0x40>)
 8009674:	f000 fd44 	bl	800a100 <__assert_func>
 8009678:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800967c:	6006      	str	r6, [r0, #0]
 800967e:	60c6      	str	r6, [r0, #12]
 8009680:	b13c      	cbz	r4, 8009692 <_Bfree+0x3a>
 8009682:	69eb      	ldr	r3, [r5, #28]
 8009684:	6862      	ldr	r2, [r4, #4]
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800968c:	6021      	str	r1, [r4, #0]
 800968e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009692:	bd70      	pop	{r4, r5, r6, pc}
 8009694:	0800be2b 	.word	0x0800be2b
 8009698:	0800beab 	.word	0x0800beab

0800969c <__multadd>:
 800969c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096a0:	4607      	mov	r7, r0
 80096a2:	460c      	mov	r4, r1
 80096a4:	461e      	mov	r6, r3
 80096a6:	2000      	movs	r0, #0
 80096a8:	690d      	ldr	r5, [r1, #16]
 80096aa:	f101 0c14 	add.w	ip, r1, #20
 80096ae:	f8dc 3000 	ldr.w	r3, [ip]
 80096b2:	3001      	adds	r0, #1
 80096b4:	b299      	uxth	r1, r3
 80096b6:	fb02 6101 	mla	r1, r2, r1, r6
 80096ba:	0c1e      	lsrs	r6, r3, #16
 80096bc:	0c0b      	lsrs	r3, r1, #16
 80096be:	fb02 3306 	mla	r3, r2, r6, r3
 80096c2:	b289      	uxth	r1, r1
 80096c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80096c8:	4285      	cmp	r5, r0
 80096ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80096ce:	f84c 1b04 	str.w	r1, [ip], #4
 80096d2:	dcec      	bgt.n	80096ae <__multadd+0x12>
 80096d4:	b30e      	cbz	r6, 800971a <__multadd+0x7e>
 80096d6:	68a3      	ldr	r3, [r4, #8]
 80096d8:	42ab      	cmp	r3, r5
 80096da:	dc19      	bgt.n	8009710 <__multadd+0x74>
 80096dc:	6861      	ldr	r1, [r4, #4]
 80096de:	4638      	mov	r0, r7
 80096e0:	3101      	adds	r1, #1
 80096e2:	f7ff ff79 	bl	80095d8 <_Balloc>
 80096e6:	4680      	mov	r8, r0
 80096e8:	b928      	cbnz	r0, 80096f6 <__multadd+0x5a>
 80096ea:	4602      	mov	r2, r0
 80096ec:	21ba      	movs	r1, #186	; 0xba
 80096ee:	4b0c      	ldr	r3, [pc, #48]	; (8009720 <__multadd+0x84>)
 80096f0:	480c      	ldr	r0, [pc, #48]	; (8009724 <__multadd+0x88>)
 80096f2:	f000 fd05 	bl	800a100 <__assert_func>
 80096f6:	6922      	ldr	r2, [r4, #16]
 80096f8:	f104 010c 	add.w	r1, r4, #12
 80096fc:	3202      	adds	r2, #2
 80096fe:	0092      	lsls	r2, r2, #2
 8009700:	300c      	adds	r0, #12
 8009702:	f7ff f8a6 	bl	8008852 <memcpy>
 8009706:	4621      	mov	r1, r4
 8009708:	4638      	mov	r0, r7
 800970a:	f7ff ffa5 	bl	8009658 <_Bfree>
 800970e:	4644      	mov	r4, r8
 8009710:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009714:	3501      	adds	r5, #1
 8009716:	615e      	str	r6, [r3, #20]
 8009718:	6125      	str	r5, [r4, #16]
 800971a:	4620      	mov	r0, r4
 800971c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009720:	0800be9a 	.word	0x0800be9a
 8009724:	0800beab 	.word	0x0800beab

08009728 <__hi0bits>:
 8009728:	0c02      	lsrs	r2, r0, #16
 800972a:	0412      	lsls	r2, r2, #16
 800972c:	4603      	mov	r3, r0
 800972e:	b9ca      	cbnz	r2, 8009764 <__hi0bits+0x3c>
 8009730:	0403      	lsls	r3, r0, #16
 8009732:	2010      	movs	r0, #16
 8009734:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009738:	bf04      	itt	eq
 800973a:	021b      	lsleq	r3, r3, #8
 800973c:	3008      	addeq	r0, #8
 800973e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009742:	bf04      	itt	eq
 8009744:	011b      	lsleq	r3, r3, #4
 8009746:	3004      	addeq	r0, #4
 8009748:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800974c:	bf04      	itt	eq
 800974e:	009b      	lsleq	r3, r3, #2
 8009750:	3002      	addeq	r0, #2
 8009752:	2b00      	cmp	r3, #0
 8009754:	db05      	blt.n	8009762 <__hi0bits+0x3a>
 8009756:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800975a:	f100 0001 	add.w	r0, r0, #1
 800975e:	bf08      	it	eq
 8009760:	2020      	moveq	r0, #32
 8009762:	4770      	bx	lr
 8009764:	2000      	movs	r0, #0
 8009766:	e7e5      	b.n	8009734 <__hi0bits+0xc>

08009768 <__lo0bits>:
 8009768:	6803      	ldr	r3, [r0, #0]
 800976a:	4602      	mov	r2, r0
 800976c:	f013 0007 	ands.w	r0, r3, #7
 8009770:	d00b      	beq.n	800978a <__lo0bits+0x22>
 8009772:	07d9      	lsls	r1, r3, #31
 8009774:	d421      	bmi.n	80097ba <__lo0bits+0x52>
 8009776:	0798      	lsls	r0, r3, #30
 8009778:	bf49      	itett	mi
 800977a:	085b      	lsrmi	r3, r3, #1
 800977c:	089b      	lsrpl	r3, r3, #2
 800977e:	2001      	movmi	r0, #1
 8009780:	6013      	strmi	r3, [r2, #0]
 8009782:	bf5c      	itt	pl
 8009784:	2002      	movpl	r0, #2
 8009786:	6013      	strpl	r3, [r2, #0]
 8009788:	4770      	bx	lr
 800978a:	b299      	uxth	r1, r3
 800978c:	b909      	cbnz	r1, 8009792 <__lo0bits+0x2a>
 800978e:	2010      	movs	r0, #16
 8009790:	0c1b      	lsrs	r3, r3, #16
 8009792:	b2d9      	uxtb	r1, r3
 8009794:	b909      	cbnz	r1, 800979a <__lo0bits+0x32>
 8009796:	3008      	adds	r0, #8
 8009798:	0a1b      	lsrs	r3, r3, #8
 800979a:	0719      	lsls	r1, r3, #28
 800979c:	bf04      	itt	eq
 800979e:	091b      	lsreq	r3, r3, #4
 80097a0:	3004      	addeq	r0, #4
 80097a2:	0799      	lsls	r1, r3, #30
 80097a4:	bf04      	itt	eq
 80097a6:	089b      	lsreq	r3, r3, #2
 80097a8:	3002      	addeq	r0, #2
 80097aa:	07d9      	lsls	r1, r3, #31
 80097ac:	d403      	bmi.n	80097b6 <__lo0bits+0x4e>
 80097ae:	085b      	lsrs	r3, r3, #1
 80097b0:	f100 0001 	add.w	r0, r0, #1
 80097b4:	d003      	beq.n	80097be <__lo0bits+0x56>
 80097b6:	6013      	str	r3, [r2, #0]
 80097b8:	4770      	bx	lr
 80097ba:	2000      	movs	r0, #0
 80097bc:	4770      	bx	lr
 80097be:	2020      	movs	r0, #32
 80097c0:	4770      	bx	lr
	...

080097c4 <__i2b>:
 80097c4:	b510      	push	{r4, lr}
 80097c6:	460c      	mov	r4, r1
 80097c8:	2101      	movs	r1, #1
 80097ca:	f7ff ff05 	bl	80095d8 <_Balloc>
 80097ce:	4602      	mov	r2, r0
 80097d0:	b928      	cbnz	r0, 80097de <__i2b+0x1a>
 80097d2:	f240 1145 	movw	r1, #325	; 0x145
 80097d6:	4b04      	ldr	r3, [pc, #16]	; (80097e8 <__i2b+0x24>)
 80097d8:	4804      	ldr	r0, [pc, #16]	; (80097ec <__i2b+0x28>)
 80097da:	f000 fc91 	bl	800a100 <__assert_func>
 80097de:	2301      	movs	r3, #1
 80097e0:	6144      	str	r4, [r0, #20]
 80097e2:	6103      	str	r3, [r0, #16]
 80097e4:	bd10      	pop	{r4, pc}
 80097e6:	bf00      	nop
 80097e8:	0800be9a 	.word	0x0800be9a
 80097ec:	0800beab 	.word	0x0800beab

080097f0 <__multiply>:
 80097f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097f4:	4691      	mov	r9, r2
 80097f6:	690a      	ldr	r2, [r1, #16]
 80097f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80097fc:	460c      	mov	r4, r1
 80097fe:	429a      	cmp	r2, r3
 8009800:	bfbe      	ittt	lt
 8009802:	460b      	movlt	r3, r1
 8009804:	464c      	movlt	r4, r9
 8009806:	4699      	movlt	r9, r3
 8009808:	6927      	ldr	r7, [r4, #16]
 800980a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800980e:	68a3      	ldr	r3, [r4, #8]
 8009810:	6861      	ldr	r1, [r4, #4]
 8009812:	eb07 060a 	add.w	r6, r7, sl
 8009816:	42b3      	cmp	r3, r6
 8009818:	b085      	sub	sp, #20
 800981a:	bfb8      	it	lt
 800981c:	3101      	addlt	r1, #1
 800981e:	f7ff fedb 	bl	80095d8 <_Balloc>
 8009822:	b930      	cbnz	r0, 8009832 <__multiply+0x42>
 8009824:	4602      	mov	r2, r0
 8009826:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800982a:	4b43      	ldr	r3, [pc, #268]	; (8009938 <__multiply+0x148>)
 800982c:	4843      	ldr	r0, [pc, #268]	; (800993c <__multiply+0x14c>)
 800982e:	f000 fc67 	bl	800a100 <__assert_func>
 8009832:	f100 0514 	add.w	r5, r0, #20
 8009836:	462b      	mov	r3, r5
 8009838:	2200      	movs	r2, #0
 800983a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800983e:	4543      	cmp	r3, r8
 8009840:	d321      	bcc.n	8009886 <__multiply+0x96>
 8009842:	f104 0314 	add.w	r3, r4, #20
 8009846:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800984a:	f109 0314 	add.w	r3, r9, #20
 800984e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009852:	9202      	str	r2, [sp, #8]
 8009854:	1b3a      	subs	r2, r7, r4
 8009856:	3a15      	subs	r2, #21
 8009858:	f022 0203 	bic.w	r2, r2, #3
 800985c:	3204      	adds	r2, #4
 800985e:	f104 0115 	add.w	r1, r4, #21
 8009862:	428f      	cmp	r7, r1
 8009864:	bf38      	it	cc
 8009866:	2204      	movcc	r2, #4
 8009868:	9201      	str	r2, [sp, #4]
 800986a:	9a02      	ldr	r2, [sp, #8]
 800986c:	9303      	str	r3, [sp, #12]
 800986e:	429a      	cmp	r2, r3
 8009870:	d80c      	bhi.n	800988c <__multiply+0x9c>
 8009872:	2e00      	cmp	r6, #0
 8009874:	dd03      	ble.n	800987e <__multiply+0x8e>
 8009876:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800987a:	2b00      	cmp	r3, #0
 800987c:	d05a      	beq.n	8009934 <__multiply+0x144>
 800987e:	6106      	str	r6, [r0, #16]
 8009880:	b005      	add	sp, #20
 8009882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009886:	f843 2b04 	str.w	r2, [r3], #4
 800988a:	e7d8      	b.n	800983e <__multiply+0x4e>
 800988c:	f8b3 a000 	ldrh.w	sl, [r3]
 8009890:	f1ba 0f00 	cmp.w	sl, #0
 8009894:	d023      	beq.n	80098de <__multiply+0xee>
 8009896:	46a9      	mov	r9, r5
 8009898:	f04f 0c00 	mov.w	ip, #0
 800989c:	f104 0e14 	add.w	lr, r4, #20
 80098a0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80098a4:	f8d9 1000 	ldr.w	r1, [r9]
 80098a8:	fa1f fb82 	uxth.w	fp, r2
 80098ac:	b289      	uxth	r1, r1
 80098ae:	fb0a 110b 	mla	r1, sl, fp, r1
 80098b2:	4461      	add	r1, ip
 80098b4:	f8d9 c000 	ldr.w	ip, [r9]
 80098b8:	0c12      	lsrs	r2, r2, #16
 80098ba:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80098be:	fb0a c202 	mla	r2, sl, r2, ip
 80098c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80098c6:	b289      	uxth	r1, r1
 80098c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80098cc:	4577      	cmp	r7, lr
 80098ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80098d2:	f849 1b04 	str.w	r1, [r9], #4
 80098d6:	d8e3      	bhi.n	80098a0 <__multiply+0xb0>
 80098d8:	9a01      	ldr	r2, [sp, #4]
 80098da:	f845 c002 	str.w	ip, [r5, r2]
 80098de:	9a03      	ldr	r2, [sp, #12]
 80098e0:	3304      	adds	r3, #4
 80098e2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80098e6:	f1b9 0f00 	cmp.w	r9, #0
 80098ea:	d021      	beq.n	8009930 <__multiply+0x140>
 80098ec:	46ae      	mov	lr, r5
 80098ee:	f04f 0a00 	mov.w	sl, #0
 80098f2:	6829      	ldr	r1, [r5, #0]
 80098f4:	f104 0c14 	add.w	ip, r4, #20
 80098f8:	f8bc b000 	ldrh.w	fp, [ip]
 80098fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009900:	b289      	uxth	r1, r1
 8009902:	fb09 220b 	mla	r2, r9, fp, r2
 8009906:	4452      	add	r2, sl
 8009908:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800990c:	f84e 1b04 	str.w	r1, [lr], #4
 8009910:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009914:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009918:	f8be 1000 	ldrh.w	r1, [lr]
 800991c:	4567      	cmp	r7, ip
 800991e:	fb09 110a 	mla	r1, r9, sl, r1
 8009922:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009926:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800992a:	d8e5      	bhi.n	80098f8 <__multiply+0x108>
 800992c:	9a01      	ldr	r2, [sp, #4]
 800992e:	50a9      	str	r1, [r5, r2]
 8009930:	3504      	adds	r5, #4
 8009932:	e79a      	b.n	800986a <__multiply+0x7a>
 8009934:	3e01      	subs	r6, #1
 8009936:	e79c      	b.n	8009872 <__multiply+0x82>
 8009938:	0800be9a 	.word	0x0800be9a
 800993c:	0800beab 	.word	0x0800beab

08009940 <__pow5mult>:
 8009940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009944:	4615      	mov	r5, r2
 8009946:	f012 0203 	ands.w	r2, r2, #3
 800994a:	4606      	mov	r6, r0
 800994c:	460f      	mov	r7, r1
 800994e:	d007      	beq.n	8009960 <__pow5mult+0x20>
 8009950:	4c25      	ldr	r4, [pc, #148]	; (80099e8 <__pow5mult+0xa8>)
 8009952:	3a01      	subs	r2, #1
 8009954:	2300      	movs	r3, #0
 8009956:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800995a:	f7ff fe9f 	bl	800969c <__multadd>
 800995e:	4607      	mov	r7, r0
 8009960:	10ad      	asrs	r5, r5, #2
 8009962:	d03d      	beq.n	80099e0 <__pow5mult+0xa0>
 8009964:	69f4      	ldr	r4, [r6, #28]
 8009966:	b97c      	cbnz	r4, 8009988 <__pow5mult+0x48>
 8009968:	2010      	movs	r0, #16
 800996a:	f7fe f89d 	bl	8007aa8 <malloc>
 800996e:	4602      	mov	r2, r0
 8009970:	61f0      	str	r0, [r6, #28]
 8009972:	b928      	cbnz	r0, 8009980 <__pow5mult+0x40>
 8009974:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009978:	4b1c      	ldr	r3, [pc, #112]	; (80099ec <__pow5mult+0xac>)
 800997a:	481d      	ldr	r0, [pc, #116]	; (80099f0 <__pow5mult+0xb0>)
 800997c:	f000 fbc0 	bl	800a100 <__assert_func>
 8009980:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009984:	6004      	str	r4, [r0, #0]
 8009986:	60c4      	str	r4, [r0, #12]
 8009988:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800998c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009990:	b94c      	cbnz	r4, 80099a6 <__pow5mult+0x66>
 8009992:	f240 2171 	movw	r1, #625	; 0x271
 8009996:	4630      	mov	r0, r6
 8009998:	f7ff ff14 	bl	80097c4 <__i2b>
 800999c:	2300      	movs	r3, #0
 800999e:	4604      	mov	r4, r0
 80099a0:	f8c8 0008 	str.w	r0, [r8, #8]
 80099a4:	6003      	str	r3, [r0, #0]
 80099a6:	f04f 0900 	mov.w	r9, #0
 80099aa:	07eb      	lsls	r3, r5, #31
 80099ac:	d50a      	bpl.n	80099c4 <__pow5mult+0x84>
 80099ae:	4639      	mov	r1, r7
 80099b0:	4622      	mov	r2, r4
 80099b2:	4630      	mov	r0, r6
 80099b4:	f7ff ff1c 	bl	80097f0 <__multiply>
 80099b8:	4680      	mov	r8, r0
 80099ba:	4639      	mov	r1, r7
 80099bc:	4630      	mov	r0, r6
 80099be:	f7ff fe4b 	bl	8009658 <_Bfree>
 80099c2:	4647      	mov	r7, r8
 80099c4:	106d      	asrs	r5, r5, #1
 80099c6:	d00b      	beq.n	80099e0 <__pow5mult+0xa0>
 80099c8:	6820      	ldr	r0, [r4, #0]
 80099ca:	b938      	cbnz	r0, 80099dc <__pow5mult+0x9c>
 80099cc:	4622      	mov	r2, r4
 80099ce:	4621      	mov	r1, r4
 80099d0:	4630      	mov	r0, r6
 80099d2:	f7ff ff0d 	bl	80097f0 <__multiply>
 80099d6:	6020      	str	r0, [r4, #0]
 80099d8:	f8c0 9000 	str.w	r9, [r0]
 80099dc:	4604      	mov	r4, r0
 80099de:	e7e4      	b.n	80099aa <__pow5mult+0x6a>
 80099e0:	4638      	mov	r0, r7
 80099e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099e6:	bf00      	nop
 80099e8:	0800bff8 	.word	0x0800bff8
 80099ec:	0800be2b 	.word	0x0800be2b
 80099f0:	0800beab 	.word	0x0800beab

080099f4 <__lshift>:
 80099f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099f8:	460c      	mov	r4, r1
 80099fa:	4607      	mov	r7, r0
 80099fc:	4691      	mov	r9, r2
 80099fe:	6923      	ldr	r3, [r4, #16]
 8009a00:	6849      	ldr	r1, [r1, #4]
 8009a02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a06:	68a3      	ldr	r3, [r4, #8]
 8009a08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a0c:	f108 0601 	add.w	r6, r8, #1
 8009a10:	42b3      	cmp	r3, r6
 8009a12:	db0b      	blt.n	8009a2c <__lshift+0x38>
 8009a14:	4638      	mov	r0, r7
 8009a16:	f7ff fddf 	bl	80095d8 <_Balloc>
 8009a1a:	4605      	mov	r5, r0
 8009a1c:	b948      	cbnz	r0, 8009a32 <__lshift+0x3e>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009a24:	4b27      	ldr	r3, [pc, #156]	; (8009ac4 <__lshift+0xd0>)
 8009a26:	4828      	ldr	r0, [pc, #160]	; (8009ac8 <__lshift+0xd4>)
 8009a28:	f000 fb6a 	bl	800a100 <__assert_func>
 8009a2c:	3101      	adds	r1, #1
 8009a2e:	005b      	lsls	r3, r3, #1
 8009a30:	e7ee      	b.n	8009a10 <__lshift+0x1c>
 8009a32:	2300      	movs	r3, #0
 8009a34:	f100 0114 	add.w	r1, r0, #20
 8009a38:	f100 0210 	add.w	r2, r0, #16
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	4553      	cmp	r3, sl
 8009a40:	db33      	blt.n	8009aaa <__lshift+0xb6>
 8009a42:	6920      	ldr	r0, [r4, #16]
 8009a44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a48:	f104 0314 	add.w	r3, r4, #20
 8009a4c:	f019 091f 	ands.w	r9, r9, #31
 8009a50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009a58:	d02b      	beq.n	8009ab2 <__lshift+0xbe>
 8009a5a:	468a      	mov	sl, r1
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	f1c9 0e20 	rsb	lr, r9, #32
 8009a62:	6818      	ldr	r0, [r3, #0]
 8009a64:	fa00 f009 	lsl.w	r0, r0, r9
 8009a68:	4310      	orrs	r0, r2
 8009a6a:	f84a 0b04 	str.w	r0, [sl], #4
 8009a6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a72:	459c      	cmp	ip, r3
 8009a74:	fa22 f20e 	lsr.w	r2, r2, lr
 8009a78:	d8f3      	bhi.n	8009a62 <__lshift+0x6e>
 8009a7a:	ebac 0304 	sub.w	r3, ip, r4
 8009a7e:	3b15      	subs	r3, #21
 8009a80:	f023 0303 	bic.w	r3, r3, #3
 8009a84:	3304      	adds	r3, #4
 8009a86:	f104 0015 	add.w	r0, r4, #21
 8009a8a:	4584      	cmp	ip, r0
 8009a8c:	bf38      	it	cc
 8009a8e:	2304      	movcc	r3, #4
 8009a90:	50ca      	str	r2, [r1, r3]
 8009a92:	b10a      	cbz	r2, 8009a98 <__lshift+0xa4>
 8009a94:	f108 0602 	add.w	r6, r8, #2
 8009a98:	3e01      	subs	r6, #1
 8009a9a:	4638      	mov	r0, r7
 8009a9c:	4621      	mov	r1, r4
 8009a9e:	612e      	str	r6, [r5, #16]
 8009aa0:	f7ff fdda 	bl	8009658 <_Bfree>
 8009aa4:	4628      	mov	r0, r5
 8009aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aaa:	f842 0f04 	str.w	r0, [r2, #4]!
 8009aae:	3301      	adds	r3, #1
 8009ab0:	e7c5      	b.n	8009a3e <__lshift+0x4a>
 8009ab2:	3904      	subs	r1, #4
 8009ab4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ab8:	459c      	cmp	ip, r3
 8009aba:	f841 2f04 	str.w	r2, [r1, #4]!
 8009abe:	d8f9      	bhi.n	8009ab4 <__lshift+0xc0>
 8009ac0:	e7ea      	b.n	8009a98 <__lshift+0xa4>
 8009ac2:	bf00      	nop
 8009ac4:	0800be9a 	.word	0x0800be9a
 8009ac8:	0800beab 	.word	0x0800beab

08009acc <__mcmp>:
 8009acc:	4603      	mov	r3, r0
 8009ace:	690a      	ldr	r2, [r1, #16]
 8009ad0:	6900      	ldr	r0, [r0, #16]
 8009ad2:	b530      	push	{r4, r5, lr}
 8009ad4:	1a80      	subs	r0, r0, r2
 8009ad6:	d10d      	bne.n	8009af4 <__mcmp+0x28>
 8009ad8:	3314      	adds	r3, #20
 8009ada:	3114      	adds	r1, #20
 8009adc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009ae0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009ae4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009ae8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009aec:	4295      	cmp	r5, r2
 8009aee:	d002      	beq.n	8009af6 <__mcmp+0x2a>
 8009af0:	d304      	bcc.n	8009afc <__mcmp+0x30>
 8009af2:	2001      	movs	r0, #1
 8009af4:	bd30      	pop	{r4, r5, pc}
 8009af6:	42a3      	cmp	r3, r4
 8009af8:	d3f4      	bcc.n	8009ae4 <__mcmp+0x18>
 8009afa:	e7fb      	b.n	8009af4 <__mcmp+0x28>
 8009afc:	f04f 30ff 	mov.w	r0, #4294967295
 8009b00:	e7f8      	b.n	8009af4 <__mcmp+0x28>
	...

08009b04 <__mdiff>:
 8009b04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b08:	460d      	mov	r5, r1
 8009b0a:	4607      	mov	r7, r0
 8009b0c:	4611      	mov	r1, r2
 8009b0e:	4628      	mov	r0, r5
 8009b10:	4614      	mov	r4, r2
 8009b12:	f7ff ffdb 	bl	8009acc <__mcmp>
 8009b16:	1e06      	subs	r6, r0, #0
 8009b18:	d111      	bne.n	8009b3e <__mdiff+0x3a>
 8009b1a:	4631      	mov	r1, r6
 8009b1c:	4638      	mov	r0, r7
 8009b1e:	f7ff fd5b 	bl	80095d8 <_Balloc>
 8009b22:	4602      	mov	r2, r0
 8009b24:	b928      	cbnz	r0, 8009b32 <__mdiff+0x2e>
 8009b26:	f240 2137 	movw	r1, #567	; 0x237
 8009b2a:	4b3a      	ldr	r3, [pc, #232]	; (8009c14 <__mdiff+0x110>)
 8009b2c:	483a      	ldr	r0, [pc, #232]	; (8009c18 <__mdiff+0x114>)
 8009b2e:	f000 fae7 	bl	800a100 <__assert_func>
 8009b32:	2301      	movs	r3, #1
 8009b34:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009b38:	4610      	mov	r0, r2
 8009b3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b3e:	bfa4      	itt	ge
 8009b40:	4623      	movge	r3, r4
 8009b42:	462c      	movge	r4, r5
 8009b44:	4638      	mov	r0, r7
 8009b46:	6861      	ldr	r1, [r4, #4]
 8009b48:	bfa6      	itte	ge
 8009b4a:	461d      	movge	r5, r3
 8009b4c:	2600      	movge	r6, #0
 8009b4e:	2601      	movlt	r6, #1
 8009b50:	f7ff fd42 	bl	80095d8 <_Balloc>
 8009b54:	4602      	mov	r2, r0
 8009b56:	b918      	cbnz	r0, 8009b60 <__mdiff+0x5c>
 8009b58:	f240 2145 	movw	r1, #581	; 0x245
 8009b5c:	4b2d      	ldr	r3, [pc, #180]	; (8009c14 <__mdiff+0x110>)
 8009b5e:	e7e5      	b.n	8009b2c <__mdiff+0x28>
 8009b60:	f102 0814 	add.w	r8, r2, #20
 8009b64:	46c2      	mov	sl, r8
 8009b66:	f04f 0c00 	mov.w	ip, #0
 8009b6a:	6927      	ldr	r7, [r4, #16]
 8009b6c:	60c6      	str	r6, [r0, #12]
 8009b6e:	692e      	ldr	r6, [r5, #16]
 8009b70:	f104 0014 	add.w	r0, r4, #20
 8009b74:	f105 0914 	add.w	r9, r5, #20
 8009b78:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009b7c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009b80:	3410      	adds	r4, #16
 8009b82:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009b86:	f859 3b04 	ldr.w	r3, [r9], #4
 8009b8a:	fa1f f18b 	uxth.w	r1, fp
 8009b8e:	4461      	add	r1, ip
 8009b90:	fa1f fc83 	uxth.w	ip, r3
 8009b94:	0c1b      	lsrs	r3, r3, #16
 8009b96:	eba1 010c 	sub.w	r1, r1, ip
 8009b9a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009b9e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009ba2:	b289      	uxth	r1, r1
 8009ba4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8009ba8:	454e      	cmp	r6, r9
 8009baa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009bae:	f84a 1b04 	str.w	r1, [sl], #4
 8009bb2:	d8e6      	bhi.n	8009b82 <__mdiff+0x7e>
 8009bb4:	1b73      	subs	r3, r6, r5
 8009bb6:	3b15      	subs	r3, #21
 8009bb8:	f023 0303 	bic.w	r3, r3, #3
 8009bbc:	3515      	adds	r5, #21
 8009bbe:	3304      	adds	r3, #4
 8009bc0:	42ae      	cmp	r6, r5
 8009bc2:	bf38      	it	cc
 8009bc4:	2304      	movcc	r3, #4
 8009bc6:	4418      	add	r0, r3
 8009bc8:	4443      	add	r3, r8
 8009bca:	461e      	mov	r6, r3
 8009bcc:	4605      	mov	r5, r0
 8009bce:	4575      	cmp	r5, lr
 8009bd0:	d30e      	bcc.n	8009bf0 <__mdiff+0xec>
 8009bd2:	f10e 0103 	add.w	r1, lr, #3
 8009bd6:	1a09      	subs	r1, r1, r0
 8009bd8:	f021 0103 	bic.w	r1, r1, #3
 8009bdc:	3803      	subs	r0, #3
 8009bde:	4586      	cmp	lr, r0
 8009be0:	bf38      	it	cc
 8009be2:	2100      	movcc	r1, #0
 8009be4:	440b      	add	r3, r1
 8009be6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009bea:	b189      	cbz	r1, 8009c10 <__mdiff+0x10c>
 8009bec:	6117      	str	r7, [r2, #16]
 8009bee:	e7a3      	b.n	8009b38 <__mdiff+0x34>
 8009bf0:	f855 8b04 	ldr.w	r8, [r5], #4
 8009bf4:	fa1f f188 	uxth.w	r1, r8
 8009bf8:	4461      	add	r1, ip
 8009bfa:	140c      	asrs	r4, r1, #16
 8009bfc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009c00:	b289      	uxth	r1, r1
 8009c02:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009c06:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009c0a:	f846 1b04 	str.w	r1, [r6], #4
 8009c0e:	e7de      	b.n	8009bce <__mdiff+0xca>
 8009c10:	3f01      	subs	r7, #1
 8009c12:	e7e8      	b.n	8009be6 <__mdiff+0xe2>
 8009c14:	0800be9a 	.word	0x0800be9a
 8009c18:	0800beab 	.word	0x0800beab

08009c1c <__d2b>:
 8009c1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c1e:	2101      	movs	r1, #1
 8009c20:	4617      	mov	r7, r2
 8009c22:	461c      	mov	r4, r3
 8009c24:	9e08      	ldr	r6, [sp, #32]
 8009c26:	f7ff fcd7 	bl	80095d8 <_Balloc>
 8009c2a:	4605      	mov	r5, r0
 8009c2c:	b930      	cbnz	r0, 8009c3c <__d2b+0x20>
 8009c2e:	4602      	mov	r2, r0
 8009c30:	f240 310f 	movw	r1, #783	; 0x30f
 8009c34:	4b22      	ldr	r3, [pc, #136]	; (8009cc0 <__d2b+0xa4>)
 8009c36:	4823      	ldr	r0, [pc, #140]	; (8009cc4 <__d2b+0xa8>)
 8009c38:	f000 fa62 	bl	800a100 <__assert_func>
 8009c3c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009c40:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009c44:	bb24      	cbnz	r4, 8009c90 <__d2b+0x74>
 8009c46:	2f00      	cmp	r7, #0
 8009c48:	9301      	str	r3, [sp, #4]
 8009c4a:	d026      	beq.n	8009c9a <__d2b+0x7e>
 8009c4c:	4668      	mov	r0, sp
 8009c4e:	9700      	str	r7, [sp, #0]
 8009c50:	f7ff fd8a 	bl	8009768 <__lo0bits>
 8009c54:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009c58:	b1e8      	cbz	r0, 8009c96 <__d2b+0x7a>
 8009c5a:	f1c0 0320 	rsb	r3, r0, #32
 8009c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c62:	430b      	orrs	r3, r1
 8009c64:	40c2      	lsrs	r2, r0
 8009c66:	616b      	str	r3, [r5, #20]
 8009c68:	9201      	str	r2, [sp, #4]
 8009c6a:	9b01      	ldr	r3, [sp, #4]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	bf14      	ite	ne
 8009c70:	2102      	movne	r1, #2
 8009c72:	2101      	moveq	r1, #1
 8009c74:	61ab      	str	r3, [r5, #24]
 8009c76:	6129      	str	r1, [r5, #16]
 8009c78:	b1bc      	cbz	r4, 8009caa <__d2b+0x8e>
 8009c7a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009c7e:	4404      	add	r4, r0
 8009c80:	6034      	str	r4, [r6, #0]
 8009c82:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c88:	6018      	str	r0, [r3, #0]
 8009c8a:	4628      	mov	r0, r5
 8009c8c:	b003      	add	sp, #12
 8009c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c94:	e7d7      	b.n	8009c46 <__d2b+0x2a>
 8009c96:	6169      	str	r1, [r5, #20]
 8009c98:	e7e7      	b.n	8009c6a <__d2b+0x4e>
 8009c9a:	a801      	add	r0, sp, #4
 8009c9c:	f7ff fd64 	bl	8009768 <__lo0bits>
 8009ca0:	9b01      	ldr	r3, [sp, #4]
 8009ca2:	2101      	movs	r1, #1
 8009ca4:	616b      	str	r3, [r5, #20]
 8009ca6:	3020      	adds	r0, #32
 8009ca8:	e7e5      	b.n	8009c76 <__d2b+0x5a>
 8009caa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009cae:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8009cb2:	6030      	str	r0, [r6, #0]
 8009cb4:	6918      	ldr	r0, [r3, #16]
 8009cb6:	f7ff fd37 	bl	8009728 <__hi0bits>
 8009cba:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009cbe:	e7e2      	b.n	8009c86 <__d2b+0x6a>
 8009cc0:	0800be9a 	.word	0x0800be9a
 8009cc4:	0800beab 	.word	0x0800beab

08009cc8 <__ssputs_r>:
 8009cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ccc:	461f      	mov	r7, r3
 8009cce:	688e      	ldr	r6, [r1, #8]
 8009cd0:	4682      	mov	sl, r0
 8009cd2:	42be      	cmp	r6, r7
 8009cd4:	460c      	mov	r4, r1
 8009cd6:	4690      	mov	r8, r2
 8009cd8:	680b      	ldr	r3, [r1, #0]
 8009cda:	d82c      	bhi.n	8009d36 <__ssputs_r+0x6e>
 8009cdc:	898a      	ldrh	r2, [r1, #12]
 8009cde:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ce2:	d026      	beq.n	8009d32 <__ssputs_r+0x6a>
 8009ce4:	6965      	ldr	r5, [r4, #20]
 8009ce6:	6909      	ldr	r1, [r1, #16]
 8009ce8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009cec:	eba3 0901 	sub.w	r9, r3, r1
 8009cf0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009cf4:	1c7b      	adds	r3, r7, #1
 8009cf6:	444b      	add	r3, r9
 8009cf8:	106d      	asrs	r5, r5, #1
 8009cfa:	429d      	cmp	r5, r3
 8009cfc:	bf38      	it	cc
 8009cfe:	461d      	movcc	r5, r3
 8009d00:	0553      	lsls	r3, r2, #21
 8009d02:	d527      	bpl.n	8009d54 <__ssputs_r+0x8c>
 8009d04:	4629      	mov	r1, r5
 8009d06:	f7fd fef7 	bl	8007af8 <_malloc_r>
 8009d0a:	4606      	mov	r6, r0
 8009d0c:	b360      	cbz	r0, 8009d68 <__ssputs_r+0xa0>
 8009d0e:	464a      	mov	r2, r9
 8009d10:	6921      	ldr	r1, [r4, #16]
 8009d12:	f7fe fd9e 	bl	8008852 <memcpy>
 8009d16:	89a3      	ldrh	r3, [r4, #12]
 8009d18:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d20:	81a3      	strh	r3, [r4, #12]
 8009d22:	6126      	str	r6, [r4, #16]
 8009d24:	444e      	add	r6, r9
 8009d26:	6026      	str	r6, [r4, #0]
 8009d28:	463e      	mov	r6, r7
 8009d2a:	6165      	str	r5, [r4, #20]
 8009d2c:	eba5 0509 	sub.w	r5, r5, r9
 8009d30:	60a5      	str	r5, [r4, #8]
 8009d32:	42be      	cmp	r6, r7
 8009d34:	d900      	bls.n	8009d38 <__ssputs_r+0x70>
 8009d36:	463e      	mov	r6, r7
 8009d38:	4632      	mov	r2, r6
 8009d3a:	4641      	mov	r1, r8
 8009d3c:	6820      	ldr	r0, [r4, #0]
 8009d3e:	f000 f9c5 	bl	800a0cc <memmove>
 8009d42:	2000      	movs	r0, #0
 8009d44:	68a3      	ldr	r3, [r4, #8]
 8009d46:	1b9b      	subs	r3, r3, r6
 8009d48:	60a3      	str	r3, [r4, #8]
 8009d4a:	6823      	ldr	r3, [r4, #0]
 8009d4c:	4433      	add	r3, r6
 8009d4e:	6023      	str	r3, [r4, #0]
 8009d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d54:	462a      	mov	r2, r5
 8009d56:	f000 fa17 	bl	800a188 <_realloc_r>
 8009d5a:	4606      	mov	r6, r0
 8009d5c:	2800      	cmp	r0, #0
 8009d5e:	d1e0      	bne.n	8009d22 <__ssputs_r+0x5a>
 8009d60:	4650      	mov	r0, sl
 8009d62:	6921      	ldr	r1, [r4, #16]
 8009d64:	f7ff fbf0 	bl	8009548 <_free_r>
 8009d68:	230c      	movs	r3, #12
 8009d6a:	f8ca 3000 	str.w	r3, [sl]
 8009d6e:	89a3      	ldrh	r3, [r4, #12]
 8009d70:	f04f 30ff 	mov.w	r0, #4294967295
 8009d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d78:	81a3      	strh	r3, [r4, #12]
 8009d7a:	e7e9      	b.n	8009d50 <__ssputs_r+0x88>

08009d7c <_svfiprintf_r>:
 8009d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d80:	4698      	mov	r8, r3
 8009d82:	898b      	ldrh	r3, [r1, #12]
 8009d84:	4607      	mov	r7, r0
 8009d86:	061b      	lsls	r3, r3, #24
 8009d88:	460d      	mov	r5, r1
 8009d8a:	4614      	mov	r4, r2
 8009d8c:	b09d      	sub	sp, #116	; 0x74
 8009d8e:	d50e      	bpl.n	8009dae <_svfiprintf_r+0x32>
 8009d90:	690b      	ldr	r3, [r1, #16]
 8009d92:	b963      	cbnz	r3, 8009dae <_svfiprintf_r+0x32>
 8009d94:	2140      	movs	r1, #64	; 0x40
 8009d96:	f7fd feaf 	bl	8007af8 <_malloc_r>
 8009d9a:	6028      	str	r0, [r5, #0]
 8009d9c:	6128      	str	r0, [r5, #16]
 8009d9e:	b920      	cbnz	r0, 8009daa <_svfiprintf_r+0x2e>
 8009da0:	230c      	movs	r3, #12
 8009da2:	603b      	str	r3, [r7, #0]
 8009da4:	f04f 30ff 	mov.w	r0, #4294967295
 8009da8:	e0d0      	b.n	8009f4c <_svfiprintf_r+0x1d0>
 8009daa:	2340      	movs	r3, #64	; 0x40
 8009dac:	616b      	str	r3, [r5, #20]
 8009dae:	2300      	movs	r3, #0
 8009db0:	9309      	str	r3, [sp, #36]	; 0x24
 8009db2:	2320      	movs	r3, #32
 8009db4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009db8:	2330      	movs	r3, #48	; 0x30
 8009dba:	f04f 0901 	mov.w	r9, #1
 8009dbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dc2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009f64 <_svfiprintf_r+0x1e8>
 8009dc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009dca:	4623      	mov	r3, r4
 8009dcc:	469a      	mov	sl, r3
 8009dce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dd2:	b10a      	cbz	r2, 8009dd8 <_svfiprintf_r+0x5c>
 8009dd4:	2a25      	cmp	r2, #37	; 0x25
 8009dd6:	d1f9      	bne.n	8009dcc <_svfiprintf_r+0x50>
 8009dd8:	ebba 0b04 	subs.w	fp, sl, r4
 8009ddc:	d00b      	beq.n	8009df6 <_svfiprintf_r+0x7a>
 8009dde:	465b      	mov	r3, fp
 8009de0:	4622      	mov	r2, r4
 8009de2:	4629      	mov	r1, r5
 8009de4:	4638      	mov	r0, r7
 8009de6:	f7ff ff6f 	bl	8009cc8 <__ssputs_r>
 8009dea:	3001      	adds	r0, #1
 8009dec:	f000 80a9 	beq.w	8009f42 <_svfiprintf_r+0x1c6>
 8009df0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009df2:	445a      	add	r2, fp
 8009df4:	9209      	str	r2, [sp, #36]	; 0x24
 8009df6:	f89a 3000 	ldrb.w	r3, [sl]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	f000 80a1 	beq.w	8009f42 <_svfiprintf_r+0x1c6>
 8009e00:	2300      	movs	r3, #0
 8009e02:	f04f 32ff 	mov.w	r2, #4294967295
 8009e06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e0a:	f10a 0a01 	add.w	sl, sl, #1
 8009e0e:	9304      	str	r3, [sp, #16]
 8009e10:	9307      	str	r3, [sp, #28]
 8009e12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e16:	931a      	str	r3, [sp, #104]	; 0x68
 8009e18:	4654      	mov	r4, sl
 8009e1a:	2205      	movs	r2, #5
 8009e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e20:	4850      	ldr	r0, [pc, #320]	; (8009f64 <_svfiprintf_r+0x1e8>)
 8009e22:	f7fe fd08 	bl	8008836 <memchr>
 8009e26:	9a04      	ldr	r2, [sp, #16]
 8009e28:	b9d8      	cbnz	r0, 8009e62 <_svfiprintf_r+0xe6>
 8009e2a:	06d0      	lsls	r0, r2, #27
 8009e2c:	bf44      	itt	mi
 8009e2e:	2320      	movmi	r3, #32
 8009e30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e34:	0711      	lsls	r1, r2, #28
 8009e36:	bf44      	itt	mi
 8009e38:	232b      	movmi	r3, #43	; 0x2b
 8009e3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e3e:	f89a 3000 	ldrb.w	r3, [sl]
 8009e42:	2b2a      	cmp	r3, #42	; 0x2a
 8009e44:	d015      	beq.n	8009e72 <_svfiprintf_r+0xf6>
 8009e46:	4654      	mov	r4, sl
 8009e48:	2000      	movs	r0, #0
 8009e4a:	f04f 0c0a 	mov.w	ip, #10
 8009e4e:	9a07      	ldr	r2, [sp, #28]
 8009e50:	4621      	mov	r1, r4
 8009e52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e56:	3b30      	subs	r3, #48	; 0x30
 8009e58:	2b09      	cmp	r3, #9
 8009e5a:	d94d      	bls.n	8009ef8 <_svfiprintf_r+0x17c>
 8009e5c:	b1b0      	cbz	r0, 8009e8c <_svfiprintf_r+0x110>
 8009e5e:	9207      	str	r2, [sp, #28]
 8009e60:	e014      	b.n	8009e8c <_svfiprintf_r+0x110>
 8009e62:	eba0 0308 	sub.w	r3, r0, r8
 8009e66:	fa09 f303 	lsl.w	r3, r9, r3
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	46a2      	mov	sl, r4
 8009e6e:	9304      	str	r3, [sp, #16]
 8009e70:	e7d2      	b.n	8009e18 <_svfiprintf_r+0x9c>
 8009e72:	9b03      	ldr	r3, [sp, #12]
 8009e74:	1d19      	adds	r1, r3, #4
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	9103      	str	r1, [sp, #12]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	bfbb      	ittet	lt
 8009e7e:	425b      	neglt	r3, r3
 8009e80:	f042 0202 	orrlt.w	r2, r2, #2
 8009e84:	9307      	strge	r3, [sp, #28]
 8009e86:	9307      	strlt	r3, [sp, #28]
 8009e88:	bfb8      	it	lt
 8009e8a:	9204      	strlt	r2, [sp, #16]
 8009e8c:	7823      	ldrb	r3, [r4, #0]
 8009e8e:	2b2e      	cmp	r3, #46	; 0x2e
 8009e90:	d10c      	bne.n	8009eac <_svfiprintf_r+0x130>
 8009e92:	7863      	ldrb	r3, [r4, #1]
 8009e94:	2b2a      	cmp	r3, #42	; 0x2a
 8009e96:	d134      	bne.n	8009f02 <_svfiprintf_r+0x186>
 8009e98:	9b03      	ldr	r3, [sp, #12]
 8009e9a:	3402      	adds	r4, #2
 8009e9c:	1d1a      	adds	r2, r3, #4
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	9203      	str	r2, [sp, #12]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	bfb8      	it	lt
 8009ea6:	f04f 33ff 	movlt.w	r3, #4294967295
 8009eaa:	9305      	str	r3, [sp, #20]
 8009eac:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009f68 <_svfiprintf_r+0x1ec>
 8009eb0:	2203      	movs	r2, #3
 8009eb2:	4650      	mov	r0, sl
 8009eb4:	7821      	ldrb	r1, [r4, #0]
 8009eb6:	f7fe fcbe 	bl	8008836 <memchr>
 8009eba:	b138      	cbz	r0, 8009ecc <_svfiprintf_r+0x150>
 8009ebc:	2240      	movs	r2, #64	; 0x40
 8009ebe:	9b04      	ldr	r3, [sp, #16]
 8009ec0:	eba0 000a 	sub.w	r0, r0, sl
 8009ec4:	4082      	lsls	r2, r0
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	3401      	adds	r4, #1
 8009eca:	9304      	str	r3, [sp, #16]
 8009ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ed0:	2206      	movs	r2, #6
 8009ed2:	4826      	ldr	r0, [pc, #152]	; (8009f6c <_svfiprintf_r+0x1f0>)
 8009ed4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ed8:	f7fe fcad 	bl	8008836 <memchr>
 8009edc:	2800      	cmp	r0, #0
 8009ede:	d038      	beq.n	8009f52 <_svfiprintf_r+0x1d6>
 8009ee0:	4b23      	ldr	r3, [pc, #140]	; (8009f70 <_svfiprintf_r+0x1f4>)
 8009ee2:	bb1b      	cbnz	r3, 8009f2c <_svfiprintf_r+0x1b0>
 8009ee4:	9b03      	ldr	r3, [sp, #12]
 8009ee6:	3307      	adds	r3, #7
 8009ee8:	f023 0307 	bic.w	r3, r3, #7
 8009eec:	3308      	adds	r3, #8
 8009eee:	9303      	str	r3, [sp, #12]
 8009ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ef2:	4433      	add	r3, r6
 8009ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ef6:	e768      	b.n	8009dca <_svfiprintf_r+0x4e>
 8009ef8:	460c      	mov	r4, r1
 8009efa:	2001      	movs	r0, #1
 8009efc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f00:	e7a6      	b.n	8009e50 <_svfiprintf_r+0xd4>
 8009f02:	2300      	movs	r3, #0
 8009f04:	f04f 0c0a 	mov.w	ip, #10
 8009f08:	4619      	mov	r1, r3
 8009f0a:	3401      	adds	r4, #1
 8009f0c:	9305      	str	r3, [sp, #20]
 8009f0e:	4620      	mov	r0, r4
 8009f10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f14:	3a30      	subs	r2, #48	; 0x30
 8009f16:	2a09      	cmp	r2, #9
 8009f18:	d903      	bls.n	8009f22 <_svfiprintf_r+0x1a6>
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d0c6      	beq.n	8009eac <_svfiprintf_r+0x130>
 8009f1e:	9105      	str	r1, [sp, #20]
 8009f20:	e7c4      	b.n	8009eac <_svfiprintf_r+0x130>
 8009f22:	4604      	mov	r4, r0
 8009f24:	2301      	movs	r3, #1
 8009f26:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f2a:	e7f0      	b.n	8009f0e <_svfiprintf_r+0x192>
 8009f2c:	ab03      	add	r3, sp, #12
 8009f2e:	9300      	str	r3, [sp, #0]
 8009f30:	462a      	mov	r2, r5
 8009f32:	4638      	mov	r0, r7
 8009f34:	4b0f      	ldr	r3, [pc, #60]	; (8009f74 <_svfiprintf_r+0x1f8>)
 8009f36:	a904      	add	r1, sp, #16
 8009f38:	f7fd ff06 	bl	8007d48 <_printf_float>
 8009f3c:	1c42      	adds	r2, r0, #1
 8009f3e:	4606      	mov	r6, r0
 8009f40:	d1d6      	bne.n	8009ef0 <_svfiprintf_r+0x174>
 8009f42:	89ab      	ldrh	r3, [r5, #12]
 8009f44:	065b      	lsls	r3, r3, #25
 8009f46:	f53f af2d 	bmi.w	8009da4 <_svfiprintf_r+0x28>
 8009f4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f4c:	b01d      	add	sp, #116	; 0x74
 8009f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f52:	ab03      	add	r3, sp, #12
 8009f54:	9300      	str	r3, [sp, #0]
 8009f56:	462a      	mov	r2, r5
 8009f58:	4638      	mov	r0, r7
 8009f5a:	4b06      	ldr	r3, [pc, #24]	; (8009f74 <_svfiprintf_r+0x1f8>)
 8009f5c:	a904      	add	r1, sp, #16
 8009f5e:	f7fe f993 	bl	8008288 <_printf_i>
 8009f62:	e7eb      	b.n	8009f3c <_svfiprintf_r+0x1c0>
 8009f64:	0800c004 	.word	0x0800c004
 8009f68:	0800c00a 	.word	0x0800c00a
 8009f6c:	0800c00e 	.word	0x0800c00e
 8009f70:	08007d49 	.word	0x08007d49
 8009f74:	08009cc9 	.word	0x08009cc9

08009f78 <__sflush_r>:
 8009f78:	898a      	ldrh	r2, [r1, #12]
 8009f7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f7c:	4605      	mov	r5, r0
 8009f7e:	0710      	lsls	r0, r2, #28
 8009f80:	460c      	mov	r4, r1
 8009f82:	d457      	bmi.n	800a034 <__sflush_r+0xbc>
 8009f84:	684b      	ldr	r3, [r1, #4]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	dc04      	bgt.n	8009f94 <__sflush_r+0x1c>
 8009f8a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	dc01      	bgt.n	8009f94 <__sflush_r+0x1c>
 8009f90:	2000      	movs	r0, #0
 8009f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f96:	2e00      	cmp	r6, #0
 8009f98:	d0fa      	beq.n	8009f90 <__sflush_r+0x18>
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009fa0:	682f      	ldr	r7, [r5, #0]
 8009fa2:	6a21      	ldr	r1, [r4, #32]
 8009fa4:	602b      	str	r3, [r5, #0]
 8009fa6:	d032      	beq.n	800a00e <__sflush_r+0x96>
 8009fa8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009faa:	89a3      	ldrh	r3, [r4, #12]
 8009fac:	075a      	lsls	r2, r3, #29
 8009fae:	d505      	bpl.n	8009fbc <__sflush_r+0x44>
 8009fb0:	6863      	ldr	r3, [r4, #4]
 8009fb2:	1ac0      	subs	r0, r0, r3
 8009fb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009fb6:	b10b      	cbz	r3, 8009fbc <__sflush_r+0x44>
 8009fb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009fba:	1ac0      	subs	r0, r0, r3
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009fc2:	4628      	mov	r0, r5
 8009fc4:	6a21      	ldr	r1, [r4, #32]
 8009fc6:	47b0      	blx	r6
 8009fc8:	1c43      	adds	r3, r0, #1
 8009fca:	89a3      	ldrh	r3, [r4, #12]
 8009fcc:	d106      	bne.n	8009fdc <__sflush_r+0x64>
 8009fce:	6829      	ldr	r1, [r5, #0]
 8009fd0:	291d      	cmp	r1, #29
 8009fd2:	d82b      	bhi.n	800a02c <__sflush_r+0xb4>
 8009fd4:	4a28      	ldr	r2, [pc, #160]	; (800a078 <__sflush_r+0x100>)
 8009fd6:	410a      	asrs	r2, r1
 8009fd8:	07d6      	lsls	r6, r2, #31
 8009fda:	d427      	bmi.n	800a02c <__sflush_r+0xb4>
 8009fdc:	2200      	movs	r2, #0
 8009fde:	6062      	str	r2, [r4, #4]
 8009fe0:	6922      	ldr	r2, [r4, #16]
 8009fe2:	04d9      	lsls	r1, r3, #19
 8009fe4:	6022      	str	r2, [r4, #0]
 8009fe6:	d504      	bpl.n	8009ff2 <__sflush_r+0x7a>
 8009fe8:	1c42      	adds	r2, r0, #1
 8009fea:	d101      	bne.n	8009ff0 <__sflush_r+0x78>
 8009fec:	682b      	ldr	r3, [r5, #0]
 8009fee:	b903      	cbnz	r3, 8009ff2 <__sflush_r+0x7a>
 8009ff0:	6560      	str	r0, [r4, #84]	; 0x54
 8009ff2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ff4:	602f      	str	r7, [r5, #0]
 8009ff6:	2900      	cmp	r1, #0
 8009ff8:	d0ca      	beq.n	8009f90 <__sflush_r+0x18>
 8009ffa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ffe:	4299      	cmp	r1, r3
 800a000:	d002      	beq.n	800a008 <__sflush_r+0x90>
 800a002:	4628      	mov	r0, r5
 800a004:	f7ff faa0 	bl	8009548 <_free_r>
 800a008:	2000      	movs	r0, #0
 800a00a:	6360      	str	r0, [r4, #52]	; 0x34
 800a00c:	e7c1      	b.n	8009f92 <__sflush_r+0x1a>
 800a00e:	2301      	movs	r3, #1
 800a010:	4628      	mov	r0, r5
 800a012:	47b0      	blx	r6
 800a014:	1c41      	adds	r1, r0, #1
 800a016:	d1c8      	bne.n	8009faa <__sflush_r+0x32>
 800a018:	682b      	ldr	r3, [r5, #0]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d0c5      	beq.n	8009faa <__sflush_r+0x32>
 800a01e:	2b1d      	cmp	r3, #29
 800a020:	d001      	beq.n	800a026 <__sflush_r+0xae>
 800a022:	2b16      	cmp	r3, #22
 800a024:	d101      	bne.n	800a02a <__sflush_r+0xb2>
 800a026:	602f      	str	r7, [r5, #0]
 800a028:	e7b2      	b.n	8009f90 <__sflush_r+0x18>
 800a02a:	89a3      	ldrh	r3, [r4, #12]
 800a02c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a030:	81a3      	strh	r3, [r4, #12]
 800a032:	e7ae      	b.n	8009f92 <__sflush_r+0x1a>
 800a034:	690f      	ldr	r7, [r1, #16]
 800a036:	2f00      	cmp	r7, #0
 800a038:	d0aa      	beq.n	8009f90 <__sflush_r+0x18>
 800a03a:	0793      	lsls	r3, r2, #30
 800a03c:	bf18      	it	ne
 800a03e:	2300      	movne	r3, #0
 800a040:	680e      	ldr	r6, [r1, #0]
 800a042:	bf08      	it	eq
 800a044:	694b      	ldreq	r3, [r1, #20]
 800a046:	1bf6      	subs	r6, r6, r7
 800a048:	600f      	str	r7, [r1, #0]
 800a04a:	608b      	str	r3, [r1, #8]
 800a04c:	2e00      	cmp	r6, #0
 800a04e:	dd9f      	ble.n	8009f90 <__sflush_r+0x18>
 800a050:	4633      	mov	r3, r6
 800a052:	463a      	mov	r2, r7
 800a054:	4628      	mov	r0, r5
 800a056:	6a21      	ldr	r1, [r4, #32]
 800a058:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a05c:	47e0      	blx	ip
 800a05e:	2800      	cmp	r0, #0
 800a060:	dc06      	bgt.n	800a070 <__sflush_r+0xf8>
 800a062:	89a3      	ldrh	r3, [r4, #12]
 800a064:	f04f 30ff 	mov.w	r0, #4294967295
 800a068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a06c:	81a3      	strh	r3, [r4, #12]
 800a06e:	e790      	b.n	8009f92 <__sflush_r+0x1a>
 800a070:	4407      	add	r7, r0
 800a072:	1a36      	subs	r6, r6, r0
 800a074:	e7ea      	b.n	800a04c <__sflush_r+0xd4>
 800a076:	bf00      	nop
 800a078:	dfbffffe 	.word	0xdfbffffe

0800a07c <_fflush_r>:
 800a07c:	b538      	push	{r3, r4, r5, lr}
 800a07e:	690b      	ldr	r3, [r1, #16]
 800a080:	4605      	mov	r5, r0
 800a082:	460c      	mov	r4, r1
 800a084:	b913      	cbnz	r3, 800a08c <_fflush_r+0x10>
 800a086:	2500      	movs	r5, #0
 800a088:	4628      	mov	r0, r5
 800a08a:	bd38      	pop	{r3, r4, r5, pc}
 800a08c:	b118      	cbz	r0, 800a096 <_fflush_r+0x1a>
 800a08e:	6a03      	ldr	r3, [r0, #32]
 800a090:	b90b      	cbnz	r3, 800a096 <_fflush_r+0x1a>
 800a092:	f7fe faa7 	bl	80085e4 <__sinit>
 800a096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d0f3      	beq.n	800a086 <_fflush_r+0xa>
 800a09e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a0a0:	07d0      	lsls	r0, r2, #31
 800a0a2:	d404      	bmi.n	800a0ae <_fflush_r+0x32>
 800a0a4:	0599      	lsls	r1, r3, #22
 800a0a6:	d402      	bmi.n	800a0ae <_fflush_r+0x32>
 800a0a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0aa:	f7fe fbc2 	bl	8008832 <__retarget_lock_acquire_recursive>
 800a0ae:	4628      	mov	r0, r5
 800a0b0:	4621      	mov	r1, r4
 800a0b2:	f7ff ff61 	bl	8009f78 <__sflush_r>
 800a0b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0b8:	4605      	mov	r5, r0
 800a0ba:	07da      	lsls	r2, r3, #31
 800a0bc:	d4e4      	bmi.n	800a088 <_fflush_r+0xc>
 800a0be:	89a3      	ldrh	r3, [r4, #12]
 800a0c0:	059b      	lsls	r3, r3, #22
 800a0c2:	d4e1      	bmi.n	800a088 <_fflush_r+0xc>
 800a0c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0c6:	f7fe fbb5 	bl	8008834 <__retarget_lock_release_recursive>
 800a0ca:	e7dd      	b.n	800a088 <_fflush_r+0xc>

0800a0cc <memmove>:
 800a0cc:	4288      	cmp	r0, r1
 800a0ce:	b510      	push	{r4, lr}
 800a0d0:	eb01 0402 	add.w	r4, r1, r2
 800a0d4:	d902      	bls.n	800a0dc <memmove+0x10>
 800a0d6:	4284      	cmp	r4, r0
 800a0d8:	4623      	mov	r3, r4
 800a0da:	d807      	bhi.n	800a0ec <memmove+0x20>
 800a0dc:	1e43      	subs	r3, r0, #1
 800a0de:	42a1      	cmp	r1, r4
 800a0e0:	d008      	beq.n	800a0f4 <memmove+0x28>
 800a0e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a0e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a0ea:	e7f8      	b.n	800a0de <memmove+0x12>
 800a0ec:	4601      	mov	r1, r0
 800a0ee:	4402      	add	r2, r0
 800a0f0:	428a      	cmp	r2, r1
 800a0f2:	d100      	bne.n	800a0f6 <memmove+0x2a>
 800a0f4:	bd10      	pop	{r4, pc}
 800a0f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a0fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a0fe:	e7f7      	b.n	800a0f0 <memmove+0x24>

0800a100 <__assert_func>:
 800a100:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a102:	4614      	mov	r4, r2
 800a104:	461a      	mov	r2, r3
 800a106:	4b09      	ldr	r3, [pc, #36]	; (800a12c <__assert_func+0x2c>)
 800a108:	4605      	mov	r5, r0
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	68d8      	ldr	r0, [r3, #12]
 800a10e:	b14c      	cbz	r4, 800a124 <__assert_func+0x24>
 800a110:	4b07      	ldr	r3, [pc, #28]	; (800a130 <__assert_func+0x30>)
 800a112:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a116:	9100      	str	r1, [sp, #0]
 800a118:	462b      	mov	r3, r5
 800a11a:	4906      	ldr	r1, [pc, #24]	; (800a134 <__assert_func+0x34>)
 800a11c:	f000 f870 	bl	800a200 <fiprintf>
 800a120:	f000 f880 	bl	800a224 <abort>
 800a124:	4b04      	ldr	r3, [pc, #16]	; (800a138 <__assert_func+0x38>)
 800a126:	461c      	mov	r4, r3
 800a128:	e7f3      	b.n	800a112 <__assert_func+0x12>
 800a12a:	bf00      	nop
 800a12c:	20000074 	.word	0x20000074
 800a130:	0800c01f 	.word	0x0800c01f
 800a134:	0800c02c 	.word	0x0800c02c
 800a138:	0800c05a 	.word	0x0800c05a

0800a13c <_calloc_r>:
 800a13c:	b570      	push	{r4, r5, r6, lr}
 800a13e:	fba1 5402 	umull	r5, r4, r1, r2
 800a142:	b934      	cbnz	r4, 800a152 <_calloc_r+0x16>
 800a144:	4629      	mov	r1, r5
 800a146:	f7fd fcd7 	bl	8007af8 <_malloc_r>
 800a14a:	4606      	mov	r6, r0
 800a14c:	b928      	cbnz	r0, 800a15a <_calloc_r+0x1e>
 800a14e:	4630      	mov	r0, r6
 800a150:	bd70      	pop	{r4, r5, r6, pc}
 800a152:	220c      	movs	r2, #12
 800a154:	2600      	movs	r6, #0
 800a156:	6002      	str	r2, [r0, #0]
 800a158:	e7f9      	b.n	800a14e <_calloc_r+0x12>
 800a15a:	462a      	mov	r2, r5
 800a15c:	4621      	mov	r1, r4
 800a15e:	f7fe fada 	bl	8008716 <memset>
 800a162:	e7f4      	b.n	800a14e <_calloc_r+0x12>

0800a164 <__ascii_mbtowc>:
 800a164:	b082      	sub	sp, #8
 800a166:	b901      	cbnz	r1, 800a16a <__ascii_mbtowc+0x6>
 800a168:	a901      	add	r1, sp, #4
 800a16a:	b142      	cbz	r2, 800a17e <__ascii_mbtowc+0x1a>
 800a16c:	b14b      	cbz	r3, 800a182 <__ascii_mbtowc+0x1e>
 800a16e:	7813      	ldrb	r3, [r2, #0]
 800a170:	600b      	str	r3, [r1, #0]
 800a172:	7812      	ldrb	r2, [r2, #0]
 800a174:	1e10      	subs	r0, r2, #0
 800a176:	bf18      	it	ne
 800a178:	2001      	movne	r0, #1
 800a17a:	b002      	add	sp, #8
 800a17c:	4770      	bx	lr
 800a17e:	4610      	mov	r0, r2
 800a180:	e7fb      	b.n	800a17a <__ascii_mbtowc+0x16>
 800a182:	f06f 0001 	mvn.w	r0, #1
 800a186:	e7f8      	b.n	800a17a <__ascii_mbtowc+0x16>

0800a188 <_realloc_r>:
 800a188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a18c:	4680      	mov	r8, r0
 800a18e:	4614      	mov	r4, r2
 800a190:	460e      	mov	r6, r1
 800a192:	b921      	cbnz	r1, 800a19e <_realloc_r+0x16>
 800a194:	4611      	mov	r1, r2
 800a196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a19a:	f7fd bcad 	b.w	8007af8 <_malloc_r>
 800a19e:	b92a      	cbnz	r2, 800a1ac <_realloc_r+0x24>
 800a1a0:	f7ff f9d2 	bl	8009548 <_free_r>
 800a1a4:	4625      	mov	r5, r4
 800a1a6:	4628      	mov	r0, r5
 800a1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1ac:	f000 f841 	bl	800a232 <_malloc_usable_size_r>
 800a1b0:	4284      	cmp	r4, r0
 800a1b2:	4607      	mov	r7, r0
 800a1b4:	d802      	bhi.n	800a1bc <_realloc_r+0x34>
 800a1b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a1ba:	d812      	bhi.n	800a1e2 <_realloc_r+0x5a>
 800a1bc:	4621      	mov	r1, r4
 800a1be:	4640      	mov	r0, r8
 800a1c0:	f7fd fc9a 	bl	8007af8 <_malloc_r>
 800a1c4:	4605      	mov	r5, r0
 800a1c6:	2800      	cmp	r0, #0
 800a1c8:	d0ed      	beq.n	800a1a6 <_realloc_r+0x1e>
 800a1ca:	42bc      	cmp	r4, r7
 800a1cc:	4622      	mov	r2, r4
 800a1ce:	4631      	mov	r1, r6
 800a1d0:	bf28      	it	cs
 800a1d2:	463a      	movcs	r2, r7
 800a1d4:	f7fe fb3d 	bl	8008852 <memcpy>
 800a1d8:	4631      	mov	r1, r6
 800a1da:	4640      	mov	r0, r8
 800a1dc:	f7ff f9b4 	bl	8009548 <_free_r>
 800a1e0:	e7e1      	b.n	800a1a6 <_realloc_r+0x1e>
 800a1e2:	4635      	mov	r5, r6
 800a1e4:	e7df      	b.n	800a1a6 <_realloc_r+0x1e>

0800a1e6 <__ascii_wctomb>:
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	4608      	mov	r0, r1
 800a1ea:	b141      	cbz	r1, 800a1fe <__ascii_wctomb+0x18>
 800a1ec:	2aff      	cmp	r2, #255	; 0xff
 800a1ee:	d904      	bls.n	800a1fa <__ascii_wctomb+0x14>
 800a1f0:	228a      	movs	r2, #138	; 0x8a
 800a1f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a1f6:	601a      	str	r2, [r3, #0]
 800a1f8:	4770      	bx	lr
 800a1fa:	2001      	movs	r0, #1
 800a1fc:	700a      	strb	r2, [r1, #0]
 800a1fe:	4770      	bx	lr

0800a200 <fiprintf>:
 800a200:	b40e      	push	{r1, r2, r3}
 800a202:	b503      	push	{r0, r1, lr}
 800a204:	4601      	mov	r1, r0
 800a206:	ab03      	add	r3, sp, #12
 800a208:	4805      	ldr	r0, [pc, #20]	; (800a220 <fiprintf+0x20>)
 800a20a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a20e:	6800      	ldr	r0, [r0, #0]
 800a210:	9301      	str	r3, [sp, #4]
 800a212:	f000 f83d 	bl	800a290 <_vfiprintf_r>
 800a216:	b002      	add	sp, #8
 800a218:	f85d eb04 	ldr.w	lr, [sp], #4
 800a21c:	b003      	add	sp, #12
 800a21e:	4770      	bx	lr
 800a220:	20000074 	.word	0x20000074

0800a224 <abort>:
 800a224:	2006      	movs	r0, #6
 800a226:	b508      	push	{r3, lr}
 800a228:	f000 fa0a 	bl	800a640 <raise>
 800a22c:	2001      	movs	r0, #1
 800a22e:	f7f7 fd98 	bl	8001d62 <_exit>

0800a232 <_malloc_usable_size_r>:
 800a232:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a236:	1f18      	subs	r0, r3, #4
 800a238:	2b00      	cmp	r3, #0
 800a23a:	bfbc      	itt	lt
 800a23c:	580b      	ldrlt	r3, [r1, r0]
 800a23e:	18c0      	addlt	r0, r0, r3
 800a240:	4770      	bx	lr

0800a242 <__sfputc_r>:
 800a242:	6893      	ldr	r3, [r2, #8]
 800a244:	b410      	push	{r4}
 800a246:	3b01      	subs	r3, #1
 800a248:	2b00      	cmp	r3, #0
 800a24a:	6093      	str	r3, [r2, #8]
 800a24c:	da07      	bge.n	800a25e <__sfputc_r+0x1c>
 800a24e:	6994      	ldr	r4, [r2, #24]
 800a250:	42a3      	cmp	r3, r4
 800a252:	db01      	blt.n	800a258 <__sfputc_r+0x16>
 800a254:	290a      	cmp	r1, #10
 800a256:	d102      	bne.n	800a25e <__sfputc_r+0x1c>
 800a258:	bc10      	pop	{r4}
 800a25a:	f000 b933 	b.w	800a4c4 <__swbuf_r>
 800a25e:	6813      	ldr	r3, [r2, #0]
 800a260:	1c58      	adds	r0, r3, #1
 800a262:	6010      	str	r0, [r2, #0]
 800a264:	7019      	strb	r1, [r3, #0]
 800a266:	4608      	mov	r0, r1
 800a268:	bc10      	pop	{r4}
 800a26a:	4770      	bx	lr

0800a26c <__sfputs_r>:
 800a26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a26e:	4606      	mov	r6, r0
 800a270:	460f      	mov	r7, r1
 800a272:	4614      	mov	r4, r2
 800a274:	18d5      	adds	r5, r2, r3
 800a276:	42ac      	cmp	r4, r5
 800a278:	d101      	bne.n	800a27e <__sfputs_r+0x12>
 800a27a:	2000      	movs	r0, #0
 800a27c:	e007      	b.n	800a28e <__sfputs_r+0x22>
 800a27e:	463a      	mov	r2, r7
 800a280:	4630      	mov	r0, r6
 800a282:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a286:	f7ff ffdc 	bl	800a242 <__sfputc_r>
 800a28a:	1c43      	adds	r3, r0, #1
 800a28c:	d1f3      	bne.n	800a276 <__sfputs_r+0xa>
 800a28e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a290 <_vfiprintf_r>:
 800a290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a294:	460d      	mov	r5, r1
 800a296:	4614      	mov	r4, r2
 800a298:	4698      	mov	r8, r3
 800a29a:	4606      	mov	r6, r0
 800a29c:	b09d      	sub	sp, #116	; 0x74
 800a29e:	b118      	cbz	r0, 800a2a8 <_vfiprintf_r+0x18>
 800a2a0:	6a03      	ldr	r3, [r0, #32]
 800a2a2:	b90b      	cbnz	r3, 800a2a8 <_vfiprintf_r+0x18>
 800a2a4:	f7fe f99e 	bl	80085e4 <__sinit>
 800a2a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2aa:	07d9      	lsls	r1, r3, #31
 800a2ac:	d405      	bmi.n	800a2ba <_vfiprintf_r+0x2a>
 800a2ae:	89ab      	ldrh	r3, [r5, #12]
 800a2b0:	059a      	lsls	r2, r3, #22
 800a2b2:	d402      	bmi.n	800a2ba <_vfiprintf_r+0x2a>
 800a2b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2b6:	f7fe fabc 	bl	8008832 <__retarget_lock_acquire_recursive>
 800a2ba:	89ab      	ldrh	r3, [r5, #12]
 800a2bc:	071b      	lsls	r3, r3, #28
 800a2be:	d501      	bpl.n	800a2c4 <_vfiprintf_r+0x34>
 800a2c0:	692b      	ldr	r3, [r5, #16]
 800a2c2:	b99b      	cbnz	r3, 800a2ec <_vfiprintf_r+0x5c>
 800a2c4:	4629      	mov	r1, r5
 800a2c6:	4630      	mov	r0, r6
 800a2c8:	f000 f93a 	bl	800a540 <__swsetup_r>
 800a2cc:	b170      	cbz	r0, 800a2ec <_vfiprintf_r+0x5c>
 800a2ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2d0:	07dc      	lsls	r4, r3, #31
 800a2d2:	d504      	bpl.n	800a2de <_vfiprintf_r+0x4e>
 800a2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2d8:	b01d      	add	sp, #116	; 0x74
 800a2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2de:	89ab      	ldrh	r3, [r5, #12]
 800a2e0:	0598      	lsls	r0, r3, #22
 800a2e2:	d4f7      	bmi.n	800a2d4 <_vfiprintf_r+0x44>
 800a2e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2e6:	f7fe faa5 	bl	8008834 <__retarget_lock_release_recursive>
 800a2ea:	e7f3      	b.n	800a2d4 <_vfiprintf_r+0x44>
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a2f0:	2320      	movs	r3, #32
 800a2f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2f6:	2330      	movs	r3, #48	; 0x30
 800a2f8:	f04f 0901 	mov.w	r9, #1
 800a2fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a300:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800a4b0 <_vfiprintf_r+0x220>
 800a304:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a308:	4623      	mov	r3, r4
 800a30a:	469a      	mov	sl, r3
 800a30c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a310:	b10a      	cbz	r2, 800a316 <_vfiprintf_r+0x86>
 800a312:	2a25      	cmp	r2, #37	; 0x25
 800a314:	d1f9      	bne.n	800a30a <_vfiprintf_r+0x7a>
 800a316:	ebba 0b04 	subs.w	fp, sl, r4
 800a31a:	d00b      	beq.n	800a334 <_vfiprintf_r+0xa4>
 800a31c:	465b      	mov	r3, fp
 800a31e:	4622      	mov	r2, r4
 800a320:	4629      	mov	r1, r5
 800a322:	4630      	mov	r0, r6
 800a324:	f7ff ffa2 	bl	800a26c <__sfputs_r>
 800a328:	3001      	adds	r0, #1
 800a32a:	f000 80a9 	beq.w	800a480 <_vfiprintf_r+0x1f0>
 800a32e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a330:	445a      	add	r2, fp
 800a332:	9209      	str	r2, [sp, #36]	; 0x24
 800a334:	f89a 3000 	ldrb.w	r3, [sl]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	f000 80a1 	beq.w	800a480 <_vfiprintf_r+0x1f0>
 800a33e:	2300      	movs	r3, #0
 800a340:	f04f 32ff 	mov.w	r2, #4294967295
 800a344:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a348:	f10a 0a01 	add.w	sl, sl, #1
 800a34c:	9304      	str	r3, [sp, #16]
 800a34e:	9307      	str	r3, [sp, #28]
 800a350:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a354:	931a      	str	r3, [sp, #104]	; 0x68
 800a356:	4654      	mov	r4, sl
 800a358:	2205      	movs	r2, #5
 800a35a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a35e:	4854      	ldr	r0, [pc, #336]	; (800a4b0 <_vfiprintf_r+0x220>)
 800a360:	f7fe fa69 	bl	8008836 <memchr>
 800a364:	9a04      	ldr	r2, [sp, #16]
 800a366:	b9d8      	cbnz	r0, 800a3a0 <_vfiprintf_r+0x110>
 800a368:	06d1      	lsls	r1, r2, #27
 800a36a:	bf44      	itt	mi
 800a36c:	2320      	movmi	r3, #32
 800a36e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a372:	0713      	lsls	r3, r2, #28
 800a374:	bf44      	itt	mi
 800a376:	232b      	movmi	r3, #43	; 0x2b
 800a378:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a37c:	f89a 3000 	ldrb.w	r3, [sl]
 800a380:	2b2a      	cmp	r3, #42	; 0x2a
 800a382:	d015      	beq.n	800a3b0 <_vfiprintf_r+0x120>
 800a384:	4654      	mov	r4, sl
 800a386:	2000      	movs	r0, #0
 800a388:	f04f 0c0a 	mov.w	ip, #10
 800a38c:	9a07      	ldr	r2, [sp, #28]
 800a38e:	4621      	mov	r1, r4
 800a390:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a394:	3b30      	subs	r3, #48	; 0x30
 800a396:	2b09      	cmp	r3, #9
 800a398:	d94d      	bls.n	800a436 <_vfiprintf_r+0x1a6>
 800a39a:	b1b0      	cbz	r0, 800a3ca <_vfiprintf_r+0x13a>
 800a39c:	9207      	str	r2, [sp, #28]
 800a39e:	e014      	b.n	800a3ca <_vfiprintf_r+0x13a>
 800a3a0:	eba0 0308 	sub.w	r3, r0, r8
 800a3a4:	fa09 f303 	lsl.w	r3, r9, r3
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	46a2      	mov	sl, r4
 800a3ac:	9304      	str	r3, [sp, #16]
 800a3ae:	e7d2      	b.n	800a356 <_vfiprintf_r+0xc6>
 800a3b0:	9b03      	ldr	r3, [sp, #12]
 800a3b2:	1d19      	adds	r1, r3, #4
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	9103      	str	r1, [sp, #12]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	bfbb      	ittet	lt
 800a3bc:	425b      	neglt	r3, r3
 800a3be:	f042 0202 	orrlt.w	r2, r2, #2
 800a3c2:	9307      	strge	r3, [sp, #28]
 800a3c4:	9307      	strlt	r3, [sp, #28]
 800a3c6:	bfb8      	it	lt
 800a3c8:	9204      	strlt	r2, [sp, #16]
 800a3ca:	7823      	ldrb	r3, [r4, #0]
 800a3cc:	2b2e      	cmp	r3, #46	; 0x2e
 800a3ce:	d10c      	bne.n	800a3ea <_vfiprintf_r+0x15a>
 800a3d0:	7863      	ldrb	r3, [r4, #1]
 800a3d2:	2b2a      	cmp	r3, #42	; 0x2a
 800a3d4:	d134      	bne.n	800a440 <_vfiprintf_r+0x1b0>
 800a3d6:	9b03      	ldr	r3, [sp, #12]
 800a3d8:	3402      	adds	r4, #2
 800a3da:	1d1a      	adds	r2, r3, #4
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	9203      	str	r2, [sp, #12]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	bfb8      	it	lt
 800a3e4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3e8:	9305      	str	r3, [sp, #20]
 800a3ea:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a4b4 <_vfiprintf_r+0x224>
 800a3ee:	2203      	movs	r2, #3
 800a3f0:	4650      	mov	r0, sl
 800a3f2:	7821      	ldrb	r1, [r4, #0]
 800a3f4:	f7fe fa1f 	bl	8008836 <memchr>
 800a3f8:	b138      	cbz	r0, 800a40a <_vfiprintf_r+0x17a>
 800a3fa:	2240      	movs	r2, #64	; 0x40
 800a3fc:	9b04      	ldr	r3, [sp, #16]
 800a3fe:	eba0 000a 	sub.w	r0, r0, sl
 800a402:	4082      	lsls	r2, r0
 800a404:	4313      	orrs	r3, r2
 800a406:	3401      	adds	r4, #1
 800a408:	9304      	str	r3, [sp, #16]
 800a40a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a40e:	2206      	movs	r2, #6
 800a410:	4829      	ldr	r0, [pc, #164]	; (800a4b8 <_vfiprintf_r+0x228>)
 800a412:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a416:	f7fe fa0e 	bl	8008836 <memchr>
 800a41a:	2800      	cmp	r0, #0
 800a41c:	d03f      	beq.n	800a49e <_vfiprintf_r+0x20e>
 800a41e:	4b27      	ldr	r3, [pc, #156]	; (800a4bc <_vfiprintf_r+0x22c>)
 800a420:	bb1b      	cbnz	r3, 800a46a <_vfiprintf_r+0x1da>
 800a422:	9b03      	ldr	r3, [sp, #12]
 800a424:	3307      	adds	r3, #7
 800a426:	f023 0307 	bic.w	r3, r3, #7
 800a42a:	3308      	adds	r3, #8
 800a42c:	9303      	str	r3, [sp, #12]
 800a42e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a430:	443b      	add	r3, r7
 800a432:	9309      	str	r3, [sp, #36]	; 0x24
 800a434:	e768      	b.n	800a308 <_vfiprintf_r+0x78>
 800a436:	460c      	mov	r4, r1
 800a438:	2001      	movs	r0, #1
 800a43a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a43e:	e7a6      	b.n	800a38e <_vfiprintf_r+0xfe>
 800a440:	2300      	movs	r3, #0
 800a442:	f04f 0c0a 	mov.w	ip, #10
 800a446:	4619      	mov	r1, r3
 800a448:	3401      	adds	r4, #1
 800a44a:	9305      	str	r3, [sp, #20]
 800a44c:	4620      	mov	r0, r4
 800a44e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a452:	3a30      	subs	r2, #48	; 0x30
 800a454:	2a09      	cmp	r2, #9
 800a456:	d903      	bls.n	800a460 <_vfiprintf_r+0x1d0>
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d0c6      	beq.n	800a3ea <_vfiprintf_r+0x15a>
 800a45c:	9105      	str	r1, [sp, #20]
 800a45e:	e7c4      	b.n	800a3ea <_vfiprintf_r+0x15a>
 800a460:	4604      	mov	r4, r0
 800a462:	2301      	movs	r3, #1
 800a464:	fb0c 2101 	mla	r1, ip, r1, r2
 800a468:	e7f0      	b.n	800a44c <_vfiprintf_r+0x1bc>
 800a46a:	ab03      	add	r3, sp, #12
 800a46c:	9300      	str	r3, [sp, #0]
 800a46e:	462a      	mov	r2, r5
 800a470:	4630      	mov	r0, r6
 800a472:	4b13      	ldr	r3, [pc, #76]	; (800a4c0 <_vfiprintf_r+0x230>)
 800a474:	a904      	add	r1, sp, #16
 800a476:	f7fd fc67 	bl	8007d48 <_printf_float>
 800a47a:	4607      	mov	r7, r0
 800a47c:	1c78      	adds	r0, r7, #1
 800a47e:	d1d6      	bne.n	800a42e <_vfiprintf_r+0x19e>
 800a480:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a482:	07d9      	lsls	r1, r3, #31
 800a484:	d405      	bmi.n	800a492 <_vfiprintf_r+0x202>
 800a486:	89ab      	ldrh	r3, [r5, #12]
 800a488:	059a      	lsls	r2, r3, #22
 800a48a:	d402      	bmi.n	800a492 <_vfiprintf_r+0x202>
 800a48c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a48e:	f7fe f9d1 	bl	8008834 <__retarget_lock_release_recursive>
 800a492:	89ab      	ldrh	r3, [r5, #12]
 800a494:	065b      	lsls	r3, r3, #25
 800a496:	f53f af1d 	bmi.w	800a2d4 <_vfiprintf_r+0x44>
 800a49a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a49c:	e71c      	b.n	800a2d8 <_vfiprintf_r+0x48>
 800a49e:	ab03      	add	r3, sp, #12
 800a4a0:	9300      	str	r3, [sp, #0]
 800a4a2:	462a      	mov	r2, r5
 800a4a4:	4630      	mov	r0, r6
 800a4a6:	4b06      	ldr	r3, [pc, #24]	; (800a4c0 <_vfiprintf_r+0x230>)
 800a4a8:	a904      	add	r1, sp, #16
 800a4aa:	f7fd feed 	bl	8008288 <_printf_i>
 800a4ae:	e7e4      	b.n	800a47a <_vfiprintf_r+0x1ea>
 800a4b0:	0800c004 	.word	0x0800c004
 800a4b4:	0800c00a 	.word	0x0800c00a
 800a4b8:	0800c00e 	.word	0x0800c00e
 800a4bc:	08007d49 	.word	0x08007d49
 800a4c0:	0800a26d 	.word	0x0800a26d

0800a4c4 <__swbuf_r>:
 800a4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4c6:	460e      	mov	r6, r1
 800a4c8:	4614      	mov	r4, r2
 800a4ca:	4605      	mov	r5, r0
 800a4cc:	b118      	cbz	r0, 800a4d6 <__swbuf_r+0x12>
 800a4ce:	6a03      	ldr	r3, [r0, #32]
 800a4d0:	b90b      	cbnz	r3, 800a4d6 <__swbuf_r+0x12>
 800a4d2:	f7fe f887 	bl	80085e4 <__sinit>
 800a4d6:	69a3      	ldr	r3, [r4, #24]
 800a4d8:	60a3      	str	r3, [r4, #8]
 800a4da:	89a3      	ldrh	r3, [r4, #12]
 800a4dc:	071a      	lsls	r2, r3, #28
 800a4de:	d525      	bpl.n	800a52c <__swbuf_r+0x68>
 800a4e0:	6923      	ldr	r3, [r4, #16]
 800a4e2:	b31b      	cbz	r3, 800a52c <__swbuf_r+0x68>
 800a4e4:	6823      	ldr	r3, [r4, #0]
 800a4e6:	6922      	ldr	r2, [r4, #16]
 800a4e8:	b2f6      	uxtb	r6, r6
 800a4ea:	1a98      	subs	r0, r3, r2
 800a4ec:	6963      	ldr	r3, [r4, #20]
 800a4ee:	4637      	mov	r7, r6
 800a4f0:	4283      	cmp	r3, r0
 800a4f2:	dc04      	bgt.n	800a4fe <__swbuf_r+0x3a>
 800a4f4:	4621      	mov	r1, r4
 800a4f6:	4628      	mov	r0, r5
 800a4f8:	f7ff fdc0 	bl	800a07c <_fflush_r>
 800a4fc:	b9e0      	cbnz	r0, 800a538 <__swbuf_r+0x74>
 800a4fe:	68a3      	ldr	r3, [r4, #8]
 800a500:	3b01      	subs	r3, #1
 800a502:	60a3      	str	r3, [r4, #8]
 800a504:	6823      	ldr	r3, [r4, #0]
 800a506:	1c5a      	adds	r2, r3, #1
 800a508:	6022      	str	r2, [r4, #0]
 800a50a:	701e      	strb	r6, [r3, #0]
 800a50c:	6962      	ldr	r2, [r4, #20]
 800a50e:	1c43      	adds	r3, r0, #1
 800a510:	429a      	cmp	r2, r3
 800a512:	d004      	beq.n	800a51e <__swbuf_r+0x5a>
 800a514:	89a3      	ldrh	r3, [r4, #12]
 800a516:	07db      	lsls	r3, r3, #31
 800a518:	d506      	bpl.n	800a528 <__swbuf_r+0x64>
 800a51a:	2e0a      	cmp	r6, #10
 800a51c:	d104      	bne.n	800a528 <__swbuf_r+0x64>
 800a51e:	4621      	mov	r1, r4
 800a520:	4628      	mov	r0, r5
 800a522:	f7ff fdab 	bl	800a07c <_fflush_r>
 800a526:	b938      	cbnz	r0, 800a538 <__swbuf_r+0x74>
 800a528:	4638      	mov	r0, r7
 800a52a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a52c:	4621      	mov	r1, r4
 800a52e:	4628      	mov	r0, r5
 800a530:	f000 f806 	bl	800a540 <__swsetup_r>
 800a534:	2800      	cmp	r0, #0
 800a536:	d0d5      	beq.n	800a4e4 <__swbuf_r+0x20>
 800a538:	f04f 37ff 	mov.w	r7, #4294967295
 800a53c:	e7f4      	b.n	800a528 <__swbuf_r+0x64>
	...

0800a540 <__swsetup_r>:
 800a540:	b538      	push	{r3, r4, r5, lr}
 800a542:	4b2a      	ldr	r3, [pc, #168]	; (800a5ec <__swsetup_r+0xac>)
 800a544:	4605      	mov	r5, r0
 800a546:	6818      	ldr	r0, [r3, #0]
 800a548:	460c      	mov	r4, r1
 800a54a:	b118      	cbz	r0, 800a554 <__swsetup_r+0x14>
 800a54c:	6a03      	ldr	r3, [r0, #32]
 800a54e:	b90b      	cbnz	r3, 800a554 <__swsetup_r+0x14>
 800a550:	f7fe f848 	bl	80085e4 <__sinit>
 800a554:	89a3      	ldrh	r3, [r4, #12]
 800a556:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a55a:	0718      	lsls	r0, r3, #28
 800a55c:	d422      	bmi.n	800a5a4 <__swsetup_r+0x64>
 800a55e:	06d9      	lsls	r1, r3, #27
 800a560:	d407      	bmi.n	800a572 <__swsetup_r+0x32>
 800a562:	2309      	movs	r3, #9
 800a564:	602b      	str	r3, [r5, #0]
 800a566:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a56a:	f04f 30ff 	mov.w	r0, #4294967295
 800a56e:	81a3      	strh	r3, [r4, #12]
 800a570:	e034      	b.n	800a5dc <__swsetup_r+0x9c>
 800a572:	0758      	lsls	r0, r3, #29
 800a574:	d512      	bpl.n	800a59c <__swsetup_r+0x5c>
 800a576:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a578:	b141      	cbz	r1, 800a58c <__swsetup_r+0x4c>
 800a57a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a57e:	4299      	cmp	r1, r3
 800a580:	d002      	beq.n	800a588 <__swsetup_r+0x48>
 800a582:	4628      	mov	r0, r5
 800a584:	f7fe ffe0 	bl	8009548 <_free_r>
 800a588:	2300      	movs	r3, #0
 800a58a:	6363      	str	r3, [r4, #52]	; 0x34
 800a58c:	89a3      	ldrh	r3, [r4, #12]
 800a58e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a592:	81a3      	strh	r3, [r4, #12]
 800a594:	2300      	movs	r3, #0
 800a596:	6063      	str	r3, [r4, #4]
 800a598:	6923      	ldr	r3, [r4, #16]
 800a59a:	6023      	str	r3, [r4, #0]
 800a59c:	89a3      	ldrh	r3, [r4, #12]
 800a59e:	f043 0308 	orr.w	r3, r3, #8
 800a5a2:	81a3      	strh	r3, [r4, #12]
 800a5a4:	6923      	ldr	r3, [r4, #16]
 800a5a6:	b94b      	cbnz	r3, 800a5bc <__swsetup_r+0x7c>
 800a5a8:	89a3      	ldrh	r3, [r4, #12]
 800a5aa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a5ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5b2:	d003      	beq.n	800a5bc <__swsetup_r+0x7c>
 800a5b4:	4621      	mov	r1, r4
 800a5b6:	4628      	mov	r0, r5
 800a5b8:	f000 f883 	bl	800a6c2 <__smakebuf_r>
 800a5bc:	89a0      	ldrh	r0, [r4, #12]
 800a5be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5c2:	f010 0301 	ands.w	r3, r0, #1
 800a5c6:	d00a      	beq.n	800a5de <__swsetup_r+0x9e>
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	60a3      	str	r3, [r4, #8]
 800a5cc:	6963      	ldr	r3, [r4, #20]
 800a5ce:	425b      	negs	r3, r3
 800a5d0:	61a3      	str	r3, [r4, #24]
 800a5d2:	6923      	ldr	r3, [r4, #16]
 800a5d4:	b943      	cbnz	r3, 800a5e8 <__swsetup_r+0xa8>
 800a5d6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a5da:	d1c4      	bne.n	800a566 <__swsetup_r+0x26>
 800a5dc:	bd38      	pop	{r3, r4, r5, pc}
 800a5de:	0781      	lsls	r1, r0, #30
 800a5e0:	bf58      	it	pl
 800a5e2:	6963      	ldrpl	r3, [r4, #20]
 800a5e4:	60a3      	str	r3, [r4, #8]
 800a5e6:	e7f4      	b.n	800a5d2 <__swsetup_r+0x92>
 800a5e8:	2000      	movs	r0, #0
 800a5ea:	e7f7      	b.n	800a5dc <__swsetup_r+0x9c>
 800a5ec:	20000074 	.word	0x20000074

0800a5f0 <_raise_r>:
 800a5f0:	291f      	cmp	r1, #31
 800a5f2:	b538      	push	{r3, r4, r5, lr}
 800a5f4:	4604      	mov	r4, r0
 800a5f6:	460d      	mov	r5, r1
 800a5f8:	d904      	bls.n	800a604 <_raise_r+0x14>
 800a5fa:	2316      	movs	r3, #22
 800a5fc:	6003      	str	r3, [r0, #0]
 800a5fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a602:	bd38      	pop	{r3, r4, r5, pc}
 800a604:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a606:	b112      	cbz	r2, 800a60e <_raise_r+0x1e>
 800a608:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a60c:	b94b      	cbnz	r3, 800a622 <_raise_r+0x32>
 800a60e:	4620      	mov	r0, r4
 800a610:	f000 f830 	bl	800a674 <_getpid_r>
 800a614:	462a      	mov	r2, r5
 800a616:	4601      	mov	r1, r0
 800a618:	4620      	mov	r0, r4
 800a61a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a61e:	f000 b817 	b.w	800a650 <_kill_r>
 800a622:	2b01      	cmp	r3, #1
 800a624:	d00a      	beq.n	800a63c <_raise_r+0x4c>
 800a626:	1c59      	adds	r1, r3, #1
 800a628:	d103      	bne.n	800a632 <_raise_r+0x42>
 800a62a:	2316      	movs	r3, #22
 800a62c:	6003      	str	r3, [r0, #0]
 800a62e:	2001      	movs	r0, #1
 800a630:	e7e7      	b.n	800a602 <_raise_r+0x12>
 800a632:	2400      	movs	r4, #0
 800a634:	4628      	mov	r0, r5
 800a636:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a63a:	4798      	blx	r3
 800a63c:	2000      	movs	r0, #0
 800a63e:	e7e0      	b.n	800a602 <_raise_r+0x12>

0800a640 <raise>:
 800a640:	4b02      	ldr	r3, [pc, #8]	; (800a64c <raise+0xc>)
 800a642:	4601      	mov	r1, r0
 800a644:	6818      	ldr	r0, [r3, #0]
 800a646:	f7ff bfd3 	b.w	800a5f0 <_raise_r>
 800a64a:	bf00      	nop
 800a64c:	20000074 	.word	0x20000074

0800a650 <_kill_r>:
 800a650:	b538      	push	{r3, r4, r5, lr}
 800a652:	2300      	movs	r3, #0
 800a654:	4d06      	ldr	r5, [pc, #24]	; (800a670 <_kill_r+0x20>)
 800a656:	4604      	mov	r4, r0
 800a658:	4608      	mov	r0, r1
 800a65a:	4611      	mov	r1, r2
 800a65c:	602b      	str	r3, [r5, #0]
 800a65e:	f7f7 fb70 	bl	8001d42 <_kill>
 800a662:	1c43      	adds	r3, r0, #1
 800a664:	d102      	bne.n	800a66c <_kill_r+0x1c>
 800a666:	682b      	ldr	r3, [r5, #0]
 800a668:	b103      	cbz	r3, 800a66c <_kill_r+0x1c>
 800a66a:	6023      	str	r3, [r4, #0]
 800a66c:	bd38      	pop	{r3, r4, r5, pc}
 800a66e:	bf00      	nop
 800a670:	20000554 	.word	0x20000554

0800a674 <_getpid_r>:
 800a674:	f7f7 bb5e 	b.w	8001d34 <_getpid>

0800a678 <__swhatbuf_r>:
 800a678:	b570      	push	{r4, r5, r6, lr}
 800a67a:	460c      	mov	r4, r1
 800a67c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a680:	4615      	mov	r5, r2
 800a682:	2900      	cmp	r1, #0
 800a684:	461e      	mov	r6, r3
 800a686:	b096      	sub	sp, #88	; 0x58
 800a688:	da0c      	bge.n	800a6a4 <__swhatbuf_r+0x2c>
 800a68a:	89a3      	ldrh	r3, [r4, #12]
 800a68c:	2100      	movs	r1, #0
 800a68e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a692:	bf0c      	ite	eq
 800a694:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a698:	2340      	movne	r3, #64	; 0x40
 800a69a:	2000      	movs	r0, #0
 800a69c:	6031      	str	r1, [r6, #0]
 800a69e:	602b      	str	r3, [r5, #0]
 800a6a0:	b016      	add	sp, #88	; 0x58
 800a6a2:	bd70      	pop	{r4, r5, r6, pc}
 800a6a4:	466a      	mov	r2, sp
 800a6a6:	f000 f849 	bl	800a73c <_fstat_r>
 800a6aa:	2800      	cmp	r0, #0
 800a6ac:	dbed      	blt.n	800a68a <__swhatbuf_r+0x12>
 800a6ae:	9901      	ldr	r1, [sp, #4]
 800a6b0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a6b4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a6b8:	4259      	negs	r1, r3
 800a6ba:	4159      	adcs	r1, r3
 800a6bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6c0:	e7eb      	b.n	800a69a <__swhatbuf_r+0x22>

0800a6c2 <__smakebuf_r>:
 800a6c2:	898b      	ldrh	r3, [r1, #12]
 800a6c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a6c6:	079d      	lsls	r5, r3, #30
 800a6c8:	4606      	mov	r6, r0
 800a6ca:	460c      	mov	r4, r1
 800a6cc:	d507      	bpl.n	800a6de <__smakebuf_r+0x1c>
 800a6ce:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a6d2:	6023      	str	r3, [r4, #0]
 800a6d4:	6123      	str	r3, [r4, #16]
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	6163      	str	r3, [r4, #20]
 800a6da:	b002      	add	sp, #8
 800a6dc:	bd70      	pop	{r4, r5, r6, pc}
 800a6de:	466a      	mov	r2, sp
 800a6e0:	ab01      	add	r3, sp, #4
 800a6e2:	f7ff ffc9 	bl	800a678 <__swhatbuf_r>
 800a6e6:	9900      	ldr	r1, [sp, #0]
 800a6e8:	4605      	mov	r5, r0
 800a6ea:	4630      	mov	r0, r6
 800a6ec:	f7fd fa04 	bl	8007af8 <_malloc_r>
 800a6f0:	b948      	cbnz	r0, 800a706 <__smakebuf_r+0x44>
 800a6f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6f6:	059a      	lsls	r2, r3, #22
 800a6f8:	d4ef      	bmi.n	800a6da <__smakebuf_r+0x18>
 800a6fa:	f023 0303 	bic.w	r3, r3, #3
 800a6fe:	f043 0302 	orr.w	r3, r3, #2
 800a702:	81a3      	strh	r3, [r4, #12]
 800a704:	e7e3      	b.n	800a6ce <__smakebuf_r+0xc>
 800a706:	89a3      	ldrh	r3, [r4, #12]
 800a708:	6020      	str	r0, [r4, #0]
 800a70a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a70e:	81a3      	strh	r3, [r4, #12]
 800a710:	9b00      	ldr	r3, [sp, #0]
 800a712:	6120      	str	r0, [r4, #16]
 800a714:	6163      	str	r3, [r4, #20]
 800a716:	9b01      	ldr	r3, [sp, #4]
 800a718:	b15b      	cbz	r3, 800a732 <__smakebuf_r+0x70>
 800a71a:	4630      	mov	r0, r6
 800a71c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a720:	f000 f81e 	bl	800a760 <_isatty_r>
 800a724:	b128      	cbz	r0, 800a732 <__smakebuf_r+0x70>
 800a726:	89a3      	ldrh	r3, [r4, #12]
 800a728:	f023 0303 	bic.w	r3, r3, #3
 800a72c:	f043 0301 	orr.w	r3, r3, #1
 800a730:	81a3      	strh	r3, [r4, #12]
 800a732:	89a3      	ldrh	r3, [r4, #12]
 800a734:	431d      	orrs	r5, r3
 800a736:	81a5      	strh	r5, [r4, #12]
 800a738:	e7cf      	b.n	800a6da <__smakebuf_r+0x18>
	...

0800a73c <_fstat_r>:
 800a73c:	b538      	push	{r3, r4, r5, lr}
 800a73e:	2300      	movs	r3, #0
 800a740:	4d06      	ldr	r5, [pc, #24]	; (800a75c <_fstat_r+0x20>)
 800a742:	4604      	mov	r4, r0
 800a744:	4608      	mov	r0, r1
 800a746:	4611      	mov	r1, r2
 800a748:	602b      	str	r3, [r5, #0]
 800a74a:	f7f7 fb58 	bl	8001dfe <_fstat>
 800a74e:	1c43      	adds	r3, r0, #1
 800a750:	d102      	bne.n	800a758 <_fstat_r+0x1c>
 800a752:	682b      	ldr	r3, [r5, #0]
 800a754:	b103      	cbz	r3, 800a758 <_fstat_r+0x1c>
 800a756:	6023      	str	r3, [r4, #0]
 800a758:	bd38      	pop	{r3, r4, r5, pc}
 800a75a:	bf00      	nop
 800a75c:	20000554 	.word	0x20000554

0800a760 <_isatty_r>:
 800a760:	b538      	push	{r3, r4, r5, lr}
 800a762:	2300      	movs	r3, #0
 800a764:	4d05      	ldr	r5, [pc, #20]	; (800a77c <_isatty_r+0x1c>)
 800a766:	4604      	mov	r4, r0
 800a768:	4608      	mov	r0, r1
 800a76a:	602b      	str	r3, [r5, #0]
 800a76c:	f7f7 fb56 	bl	8001e1c <_isatty>
 800a770:	1c43      	adds	r3, r0, #1
 800a772:	d102      	bne.n	800a77a <_isatty_r+0x1a>
 800a774:	682b      	ldr	r3, [r5, #0]
 800a776:	b103      	cbz	r3, 800a77a <_isatty_r+0x1a>
 800a778:	6023      	str	r3, [r4, #0]
 800a77a:	bd38      	pop	{r3, r4, r5, pc}
 800a77c:	20000554 	.word	0x20000554

0800a780 <round>:
 800a780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a782:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a786:	f2a7 32ff 	subw	r2, r7, #1023	; 0x3ff
 800a78a:	2a13      	cmp	r2, #19
 800a78c:	460b      	mov	r3, r1
 800a78e:	4605      	mov	r5, r0
 800a790:	460c      	mov	r4, r1
 800a792:	dc18      	bgt.n	800a7c6 <round+0x46>
 800a794:	2a00      	cmp	r2, #0
 800a796:	da09      	bge.n	800a7ac <round+0x2c>
 800a798:	3201      	adds	r2, #1
 800a79a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800a79e:	d103      	bne.n	800a7a8 <round+0x28>
 800a7a0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a7a4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	e029      	b.n	800a800 <round+0x80>
 800a7ac:	4816      	ldr	r0, [pc, #88]	; (800a808 <round+0x88>)
 800a7ae:	4110      	asrs	r0, r2
 800a7b0:	4001      	ands	r1, r0
 800a7b2:	4329      	orrs	r1, r5
 800a7b4:	d011      	beq.n	800a7da <round+0x5a>
 800a7b6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a7ba:	fa41 f202 	asr.w	r2, r1, r2
 800a7be:	4413      	add	r3, r2
 800a7c0:	ea23 0300 	bic.w	r3, r3, r0
 800a7c4:	e7f0      	b.n	800a7a8 <round+0x28>
 800a7c6:	2a33      	cmp	r2, #51	; 0x33
 800a7c8:	dd0a      	ble.n	800a7e0 <round+0x60>
 800a7ca:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800a7ce:	d104      	bne.n	800a7da <round+0x5a>
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	f7f5 fccb 	bl	800016c <__adddf3>
 800a7d6:	4605      	mov	r5, r0
 800a7d8:	460c      	mov	r4, r1
 800a7da:	4628      	mov	r0, r5
 800a7dc:	4621      	mov	r1, r4
 800a7de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a7e4:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a7e8:	40f8      	lsrs	r0, r7
 800a7ea:	4228      	tst	r0, r5
 800a7ec:	d0f5      	beq.n	800a7da <round+0x5a>
 800a7ee:	f1c2 0133 	rsb	r1, r2, #51	; 0x33
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	408a      	lsls	r2, r1
 800a7f6:	1952      	adds	r2, r2, r5
 800a7f8:	bf28      	it	cs
 800a7fa:	3301      	addcs	r3, #1
 800a7fc:	ea22 0200 	bic.w	r2, r2, r0
 800a800:	4619      	mov	r1, r3
 800a802:	4610      	mov	r0, r2
 800a804:	e7e7      	b.n	800a7d6 <round+0x56>
 800a806:	bf00      	nop
 800a808:	000fffff 	.word	0x000fffff

0800a80c <_init>:
 800a80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a80e:	bf00      	nop
 800a810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a812:	bc08      	pop	{r3}
 800a814:	469e      	mov	lr, r3
 800a816:	4770      	bx	lr

0800a818 <_fini>:
 800a818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a81a:	bf00      	nop
 800a81c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a81e:	bc08      	pop	{r3}
 800a820:	469e      	mov	lr, r3
 800a822:	4770      	bx	lr
